
VIN_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ca18  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001128  0801cbf8  0801cbf8  0002cbf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dd20  0801dd20  00030878  2**0
                  CONTENTS
  4 .ARM          00000008  0801dd20  0801dd20  0002dd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dd28  0801dd28  00030878  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dd28  0801dd28  0002dd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dd2c  0801dd2c  0002dd2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000878  20000000  0801dd30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f94  20000878  0801e5a8  00030878  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000580c  0801e5a8  0003580c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030878  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d917  00000000  00000000  000308a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008aef  00000000  00000000  0006e1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031e8  00000000  00000000  00076cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002e58  00000000  00000000  00079e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b6ce  00000000  00000000  0007ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004c24f  00000000  00000000  000b83be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00147193  00000000  00000000  0010460d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024b7a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e3cc  00000000  00000000  0024b7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000878 	.word	0x20000878
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801cbe0 	.word	0x0801cbe0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000087c 	.word	0x2000087c
 800021c:	0801cbe0 	.word	0x0801cbe0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	; 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__gedf2>:
 800089c:	f04f 3cff 	mov.w	ip, #4294967295
 80008a0:	e006      	b.n	80008b0 <__cmpdf2+0x4>
 80008a2:	bf00      	nop

080008a4 <__ledf2>:
 80008a4:	f04f 0c01 	mov.w	ip, #1
 80008a8:	e002      	b.n	80008b0 <__cmpdf2+0x4>
 80008aa:	bf00      	nop

080008ac <__cmpdf2>:
 80008ac:	f04f 0c01 	mov.w	ip, #1
 80008b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c0:	bf18      	it	ne
 80008c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008c6:	d01b      	beq.n	8000900 <__cmpdf2+0x54>
 80008c8:	b001      	add	sp, #4
 80008ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008ce:	bf0c      	ite	eq
 80008d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008d4:	ea91 0f03 	teqne	r1, r3
 80008d8:	bf02      	ittt	eq
 80008da:	ea90 0f02 	teqeq	r0, r2
 80008de:	2000      	moveq	r0, #0
 80008e0:	4770      	bxeq	lr
 80008e2:	f110 0f00 	cmn.w	r0, #0
 80008e6:	ea91 0f03 	teq	r1, r3
 80008ea:	bf58      	it	pl
 80008ec:	4299      	cmppl	r1, r3
 80008ee:	bf08      	it	eq
 80008f0:	4290      	cmpeq	r0, r2
 80008f2:	bf2c      	ite	cs
 80008f4:	17d8      	asrcs	r0, r3, #31
 80008f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008fa:	f040 0001 	orr.w	r0, r0, #1
 80008fe:	4770      	bx	lr
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d102      	bne.n	8000910 <__cmpdf2+0x64>
 800090a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800090e:	d107      	bne.n	8000920 <__cmpdf2+0x74>
 8000910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d1d6      	bne.n	80008c8 <__cmpdf2+0x1c>
 800091a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800091e:	d0d3      	beq.n	80008c8 <__cmpdf2+0x1c>
 8000920:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <__aeabi_cdrcmple>:
 8000928:	4684      	mov	ip, r0
 800092a:	4610      	mov	r0, r2
 800092c:	4662      	mov	r2, ip
 800092e:	468c      	mov	ip, r1
 8000930:	4619      	mov	r1, r3
 8000932:	4663      	mov	r3, ip
 8000934:	e000      	b.n	8000938 <__aeabi_cdcmpeq>
 8000936:	bf00      	nop

08000938 <__aeabi_cdcmpeq>:
 8000938:	b501      	push	{r0, lr}
 800093a:	f7ff ffb7 	bl	80008ac <__cmpdf2>
 800093e:	2800      	cmp	r0, #0
 8000940:	bf48      	it	mi
 8000942:	f110 0f00 	cmnmi.w	r0, #0
 8000946:	bd01      	pop	{r0, pc}

08000948 <__aeabi_dcmpeq>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff fff4 	bl	8000938 <__aeabi_cdcmpeq>
 8000950:	bf0c      	ite	eq
 8000952:	2001      	moveq	r0, #1
 8000954:	2000      	movne	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_dcmplt>:
 800095c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000960:	f7ff ffea 	bl	8000938 <__aeabi_cdcmpeq>
 8000964:	bf34      	ite	cc
 8000966:	2001      	movcc	r0, #1
 8000968:	2000      	movcs	r0, #0
 800096a:	f85d fb08 	ldr.w	pc, [sp], #8
 800096e:	bf00      	nop

08000970 <__aeabi_dcmple>:
 8000970:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000974:	f7ff ffe0 	bl	8000938 <__aeabi_cdcmpeq>
 8000978:	bf94      	ite	ls
 800097a:	2001      	movls	r0, #1
 800097c:	2000      	movhi	r0, #0
 800097e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000982:	bf00      	nop

08000984 <__aeabi_dcmpge>:
 8000984:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000988:	f7ff ffce 	bl	8000928 <__aeabi_cdrcmple>
 800098c:	bf94      	ite	ls
 800098e:	2001      	movls	r0, #1
 8000990:	2000      	movhi	r0, #0
 8000992:	f85d fb08 	ldr.w	pc, [sp], #8
 8000996:	bf00      	nop

08000998 <__aeabi_dcmpgt>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff ffc4 	bl	8000928 <__aeabi_cdrcmple>
 80009a0:	bf34      	ite	cc
 80009a2:	2001      	movcc	r0, #1
 80009a4:	2000      	movcs	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_d2iz>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009b4:	d215      	bcs.n	80009e2 <__aeabi_d2iz+0x36>
 80009b6:	d511      	bpl.n	80009dc <__aeabi_d2iz+0x30>
 80009b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d912      	bls.n	80009e8 <__aeabi_d2iz+0x3c>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009d2:	fa23 f002 	lsr.w	r0, r3, r2
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d105      	bne.n	80009f4 <__aeabi_d2iz+0x48>
 80009e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	bf08      	it	eq
 80009ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2220      	movs	r2, #32
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f01a fcc9 	bl	801b750 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000dc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dc6:	4b30      	ldr	r3, [pc, #192]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000dc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dcc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000de8:	2204      	movs	r2, #4
 8000dea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e06:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e28:	4817      	ldr	r0, [pc, #92]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000e2a:	f003 fcb9 	bl	80047a0 <HAL_ADC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e34:	f001 fbf7 	bl	8002626 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000e44:	f005 fdac 	bl	80069a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e4e:	f001 fbea 	bl	8002626 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_ADC1_Init+0xec>)
 8000e54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e56:	2306      	movs	r3, #6
 8000e58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5e:	237f      	movs	r3, #127	; 0x7f
 8000e60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e62:	2304      	movs	r3, #4
 8000e64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_ADC1_Init+0xe8>)
 8000e70:	f004 fbfa 	bl	8005668 <HAL_ADC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e7a:	f001 fbd4 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3730      	adds	r7, #48	; 0x30
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000894 	.word	0x20000894
 8000e8c:	08600004 	.word	0x08600004

08000e90 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2220      	movs	r2, #32
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f01a fc57 	bl	801b750 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000ea4:	4a2b      	ldr	r2, [pc, #172]	; (8000f54 <MX_ADC2_Init+0xc4>)
 8000ea6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000eaa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec8:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f0a:	4811      	ldr	r0, [pc, #68]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000f0c:	f003 fc48 	bl	80047a0 <HAL_ADC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000f16:	f001 fb86 	bl	8002626 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_ADC2_Init+0xc8>)
 8000f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f26:	237f      	movs	r3, #127	; 0x7f
 8000f28:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_ADC2_Init+0xc0>)
 8000f38:	f004 fb96 	bl	8005668 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000f42:	f001 fb70 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000900 	.word	0x20000900
 8000f54:	50000100 	.word	0x50000100
 8000f58:	14f00020 	.word	0x14f00020

08000f5c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	; 0x30
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2220      	movs	r2, #32
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f01a fbeb 	bl	801b750 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000f7c:	4a31      	ldr	r2, [pc, #196]	; (8001044 <MX_ADC3_Init+0xe8>)
 8000f7e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f80:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000f82:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f86:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fe2:	4817      	ldr	r0, [pc, #92]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000fe4:	f003 fbdc 	bl	80047a0 <HAL_ADC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000fee:	f001 fb1a 	bl	8002626 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4810      	ldr	r0, [pc, #64]	; (8001040 <MX_ADC3_Init+0xe4>)
 8000ffe:	f005 fccf 	bl	80069a0 <HAL_ADCEx_MultiModeConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001008:	f001 fb0d 	bl	8002626 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_ADC3_Init+0xec>)
 800100e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001010:	2306      	movs	r3, #6
 8001012:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001018:	237f      	movs	r3, #127	; 0x7f
 800101a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101c:	2304      	movs	r3, #4
 800101e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_ADC3_Init+0xe4>)
 800102a:	f004 fb1d 	bl	8005668 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001034:	f001 faf7 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	; 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000096c 	.word	0x2000096c
 8001044:	50000400 	.word	0x50000400
 8001048:	21800100 	.word	0x21800100

0800104c <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	463b      	mov	r3, r7
 8001054:	2220      	movs	r2, #32
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f01a fb79 	bl	801b750 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800105e:	4b34      	ldr	r3, [pc, #208]	; (8001130 <MX_ADC4_Init+0xe4>)
 8001060:	4a34      	ldr	r2, [pc, #208]	; (8001134 <MX_ADC4_Init+0xe8>)
 8001062:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001064:	4b32      	ldr	r3, [pc, #200]	; (8001130 <MX_ADC4_Init+0xe4>)
 8001066:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800106a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <MX_ADC4_Init+0xe4>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001072:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <MX_ADC4_Init+0xe4>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <MX_ADC4_Init+0xe4>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <MX_ADC4_Init+0xe4>)
 8001080:	2201      	movs	r2, #1
 8001082:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <MX_ADC4_Init+0xe4>)
 8001086:	2204      	movs	r2, #4
 8001088:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MX_ADC4_Init+0xe4>)
 800108c:	2200      	movs	r2, #0
 800108e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <MX_ADC4_Init+0xe4>)
 8001092:	2200      	movs	r2, #0
 8001094:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 2;
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <MX_ADC4_Init+0xe4>)
 8001098:	2202      	movs	r2, #2
 800109a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = ENABLE;
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <MX_ADC4_Init+0xe4>)
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfDiscConversion = 1;
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_ADC4_Init+0xe4>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_ADC4_Init+0xe4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_ADC4_Init+0xe4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <MX_ADC4_Init+0xe4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_ADC4_Init+0xe4>)
 80010c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_ADC4_Init+0xe4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80010ce:	4818      	ldr	r0, [pc, #96]	; (8001130 <MX_ADC4_Init+0xe4>)
 80010d0:	f003 fb66 	bl	80047a0 <HAL_ADC_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC4_Init+0x92>
  {
    Error_Handler();
 80010da:	f001 faa4 	bl	8002626 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_ADC4_Init+0xec>)
 80010e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e2:	2306      	movs	r3, #6
 80010e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80010e6:	2305      	movs	r3, #5
 80010e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010ea:	237f      	movs	r3, #127	; 0x7f
 80010ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010ee:	2304      	movs	r3, #4
 80010f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80010f6:	463b      	mov	r3, r7
 80010f8:	4619      	mov	r1, r3
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_ADC4_Init+0xe4>)
 80010fc:	f004 fab4 	bl	8005668 <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC4_Init+0xbe>
  {
    Error_Handler();
 8001106:	f001 fa8e 	bl	8002626 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_ADC4_Init+0xf0>)
 800110c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800110e:	230c      	movs	r3, #12
 8001110:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <MX_ADC4_Init+0xe4>)
 8001118:	f004 faa6 	bl	8005668 <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC4_Init+0xda>
  {
    Error_Handler();
 8001122:	f001 fa80 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200009d8 	.word	0x200009d8
 8001134:	50000500 	.word	0x50000500
 8001138:	10c00010 	.word	0x10c00010
 800113c:	14f00020 	.word	0x14f00020

08001140 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b0a8      	sub	sp, #160	; 0xa0
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001158:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800115c:	2254      	movs	r2, #84	; 0x54
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f01a faf5 	bl	801b750 <memset>
  if(adcHandle->Instance==ADC1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800116e:	d141      	bne.n	80011f4 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001176:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800117a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001180:	4618      	mov	r0, r3
 8001182:	f00a fa01 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800118c:	f001 fa4b 	bl	8002626 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001190:	4bae      	ldr	r3, [pc, #696]	; (800144c <HAL_ADC_MspInit+0x30c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	4aad      	ldr	r2, [pc, #692]	; (800144c <HAL_ADC_MspInit+0x30c>)
 8001198:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800119a:	4bac      	ldr	r3, [pc, #688]	; (800144c <HAL_ADC_MspInit+0x30c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d10b      	bne.n	80011ba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011a2:	4bab      	ldr	r3, [pc, #684]	; (8001450 <HAL_ADC_MspInit+0x310>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4aaa      	ldr	r2, [pc, #680]	; (8001450 <HAL_ADC_MspInit+0x310>)
 80011a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4ba8      	ldr	r3, [pc, #672]	; (8001450 <HAL_ADC_MspInit+0x310>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
 80011b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4ba5      	ldr	r3, [pc, #660]	; (8001450 <HAL_ADC_MspInit+0x310>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4aa4      	ldr	r2, [pc, #656]	; (8001450 <HAL_ADC_MspInit+0x310>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4ba2      	ldr	r3, [pc, #648]	; (8001450 <HAL_ADC_MspInit+0x310>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
 80011d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011d2:	230f      	movs	r3, #15
 80011d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f006 ff1f 	bl	8008030 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80011f2:	e127      	b.n	8001444 <HAL_ADC_MspInit+0x304>
  else if(adcHandle->Instance==ADC2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a96      	ldr	r2, [pc, #600]	; (8001454 <HAL_ADC_MspInit+0x314>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	f040 8093 	bne.w	8001326 <HAL_ADC_MspInit+0x1e6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001204:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001206:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800120a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001210:	4618      	mov	r0, r3
 8001212:	f00a f9b9 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <HAL_ADC_MspInit+0xe0>
      Error_Handler();
 800121c:	f001 fa03 	bl	8002626 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001220:	4b8a      	ldr	r3, [pc, #552]	; (800144c <HAL_ADC_MspInit+0x30c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	4a89      	ldr	r2, [pc, #548]	; (800144c <HAL_ADC_MspInit+0x30c>)
 8001228:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800122a:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_ADC_MspInit+0x30c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d10b      	bne.n	800124a <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001232:	4b87      	ldr	r3, [pc, #540]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a86      	ldr	r2, [pc, #536]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b84      	ldr	r3, [pc, #528]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800124a:	4b81      	ldr	r3, [pc, #516]	; (8001450 <HAL_ADC_MspInit+0x310>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a80      	ldr	r2, [pc, #512]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001250:	f043 0320 	orr.w	r3, r3, #32
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b7e      	ldr	r3, [pc, #504]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0320 	and.w	r3, r3, #32
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b7b      	ldr	r3, [pc, #492]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	4a7a      	ldr	r2, [pc, #488]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800126e:	4b78      	ldr	r3, [pc, #480]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4b75      	ldr	r3, [pc, #468]	; (8001450 <HAL_ADC_MspInit+0x310>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a74      	ldr	r2, [pc, #464]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b72      	ldr	r3, [pc, #456]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	623b      	str	r3, [r7, #32]
 8001290:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b6f      	ldr	r3, [pc, #444]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	4a6e      	ldr	r2, [pc, #440]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129e:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <HAL_ADC_MspInit+0x310>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012c0:	4619      	mov	r1, r3
 80012c2:	4865      	ldr	r0, [pc, #404]	; (8001458 <HAL_ADC_MspInit+0x318>)
 80012c4:	f006 feb4 	bl	8008030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012c8:	2320      	movs	r3, #32
 80012ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ce:	2303      	movs	r3, #3
 80012d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f006 fea4 	bl	8008030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012e8:	2330      	movs	r3, #48	; 0x30
 80012ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012fe:	4619      	mov	r1, r3
 8001300:	4856      	ldr	r0, [pc, #344]	; (800145c <HAL_ADC_MspInit+0x31c>)
 8001302:	f006 fe95 	bl	8008030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001306:	2304      	movs	r3, #4
 8001308:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130c:	2303      	movs	r3, #3
 800130e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800131c:	4619      	mov	r1, r3
 800131e:	4850      	ldr	r0, [pc, #320]	; (8001460 <HAL_ADC_MspInit+0x320>)
 8001320:	f006 fe86 	bl	8008030 <HAL_GPIO_Init>
}
 8001324:	e08e      	b.n	8001444 <HAL_ADC_MspInit+0x304>
  else if(adcHandle->Instance==ADC3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a4e      	ldr	r2, [pc, #312]	; (8001464 <HAL_ADC_MspInit+0x324>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d142      	bne.n	80013b6 <HAL_ADC_MspInit+0x276>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001336:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800133a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001342:	4618      	mov	r0, r3
 8001344:	f00a f920 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_ADC_MspInit+0x212>
      Error_Handler();
 800134e:	f001 f96a 	bl	8002626 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001352:	4b45      	ldr	r3, [pc, #276]	; (8001468 <HAL_ADC_MspInit+0x328>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a43      	ldr	r2, [pc, #268]	; (8001468 <HAL_ADC_MspInit+0x328>)
 800135a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800135c:	4b42      	ldr	r3, [pc, #264]	; (8001468 <HAL_ADC_MspInit+0x328>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10b      	bne.n	800137c <HAL_ADC_MspInit+0x23c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001364:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001368:	4a39      	ldr	r2, [pc, #228]	; (8001450 <HAL_ADC_MspInit+0x310>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800137c:	4b34      	ldr	r3, [pc, #208]	; (8001450 <HAL_ADC_MspInit+0x310>)
 800137e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001380:	4a33      	ldr	r2, [pc, #204]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <HAL_ADC_MspInit+0x310>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001394:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139c:	2303      	movs	r3, #3
 800139e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80013ac:	4619      	mov	r1, r3
 80013ae:	482f      	ldr	r0, [pc, #188]	; (800146c <HAL_ADC_MspInit+0x32c>)
 80013b0:	f006 fe3e 	bl	8008030 <HAL_GPIO_Init>
}
 80013b4:	e046      	b.n	8001444 <HAL_ADC_MspInit+0x304>
  else if(adcHandle->Instance==ADC4)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <HAL_ADC_MspInit+0x330>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d141      	bne.n	8001444 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00a f8d8 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_ADC_MspInit+0x2a2>
      Error_Handler();
 80013de:	f001 f922 	bl	8002626 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_ADC_MspInit+0x328>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3301      	adds	r3, #1
 80013e8:	4a1f      	ldr	r2, [pc, #124]	; (8001468 <HAL_ADC_MspInit+0x328>)
 80013ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_ADC_MspInit+0x328>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d10b      	bne.n	800140c <HAL_ADC_MspInit+0x2cc>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_ADC_MspInit+0x310>)
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <HAL_ADC_MspInit+0x310>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_ADC_MspInit+0x310>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	4a0f      	ldr	r2, [pc, #60]	; (8001450 <HAL_ADC_MspInit+0x310>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_ADC_MspInit+0x310>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001424:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001428:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800142c:	2303      	movs	r3, #3
 800142e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800143c:	4619      	mov	r1, r3
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <HAL_ADC_MspInit+0x320>)
 8001440:	f006 fdf6 	bl	8008030 <HAL_GPIO_Init>
}
 8001444:	bf00      	nop
 8001446:	37a0      	adds	r7, #160	; 0xa0
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000a44 	.word	0x20000a44
 8001450:	40021000 	.word	0x40021000
 8001454:	50000100 	.word	0x50000100
 8001458:	48001400 	.word	0x48001400
 800145c:	48000800 	.word	0x48000800
 8001460:	48000400 	.word	0x48000400
 8001464:	50000400 	.word	0x50000400
 8001468:	20000a48 	.word	0x20000a48
 800146c:	48000c00 	.word	0x48000c00
 8001470:	50000500 	.word	0x50000500

08001474 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <MX_CRC_Init+0x3c>)
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <MX_CRC_Init+0x40>)
 800147c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_CRC_Init+0x3c>)
 8001480:	2200      	movs	r2, #0
 8001482:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <MX_CRC_Init+0x3c>)
 8001486:	2200      	movs	r2, #0
 8001488:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_CRC_Init+0x3c>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <MX_CRC_Init+0x3c>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_CRC_Init+0x3c>)
 8001498:	2201      	movs	r2, #1
 800149a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_CRC_Init+0x3c>)
 800149e:	f005 fd5b 	bl	8006f58 <HAL_CRC_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014a8:	f001 f8bd 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000a4c 	.word	0x20000a4c
 80014b4:	40023000 	.word	0x40023000

080014b8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_CRC_MspInit+0x38>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10b      	bne.n	80014e2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_CRC_MspInit+0x3c>)
 80014cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_CRC_MspInit+0x3c>)
 80014d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014d4:	6493      	str	r3, [r2, #72]	; 0x48
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_CRC_MspInit+0x3c>)
 80014d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023000 	.word	0x40023000
 80014f4:	40021000 	.word	0x40021000

080014f8 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08c      	sub	sp, #48	; 0x30
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014fe:	463b      	mov	r3, r7
 8001500:	2230      	movs	r2, #48	; 0x30
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f01a f923 	bl	801b750 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_DAC1_Init+0x6c>)
 800150c:	4a16      	ldr	r2, [pc, #88]	; (8001568 <MX_DAC1_Init+0x70>)
 800150e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001510:	4814      	ldr	r0, [pc, #80]	; (8001564 <MX_DAC1_Init+0x6c>)
 8001512:	f005 fe71 	bl	80071f8 <HAL_DAC_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800151c:	f001 f883 	bl	8002626 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001520:	2302      	movs	r3, #2
 8001522:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800153c:	2301      	movs	r3, #1
 800153e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_DAC1_Init+0x6c>)
 800154c:	f005 fefe 	bl	800734c <HAL_DAC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001556:	f001 f866 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3730      	adds	r7, #48	; 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000a70 	.word	0x20000a70
 8001568:	50000800 	.word	0x50000800

0800156c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001572:	463b      	mov	r3, r7
 8001574:	2230      	movs	r2, #48	; 0x30
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f01a f8e9 	bl	801b750 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_DAC2_Init+0x6c>)
 8001580:	4a16      	ldr	r2, [pc, #88]	; (80015dc <MX_DAC2_Init+0x70>)
 8001582:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001584:	4814      	ldr	r0, [pc, #80]	; (80015d8 <MX_DAC2_Init+0x6c>)
 8001586:	f005 fe37 	bl	80071f8 <HAL_DAC_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001590:	f001 f849 	bl	8002626 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001594:	2302      	movs	r3, #2
 8001596:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_DAC2_Init+0x6c>)
 80015c0:	f005 fec4 	bl	800734c <HAL_DAC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 80015ca:	f001 f82c 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3730      	adds	r7, #48	; 0x30
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000a84 	.word	0x20000a84
 80015dc:	50000c00 	.word	0x50000c00

080015e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <HAL_DAC_MspInit+0xdc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12d      	bne.n	800165e <HAL_DAC_MspInit+0x7e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4a2e      	ldr	r2, [pc, #184]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001632:	2310      	movs	r3, #16
 8001634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001636:	2303      	movs	r3, #3
 8001638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f006 fcf2 	bl	8008030 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	210f      	movs	r1, #15
 8001650:	2036      	movs	r0, #54	; 0x36
 8001652:	f005 fc33 	bl	8006ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001656:	2036      	movs	r0, #54	; 0x36
 8001658:	f005 fc5a 	bl	8006f10 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800165c:	e029      	b.n	80016b2 <HAL_DAC_MspInit+0xd2>
  else if(dacHandle->Instance==DAC2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <HAL_DAC_MspInit+0xe4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d124      	bne.n	80016b2 <HAL_DAC_MspInit+0xd2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001668:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 800166e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001684:	4a0e      	ldr	r2, [pc, #56]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HAL_DAC_MspInit+0xe0>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169c:	2303      	movs	r3, #3
 800169e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f006 fcbf 	bl	8008030 <HAL_GPIO_Init>
}
 80016b2:	bf00      	nop
 80016b4:	3730      	adds	r7, #48	; 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	50000800 	.word	0x50000800
 80016c0:	40021000 	.word	0x40021000
 80016c4:	50000c00 	.word	0x50000c00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017e2:	4b1e      	ldr	r3, [pc, #120]	; (800185c <MX_DMA_Init+0x80>)
 80017e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e6:	4a1d      	ldr	r2, [pc, #116]	; (800185c <MX_DMA_Init+0x80>)
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6493      	str	r3, [r2, #72]	; 0x48
 80017ee:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_DMA_Init+0x80>)
 80017f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_DMA_Init+0x80>)
 80017fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017fe:	4a17      	ldr	r2, [pc, #92]	; (800185c <MX_DMA_Init+0x80>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6493      	str	r3, [r2, #72]	; 0x48
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_DMA_Init+0x80>)
 8001808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001812:	f7ff ff59 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 8001816:	4603      	mov	r3, r0
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ffa9 	bl	8001774 <NVIC_EncodePriority>
 8001822:	4603      	mov	r3, r0
 8001824:	4619      	mov	r1, r3
 8001826:	200b      	movs	r0, #11
 8001828:	f7ff ff7a 	bl	8001720 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800182c:	200b      	movs	r0, #11
 800182e:	f7ff ff59 	bl	80016e4 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001832:	f7ff ff49 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 8001836:	4603      	mov	r3, r0
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff99 	bl	8001774 <NVIC_EncodePriority>
 8001842:	4603      	mov	r3, r0
 8001844:	4619      	mov	r1, r3
 8001846:	200c      	movs	r0, #12
 8001848:	f7ff ff6a 	bl	8001720 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800184c:	200c      	movs	r0, #12
 800184e:	f7ff ff49 	bl	80016e4 <__NVIC_EnableIRQ>

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 8001866:	4a20      	ldr	r2, [pc, #128]	; (80018e8 <MX_FDCAN2_Init+0x88>)
 8001868:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001870:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 800187e:	2200      	movs	r2, #0
 8001880:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 8001884:	2200      	movs	r2, #0
 8001886:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 800188a:	2200      	movs	r2, #0
 800188c:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 8001890:	2201      	movs	r2, #1
 8001892:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 8001896:	2201      	movs	r2, #1
 8001898:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 800189c:	2202      	movs	r2, #2
 800189e:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 80018a2:	2202      	movs	r2, #2
 80018a4:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_FDCAN2_Init+0x84>)
 80018d2:	f006 f89d 	bl	8007a10 <HAL_FDCAN_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80018dc:	f000 fea3 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000a98 	.word	0x20000a98
 80018e8:	40006800 	.word	0x40006800

080018ec <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b09e      	sub	sp, #120	; 0x78
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	2254      	movs	r2, #84	; 0x54
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f019 ff1f 	bl	801b750 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a20      	ldr	r2, [pc, #128]	; (8001998 <HAL_FDCAN_MspInit+0xac>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d138      	bne.n	800198e <HAL_FDCAN_MspInit+0xa2>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	4618      	mov	r0, r3
 800192e:	f009 fe2b 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001938:	f000 fe75 	bl	8002626 <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_FDCAN_MspInit+0xb0>)
 800193e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001940:	4a16      	ldr	r2, [pc, #88]	; (800199c <HAL_FDCAN_MspInit+0xb0>)
 8001942:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001946:	6593      	str	r3, [r2, #88]	; 0x58
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <HAL_FDCAN_MspInit+0xb0>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_FDCAN_MspInit+0xb0>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001958:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_FDCAN_MspInit+0xb0>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_FDCAN_MspInit+0xb0>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800196c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001970:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800197e:	2309      	movs	r3, #9
 8001980:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <HAL_FDCAN_MspInit+0xb4>)
 800198a:	f006 fb51 	bl	8008030 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 800198e:	bf00      	nop
 8001990:	3778      	adds	r7, #120	; 0x78
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40006800 	.word	0x40006800
 800199c:	40021000 	.word	0x40021000
 80019a0:	48000400 	.word	0x48000400

080019a4 <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80019aa:	463b      	mov	r3, r7
 80019ac:	2220      	movs	r2, #32
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f019 fecd 	bl	801b750 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80019b6:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019b8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80019bc:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019c0:	4a2b      	ldr	r2, [pc, #172]	; (8001a70 <MX_FMC_Init+0xcc>)
 80019c2:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80019c4:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80019d0:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019d8:	2210      	movs	r2, #16
 80019da:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_FMC_Init+0xc8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_FMC_Init+0xc8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_FMC_Init+0xc8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_FMC_Init+0xc8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <MX_FMC_Init+0xc8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MX_FMC_Init+0xc8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MX_FMC_Init+0xc8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_FMC_Init+0xc8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 1;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001a32:	230f      	movs	r3, #15
 8001a34:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001a42:	2310      	movs	r3, #16
 8001a44:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001a46:	2311      	movs	r3, #17
 8001a48:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001a4e:	463b      	mov	r3, r7
 8001a50:	2200      	movs	r2, #0
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_FMC_Init+0xc8>)
 8001a56:	f00b f8fb 	bl	800cc50 <HAL_SRAM_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_FMC_Init+0xc0>
  {
    Error_Handler( );
 8001a60:	f000 fde1 	bl	8002626 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000afc 	.word	0x20000afc
 8001a70:	a0000104 	.word	0xa0000104

08001a74 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001a88:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <HAL_FMC_MspInit+0xa4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d13e      	bne.n	8001b0e <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_FMC_MspInit+0xa4>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <HAL_FMC_MspInit+0xa8>)
 8001a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a9a:	4a20      	ldr	r2, [pc, #128]	; (8001b1c <HAL_FMC_MspInit+0xa8>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6513      	str	r3, [r2, #80]	; 0x50
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_FMC_MspInit+0xa8>)
 8001aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001aae:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001ab2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ac0:	230c      	movs	r3, #12
 8001ac2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4815      	ldr	r0, [pc, #84]	; (8001b20 <HAL_FMC_MspInit+0xac>)
 8001aca:	f006 fab1 	bl	8008030 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001ace:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001ad2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480e      	ldr	r0, [pc, #56]	; (8001b24 <HAL_FMC_MspInit+0xb0>)
 8001aea:	f006 faa1 	bl	8008030 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aee:	2320      	movs	r3, #32
 8001af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001afe:	230c      	movs	r3, #12
 8001b00:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4808      	ldr	r0, [pc, #32]	; (8001b28 <HAL_FMC_MspInit+0xb4>)
 8001b08:	f006 fa92 	bl	8008030 <HAL_GPIO_Init>
 8001b0c:	e000      	b.n	8001b10 <HAL_FMC_MspInit+0x9c>
    return;
 8001b0e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000b54 	.word	0x20000b54
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48001000 	.word	0x48001000
 8001b24:	48000c00 	.word	0x48000c00
 8001b28:	48001800 	.word	0x48001800

08001b2c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001b34:	f7ff ff9e 	bl	8001a74 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <__NVIC_GetPriorityGrouping>:
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <LL_SYSCFG_SetEXTISource+0x6c>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3302      	adds	r3, #2
 8001c68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	43db      	mvns	r3, r3
 8001c72:	ea02 0103 	and.w	r1, r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	0c1b      	lsrs	r3, r3, #16
 8001c7a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	fa93 f3a3 	rbit	r3, r3
 8001c82:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	e003      	b.n	8001c9a <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f003 031f 	and.w	r3, r3, #31
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <LL_SYSCFG_SetEXTISource+0x6c>)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	430a      	orrs	r2, r1
 8001cac:	3302      	adds	r3, #2
 8001cae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000

08001cc4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b08b      	sub	sp, #44	; 0x2c
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	613b      	str	r3, [r7, #16]
  return result;
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001cea:	2320      	movs	r3, #32
 8001cec:	e003      	b.n	8001cf6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2103      	movs	r1, #3
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	401a      	ands	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	61fb      	str	r3, [r7, #28]
  return result;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e003      	b.n	8001d24 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	372c      	adds	r7, #44	; 0x2c
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b08b      	sub	sp, #44	; 0x2c
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	613b      	str	r3, [r7, #16]
  return result;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001d64:	2320      	movs	r3, #32
 8001d66:	e003      	b.n	8001d70 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2103      	movs	r1, #3
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	61fb      	str	r3, [r7, #28]
  return result;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001d92:	2320      	movs	r3, #32
 8001d94:	e003      	b.n	8001d9e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	431a      	orrs	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	60da      	str	r2, [r3, #12]
}
 8001dac:	bf00      	nop
 8001dae:	372c      	adds	r7, #44	; 0x2c
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	619a      	str	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dfc:	4907      	ldr	r1, [pc, #28]	; (8001e1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40021000 	.word	0x40021000

08001e20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
 8001e40:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 8001e42:	2010      	movs	r0, #16
 8001e44:	f7ff ffd4 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001e48:	2004      	movs	r0, #4
 8001e4a:	f7ff ffd1 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001e4e:	2020      	movs	r0, #32
 8001e50:	f7ff ffce 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f7ff ffcb 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f7ff ffc8 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8001e60:	2008      	movs	r0, #8
 8001e62:	f7ff ffc5 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
 8001e66:	2040      	movs	r0, #64	; 0x40
 8001e68:	f7ff ffc2 	bl	8001df0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8001e6c:	2108      	movs	r1, #8
 8001e6e:	48bc      	ldr	r0, [pc, #752]	; (8002160 <MX_GPIO_Init+0x340>)
 8001e70:	f7ff ffb0 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
 8001e74:	2110      	movs	r1, #16
 8001e76:	48ba      	ldr	r0, [pc, #744]	; (8002160 <MX_GPIO_Init+0x340>)
 8001e78:	f7ff ffac 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED3_GPIO_Port, LED3_Pin);
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	48b8      	ldr	r0, [pc, #736]	; (8002160 <MX_GPIO_Init+0x340>)
 8001e80:	f7ff ffa8 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED4_GPIO_Port, LED4_Pin);
 8001e84:	2101      	movs	r1, #1
 8001e86:	48b7      	ldr	r0, [pc, #732]	; (8002164 <MX_GPIO_Init+0x344>)
 8001e88:	f7ff ffa4 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED5_GPIO_Port, LED5_Pin);
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	48b5      	ldr	r0, [pc, #724]	; (8002164 <MX_GPIO_Init+0x344>)
 8001e90:	f7ff ffa0 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED6_GPIO_Port, LED6_Pin);
 8001e94:	2104      	movs	r1, #4
 8001e96:	48b3      	ldr	r0, [pc, #716]	; (8002164 <MX_GPIO_Init+0x344>)
 8001e98:	f7ff ff9c 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED7_GPIO_Port, LED7_Pin);
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	48b1      	ldr	r0, [pc, #708]	; (8002164 <MX_GPIO_Init+0x344>)
 8001ea0:	f7ff ff98 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED0_GPIO_Port, LED0_Pin);
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	48ae      	ldr	r0, [pc, #696]	; (8002160 <MX_GPIO_Init+0x340>)
 8001ea8:	f7ff ff94 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ARDUINO_CS_GPIO_Port, ARDUINO_CS_Pin);
 8001eac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb0:	48ab      	ldr	r0, [pc, #684]	; (8002160 <MX_GPIO_Init+0x340>)
 8001eb2:	f7ff ff8f 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CAN_STBY_GPIO_Port, CAN_STBY_Pin);
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	48ab      	ldr	r0, [pc, #684]	; (8002168 <MX_GPIO_Init+0x348>)
 8001eba:	f7ff ff8b 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_RST_GPIO_Port, LCD_RST_Pin);
 8001ebe:	2108      	movs	r1, #8
 8001ec0:	48aa      	ldr	r0, [pc, #680]	; (800216c <MX_GPIO_Init+0x34c>)
 8001ec2:	f7ff ff87 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LIN_SLP_GPIO_Port, LIN_SLP_Pin);
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	48a9      	ldr	r0, [pc, #676]	; (8002170 <MX_GPIO_Init+0x350>)
 8001eca:	f7ff ff83 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_BKLT_GPIO_Port, LCD_BKLT_Pin);
 8001ece:	2140      	movs	r1, #64	; 0x40
 8001ed0:	48a7      	ldr	r0, [pc, #668]	; (8002170 <MX_GPIO_Init+0x350>)
 8001ed2:	f7ff ff7f 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(FLASH_CS_GPIO_Port, FLASH_CS_Pin);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	48a6      	ldr	r0, [pc, #664]	; (8002174 <MX_GPIO_Init+0x354>)
 8001eda:	f7ff ff7b 	bl	8001dd4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin);
 8001ede:	2102      	movs	r1, #2
 8001ee0:	48a4      	ldr	r0, [pc, #656]	; (8002174 <MX_GPIO_Init+0x354>)
 8001ee2:	f7ff ff69 	bl	8001db8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = JOY_BTN_Pin;
 8001ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(JOY_BTN_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	489a      	ldr	r0, [pc, #616]	; (8002164 <MX_GPIO_Init+0x344>)
 8001efa:	f00f fa15 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_OK_Pin;
 8001efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BTN_OK_GPIO_Port, &GPIO_InitStruct);
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4894      	ldr	r0, [pc, #592]	; (8002164 <MX_GPIO_Init+0x344>)
 8001f12:	f00f fa09 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin;
 8001f16:	2308      	movs	r3, #8
 8001f18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	488c      	ldr	r0, [pc, #560]	; (8002160 <MX_GPIO_Init+0x340>)
 8001f30:	f00f f9fa 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED2_Pin;
 8001f34:	2310      	movs	r3, #16
 8001f36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4884      	ldr	r0, [pc, #528]	; (8002160 <MX_GPIO_Init+0x340>)
 8001f4e:	f00f f9eb 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED3_Pin;
 8001f52:	2320      	movs	r3, #32
 8001f54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f56:	2301      	movs	r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	487d      	ldr	r0, [pc, #500]	; (8002160 <MX_GPIO_Init+0x340>)
 8001f6c:	f00f f9dc 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED4_Pin;
 8001f70:	2301      	movs	r3, #1
 8001f72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f74:	2301      	movs	r3, #1
 8001f76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	4876      	ldr	r0, [pc, #472]	; (8002164 <MX_GPIO_Init+0x344>)
 8001f8a:	f00f f9cd 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED5_Pin;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f92:	2301      	movs	r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	486f      	ldr	r0, [pc, #444]	; (8002164 <MX_GPIO_Init+0x344>)
 8001fa8:	f00f f9be 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED6_Pin;
 8001fac:	2304      	movs	r3, #4
 8001fae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED6_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4867      	ldr	r0, [pc, #412]	; (8002164 <MX_GPIO_Init+0x344>)
 8001fc6:	f00f f9af 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED7_Pin;
 8001fca:	2308      	movs	r3, #8
 8001fcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED7_GPIO_Port, &GPIO_InitStruct);
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4860      	ldr	r0, [pc, #384]	; (8002164 <MX_GPIO_Init+0x344>)
 8001fe4:	f00f f9a0 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED0_Pin;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fec:	2301      	movs	r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4857      	ldr	r0, [pc, #348]	; (8002160 <MX_GPIO_Init+0x340>)
 8002002:	f00f f991 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARDUINO_CS_Pin;
 8002006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800200a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800200c:	2301      	movs	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ARDUINO_CS_GPIO_Port, &GPIO_InitStruct);
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	4619      	mov	r1, r3
 8002020:	484f      	ldr	r0, [pc, #316]	; (8002160 <MX_GPIO_Init+0x340>)
 8002022:	f00f f981 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_UP_Pin;
 8002026:	2301      	movs	r3, #1
 8002028:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800202e:	2301      	movs	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BTN_UP_GPIO_Port, &GPIO_InitStruct);
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4619      	mov	r1, r3
 8002036:	484c      	ldr	r0, [pc, #304]	; (8002168 <MX_GPIO_Init+0x348>)
 8002038:	f00f f976 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_DOWN_Pin;
 800203c:	2302      	movs	r3, #2
 800203e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002044:	2301      	movs	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BTN_DOWN_GPIO_Port, &GPIO_InitStruct);
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	4619      	mov	r1, r3
 800204c:	4846      	ldr	r0, [pc, #280]	; (8002168 <MX_GPIO_Init+0x348>)
 800204e:	f00f f96b 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8002052:	2340      	movs	r3, #64	; 0x40
 8002054:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800205a:	2301      	movs	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4841      	ldr	r0, [pc, #260]	; (8002168 <MX_GPIO_Init+0x348>)
 8002064:	f00f f960 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CAN_STBY_Pin;
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800206c:	2301      	movs	r3, #1
 800206e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CAN_STBY_GPIO_Port, &GPIO_InitStruct);
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	4619      	mov	r1, r3
 8002080:	4839      	ldr	r0, [pc, #228]	; (8002168 <MX_GPIO_Init+0x348>)
 8002082:	f00f f951 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 8002086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800208a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002090:	2301      	movs	r3, #1
 8002092:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4833      	ldr	r0, [pc, #204]	; (8002168 <MX_GPIO_Init+0x348>)
 800209a:	f00f f945 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800209e:	2308      	movs	r3, #8
 80020a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80020a2:	2301      	movs	r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	482d      	ldr	r0, [pc, #180]	; (800216c <MX_GPIO_Init+0x34c>)
 80020b8:	f00f f936 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LIN_SLP_Pin;
 80020bc:	2320      	movs	r3, #32
 80020be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80020c0:	2301      	movs	r3, #1
 80020c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LIN_SLP_GPIO_Port, &GPIO_InitStruct);
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4826      	ldr	r0, [pc, #152]	; (8002170 <MX_GPIO_Init+0x350>)
 80020d6:	f00f f927 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_BKLT_Pin;
 80020da:	2340      	movs	r3, #64	; 0x40
 80020dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80020de:	2301      	movs	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LCD_BKLT_GPIO_Port, &GPIO_InitStruct);
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	481f      	ldr	r0, [pc, #124]	; (8002170 <MX_GPIO_Init+0x350>)
 80020f4:	f00f f918 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80020f8:	2301      	movs	r3, #1
 80020fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80020fc:	2301      	movs	r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800210c:	1d3b      	adds	r3, r7, #4
 800210e:	4619      	mov	r1, r3
 8002110:	4818      	ldr	r0, [pc, #96]	; (8002174 <MX_GPIO_Init+0x354>)
 8002112:	f00f f909 	bl	8011328 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TOUCH_CS_Pin;
 8002116:	2302      	movs	r3, #2
 8002118:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800211a:	2301      	movs	r3, #1
 800211c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800211e:	2302      	movs	r3, #2
 8002120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002126:	2301      	movs	r3, #1
 8002128:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TOUCH_CS_GPIO_Port, &GPIO_InitStruct);
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	4619      	mov	r1, r3
 800212e:	4811      	ldr	r0, [pc, #68]	; (8002174 <MX_GPIO_Init+0x354>)
 8002130:	f00f f8fa 	bl	8011328 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8002134:	4910      	ldr	r1, [pc, #64]	; (8002178 <MX_GPIO_Init+0x358>)
 8002136:	2002      	movs	r0, #2
 8002138:	f7ff fd8c 	bl	8001c54 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE6);
 800213c:	490f      	ldr	r1, [pc, #60]	; (800217c <MX_GPIO_Init+0x35c>)
 800213e:	2003      	movs	r0, #3
 8002140:	f7ff fd88 	bl	8001c54 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8002144:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002148:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800214a:	2301      	movs	r3, #1
 800214c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002150:	2300      	movs	r3, #0
 8002152:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8002156:	2302      	movs	r3, #2
 8002158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800215c:	e010      	b.n	8002180 <MX_GPIO_Init+0x360>
 800215e:	bf00      	nop
 8002160:	48001400 	.word	0x48001400
 8002164:	48000800 	.word	0x48000800
 8002168:	48001800 	.word	0x48001800
 800216c:	48000c00 	.word	0x48000c00
 8002170:	48000400 	.word	0x48000400
 8002174:	48001000 	.word	0x48001000
 8002178:	0f000003 	.word	0x0f000003
 800217c:	0f000001 	.word	0x0f000001
  LL_EXTI_Init(&EXTI_InitStruct);
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	4618      	mov	r0, r3
 8002186:	f00e fadb 	bl	8010740 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 800218a:	2340      	movs	r3, #64	; 0x40
 800218c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002194:	2300      	movs	r3, #0
 8002196:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800219a:	2302      	movs	r3, #2
 800219c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	4618      	mov	r0, r3
 80021a6:	f00e facb 	bl	8010740 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN_ESC_GPIO_Port, BTN_ESC_Pin, LL_GPIO_PULL_UP);
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021b0:	481b      	ldr	r0, [pc, #108]	; (8002220 <MX_GPIO_Init+0x400>)
 80021b2:	f7ff fdc4 	bl	8001d3e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin, LL_GPIO_PULL_UP);
 80021b6:	2201      	movs	r2, #1
 80021b8:	2140      	movs	r1, #64	; 0x40
 80021ba:	481a      	ldr	r0, [pc, #104]	; (8002224 <MX_GPIO_Init+0x404>)
 80021bc:	f7ff fdbf 	bl	8001d3e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN_ESC_GPIO_Port, BTN_ESC_Pin, LL_GPIO_MODE_INPUT);
 80021c0:	2200      	movs	r2, #0
 80021c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021c6:	4816      	ldr	r0, [pc, #88]	; (8002220 <MX_GPIO_Init+0x400>)
 80021c8:	f7ff fd7c 	bl	8001cc4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(TOUCH_IRQ_GPIO_Port, TOUCH_IRQ_Pin, LL_GPIO_MODE_INPUT);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2140      	movs	r1, #64	; 0x40
 80021d0:	4814      	ldr	r0, [pc, #80]	; (8002224 <MX_GPIO_Init+0x404>)
 80021d2:	f7ff fd77 	bl	8001cc4 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80021d6:	f7ff fcb3 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 80021da:	4603      	mov	r3, r0
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fd03 	bl	8001bec <NVIC_EncodePriority>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4619      	mov	r1, r3
 80021ea:	2017      	movs	r0, #23
 80021ec:	f7ff fcd4 	bl	8001b98 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021f0:	2017      	movs	r0, #23
 80021f2:	f7ff fcb3 	bl	8001b5c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80021f6:	f7ff fca3 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fcf3 	bl	8001bec <NVIC_EncodePriority>
 8002206:	4603      	mov	r3, r0
 8002208:	4619      	mov	r1, r3
 800220a:	2028      	movs	r0, #40	; 0x28
 800220c:	f7ff fcc4 	bl	8001b98 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002210:	2028      	movs	r0, #40	; 0x28
 8002212:	f7ff fca3 	bl	8001b5c <__NVIC_EnableIRQ>

}
 8002216:	bf00      	nop
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	48000800 	.word	0x48000800
 8002224:	48000c00 	.word	0x48000c00

08002228 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <MX_I2C1_Init+0x74>)
 800222e:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <MX_I2C1_Init+0x78>)
 8002230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MX_I2C1_Init+0x74>)
 8002234:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <MX_I2C1_Init+0x7c>)
 8002236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <MX_I2C1_Init+0x74>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <MX_I2C1_Init+0x74>)
 8002240:	2201      	movs	r2, #1
 8002242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <MX_I2C1_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_I2C1_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <MX_I2C1_Init+0x74>)
 8002252:	2200      	movs	r2, #0
 8002254:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_I2C1_Init+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_I2C1_Init+0x74>)
 800225e:	2200      	movs	r2, #0
 8002260:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002262:	480e      	ldr	r0, [pc, #56]	; (800229c <MX_I2C1_Init+0x74>)
 8002264:	f006 f93a 	bl	80084dc <HAL_I2C_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800226e:	f000 f9da 	bl	8002626 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002272:	2100      	movs	r1, #0
 8002274:	4809      	ldr	r0, [pc, #36]	; (800229c <MX_I2C1_Init+0x74>)
 8002276:	f006 fa53 	bl	8008720 <HAL_I2CEx_ConfigAnalogFilter>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002280:	f000 f9d1 	bl	8002626 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002284:	2100      	movs	r1, #0
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_I2C1_Init+0x74>)
 8002288:	f006 fac0 	bl	800880c <HAL_I2CEx_ConfigDigitalFilter>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002292:	f000 f9c8 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000b58 	.word	0x20000b58
 80022a0:	40005400 	.word	0x40005400
 80022a4:	30a0a7fb 	.word	0x30a0a7fb

080022a8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_I2C2_Init+0x74>)
 80022ae:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <MX_I2C2_Init+0x78>)
 80022b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_I2C2_Init+0x74>)
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <MX_I2C2_Init+0x7c>)
 80022b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <MX_I2C2_Init+0x74>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_I2C2_Init+0x74>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_I2C2_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80022ca:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_I2C2_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <MX_I2C2_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_I2C2_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_I2C2_Init+0x74>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80022e2:	480e      	ldr	r0, [pc, #56]	; (800231c <MX_I2C2_Init+0x74>)
 80022e4:	f006 f8fa 	bl	80084dc <HAL_I2C_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80022ee:	f000 f99a 	bl	8002626 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022f2:	2100      	movs	r1, #0
 80022f4:	4809      	ldr	r0, [pc, #36]	; (800231c <MX_I2C2_Init+0x74>)
 80022f6:	f006 fa13 	bl	8008720 <HAL_I2CEx_ConfigAnalogFilter>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002300:	f000 f991 	bl	8002626 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002304:	2100      	movs	r1, #0
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_I2C2_Init+0x74>)
 8002308:	f006 fa80 	bl	800880c <HAL_I2CEx_ConfigDigitalFilter>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002312:	f000 f988 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000ba4 	.word	0x20000ba4
 8002320:	40005800 	.word	0x40005800
 8002324:	30a0a7fb 	.word	0x30a0a7fb

08002328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0a2      	sub	sp, #136	; 0x88
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002340:	f107 0320 	add.w	r3, r7, #32
 8002344:	2254      	movs	r2, #84	; 0x54
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f019 fa01 	bl	801b750 <memset>
  if(i2cHandle->Instance==I2C1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a4f      	ldr	r2, [pc, #316]	; (8002490 <HAL_I2C_MspInit+0x168>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d158      	bne.n	800240a <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002358:	2340      	movs	r3, #64	; 0x40
 800235a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002360:	f107 0320 	add.w	r3, r7, #32
 8002364:	4618      	mov	r0, r3
 8002366:	f009 f90f 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002370:	f000 f959 	bl	8002626 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002378:	4a46      	ldr	r2, [pc, #280]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002380:	4b44      	ldr	r3, [pc, #272]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b41      	ldr	r3, [pc, #260]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002390:	4a40      	ldr	r2, [pc, #256]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002398:	4b3e      	ldr	r3, [pc, #248]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023aa:	2312      	movs	r3, #18
 80023ac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023b8:	2304      	movs	r3, #4
 80023ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023c2:	4619      	mov	r1, r3
 80023c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c8:	f005 fe32 	bl	8008030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d0:	2312      	movs	r3, #18
 80023d2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023de:	2304      	movs	r3, #4
 80023e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023e8:	4619      	mov	r1, r3
 80023ea:	482b      	ldr	r0, [pc, #172]	; (8002498 <HAL_I2C_MspInit+0x170>)
 80023ec:	f005 fe20 	bl	8008030 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023f0:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	4a27      	ldr	r2, [pc, #156]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 80023f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023fa:	6593      	str	r3, [r2, #88]	; 0x58
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002408:	e03e      	b.n	8002488 <HAL_I2C_MspInit+0x160>
  else if(i2cHandle->Instance==I2C2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a23      	ldr	r2, [pc, #140]	; (800249c <HAL_I2C_MspInit+0x174>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d139      	bne.n	8002488 <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002418:	2300      	movs	r3, #0
 800241a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800241c:	f107 0320 	add.w	r3, r7, #32
 8002420:	4618      	mov	r0, r3
 8002422:	f009 f8b1 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_I2C_MspInit+0x108>
      Error_Handler();
 800242c:	f000 f8fb 	bl	8002626 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002430:	4b18      	ldr	r3, [pc, #96]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 8002432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002434:	4a17      	ldr	r2, [pc, #92]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002448:	f44f 7340 	mov.w	r3, #768	; 0x300
 800244c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244e:	2312      	movs	r3, #18
 8002450:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002452:	2301      	movs	r3, #1
 8002454:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800245c:	2304      	movs	r3, #4
 800245e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002466:	4619      	mov	r1, r3
 8002468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246c:	f005 fde0 	bl	8008030 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 8002476:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800247a:	6593      	str	r3, [r2, #88]	; 0x58
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_I2C_MspInit+0x16c>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	bf00      	nop
 800248a:	3788      	adds	r7, #136	; 0x88
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40005400 	.word	0x40005400
 8002494:	40021000 	.word	0x40021000
 8002498:	48000400 	.word	0x48000400
 800249c:	40005800 	.word	0x40005800

080024a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a6:	f001 fe5c 	bl	8004162 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024aa:	f000 f871 	bl	8002590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ae:	f7ff fcb7 	bl	8001e20 <MX_GPIO_Init>
  MX_ADC1_Init();
 80024b2:	f7fe fc75 	bl	8000da0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80024b6:	f7fe fceb 	bl	8000e90 <MX_ADC2_Init>
  MX_FMC_Init();
 80024ba:	f7ff fa73 	bl	80019a4 <MX_FMC_Init>
  MX_I2C2_Init();
 80024be:	f7ff fef3 	bl	80022a8 <MX_I2C2_Init>
  MX_UART4_Init();
 80024c2:	f001 fabb 	bl	8003a3c <MX_UART4_Init>
  MX_UART5_Init();
 80024c6:	f001 fb05 	bl	8003ad4 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80024ca:	f001 fb4f 	bl	8003b6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80024ce:	f001 fc39 	bl	8003d44 <MX_USART2_UART_Init>
  MX_QUADSPI1_Init();
 80024d2:	f000 f8c9 	bl	8002668 <MX_QUADSPI1_Init>
  MX_SPI1_Init();
 80024d6:	f000 f989 	bl	80027ec <MX_SPI1_Init>
  MX_TIM5_Init();
 80024da:	f000 fc69 	bl	8002db0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80024de:	f000 fd35 	bl	8002f4c <MX_TIM8_Init>
  MX_TIM20_Init();
 80024e2:	f000 feb5 	bl	8003250 <MX_TIM20_Init>
  MX_ADC3_Init();
 80024e6:	f7fe fd39 	bl	8000f5c <MX_ADC3_Init>
  MX_DAC1_Init();
 80024ea:	f7ff f805 	bl	80014f8 <MX_DAC1_Init>
  MX_DAC2_Init();
 80024ee:	f7ff f83d 	bl	800156c <MX_DAC2_Init>
  MX_FDCAN2_Init();
 80024f2:	f7ff f9b5 	bl	8001860 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 80024f6:	f7ff fe97 	bl	8002228 <MX_I2C1_Init>
  MX_TIM15_Init();
 80024fa:	f000 fe05 	bl	8003108 <MX_TIM15_Init>
  MX_USART3_UART_Init();
 80024fe:	f001 fc6d 	bl	8003ddc <MX_USART3_UART_Init>
  MX_ADC4_Init();
 8002502:	f7fe fda3 	bl	800104c <MX_ADC4_Init>
  MX_USB_Device_Init();
 8002506:	f016 fc2d 	bl	8018d64 <MX_USB_Device_Init>
  MX_DMA_Init();
 800250a:	f7ff f967 	bl	80017dc <MX_DMA_Init>
  MX_CRC_Init();
 800250e:	f7fe ffb1 	bl	8001474 <MX_CRC_Init>
  MX_TIM6_Init();
 8002512:	f000 fce1 	bl	8002ed8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  game_init();
 8002516:	f015 fb67 	bl	8017be8 <game_init>

  uint32_t frameRate = 60;
 800251a:	233c      	movs	r3, #60	; 0x3c
 800251c:	613b      	str	r3, [r7, #16]
  uint32_t frameTime = 1000 / frameRate;
 800251e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	fbb2 f3f3 	udiv	r3, r2, r3
 8002528:	60fb      	str	r3, [r7, #12]
  uint32_t prev = HAL_GetTick();
 800252a:	f001 fe7f 	bl	800422c <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t curr = HAL_GetTick();
 8002530:	f001 fe7c 	bl	800422c <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]
	  uint32_t diff = curr - prev;
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	607b      	str	r3, [r7, #4]
	  prev = curr;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	617b      	str	r3, [r7, #20]

	  gameState.ticks = curr;
 8002542:	4a11      	ldr	r2, [pc, #68]	; (8002588 <main+0xe8>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	6013      	str	r3, [r2, #0]
	  gameState.deltaTicks = diff;
 8002548:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <main+0xe8>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6053      	str	r3, [r2, #4]

	  gameState.time = (f32)gameState.ticks / 1000.0f;
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <main+0xe8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800255a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800258c <main+0xec>
 800255e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <main+0xe8>)
 8002564:	edc3 7a02 	vstr	s15, [r3, #8]
	  gameState.deltaTime = (f32)gameState.deltaTicks / 1000.0f;
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <main+0xe8>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	ee07 3a90 	vmov	s15, r3
 8002570:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002574:	eddf 6a05 	vldr	s13, [pc, #20]	; 800258c <main+0xec>
 8002578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800257c:	4b02      	ldr	r3, [pc, #8]	; (8002588 <main+0xe8>)
 800257e:	edc3 7a03 	vstr	s15, [r3, #12]

	  game_tick();
 8002582:	f015 fb59 	bl	8017c38 <game_tick>
  {
 8002586:	e7d3      	b.n	8002530 <main+0x90>
 8002588:	20001050 	.word	0x20001050
 800258c:	447a0000 	.word	0x447a0000

08002590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b094      	sub	sp, #80	; 0x50
 8002594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002596:	f107 0318 	add.w	r3, r7, #24
 800259a:	2238      	movs	r2, #56	; 0x38
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f019 f8d6 	bl	801b750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
 80025b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f007 fede 	bl	800a374 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80025b8:	2321      	movs	r3, #33	; 0x21
 80025ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80025c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80025c2:	2301      	movs	r3, #1
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025c6:	2302      	movs	r3, #2
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025ca:	2303      	movs	r3, #3
 80025cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80025ce:	2302      	movs	r3, #2
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80025d2:	2355      	movs	r3, #85	; 0x55
 80025d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025d6:	2302      	movs	r3, #2
 80025d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80025da:	2306      	movs	r3, #6
 80025dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025de:	2302      	movs	r3, #2
 80025e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e2:	f107 0318 	add.w	r3, r7, #24
 80025e6:	4618      	mov	r0, r3
 80025e8:	f008 f8dc 	bl	800a7a4 <HAL_RCC_OscConfig>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80025f2:	f000 f818 	bl	8002626 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025f6:	230f      	movs	r3, #15
 80025f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025fa:	2303      	movs	r3, #3
 80025fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	2104      	movs	r1, #4
 800260e:	4618      	mov	r0, r3
 8002610:	f008 fcda 	bl	800afc8 <HAL_RCC_ClockConfig>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800261a:	f000 f804 	bl	8002626 <Error_Handler>
  }
}
 800261e:	bf00      	nop
 8002620:	3750      	adds	r7, #80	; 0x50
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800262a:	b672      	cpsid	i
}
 800262c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800262e:	e7fe      	b.n	800262e <Error_Handler+0x8>

08002630 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0a2      	sub	sp, #136	; 0x88
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	char assertString[128];
	snprintf(assertString, "Assert failed(File: %s, Line: %d)\r\n", (char*)file, line);
 800263a:	490a      	ldr	r1, [pc, #40]	; (8002664 <assert_failed+0x34>)
 800263c:	f107 0008 	add.w	r0, r7, #8
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	f019 f9ba 	bl	801b9bc <sniprintf>
	CDC_Transmit_FS(assertString, strlen(assertString));
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd fde7 	bl	8000220 <strlen>
 8002652:	4602      	mov	r2, r0
 8002654:	f107 0308 	add.w	r3, r7, #8
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f016 fc40 	bl	8018ee0 <CDC_Transmit_FS>
	while (1) {
 8002660:	e7fe      	b.n	8002660 <assert_failed+0x30>
 8002662:	bf00      	nop
 8002664:	0801cbf8 	.word	0x0801cbf8

08002668 <MX_QUADSPI1_Init>:

QSPI_HandleTypeDef hqspi1;

/* QUADSPI1 init function */
void MX_QUADSPI1_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI1_Init 0 */

  /* USER CODE BEGIN QUADSPI1_Init 1 */

  /* USER CODE END QUADSPI1_Init 1 */
  hqspi1.Instance = QUADSPI;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <MX_QUADSPI1_Init+0x50>)
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <MX_QUADSPI1_Init+0x54>)
 8002670:	601a      	str	r2, [r3, #0]
  hqspi1.Init.ClockPrescaler = 255;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <MX_QUADSPI1_Init+0x50>)
 8002674:	22ff      	movs	r2, #255	; 0xff
 8002676:	605a      	str	r2, [r3, #4]
  hqspi1.Init.FifoThreshold = 1;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MX_QUADSPI1_Init+0x50>)
 800267a:	2201      	movs	r2, #1
 800267c:	609a      	str	r2, [r3, #8]
  hqspi1.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <MX_QUADSPI1_Init+0x50>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  hqspi1.Init.FlashSize = 1;
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <MX_QUADSPI1_Init+0x50>)
 8002686:	2201      	movs	r2, #1
 8002688:	611a      	str	r2, [r3, #16]
  hqspi1.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <MX_QUADSPI1_Init+0x50>)
 800268c:	2200      	movs	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
  hqspi1.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <MX_QUADSPI1_Init+0x50>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  hqspi1.Init.FlashID = QSPI_FLASH_ID_1;
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <MX_QUADSPI1_Init+0x50>)
 8002698:	2200      	movs	r2, #0
 800269a:	61da      	str	r2, [r3, #28]
  hqspi1.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <MX_QUADSPI1_Init+0x50>)
 800269e:	2200      	movs	r2, #0
 80026a0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi1) != HAL_OK)
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <MX_QUADSPI1_Init+0x50>)
 80026a4:	f007 ff2a 	bl	800a4fc <HAL_QSPI_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_QUADSPI1_Init+0x4a>
  {
    Error_Handler();
 80026ae:	f7ff ffba 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI1_Init 2 */

  /* USER CODE END QUADSPI1_Init 2 */

}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000bf0 	.word	0x20000bf0
 80026bc:	a0001000 	.word	0xa0001000

080026c0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b0a0      	sub	sp, #128	; 0x80
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026d8:	f107 0318 	add.w	r3, r7, #24
 80026dc:	2254      	movs	r2, #84	; 0x54
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f019 f835 	bl	801b750 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a3c      	ldr	r2, [pc, #240]	; (80027dc <HAL_QSPI_MspInit+0x11c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d170      	bne.n	80027d2 <HAL_QSPI_MspInit+0x112>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80026f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.QspiClockSelection = RCC_QSPICLKSOURCE_SYSCLK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	667b      	str	r3, [r7, #100]	; 0x64

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026fa:	f107 0318 	add.w	r3, r7, #24
 80026fe:	4618      	mov	r0, r3
 8002700:	f008 ff42 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_QSPI_MspInit+0x4e>
    {
      Error_Handler();
 800270a:	f7ff ff8c 	bl	8002626 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800270e:	4b34      	ldr	r3, [pc, #208]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 8002710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002712:	4a33      	ldr	r2, [pc, #204]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	6513      	str	r3, [r2, #80]	; 0x50
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 800271c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272a:	4a2d      	ldr	r2, [pc, #180]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002732:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002742:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274a:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002756:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	4a21      	ldr	r2, [pc, #132]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 800275c:	f043 0320 	orr.w	r3, r3, #32
 8002760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002762:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <HAL_QSPI_MspInit+0x120>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> QUADSPI1_BK1_IO0
    PB10     ------> QUADSPI1_CLK
    PB11     ------> QUADSPI1_BK1_NCS
    PF6     ------> QUADSPI1_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277a:	2300      	movs	r3, #0
 800277c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800277e:	230a      	movs	r3, #10
 8002780:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002786:	4619      	mov	r1, r3
 8002788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800278c:	f005 fc50 	bl	8008030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8002790:	f640 4303 	movw	r3, #3075	; 0xc03
 8002794:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80027a2:	230a      	movs	r3, #10
 80027a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027aa:	4619      	mov	r1, r3
 80027ac:	480d      	ldr	r0, [pc, #52]	; (80027e4 <HAL_QSPI_MspInit+0x124>)
 80027ae:	f005 fc3f 	bl	8008030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027b2:	2340      	movs	r3, #64	; 0x40
 80027b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80027c2:	230a      	movs	r3, #10
 80027c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80027ca:	4619      	mov	r1, r3
 80027cc:	4806      	ldr	r0, [pc, #24]	; (80027e8 <HAL_QSPI_MspInit+0x128>)
 80027ce:	f005 fc2f 	bl	8008030 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80027d2:	bf00      	nop
 80027d4:	3780      	adds	r7, #128	; 0x80
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	a0001000 	.word	0xa0001000
 80027e0:	40021000 	.word	0x40021000
 80027e4:	48000400 	.word	0x48000400
 80027e8:	48001400 	.word	0x48001400

080027ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <MX_SPI1_Init+0x74>)
 80027f2:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <MX_SPI1_Init+0x78>)
 80027f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_SPI1_Init+0x74>)
 80027f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_SPI1_Init+0x74>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002804:	4b16      	ldr	r3, [pc, #88]	; (8002860 <MX_SPI1_Init+0x74>)
 8002806:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800280a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800280c:	4b14      	ldr	r3, [pc, #80]	; (8002860 <MX_SPI1_Init+0x74>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <MX_SPI1_Init+0x74>)
 8002814:	2200      	movs	r2, #0
 8002816:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <MX_SPI1_Init+0x74>)
 800281a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002820:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <MX_SPI1_Init+0x74>)
 8002822:	2228      	movs	r2, #40	; 0x28
 8002824:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <MX_SPI1_Init+0x74>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800282c:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <MX_SPI1_Init+0x74>)
 800282e:	2200      	movs	r2, #0
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <MX_SPI1_Init+0x74>)
 8002834:	2200      	movs	r2, #0
 8002836:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <MX_SPI1_Init+0x74>)
 800283a:	2207      	movs	r2, #7
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <MX_SPI1_Init+0x74>)
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <MX_SPI1_Init+0x74>)
 8002846:	2200      	movs	r2, #0
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800284a:	4805      	ldr	r0, [pc, #20]	; (8002860 <MX_SPI1_Init+0x74>)
 800284c:	f009 fb02 	bl	800be54 <HAL_SPI_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002856:	f7ff fee6 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000c3c 	.word	0x20000c3c
 8002864:	40013000 	.word	0x40013000

08002868 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_SPI_MspInit+0x7c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d127      	bne.n	80028da <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_SPI_MspInit+0x80>)
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_SPI_MspInit+0x80>)
 8002890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002894:	6613      	str	r3, [r2, #96]	; 0x60
 8002896:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_SPI_MspInit+0x80>)
 8002898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_SPI_MspInit+0x80>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	4a10      	ldr	r2, [pc, #64]	; (80028e8 <HAL_SPI_MspInit+0x80>)
 80028a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_SPI_MspInit+0x80>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80028ba:	231c      	movs	r3, #28
 80028bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ca:	2305      	movs	r3, #5
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <HAL_SPI_MspInit+0x84>)
 80028d6:	f005 fbab 	bl	8008030 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028da:	bf00      	nop
 80028dc:	3728      	adds	r7, #40	; 0x28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40013000 	.word	0x40013000
 80028e8:	40021000 	.word	0x40021000
 80028ec:	48001800 	.word	0x48001800

080028f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_MspInit+0x44>)
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	4a0e      	ldr	r2, [pc, #56]	; (8002934 <HAL_MspInit+0x44>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6613      	str	r3, [r2, #96]	; 0x60
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <HAL_MspInit+0x44>)
 8002904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <HAL_MspInit+0x44>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	4a08      	ldr	r2, [pc, #32]	; (8002934 <HAL_MspInit+0x44>)
 8002914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002918:	6593      	str	r3, [r2, #88]	; 0x58
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_MspInit+0x44>)
 800291c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002926:	f007 fdd9 	bl	800a4dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40021000 	.word	0x40021000

08002938 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d101      	bne.n	8002952 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40010400 	.word	0x40010400

08002964 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800296c:	4a04      	ldr	r2, [pc, #16]	; (8002980 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6153      	str	r3, [r2, #20]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40010400 	.word	0x40010400

08002984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <NMI_Handler+0x4>

0800298a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800298e:	e7fe      	b.n	800298e <HardFault_Handler+0x4>

08002990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <MemManage_Handler+0x4>

08002996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800299a:	e7fe      	b.n	800299a <BusFault_Handler+0x4>

0800299c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <UsageFault_Handler+0x4>

080029a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029d0:	f001 fc1a 	bl	8004208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <USB_LP_IRQHandler+0x10>)
 80029fa:	f006 f88f 	bl	8008b1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200052e8 	.word	0x200052e8

08002a08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8002a0c:	2040      	movs	r0, #64	; 0x40
 8002a0e:	f7ff ff93 	bl	8002938 <LL_EXTI_IsActiveFlag_0_31>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8002a18:	2040      	movs	r0, #64	; 0x40
 8002a1a:	f7ff ffa3 	bl	8002964 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8002a26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a2a:	f7ff ff85 	bl	8002938 <LL_EXTI_IsActiveFlag_0_31>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8002a34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a38:	f7ff ff94 	bl	8002964 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <TIM6_DAC_IRQHandler+0x10>)
 8002a46:	f004 fc1d 	bl	8007284 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000a70 	.word	0x20000a70

08002a54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
	return 1;
 8002a58:	2301      	movs	r3, #1
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_kill>:

int _kill(int pid, int sig)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a6e:	f018 fe3d 	bl	801b6ec <__errno>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2216      	movs	r2, #22
 8002a76:	601a      	str	r2, [r3, #0]
	return -1;
 8002a78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <_exit>:

void _exit (int status)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff ffe7 	bl	8002a64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a96:	e7fe      	b.n	8002a96 <_exit+0x12>

08002a98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	e00a      	b.n	8002ac0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aaa:	f3af 8000 	nop.w
 8002aae:	4601      	mov	r1, r0
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	60ba      	str	r2, [r7, #8]
 8002ab6:	b2ca      	uxtb	r2, r1
 8002ab8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3301      	adds	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	dbf0      	blt.n	8002aaa <_read+0x12>
	}

return len;
 8002ac8:	687b      	ldr	r3, [r7, #4]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	e009      	b.n	8002af8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	60ba      	str	r2, [r7, #8]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dbf1      	blt.n	8002ae4 <_write+0x12>
	}
	return len;
 8002b00:	687b      	ldr	r3, [r7, #4]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_close>:

int _close(int file)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
	return -1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b32:	605a      	str	r2, [r3, #4]
	return 0;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <_isatty>:

int _isatty(int file)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
	return 1;
 8002b4a:	2301      	movs	r3, #1
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
	return 0;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b7c:	4a14      	ldr	r2, [pc, #80]	; (8002bd0 <_sbrk+0x5c>)
 8002b7e:	4b15      	ldr	r3, [pc, #84]	; (8002bd4 <_sbrk+0x60>)
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <_sbrk+0x64>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <_sbrk+0x64>)
 8002b92:	4a12      	ldr	r2, [pc, #72]	; (8002bdc <_sbrk+0x68>)
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <_sbrk+0x64>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d207      	bcs.n	8002bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba4:	f018 fda2 	bl	801b6ec <__errno>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	220c      	movs	r2, #12
 8002bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bae:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb2:	e009      	b.n	8002bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <_sbrk+0x64>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bba:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <_sbrk+0x64>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	4a05      	ldr	r2, [pc, #20]	; (8002bd8 <_sbrk+0x64>)
 8002bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	20020000 	.word	0x20020000
 8002bd4:	00000400 	.word	0x00000400
 8002bd8:	20000ca0 	.word	0x20000ca0
 8002bdc:	20005810 	.word	0x20005810

08002be0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <SystemInit+0x20>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <SystemInit+0x20>)
 8002bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_GetPriorityGrouping>:
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <__NVIC_GetPriorityGrouping+0x18>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	f003 0307 	and.w	r3, r3, #7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_EnableIRQ>:
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db0b      	blt.n	8002c4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4907      	ldr	r1, [pc, #28]	; (8002c58 <__NVIC_EnableIRQ+0x38>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2001      	movs	r0, #1
 8002c42:	fa00 f202 	lsl.w	r2, r0, r2
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <__NVIC_SetPriority>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0a      	blt.n	8002c86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	; (8002ca8 <__NVIC_SetPriority+0x4c>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c84:	e00a      	b.n	8002c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4908      	ldr	r1, [pc, #32]	; (8002cac <__NVIC_SetPriority+0x50>)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3b04      	subs	r3, #4
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	440b      	add	r3, r1
 8002c9a:	761a      	strb	r2, [r3, #24]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <NVIC_EncodePriority>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	; 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f1c3 0307 	rsb	r3, r3, #7
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	bf28      	it	cs
 8002cce:	2304      	movcs	r3, #4
 8002cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d902      	bls.n	8002ce0 <NVIC_EncodePriority+0x30>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	e000      	b.n	8002ce2 <NVIC_EncodePriority+0x32>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	4313      	orrs	r3, r2
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	; 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	601a      	str	r2, [r3, #0]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	605a      	str	r2, [r3, #4]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d8c:	4907      	ldr	r1, [pc, #28]	; (8002dac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002d96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40021000 	.word	0x40021000

08002db0 <MX_TIM5_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim20;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08e      	sub	sp, #56	; 0x38
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc4:	f107 031c 	add.w	r3, r7, #28
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd0:	463b      	mov	r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	611a      	str	r2, [r3, #16]
 8002dde:	615a      	str	r2, [r3, #20]
 8002de0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002de2:	4b3b      	ldr	r3, [pc, #236]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002de4:	4a3b      	ldr	r2, [pc, #236]	; (8002ed4 <MX_TIM5_Init+0x124>)
 8002de6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10;
 8002de8:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002dea:	220a      	movs	r2, #10
 8002dec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002df6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dfa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e02:	4b33      	ldr	r3, [pc, #204]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002e04:	2280      	movs	r2, #128	; 0x80
 8002e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e08:	4831      	ldr	r0, [pc, #196]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002e0a:	f009 ff69 	bl	800cce0 <HAL_TIM_Base_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002e14:	f7ff fc07 	bl	8002626 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e22:	4619      	mov	r1, r3
 8002e24:	482a      	ldr	r0, [pc, #168]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002e26:	f00a fba9 	bl	800d57c <HAL_TIM_ConfigClockSource>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002e30:	f7ff fbf9 	bl	8002626 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002e34:	4826      	ldr	r0, [pc, #152]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002e36:	f00a f83d 	bl	800ceb4 <HAL_TIM_PWM_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002e40:	f7ff fbf1 	bl	8002626 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	4619      	mov	r1, r3
 8002e52:	481f      	ldr	r0, [pc, #124]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002e54:	f00b ff74 	bl	800ed40 <HAL_TIMEx_MasterConfigSynchronization>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002e5e:	f7ff fbe2 	bl	8002626 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e62:	2360      	movs	r3, #96	; 0x60
 8002e64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 8002e66:	23c8      	movs	r3, #200	; 0xc8
 8002e68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e72:	463b      	mov	r3, r7
 8002e74:	2204      	movs	r2, #4
 8002e76:	4619      	mov	r1, r3
 8002e78:	4815      	ldr	r0, [pc, #84]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002e7a:	f00a f90f 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002e84:	f7ff fbcf 	bl	8002626 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8002e88:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002e8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e8e:	463b      	mov	r3, r7
 8002e90:	2208      	movs	r2, #8
 8002e92:	4619      	mov	r1, r3
 8002e94:	480e      	ldr	r0, [pc, #56]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002e96:	f00a f901 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM5_Init+0xf4>
  {
    Error_Handler();
 8002ea0:	f7ff fbc1 	bl	8002626 <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 8002ea4:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002eaa:	463b      	mov	r3, r7
 8002eac:	220c      	movs	r2, #12
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002eb2:	f00a f8f3 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8002ebc:	f7ff fbb3 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002ec0:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <MX_TIM5_Init+0x120>)
 8002ec2:	f000 faff 	bl	80034c4 <HAL_TIM_MspPostInit>

}
 8002ec6:	bf00      	nop
 8002ec8:	3738      	adds	r7, #56	; 0x38
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000ca4 	.word	0x20000ca4
 8002ed4:	40000c00 	.word	0x40000c00

08002ed8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM6);
 8002eec:	2010      	movs	r0, #16
 8002eee:	f7ff ff47 	bl	8002d80 <LL_APB1_GRP1_EnableClock>

  /* TIM6 interrupt Init */
  NVIC_SetPriority(TIM6_DAC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002ef2:	f7ff fe87 	bl	8002c04 <__NVIC_GetPriorityGrouping>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2200      	movs	r2, #0
 8002efa:	210f      	movs	r1, #15
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fed7 	bl	8002cb0 <NVIC_EncodePriority>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4619      	mov	r1, r3
 8002f06:	2036      	movs	r0, #54	; 0x36
 8002f08:	f7ff fea8 	bl	8002c5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f0c:	2036      	movs	r0, #54	; 0x36
 8002f0e:	f7ff fe87 	bl	8002c20 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  TIM_InitStruct.Prescaler = 170;
 8002f12:	23aa      	movs	r3, #170	; 0xaa
 8002f14:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 49999;
 8002f1a:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8002f1e:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	4619      	mov	r1, r3
 8002f24:	4808      	ldr	r0, [pc, #32]	; (8002f48 <MX_TIM6_Init+0x70>)
 8002f26:	f00e fe39 	bl	8011b9c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM6);
 8002f2a:	4807      	ldr	r0, [pc, #28]	; (8002f48 <MX_TIM6_Init+0x70>)
 8002f2c:	f7ff fef3 	bl	8002d16 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM6, LL_TIM_TRGO_RESET);
 8002f30:	2100      	movs	r1, #0
 8002f32:	4805      	ldr	r0, [pc, #20]	; (8002f48 <MX_TIM6_Init+0x70>)
 8002f34:	f7ff feff 	bl	8002d36 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM6);
 8002f38:	4803      	ldr	r0, [pc, #12]	; (8002f48 <MX_TIM6_Init+0x70>)
 8002f3a:	f7ff ff11 	bl	8002d60 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40001000 	.word	0x40001000

08002f4c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b09c      	sub	sp, #112	; 0x70
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
 8002f7c:	615a      	str	r2, [r3, #20]
 8002f7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	2234      	movs	r2, #52	; 0x34
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f018 fbe2 	bl	801b750 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002f8c:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8002f8e:	4a5d      	ldr	r2, [pc, #372]	; (8003104 <MX_TIM8_Init+0x1b8>)
 8002f90:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002f92:	4b5b      	ldr	r3, [pc, #364]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f98:	4b59      	ldr	r3, [pc, #356]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002f9e:	4b58      	ldr	r3, [pc, #352]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8002fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fa4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa6:	4b56      	ldr	r3, [pc, #344]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002fac:	4b54      	ldr	r3, [pc, #336]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb2:	4b53      	ldr	r3, [pc, #332]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002fb8:	4851      	ldr	r0, [pc, #324]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8002fba:	f009 fe91 	bl	800cce0 <HAL_TIM_Base_Init>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002fc4:	f7ff fb2f 	bl	8002626 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fcc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002fce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	484a      	ldr	r0, [pc, #296]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8002fd6:	f00a fad1 	bl	800d57c <HAL_TIM_ConfigClockSource>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002fe0:	f7ff fb21 	bl	8002626 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002fe4:	4846      	ldr	r0, [pc, #280]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8002fe6:	f009 ff65 	bl	800ceb4 <HAL_TIM_PWM_Init>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002ff0:	f7ff fb19 	bl	8002626 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003000:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003004:	4619      	mov	r1, r3
 8003006:	483e      	ldr	r0, [pc, #248]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8003008:	f00b fe9a 	bl	800ed40 <HAL_TIMEx_MasterConfigSynchronization>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003012:	f7ff fb08 	bl	8002626 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003016:	2360      	movs	r3, #96	; 0x60
 8003018:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 1000;
 800301a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003020:	2300      	movs	r3, #0
 8003022:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003024:	2300      	movs	r3, #0
 8003026:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800302c:	2300      	movs	r3, #0
 800302e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003030:	2300      	movs	r3, #0
 8003032:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003034:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003038:	2200      	movs	r2, #0
 800303a:	4619      	mov	r1, r3
 800303c:	4830      	ldr	r0, [pc, #192]	; (8003100 <MX_TIM8_Init+0x1b4>)
 800303e:	f00a f82d 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8003048:	f7ff faed 	bl	8002626 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 800304c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003050:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003052:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003056:	2204      	movs	r2, #4
 8003058:	4619      	mov	r1, r3
 800305a:	4829      	ldr	r0, [pc, #164]	; (8003100 <MX_TIM8_Init+0x1b4>)
 800305c:	f00a f81e 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8003066:	f7ff fade 	bl	8002626 <Error_Handler>
  }
  sConfigOC.Pulse = 4000;
 800306a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800306e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003070:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003074:	2208      	movs	r2, #8
 8003076:	4619      	mov	r1, r3
 8003078:	4821      	ldr	r0, [pc, #132]	; (8003100 <MX_TIM8_Init+0x1b4>)
 800307a:	f00a f80f 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8003084:	f7ff facf 	bl	8002626 <Error_Handler>
  }
  sConfigOC.Pulse = 8000;
 8003088:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800308c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800308e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003092:	220c      	movs	r2, #12
 8003094:	4619      	mov	r1, r3
 8003096:	481a      	ldr	r0, [pc, #104]	; (8003100 <MX_TIM8_Init+0x1b4>)
 8003098:	f00a f800 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 80030a2:	f7ff fac0 	bl	8002626 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80030d6:	2300      	movs	r3, #0
 80030d8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030da:	2300      	movs	r3, #0
 80030dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4807      	ldr	r0, [pc, #28]	; (8003100 <MX_TIM8_Init+0x1b4>)
 80030e4:	f00b ff9c 	bl	800f020 <HAL_TIMEx_ConfigBreakDeadTime>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM8_Init+0x1a6>
  {
    Error_Handler();
 80030ee:	f7ff fa9a 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80030f2:	4803      	ldr	r0, [pc, #12]	; (8003100 <MX_TIM8_Init+0x1b4>)
 80030f4:	f000 f9e6 	bl	80034c4 <HAL_TIM_MspPostInit>

}
 80030f8:	bf00      	nop
 80030fa:	3770      	adds	r7, #112	; 0x70
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000cf0 	.word	0x20000cf0
 8003104:	40013400 	.word	0x40013400

08003108 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b09c      	sub	sp, #112	; 0x70
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800310e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800311c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003128:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
 8003138:	615a      	str	r2, [r3, #20]
 800313a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	2234      	movs	r2, #52	; 0x34
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f018 fb04 	bl	801b750 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003148:	4b3f      	ldr	r3, [pc, #252]	; (8003248 <MX_TIM15_Init+0x140>)
 800314a:	4a40      	ldr	r2, [pc, #256]	; (800324c <MX_TIM15_Init+0x144>)
 800314c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800314e:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <MX_TIM15_Init+0x140>)
 8003150:	2200      	movs	r2, #0
 8003152:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003154:	4b3c      	ldr	r3, [pc, #240]	; (8003248 <MX_TIM15_Init+0x140>)
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 32768;
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <MX_TIM15_Init+0x140>)
 800315c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003160:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <MX_TIM15_Init+0x140>)
 8003164:	2200      	movs	r2, #0
 8003166:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003168:	4b37      	ldr	r3, [pc, #220]	; (8003248 <MX_TIM15_Init+0x140>)
 800316a:	2200      	movs	r2, #0
 800316c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800316e:	4b36      	ldr	r3, [pc, #216]	; (8003248 <MX_TIM15_Init+0x140>)
 8003170:	2200      	movs	r2, #0
 8003172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003174:	4834      	ldr	r0, [pc, #208]	; (8003248 <MX_TIM15_Init+0x140>)
 8003176:	f009 fdb3 	bl	800cce0 <HAL_TIM_Base_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003180:	f7ff fa51 	bl	8002626 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003188:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800318a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800318e:	4619      	mov	r1, r3
 8003190:	482d      	ldr	r0, [pc, #180]	; (8003248 <MX_TIM15_Init+0x140>)
 8003192:	f00a f9f3 	bl	800d57c <HAL_TIM_ConfigClockSource>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800319c:	f7ff fa43 	bl	8002626 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80031a0:	4829      	ldr	r0, [pc, #164]	; (8003248 <MX_TIM15_Init+0x140>)
 80031a2:	f009 fe87 	bl	800ceb4 <HAL_TIM_PWM_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80031ac:	f7ff fa3b 	bl	8002626 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031b0:	2300      	movs	r3, #0
 80031b2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80031b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031bc:	4619      	mov	r1, r3
 80031be:	4822      	ldr	r0, [pc, #136]	; (8003248 <MX_TIM15_Init+0x140>)
 80031c0:	f00b fdbe 	bl	800ed40 <HAL_TIMEx_MasterConfigSynchronization>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80031ca:	f7ff fa2c 	bl	8002626 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ce:	2360      	movs	r3, #96	; 0x60
 80031d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 16000;
 80031d2:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031d8:	2300      	movs	r3, #0
 80031da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031dc:	2300      	movs	r3, #0
 80031de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031e8:	2300      	movs	r3, #0
 80031ea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031f0:	2204      	movs	r2, #4
 80031f2:	4619      	mov	r1, r3
 80031f4:	4814      	ldr	r0, [pc, #80]	; (8003248 <MX_TIM15_Init+0x140>)
 80031f6:	f009 ff51 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8003200:	f7ff fa11 	bl	8002626 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003204:	2300      	movs	r3, #0
 8003206:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003208:	2300      	movs	r3, #0
 800320a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800321c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003222:	2300      	movs	r3, #0
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4807      	ldr	r0, [pc, #28]	; (8003248 <MX_TIM15_Init+0x140>)
 800322c:	f00b fef8 	bl	800f020 <HAL_TIMEx_ConfigBreakDeadTime>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8003236:	f7ff f9f6 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800323a:	4803      	ldr	r0, [pc, #12]	; (8003248 <MX_TIM15_Init+0x140>)
 800323c:	f000 f942 	bl	80034c4 <HAL_TIM_MspPostInit>

}
 8003240:	bf00      	nop
 8003242:	3770      	adds	r7, #112	; 0x70
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000d3c 	.word	0x20000d3c
 800324c:	40014000 	.word	0x40014000

08003250 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b09c      	sub	sp, #112	; 0x70
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003256:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	609a      	str	r2, [r3, #8]
 8003262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003264:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003270:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]
 8003280:	615a      	str	r2, [r3, #20]
 8003282:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	2234      	movs	r2, #52	; 0x34
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f018 fa60 	bl	801b750 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8003290:	4b5c      	ldr	r3, [pc, #368]	; (8003404 <MX_TIM20_Init+0x1b4>)
 8003292:	4a5d      	ldr	r2, [pc, #372]	; (8003408 <MX_TIM20_Init+0x1b8>)
 8003294:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8003296:	4b5b      	ldr	r3, [pc, #364]	; (8003404 <MX_TIM20_Init+0x1b4>)
 8003298:	2200      	movs	r2, #0
 800329a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329c:	4b59      	ldr	r3, [pc, #356]	; (8003404 <MX_TIM20_Init+0x1b4>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 16000;
 80032a2:	4b58      	ldr	r3, [pc, #352]	; (8003404 <MX_TIM20_Init+0x1b4>)
 80032a4:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80032a8:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032aa:	4b56      	ldr	r3, [pc, #344]	; (8003404 <MX_TIM20_Init+0x1b4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80032b0:	4b54      	ldr	r3, [pc, #336]	; (8003404 <MX_TIM20_Init+0x1b4>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b6:	4b53      	ldr	r3, [pc, #332]	; (8003404 <MX_TIM20_Init+0x1b4>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80032bc:	4851      	ldr	r0, [pc, #324]	; (8003404 <MX_TIM20_Init+0x1b4>)
 80032be:	f009 fd0f 	bl	800cce0 <HAL_TIM_Base_Init>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 80032c8:	f7ff f9ad 	bl	8002626 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80032d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80032d6:	4619      	mov	r1, r3
 80032d8:	484a      	ldr	r0, [pc, #296]	; (8003404 <MX_TIM20_Init+0x1b4>)
 80032da:	f00a f94f 	bl	800d57c <HAL_TIM_ConfigClockSource>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80032e4:	f7ff f99f 	bl	8002626 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80032e8:	4846      	ldr	r0, [pc, #280]	; (8003404 <MX_TIM20_Init+0x1b4>)
 80032ea:	f009 fde3 	bl	800ceb4 <HAL_TIM_PWM_Init>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 80032f4:	f7ff f997 	bl	8002626 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032f8:	2300      	movs	r3, #0
 80032fa:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032fc:	2300      	movs	r3, #0
 80032fe:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003300:	2300      	movs	r3, #0
 8003302:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8003304:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003308:	4619      	mov	r1, r3
 800330a:	483e      	ldr	r0, [pc, #248]	; (8003404 <MX_TIM20_Init+0x1b4>)
 800330c:	f00b fd18 	bl	800ed40 <HAL_TIMEx_MasterConfigSynchronization>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8003316:	f7ff f986 	bl	8002626 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800331a:	2360      	movs	r3, #96	; 0x60
 800331c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 8000;
 800331e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003324:	2300      	movs	r3, #0
 8003326:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003328:	2300      	movs	r3, #0
 800332a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003330:	2300      	movs	r3, #0
 8003332:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800333c:	2200      	movs	r2, #0
 800333e:	4619      	mov	r1, r3
 8003340:	4830      	ldr	r0, [pc, #192]	; (8003404 <MX_TIM20_Init+0x1b4>)
 8003342:	f009 feab 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <MX_TIM20_Init+0x100>
  {
    Error_Handler();
 800334c:	f7ff f96b 	bl	8002626 <Error_Handler>
  }
  sConfigOC.Pulse = 10000;
 8003350:	f242 7310 	movw	r3, #10000	; 0x2710
 8003354:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003356:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800335a:	2204      	movs	r2, #4
 800335c:	4619      	mov	r1, r3
 800335e:	4829      	ldr	r0, [pc, #164]	; (8003404 <MX_TIM20_Init+0x1b4>)
 8003360:	f009 fe9c 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM20_Init+0x11e>
  {
    Error_Handler();
 800336a:	f7ff f95c 	bl	8002626 <Error_Handler>
  }
  sConfigOC.Pulse = 12000;
 800336e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003374:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003378:	2208      	movs	r2, #8
 800337a:	4619      	mov	r1, r3
 800337c:	4821      	ldr	r0, [pc, #132]	; (8003404 <MX_TIM20_Init+0x1b4>)
 800337e:	f009 fe8d 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM20_Init+0x13c>
  {
    Error_Handler();
 8003388:	f7ff f94d 	bl	8002626 <Error_Handler>
  }
  sConfigOC.Pulse = 15000;
 800338c:	f643 2398 	movw	r3, #15000	; 0x3a98
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003392:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003396:	220c      	movs	r2, #12
 8003398:	4619      	mov	r1, r3
 800339a:	481a      	ldr	r0, [pc, #104]	; (8003404 <MX_TIM20_Init+0x1b4>)
 800339c:	f009 fe7e 	bl	800d09c <HAL_TIM_PWM_ConfigChannel>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_TIM20_Init+0x15a>
  {
    Error_Handler();
 80033a6:	f7ff f93e 	bl	8002626 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80033c8:	2300      	movs	r3, #0
 80033ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80033d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80033da:	2300      	movs	r3, #0
 80033dc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033de:	2300      	movs	r3, #0
 80033e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	4807      	ldr	r0, [pc, #28]	; (8003404 <MX_TIM20_Init+0x1b4>)
 80033e8:	f00b fe1a 	bl	800f020 <HAL_TIMEx_ConfigBreakDeadTime>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_TIM20_Init+0x1a6>
  {
    Error_Handler();
 80033f2:	f7ff f918 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80033f6:	4803      	ldr	r0, [pc, #12]	; (8003404 <MX_TIM20_Init+0x1b4>)
 80033f8:	f000 f864 	bl	80034c4 <HAL_TIM_MspPostInit>

}
 80033fc:	bf00      	nop
 80033fe:	3770      	adds	r7, #112	; 0x70
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20000d88 	.word	0x20000d88
 8003408:	40015000 	.word	0x40015000

0800340c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <HAL_TIM_Base_MspInit+0xa4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10c      	bne.n	8003438 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800341e:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003422:	4a24      	ldr	r2, [pc, #144]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 8003424:	f043 0308 	orr.w	r3, r3, #8
 8003428:	6593      	str	r3, [r2, #88]	; 0x58
 800342a:	4b22      	ldr	r3, [pc, #136]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8003436:	e034      	b.n	80034a2 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1e      	ldr	r2, [pc, #120]	; (80034b8 <HAL_TIM_Base_MspInit+0xac>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10c      	bne.n	800345c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003442:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	4a1b      	ldr	r2, [pc, #108]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 8003448:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800344c:	6613      	str	r3, [r2, #96]	; 0x60
 800344e:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 8003450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]
}
 800345a:	e022      	b.n	80034a2 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM15)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_TIM_Base_MspInit+0xb0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10c      	bne.n	8003480 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003466:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 8003468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346a:	4a12      	ldr	r2, [pc, #72]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6613      	str	r3, [r2, #96]	; 0x60
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]
}
 800347e:	e010      	b.n	80034a2 <HAL_TIM_Base_MspInit+0x96>
  else if(tim_baseHandle->Instance==TIM20)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <HAL_TIM_Base_MspInit+0xb4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10b      	bne.n	80034a2 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 800348c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348e:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 8003490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003494:	6613      	str	r3, [r2, #96]	; 0x60
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <HAL_TIM_Base_MspInit+0xa8>)
 8003498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	68bb      	ldr	r3, [r7, #8]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40000c00 	.word	0x40000c00
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40013400 	.word	0x40013400
 80034bc:	40014000 	.word	0x40014000
 80034c0:	40015000 	.word	0x40015000

080034c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08c      	sub	sp, #48	; 0x30
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a46      	ldr	r2, [pc, #280]	; (80035fc <HAL_TIM_MspPostInit+0x138>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d11d      	bne.n	8003522 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034e6:	4b46      	ldr	r3, [pc, #280]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	4a45      	ldr	r2, [pc, #276]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 80034ec:	f043 0320 	orr.w	r3, r3, #32
 80034f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034f2:	4b43      	ldr	r3, [pc, #268]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PF7     ------> TIM5_CH2
    PF8     ------> TIM5_CH3
    PF9     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80034fe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350c:	2300      	movs	r3, #0
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 8003510:	2306      	movs	r3, #6
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003514:	f107 031c 	add.w	r3, r7, #28
 8003518:	4619      	mov	r1, r3
 800351a:	483a      	ldr	r0, [pc, #232]	; (8003604 <HAL_TIM_MspPostInit+0x140>)
 800351c:	f004 fd88 	bl	8008030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8003520:	e067      	b.n	80035f2 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a38      	ldr	r2, [pc, #224]	; (8003608 <HAL_TIM_MspPostInit+0x144>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d11d      	bne.n	8003568 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800352c:	4b34      	ldr	r3, [pc, #208]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 800352e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003530:	4a33      	ldr	r2, [pc, #204]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 8003532:	f043 0304 	orr.w	r3, r3, #4
 8003536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003538:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 800353a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003544:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354a:	2302      	movs	r3, #2
 800354c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003552:	2300      	movs	r3, #0
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003556:	2304      	movs	r3, #4
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355a:	f107 031c 	add.w	r3, r7, #28
 800355e:	4619      	mov	r1, r3
 8003560:	482a      	ldr	r0, [pc, #168]	; (800360c <HAL_TIM_MspPostInit+0x148>)
 8003562:	f004 fd65 	bl	8008030 <HAL_GPIO_Init>
}
 8003566:	e044      	b.n	80035f2 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM15)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a28      	ldr	r2, [pc, #160]	; (8003610 <HAL_TIM_MspPostInit+0x14c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d11d      	bne.n	80035ae <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003572:	4b23      	ldr	r3, [pc, #140]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 8003574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003576:	4a22      	ldr	r2, [pc, #136]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 8003578:	f043 0320 	orr.w	r3, r3, #32
 800357c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800358a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800358e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003590:	2302      	movs	r3, #2
 8003592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003598:	2300      	movs	r3, #0
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 800359c:	2303      	movs	r3, #3
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035a0:	f107 031c 	add.w	r3, r7, #28
 80035a4:	4619      	mov	r1, r3
 80035a6:	4817      	ldr	r0, [pc, #92]	; (8003604 <HAL_TIM_MspPostInit+0x140>)
 80035a8:	f004 fd42 	bl	8008030 <HAL_GPIO_Init>
}
 80035ac:	e021      	b.n	80035f2 <HAL_TIM_MspPostInit+0x12e>
  else if(timHandle->Instance==TIM20)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a18      	ldr	r2, [pc, #96]	; (8003614 <HAL_TIM_MspPostInit+0x150>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d11c      	bne.n	80035f2 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 80035ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035bc:	4a10      	ldr	r2, [pc, #64]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 80035be:	f043 0320 	orr.w	r3, r3, #32
 80035c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035c4:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_TIM_MspPostInit+0x13c>)
 80035c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80035d0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80035d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035de:	2300      	movs	r3, #0
 80035e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM20;
 80035e2:	2302      	movs	r3, #2
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035e6:	f107 031c 	add.w	r3, r7, #28
 80035ea:	4619      	mov	r1, r3
 80035ec:	4805      	ldr	r0, [pc, #20]	; (8003604 <HAL_TIM_MspPostInit+0x140>)
 80035ee:	f004 fd1f 	bl	8008030 <HAL_GPIO_Init>
}
 80035f2:	bf00      	nop
 80035f4:	3730      	adds	r7, #48	; 0x30
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40021000 	.word	0x40021000
 8003604:	48001400 	.word	0x48001400
 8003608:	40013400 	.word	0x40013400
 800360c:	48000800 	.word	0x48000800
 8003610:	40014000 	.word	0x40014000
 8003614:	40015000 	.word	0x40015000

08003618 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	601a      	str	r2, [r3, #0]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	601a      	str	r2, [r3, #0]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	; 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3308      	adds	r3, #8
 8003666:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	e853 3f00 	ldrex	r3, [r3]
 800366e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	075b      	lsls	r3, r3, #29
 800367a:	4313      	orrs	r3, r2
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3308      	adds	r3, #8
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	61ba      	str	r2, [r7, #24]
 8003686:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6979      	ldr	r1, [r7, #20]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	613b      	str	r3, [r7, #16]
   return(result);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e4      	bne.n	8003662 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3724      	adds	r7, #36	; 0x24
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b089      	sub	sp, #36	; 0x24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3308      	adds	r3, #8
 80036b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	065b      	lsls	r3, r3, #25
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3308      	adds	r3, #8
 80036d0:	69fa      	ldr	r2, [r7, #28]
 80036d2:	61ba      	str	r2, [r7, #24]
 80036d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6979      	ldr	r1, [r7, #20]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	613b      	str	r3, [r7, #16]
   return(result);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e4      	bne.n	80036b0 <LL_USART_SetRXFIFOThreshold+0xa>
}
 80036e6:	bf00      	nop
 80036e8:	bf00      	nop
 80036ea:	3724      	adds	r7, #36	; 0x24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	609a      	str	r2, [r3, #8]
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003730:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003734:	d101      	bne.n	800373a <LL_USART_IsActiveFlag_TEACK+0x1a>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <LL_USART_IsActiveFlag_TEACK+0x1c>
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375c:	d101      	bne.n	8003762 <LL_USART_IsActiveFlag_REACK+0x1a>
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <LL_USART_IsActiveFlag_REACK+0x1c>
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <LL_AHB2_GRP1_EnableClock>:
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800377a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800377c:	4907      	ldr	r1, [pc, #28]	; (800379c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4313      	orrs	r3, r2
 8003782:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4013      	ands	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800378e:	68fb      	ldr	r3, [r7, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40021000 	.word	0x40021000

080037a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80037aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037ac:	4907      	ldr	r1, [pc, #28]	; (80037cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80037b4:	4b05      	ldr	r3, [pc, #20]	; (80037cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80037b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4013      	ands	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037be:	68fb      	ldr	r3, [r7, #12]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	40021000 	.word	0x40021000

080037d0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80037e0:	4a0e      	ldr	r2, [pc, #56]	; (800381c <LL_DMA_SetDataTransferDirection+0x4c>)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4413      	add	r3, r2
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	4413      	add	r3, r2
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f4:	f023 0310 	bic.w	r3, r3, #16
 80037f8:	4908      	ldr	r1, [pc, #32]	; (800381c <LL_DMA_SetDataTransferDirection+0x4c>)
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	440a      	add	r2, r1
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	4611      	mov	r1, r2
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	440a      	add	r2, r1
 8003806:	4611      	mov	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	0801d288 	.word	0x0801d288

08003820 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8003830:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <LL_DMA_SetMode+0x48>)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4413      	add	r3, r2
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	4413      	add	r3, r2
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 0220 	bic.w	r2, r3, #32
 8003844:	4908      	ldr	r1, [pc, #32]	; (8003868 <LL_DMA_SetMode+0x48>)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	440b      	add	r3, r1
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	4619      	mov	r1, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	440b      	add	r3, r1
 8003852:	4619      	mov	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]
             Mode);
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	0801d288 	.word	0x0801d288

0800386c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 800387c:	4a0d      	ldr	r2, [pc, #52]	; (80038b4 <LL_DMA_SetPeriphIncMode+0x48>)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4413      	add	r3, r2
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	4413      	add	r3, r2
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003890:	4908      	ldr	r1, [pc, #32]	; (80038b4 <LL_DMA_SetPeriphIncMode+0x48>)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	440b      	add	r3, r1
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	440b      	add	r3, r1
 800389e:	4619      	mov	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	0801d288 	.word	0x0801d288

080038b8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 80038c8:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <LL_DMA_SetMemoryIncMode+0x48>)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4413      	add	r3, r2
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4413      	add	r3, r2
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038dc:	4908      	ldr	r1, [pc, #32]	; (8003900 <LL_DMA_SetMemoryIncMode+0x48>)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	440b      	add	r3, r1
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4619      	mov	r1, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	440b      	add	r3, r1
 80038ea:	4619      	mov	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	0801d288 	.word	0x0801d288

08003904 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8003914:	4a0d      	ldr	r2, [pc, #52]	; (800394c <LL_DMA_SetPeriphSize+0x48>)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4413      	add	r3, r2
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	4413      	add	r3, r2
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003928:	4908      	ldr	r1, [pc, #32]	; (800394c <LL_DMA_SetPeriphSize+0x48>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	440b      	add	r3, r1
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	4619      	mov	r1, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	440b      	add	r3, r1
 8003936:	4619      	mov	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	0801d288 	.word	0x0801d288

08003950 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <LL_DMA_SetMemorySize+0x48>)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	4413      	add	r3, r2
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	4413      	add	r3, r2
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003974:	4908      	ldr	r1, [pc, #32]	; (8003998 <LL_DMA_SetMemorySize+0x48>)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	440b      	add	r3, r1
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	4619      	mov	r1, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	440b      	add	r3, r1
 8003982:	4619      	mov	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	0801d288 	.word	0x0801d288

0800399c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 80039ac:	4a0d      	ldr	r2, [pc, #52]	; (80039e4 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4413      	add	r3, r2
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	4413      	add	r3, r2
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039c0:	4908      	ldr	r1, [pc, #32]	; (80039e4 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	440b      	add	r3, r1
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	4619      	mov	r1, r3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	440b      	add	r3, r1
 80039ce:	4619      	mov	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
             Priority);
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	0801d288 	.word	0x0801d288

080039e8 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	0a9b      	lsrs	r3, r3, #10
 80039f8:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80039fc:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a10:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a26:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003a40:	4b22      	ldr	r3, [pc, #136]	; (8003acc <MX_UART4_Init+0x90>)
 8003a42:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <MX_UART4_Init+0x94>)
 8003a44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003a46:	4b21      	ldr	r3, [pc, #132]	; (8003acc <MX_UART4_Init+0x90>)
 8003a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003a4e:	4b1f      	ldr	r3, [pc, #124]	; (8003acc <MX_UART4_Init+0x90>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <MX_UART4_Init+0x90>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <MX_UART4_Init+0x90>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <MX_UART4_Init+0x90>)
 8003a62:	220c      	movs	r2, #12
 8003a64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <MX_UART4_Init+0x90>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a6c:	4b17      	ldr	r3, [pc, #92]	; (8003acc <MX_UART4_Init+0x90>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <MX_UART4_Init+0x90>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <MX_UART4_Init+0x90>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <MX_UART4_Init+0x90>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003a84:	4811      	ldr	r0, [pc, #68]	; (8003acc <MX_UART4_Init+0x90>)
 8003a86:	f00b fc5f 	bl	800f348 <HAL_UART_Init>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003a90:	f7fe fdc9 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a94:	2100      	movs	r1, #0
 8003a96:	480d      	ldr	r0, [pc, #52]	; (8003acc <MX_UART4_Init+0x90>)
 8003a98:	f00c fbbc 	bl	8010214 <HAL_UARTEx_SetTxFifoThreshold>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8003aa2:	f7fe fdc0 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4808      	ldr	r0, [pc, #32]	; (8003acc <MX_UART4_Init+0x90>)
 8003aaa:	f00c fc3f 	bl	801032c <HAL_UARTEx_SetRxFifoThreshold>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8003ab4:	f7fe fdb7 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003ab8:	4804      	ldr	r0, [pc, #16]	; (8003acc <MX_UART4_Init+0x90>)
 8003aba:	f00c fb43 	bl	8010144 <HAL_UARTEx_DisableFifoMode>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8003ac4:	f7fe fdaf 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003ac8:	bf00      	nop
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000dd4 	.word	0x20000dd4
 8003ad0:	40004c00 	.word	0x40004c00

08003ad4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003ad8:	4b22      	ldr	r3, [pc, #136]	; (8003b64 <MX_UART5_Init+0x90>)
 8003ada:	4a23      	ldr	r2, [pc, #140]	; (8003b68 <MX_UART5_Init+0x94>)
 8003adc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <MX_UART5_Init+0x90>)
 8003ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ae4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <MX_UART5_Init+0x90>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003aec:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <MX_UART5_Init+0x90>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003af2:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <MX_UART5_Init+0x90>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <MX_UART5_Init+0x90>)
 8003afa:	220c      	movs	r2, #12
 8003afc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afe:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <MX_UART5_Init+0x90>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <MX_UART5_Init+0x90>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b0a:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <MX_UART5_Init+0x90>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <MX_UART5_Init+0x90>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b16:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <MX_UART5_Init+0x90>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003b1c:	4811      	ldr	r0, [pc, #68]	; (8003b64 <MX_UART5_Init+0x90>)
 8003b1e:	f00b fc13 	bl	800f348 <HAL_UART_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8003b28:	f7fe fd7d 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	480d      	ldr	r0, [pc, #52]	; (8003b64 <MX_UART5_Init+0x90>)
 8003b30:	f00c fb70 	bl	8010214 <HAL_UARTEx_SetTxFifoThreshold>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8003b3a:	f7fe fd74 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4808      	ldr	r0, [pc, #32]	; (8003b64 <MX_UART5_Init+0x90>)
 8003b42:	f00c fbf3 	bl	801032c <HAL_UARTEx_SetRxFifoThreshold>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8003b4c:	f7fe fd6b 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8003b50:	4804      	ldr	r0, [pc, #16]	; (8003b64 <MX_UART5_Init+0x90>)
 8003b52:	f00c faf7 	bl	8010144 <HAL_UARTEx_DisableFifoMode>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8003b5c:	f7fe fd63 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000e64 	.word	0x20000e64
 8003b68:	40005000 	.word	0x40005000

08003b6c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b0a4      	sub	sp, #144	; 0x90
 8003b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003b72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b76:	2220      	movs	r2, #32
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f017 fde8 	bl	801b750 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
 8003b90:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b92:	1d3b      	adds	r3, r7, #4
 8003b94:	2254      	movs	r2, #84	; 0x54
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f017 fdd9 	bl	801b750 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ba6:	1d3b      	adds	r3, r7, #4
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f007 fced 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
 8003bb4:	f7fe fd37 	bl	8002626 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003bb8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003bbc:	f7ff fdf0 	bl	80037a0 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7ff fdd5 	bl	8003770 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOG);
 8003bc6:	2040      	movs	r0, #64	; 0x40
 8003bc8:	f7ff fdd2 	bl	8003770 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA10   ------> USART1_RX
  PG9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bd0:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003bde:	2300      	movs	r3, #0
 8003be0:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003be2:	2307      	movs	r3, #7
 8003be4:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bea:	4619      	mov	r1, r3
 8003bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf0:	f00d fb9a 	bl	8011328 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf8:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c06:	2300      	movs	r3, #0
 8003c08:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003c12:	4619      	mov	r1, r3
 8003c14:	4848      	ldr	r0, [pc, #288]	; (8003d38 <MX_USART1_UART_Init+0x1cc>)
 8003c16:	f00d fb87 	bl	8011328 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_USART1_RX);
 8003c1a:	2218      	movs	r2, #24
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4847      	ldr	r0, [pc, #284]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c20:	f7ff fee2 	bl	80039e8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003c24:	2200      	movs	r2, #0
 8003c26:	2100      	movs	r1, #0
 8003c28:	4844      	ldr	r0, [pc, #272]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c2a:	f7ff fdd1 	bl	80037d0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2100      	movs	r1, #0
 8003c32:	4842      	ldr	r0, [pc, #264]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c34:	f7ff feb2 	bl	800399c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	483f      	ldr	r0, [pc, #252]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c3e:	f7ff fdef 	bl	8003820 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8003c42:	2200      	movs	r2, #0
 8003c44:	2100      	movs	r1, #0
 8003c46:	483d      	ldr	r0, [pc, #244]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c48:	f7ff fe10 	bl	800386c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8003c4c:	2280      	movs	r2, #128	; 0x80
 8003c4e:	2100      	movs	r1, #0
 8003c50:	483a      	ldr	r0, [pc, #232]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c52:	f7ff fe31 	bl	80038b8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4838      	ldr	r0, [pc, #224]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c5c:	f7ff fe52 	bl	8003904 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8003c60:	2200      	movs	r2, #0
 8003c62:	2100      	movs	r1, #0
 8003c64:	4835      	ldr	r0, [pc, #212]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c66:	f7ff fe73 	bl	8003950 <LL_DMA_SetMemorySize>

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_USART1_TX);
 8003c6a:	2219      	movs	r2, #25
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	4833      	ldr	r0, [pc, #204]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c70:	f7ff feba 	bl	80039e8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003c74:	2210      	movs	r2, #16
 8003c76:	2101      	movs	r1, #1
 8003c78:	4830      	ldr	r0, [pc, #192]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c7a:	f7ff fda9 	bl	80037d0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2101      	movs	r1, #1
 8003c82:	482e      	ldr	r0, [pc, #184]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c84:	f7ff fe8a 	bl	800399c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	482b      	ldr	r0, [pc, #172]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c8e:	f7ff fdc7 	bl	8003820 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8003c92:	2200      	movs	r2, #0
 8003c94:	2101      	movs	r1, #1
 8003c96:	4829      	ldr	r0, [pc, #164]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003c98:	f7ff fde8 	bl	800386c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8003c9c:	2280      	movs	r2, #128	; 0x80
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4826      	ldr	r0, [pc, #152]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003ca2:	f7ff fe09 	bl	80038b8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4824      	ldr	r0, [pc, #144]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003cac:	f7ff fe2a 	bl	8003904 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4821      	ldr	r0, [pc, #132]	; (8003d3c <MX_USART1_UART_Init+0x1d0>)
 8003cb6:	f7ff fe4b 	bl	8003950 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	673b      	str	r3, [r7, #112]	; 0x70
  USART_InitStruct.BaudRate = 115200;
 8003cbe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003cc2:	677b      	str	r3, [r7, #116]	; 0x74
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	67bb      	str	r3, [r7, #120]	; 0x78
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  LL_USART_Init(USART1, &USART_InitStruct);
 8003ce4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4815      	ldr	r0, [pc, #84]	; (8003d40 <MX_USART1_UART_Init+0x1d4>)
 8003cec:	f00e f8fc 	bl	8011ee8 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4813      	ldr	r0, [pc, #76]	; (8003d40 <MX_USART1_UART_Init+0x1d4>)
 8003cf4:	f7ff fcb0 	bl	8003658 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4811      	ldr	r0, [pc, #68]	; (8003d40 <MX_USART1_UART_Init+0x1d4>)
 8003cfc:	f7ff fcd3 	bl	80036a6 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8003d00:	480f      	ldr	r0, [pc, #60]	; (8003d40 <MX_USART1_UART_Init+0x1d4>)
 8003d02:	f7ff fc99 	bl	8003638 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8003d06:	480e      	ldr	r0, [pc, #56]	; (8003d40 <MX_USART1_UART_Init+0x1d4>)
 8003d08:	f7ff fcf4 	bl	80036f4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8003d0c:	480c      	ldr	r0, [pc, #48]	; (8003d40 <MX_USART1_UART_Init+0x1d4>)
 8003d0e:	f7ff fc83 	bl	8003618 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8003d12:	bf00      	nop
 8003d14:	480a      	ldr	r0, [pc, #40]	; (8003d40 <MX_USART1_UART_Init+0x1d4>)
 8003d16:	f7ff fd03 	bl	8003720 <LL_USART_IsActiveFlag_TEACK>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f9      	beq.n	8003d14 <MX_USART1_UART_Init+0x1a8>
 8003d20:	4807      	ldr	r0, [pc, #28]	; (8003d40 <MX_USART1_UART_Init+0x1d4>)
 8003d22:	f7ff fd11 	bl	8003748 <LL_USART_IsActiveFlag_REACK>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f3      	beq.n	8003d14 <MX_USART1_UART_Init+0x1a8>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	3790      	adds	r7, #144	; 0x90
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	48001800 	.word	0x48001800
 8003d3c:	40020000 	.word	0x40020000
 8003d40:	40013800 	.word	0x40013800

08003d44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d48:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d4a:	4a23      	ldr	r2, [pc, #140]	; (8003dd8 <MX_USART2_UART_Init+0x94>)
 8003d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d4e:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d56:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d6a:	220c      	movs	r2, #12
 8003d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d6e:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d74:	4b17      	ldr	r3, [pc, #92]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d7a:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d8c:	4811      	ldr	r0, [pc, #68]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003d8e:	f00b fadb 	bl	800f348 <HAL_UART_Init>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003d98:	f7fe fc45 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	480d      	ldr	r0, [pc, #52]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003da0:	f00c fa38 	bl	8010214 <HAL_UARTEx_SetTxFifoThreshold>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003daa:	f7fe fc3c 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dae:	2100      	movs	r1, #0
 8003db0:	4808      	ldr	r0, [pc, #32]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003db2:	f00c fabb 	bl	801032c <HAL_UARTEx_SetRxFifoThreshold>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003dbc:	f7fe fc33 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003dc0:	4804      	ldr	r0, [pc, #16]	; (8003dd4 <MX_USART2_UART_Init+0x90>)
 8003dc2:	f00c f9bf 	bl	8010144 <HAL_UARTEx_DisableFifoMode>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003dcc:	f7fe fc2b 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dd0:	bf00      	nop
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000ef4 	.word	0x20000ef4
 8003dd8:	40004400 	.word	0x40004400

08003ddc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003de0:	4b22      	ldr	r3, [pc, #136]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003de2:	4a23      	ldr	r2, [pc, #140]	; (8003e70 <MX_USART3_UART_Init+0x94>)
 8003de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003de6:	4b21      	ldr	r3, [pc, #132]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003dee:	4b1f      	ldr	r3, [pc, #124]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003df4:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003dfa:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003e00:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003e02:	220c      	movs	r2, #12
 8003e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e06:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e0c:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e12:	4b16      	ldr	r3, [pc, #88]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003e24:	4811      	ldr	r0, [pc, #68]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003e26:	f00b fa8f 	bl	800f348 <HAL_UART_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003e30:	f7fe fbf9 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e34:	2100      	movs	r1, #0
 8003e36:	480d      	ldr	r0, [pc, #52]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003e38:	f00c f9ec 	bl	8010214 <HAL_UARTEx_SetTxFifoThreshold>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003e42:	f7fe fbf0 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e46:	2100      	movs	r1, #0
 8003e48:	4808      	ldr	r0, [pc, #32]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003e4a:	f00c fa6f 	bl	801032c <HAL_UARTEx_SetRxFifoThreshold>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003e54:	f7fe fbe7 	bl	8002626 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003e58:	4804      	ldr	r0, [pc, #16]	; (8003e6c <MX_USART3_UART_Init+0x90>)
 8003e5a:	f00c f973 	bl	8010144 <HAL_UARTEx_DisableFifoMode>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003e64:	f7fe fbdf 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000f84 	.word	0x20000f84
 8003e70:	40004800 	.word	0x40004800

08003e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b0a6      	sub	sp, #152	; 0x98
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e90:	2254      	movs	r2, #84	; 0x54
 8003e92:	2100      	movs	r1, #0
 8003e94:	4618      	mov	r0, r3
 8003e96:	f017 fc5b 	bl	801b750 <memset>
  if(uartHandle->Instance==UART4)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a94      	ldr	r2, [pc, #592]	; (80040f0 <HAL_UART_MspInit+0x27c>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d13c      	bne.n	8003f1e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003ea4:	2308      	movs	r3, #8
 8003ea6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003eac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f007 fb69 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ebc:	f7fe fbb3 	bl	8002626 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003ec0:	4b8c      	ldr	r3, [pc, #560]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	4a8b      	ldr	r2, [pc, #556]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eca:	6593      	str	r3, [r2, #88]	; 0x58
 8003ecc:	4b89      	ldr	r3, [pc, #548]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ed8:	4b86      	ldr	r3, [pc, #536]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003edc:	4a85      	ldr	r2, [pc, #532]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ee4:	4b83      	ldr	r3, [pc, #524]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ef0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f04:	2300      	movs	r3, #0
 8003f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003f0a:	2305      	movs	r3, #5
 8003f0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f10:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003f14:	4619      	mov	r1, r3
 8003f16:	4878      	ldr	r0, [pc, #480]	; (80040f8 <HAL_UART_MspInit+0x284>)
 8003f18:	f004 f88a 	bl	8008030 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003f1c:	e0e4      	b.n	80040e8 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==UART5)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a76      	ldr	r2, [pc, #472]	; (80040fc <HAL_UART_MspInit+0x288>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d15d      	bne.n	8003fe4 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003f28:	2310      	movs	r3, #16
 8003f2a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f34:	4618      	mov	r0, r3
 8003f36:	f007 fb27 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003f40:	f7fe fb71 	bl	8002626 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003f44:	4b6b      	ldr	r3, [pc, #428]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	4a6a      	ldr	r2, [pc, #424]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f50:	4b68      	ldr	r3, [pc, #416]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f5c:	4b65      	ldr	r3, [pc, #404]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	4a64      	ldr	r2, [pc, #400]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003f62:	f043 0304 	orr.w	r3, r3, #4
 8003f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f68:	4b62      	ldr	r3, [pc, #392]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	623b      	str	r3, [r7, #32]
 8003f72:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f74:	4b5f      	ldr	r3, [pc, #380]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f78:	4a5e      	ldr	r2, [pc, #376]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003f7a:	f043 0308 	orr.w	r3, r3, #8
 8003f7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f80:	4b5c      	ldr	r3, [pc, #368]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8003f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	2302      	movs	r3, #2
 8003f96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003fa6:	2305      	movs	r3, #5
 8003fa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4851      	ldr	r0, [pc, #324]	; (80040f8 <HAL_UART_MspInit+0x284>)
 8003fb4:	f004 f83c 	bl	8008030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fb8:	2304      	movs	r3, #4
 8003fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8003fd0:	2305      	movs	r3, #5
 8003fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4848      	ldr	r0, [pc, #288]	; (8004100 <HAL_UART_MspInit+0x28c>)
 8003fde:	f004 f827 	bl	8008030 <HAL_GPIO_Init>
}
 8003fe2:	e081      	b.n	80040e8 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a46      	ldr	r2, [pc, #280]	; (8004104 <HAL_UART_MspInit+0x290>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d13b      	bne.n	8004066 <HAL_UART_MspInit+0x1f2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f007 fac4 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_UART_MspInit+0x196>
      Error_Handler();
 8004006:	f7fe fb0e 	bl	8002626 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800400a:	4b3a      	ldr	r3, [pc, #232]	; (80040f4 <HAL_UART_MspInit+0x280>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	4a39      	ldr	r2, [pc, #228]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8004010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004014:	6593      	str	r3, [r2, #88]	; 0x58
 8004016:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004022:	4b34      	ldr	r3, [pc, #208]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8004024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004026:	4a33      	ldr	r2, [pc, #204]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8004028:	f043 0302 	orr.w	r3, r3, #2
 800402c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800402e:	4b31      	ldr	r3, [pc, #196]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800403a:	2318      	movs	r3, #24
 800403c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004040:	2302      	movs	r3, #2
 8004042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004052:	2307      	movs	r3, #7
 8004054:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004058:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800405c:	4619      	mov	r1, r3
 800405e:	482a      	ldr	r0, [pc, #168]	; (8004108 <HAL_UART_MspInit+0x294>)
 8004060:	f003 ffe6 	bl	8008030 <HAL_GPIO_Init>
}
 8004064:	e040      	b.n	80040e8 <HAL_UART_MspInit+0x274>
  else if(uartHandle->Instance==USART3)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a28      	ldr	r2, [pc, #160]	; (800410c <HAL_UART_MspInit+0x298>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d13b      	bne.n	80040e8 <HAL_UART_MspInit+0x274>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004070:	2304      	movs	r3, #4
 8004072:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004074:	2300      	movs	r3, #0
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800407c:	4618      	mov	r0, r3
 800407e:	f007 fa83 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8004088:	f7fe facd 	bl	8002626 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_UART_MspInit+0x280>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4a18      	ldr	r2, [pc, #96]	; (80040f4 <HAL_UART_MspInit+0x280>)
 8004092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
 8004098:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <HAL_UART_MspInit+0x280>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a4:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <HAL_UART_MspInit+0x280>)
 80040a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a8:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <HAL_UART_MspInit+0x280>)
 80040aa:	f043 0302 	orr.w	r3, r3, #2
 80040ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_UART_MspInit+0x280>)
 80040b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c4:	2302      	movs	r3, #2
 80040c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040d6:	2307      	movs	r3, #7
 80040d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80040e0:	4619      	mov	r1, r3
 80040e2:	4809      	ldr	r0, [pc, #36]	; (8004108 <HAL_UART_MspInit+0x294>)
 80040e4:	f003 ffa4 	bl	8008030 <HAL_GPIO_Init>
}
 80040e8:	bf00      	nop
 80040ea:	3798      	adds	r7, #152	; 0x98
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40004c00 	.word	0x40004c00
 80040f4:	40021000 	.word	0x40021000
 80040f8:	48000800 	.word	0x48000800
 80040fc:	40005000 	.word	0x40005000
 8004100:	48000c00 	.word	0x48000c00
 8004104:	40004400 	.word	0x40004400
 8004108:	48000400 	.word	0x48000400
 800410c:	40004800 	.word	0x40004800

08004110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004110:	480d      	ldr	r0, [pc, #52]	; (8004148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004112:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004114:	480d      	ldr	r0, [pc, #52]	; (800414c <LoopForever+0x6>)
  ldr r1, =_edata
 8004116:	490e      	ldr	r1, [pc, #56]	; (8004150 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004118:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <LoopForever+0xe>)
  movs r3, #0
 800411a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800411c:	e002      	b.n	8004124 <LoopCopyDataInit>

0800411e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800411e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004122:	3304      	adds	r3, #4

08004124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004128:	d3f9      	bcc.n	800411e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800412a:	4a0b      	ldr	r2, [pc, #44]	; (8004158 <LoopForever+0x12>)
  ldr r4, =_ebss
 800412c:	4c0b      	ldr	r4, [pc, #44]	; (800415c <LoopForever+0x16>)
  movs r3, #0
 800412e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004130:	e001      	b.n	8004136 <LoopFillZerobss>

08004132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004134:	3204      	adds	r2, #4

08004136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004138:	d3fb      	bcc.n	8004132 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800413a:	f7fe fd51 	bl	8002be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800413e:	f017 fadb 	bl	801b6f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004142:	f7fe f9ad 	bl	80024a0 <main>

08004146 <LoopForever>:

LoopForever:
    b LoopForever
 8004146:	e7fe      	b.n	8004146 <LoopForever>
  ldr   r0, =_estack
 8004148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800414c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004150:	20000878 	.word	0x20000878
  ldr r2, =_sidata
 8004154:	0801dd30 	.word	0x0801dd30
  ldr r2, =_sbss
 8004158:	20000878 	.word	0x20000878
  ldr r4, =_ebss
 800415c:	2000580c 	.word	0x2000580c

08004160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004160:	e7fe      	b.n	8004160 <ADC1_2_IRQHandler>

08004162 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800416c:	2003      	movs	r0, #3
 800416e:	f002 fe85 	bl	8006e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004172:	2000      	movs	r0, #0
 8004174:	f000 f80e 	bl	8004194 <HAL_InitTick>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	71fb      	strb	r3, [r7, #7]
 8004182:	e001      	b.n	8004188 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004184:	f7fe fbb4 	bl	80028f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004188:	79fb      	ldrb	r3, [r7, #7]

}
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80041a0:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_InitTick+0x68>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d022      	beq.n	80041ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80041a8:	4b15      	ldr	r3, [pc, #84]	; (8004200 <HAL_InitTick+0x6c>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b13      	ldr	r3, [pc, #76]	; (80041fc <HAL_InitTick+0x68>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80041b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041bc:	4618      	mov	r0, r3
 80041be:	f002 febf 	bl	8006f40 <HAL_SYSTICK_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10f      	bne.n	80041e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	d809      	bhi.n	80041e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041ce:	2200      	movs	r2, #0
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	f04f 30ff 	mov.w	r0, #4294967295
 80041d6:	f002 fe71 	bl	8006ebc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041da:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <HAL_InitTick+0x70>)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	e007      	b.n	80041f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	73fb      	strb	r3, [r7, #15]
 80041e6:	e004      	b.n	80041f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
 80041ec:	e001      	b.n	80041f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20000008 	.word	0x20000008
 8004200:	20000000 	.word	0x20000000
 8004204:	20000004 	.word	0x20000004

08004208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_IncTick+0x1c>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <HAL_IncTick+0x20>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4413      	add	r3, r2
 8004216:	4a03      	ldr	r2, [pc, #12]	; (8004224 <HAL_IncTick+0x1c>)
 8004218:	6013      	str	r3, [r2, #0]
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	20001014 	.word	0x20001014
 8004228:	20000008 	.word	0x20000008

0800422c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return uwTick;
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <HAL_GetTick+0x14>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20001014 	.word	0x20001014

08004244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800424c:	f7ff ffee 	bl	800422c <HAL_GetTick>
 8004250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425c:	d004      	beq.n	8004268 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <HAL_Delay+0x40>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004268:	bf00      	nop
 800426a:	f7ff ffdf 	bl	800422c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	429a      	cmp	r2, r3
 8004278:	d8f7      	bhi.n	800426a <HAL_Delay+0x26>
  {
  }
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000008 	.word	0x20000008

08004288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	431a      	orrs	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	609a      	str	r2, [r3, #8]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0318 	and.w	r3, r3, #24
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3360      	adds	r3, #96	; 0x60
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b08      	ldr	r3, [pc, #32]	; (8004350 <LL_ADC_SetOffset+0x44>)
 800432e:	4013      	ands	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	03fff000 	.word	0x03fff000

08004354 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3360      	adds	r3, #96	; 0x60
 8004362:	461a      	mov	r2, r3
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3360      	adds	r3, #96	; 0x60
 8004390:	461a      	mov	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b087      	sub	sp, #28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3360      	adds	r3, #96	; 0x60
 80043c6:	461a      	mov	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	431a      	orrs	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80043e0:	bf00      	nop
 80043e2:	371c      	adds	r7, #28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3360      	adds	r3, #96	; 0x60
 80043fc:	461a      	mov	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	431a      	orrs	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	615a      	str	r2, [r3, #20]
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3330      	adds	r3, #48	; 0x30
 800447e:	461a      	mov	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	4413      	add	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	211f      	movs	r1, #31
 800449a:	fa01 f303 	lsl.w	r3, r1, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	401a      	ands	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	0e9b      	lsrs	r3, r3, #26
 80044a6:	f003 011f 	and.w	r1, r3, #31
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 031f 	and.w	r3, r3, #31
 80044b0:	fa01 f303 	lsl.w	r3, r1, r3
 80044b4:	431a      	orrs	r2, r3
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b087      	sub	sp, #28
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3314      	adds	r3, #20
 80044d6:	461a      	mov	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	0e5b      	lsrs	r3, r3, #25
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	4413      	add	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	0d1b      	lsrs	r3, r3, #20
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	2107      	movs	r1, #7
 80044f4:	fa01 f303 	lsl.w	r3, r1, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	401a      	ands	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	0d1b      	lsrs	r3, r3, #20
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	fa01 f303 	lsl.w	r3, r1, r3
 800450a:	431a      	orrs	r2, r3
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a0f      	ldr	r2, [pc, #60]	; (8004568 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d10a      	bne.n	8004546 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453c:	431a      	orrs	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8004544:	e00a      	b.n	800455c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004552:	43db      	mvns	r3, r3
 8004554:	401a      	ands	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	407f0000 	.word	0x407f0000

0800456c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 031f 	and.w	r3, r3, #31
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80045b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6093      	str	r3, [r2, #8]
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045dc:	d101      	bne.n	80045e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004604:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800462c:	d101      	bne.n	8004632 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004650:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004654:	f043 0201 	orr.w	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004678:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800467c:	f043 0202 	orr.w	r2, r3, #2
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <LL_ADC_IsEnabled+0x18>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <LL_ADC_IsEnabled+0x1a>
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d101      	bne.n	80046ce <LL_ADC_IsDisableOngoing+0x18>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <LL_ADC_IsDisableOngoing+0x1a>
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046f0:	f043 0204 	orr.w	r2, r3, #4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004714:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004718:	f043 0210 	orr.w	r2, r3, #16
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b04      	cmp	r3, #4
 800473e:	d101      	bne.n	8004744 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004740:	2301      	movs	r3, #1
 8004742:	e000      	b.n	8004746 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004762:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004766:	f043 0220 	orr.w	r2, r3, #32
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b08      	cmp	r3, #8
 800478c:	d101      	bne.n	8004792 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <HAL_ADC_Init+0x1c>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	f000 bc92 	b.w	80050e0 <HAL_ADC_Init+0x940>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047c4:	d018      	beq.n	80047f8 <HAL_ADC_Init+0x58>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a63      	ldr	r2, [pc, #396]	; (8004958 <HAL_ADC_Init+0x1b8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_ADC_Init+0x58>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a61      	ldr	r2, [pc, #388]	; (800495c <HAL_ADC_Init+0x1bc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_ADC_Init+0x58>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a60      	ldr	r2, [pc, #384]	; (8004960 <HAL_ADC_Init+0x1c0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_ADC_Init+0x58>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a5e      	ldr	r2, [pc, #376]	; (8004964 <HAL_ADC_Init+0x1c4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_ADC_Init+0x58>
 80047ee:	f240 119b 	movw	r1, #411	; 0x19b
 80047f2:	485d      	ldr	r0, [pc, #372]	; (8004968 <HAL_ADC_Init+0x1c8>)
 80047f4:	f7fd ff1c 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004800:	d049      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800480a:	d044      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004814:	d03f      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d03b      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004826:	d036      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004830:	d031      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800483a:	d02c      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004844:	d027      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800484e:	d022      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004858:	d01d      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004862:	d018      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800486c:	d013      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004876:	d00e      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004880:	d009      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800488a:	d004      	beq.n	8004896 <HAL_ADC_Init+0xf6>
 800488c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8004890:	4835      	ldr	r0, [pc, #212]	; (8004968 <HAL_ADC_Init+0x1c8>)
 8004892:	f7fd fecd 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d010      	beq.n	80048c0 <HAL_ADC_Init+0x120>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d00c      	beq.n	80048c0 <HAL_ADC_Init+0x120>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d008      	beq.n	80048c0 <HAL_ADC_Init+0x120>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b18      	cmp	r3, #24
 80048b4:	d004      	beq.n	80048c0 <HAL_ADC_Init+0x120>
 80048b6:	f240 119d 	movw	r1, #413	; 0x19d
 80048ba:	482b      	ldr	r0, [pc, #172]	; (8004968 <HAL_ADC_Init+0x1c8>)
 80048bc:	f7fd feb8 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <HAL_ADC_Init+0x13c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d0:	d004      	beq.n	80048dc <HAL_ADC_Init+0x13c>
 80048d2:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80048d6:	4824      	ldr	r0, [pc, #144]	; (8004968 <HAL_ADC_Init+0x1c8>)
 80048d8:	f7fd feaa 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f244 0209 	movw	r2, #16393	; 0x4009
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d904      	bls.n	80048f2 <HAL_ADC_Init+0x152>
 80048e8:	f240 119f 	movw	r1, #415	; 0x19f
 80048ec:	481e      	ldr	r0, [pc, #120]	; (8004968 <HAL_ADC_Init+0x1c8>)
 80048ee:	f7fd fe9f 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <HAL_ADC_Init+0x16c>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d004      	beq.n	800490c <HAL_ADC_Init+0x16c>
 8004902:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8004906:	4818      	ldr	r0, [pc, #96]	; (8004968 <HAL_ADC_Init+0x1c8>)
 8004908:	f7fd fe92 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	7f5b      	ldrb	r3, [r3, #29]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_ADC_Init+0x186>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	7f5b      	ldrb	r3, [r3, #29]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d004      	beq.n	8004926 <HAL_ADC_Init+0x186>
 800491c:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004920:	4811      	ldr	r0, [pc, #68]	; (8004968 <HAL_ADC_Init+0x1c8>)
 8004922:	f7fd fe85 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01e      	beq.n	800496c <HAL_ADC_Init+0x1cc>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004936:	d019      	beq.n	800496c <HAL_ADC_Init+0x1cc>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004940:	d014      	beq.n	800496c <HAL_ADC_Init+0x1cc>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004946:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800494a:	d00f      	beq.n	800496c <HAL_ADC_Init+0x1cc>
 800494c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004950:	4805      	ldr	r0, [pc, #20]	; (8004968 <HAL_ADC_Init+0x1c8>)
 8004952:	f7fd fe6d 	bl	8002630 <assert_failed>
 8004956:	e009      	b.n	800496c <HAL_ADC_Init+0x1cc>
 8004958:	50000100 	.word	0x50000100
 800495c:	50000400 	.word	0x50000400
 8004960:	50000500 	.word	0x50000500
 8004964:	50000600 	.word	0x50000600
 8004968:	0801cc1c 	.word	0x0801cc1c
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	f5b3 6fa4 	cmp.w	r3, #1312	; 0x520
 8004974:	f000 80f3 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 8004980:	f000 80ed 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 800498c:	f000 80e7 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	f5b3 6fac 	cmp.w	r3, #1376	; 0x560
 8004998:	f000 80e1 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80049a4:	f000 80db 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80049b0:	f000 80d5 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80049bc:	f000 80cf 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 80049c8:	f000 80c9 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 80049d4:	f000 80c3 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049dc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80049e0:	f000 80bd 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 80049ec:	f000 80b7 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049f8:	f000 80b1 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	f5b3 6fc4 	cmp.w	r3, #1568	; 0x620
 8004a04:	f000 80ab 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a10:	f000 80a5 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	f5b3 6fd4 	cmp.w	r3, #1696	; 0x6a0
 8004a1c:	f000 809f 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a24:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 8004a28:	f000 8099 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8004a34:	f000 8093 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a40:	f000 808d 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	f5b3 6fe4 	cmp.w	r3, #1824	; 0x720
 8004a4c:	f000 8087 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 8004a58:	f000 8081 	beq.w	8004b5e <HAL_ADC_Init+0x3be>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f5b3 6fec 	cmp.w	r3, #1888	; 0x760
 8004a64:	d07b      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 8004a6e:	d076      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	f5b3 6ff4 	cmp.w	r3, #1952	; 0x7a0
 8004a78:	d071      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a82:	d004      	beq.n	8004a8e <HAL_ADC_Init+0x2ee>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a97      	ldr	r2, [pc, #604]	; (8004ce8 <HAL_ADC_Init+0x548>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d127      	bne.n	8004ade <HAL_ADC_Init+0x33e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a96:	d062      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8004aa0:	d05d      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8004aaa:	d058      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 8004ab4:	d053      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aba:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 8004abe:	d04e      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 8004ac8:	d049      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004ad2:	d044      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8004adc:	d03f      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a82      	ldr	r2, [pc, #520]	; (8004cec <HAL_ADC_Init+0x54c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d009      	beq.n	8004afc <HAL_ADC_Init+0x35c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a80      	ldr	r2, [pc, #512]	; (8004cf0 <HAL_ADC_Init+0x550>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_ADC_Init+0x35c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a7f      	ldr	r2, [pc, #508]	; (8004cf4 <HAL_ADC_Init+0x554>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d127      	bne.n	8004b4c <HAL_ADC_Init+0x3ac>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b00:	f5b3 6fbc 	cmp.w	r3, #1504	; 0x5e0
 8004b04:	d02b      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 8004b0e:	d026      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d021      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8004b22:	d01c      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8004b2c:	d017      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f5b3 6fcc 	cmp.w	r3, #1632	; 0x660
 8004b36:	d012      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004b40:	d00d      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	f5b3 6f94 	cmp.w	r3, #1184	; 0x4a0
 8004b4a:	d008      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_ADC_Init+0x3be>
 8004b54:	f240 11a3 	movw	r1, #419	; 0x1a3
 8004b58:	4867      	ldr	r0, [pc, #412]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004b5a:	f7fd fd69 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00e      	beq.n	8004b84 <HAL_ADC_Init+0x3e4>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b6e:	d009      	beq.n	8004b84 <HAL_ADC_Init+0x3e4>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b78:	d004      	beq.n	8004b84 <HAL_ADC_Init+0x3e4>
 8004b7a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004b7e:	485e      	ldr	r0, [pc, #376]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004b80:	f7fd fd56 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_ADC_Init+0x402>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d004      	beq.n	8004ba2 <HAL_ADC_Init+0x402>
 8004b98:	f240 11a5 	movw	r1, #421	; 0x1a5
 8004b9c:	4856      	ldr	r0, [pc, #344]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004b9e:	f7fd fd47 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d008      	beq.n	8004bbc <HAL_ADC_Init+0x41c>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d004      	beq.n	8004bbc <HAL_ADC_Init+0x41c>
 8004bb2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 8004bb6:	4850      	ldr	r0, [pc, #320]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004bb8:	f7fd fd3a 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d009      	beq.n	8004bd8 <HAL_ADC_Init+0x438>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bcc:	d004      	beq.n	8004bd8 <HAL_ADC_Init+0x438>
 8004bce:	f240 11a7 	movw	r1, #423	; 0x1a7
 8004bd2:	4849      	ldr	r0, [pc, #292]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004bd4:	f7fd fd2c 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7f1b      	ldrb	r3, [r3, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d008      	beq.n	8004bf2 <HAL_ADC_Init+0x452>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	7f1b      	ldrb	r3, [r3, #28]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d004      	beq.n	8004bf2 <HAL_ADC_Init+0x452>
 8004be8:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8004bec:	4842      	ldr	r0, [pc, #264]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004bee:	f7fd fd1f 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d009      	beq.n	8004c10 <HAL_ADC_Init+0x470>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d004      	beq.n	8004c10 <HAL_ADC_Init+0x470>
 8004c06:	f240 11a9 	movw	r1, #425	; 0x1a9
 8004c0a:	483b      	ldr	r0, [pc, #236]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004c0c:	f7fd fd10 	bl	8002630 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d02d      	beq.n	8004c74 <HAL_ADC_Init+0x4d4>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_ADC_Init+0x488>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d904      	bls.n	8004c32 <HAL_ADC_Init+0x492>
 8004c28:	f240 11ad 	movw	r1, #429	; 0x1ad
 8004c2c:	4832      	ldr	r0, [pc, #200]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004c2e:	f7fd fcff 	bl	8002630 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <HAL_ADC_Init+0x4b0>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d004      	beq.n	8004c50 <HAL_ADC_Init+0x4b0>
 8004c46:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004c4a:	482b      	ldr	r0, [pc, #172]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004c4c:	f7fd fcf0 	bl	8002630 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10c      	bne.n	8004c74 <HAL_ADC_Init+0x4d4>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_ADC_Init+0x4ca>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d904      	bls.n	8004c74 <HAL_ADC_Init+0x4d4>
 8004c6a:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8004c6e:	4822      	ldr	r0, [pc, #136]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004c70:	f7fd fcde 	bl	8002630 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d108      	bne.n	8004c90 <HAL_ADC_Init+0x4f0>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7f5b      	ldrb	r3, [r3, #29]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d104      	bne.n	8004c90 <HAL_ADC_Init+0x4f0>
 8004c86:	f240 11b7 	movw	r1, #439	; 0x1b7
 8004c8a:	481b      	ldr	r0, [pc, #108]	; (8004cf8 <HAL_ADC_Init+0x558>)
 8004c8c:	f7fd fcd0 	bl	8002630 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <HAL_ADC_Init+0x50c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7fc fa51 	bl	8001140 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff fc89 	bl	80045c8 <LL_ADC_IsDeepPowerDownEnabled>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <HAL_ADC_Init+0x526>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff fc6f 	bl	80045a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fca4 	bl	8004618 <LL_ADC_IsInternalRegulatorEnabled>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d122      	bne.n	8004d1c <HAL_ADC_Init+0x57c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fc88 	bl	80045f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_ADC_Init+0x55c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	099b      	lsrs	r3, r3, #6
 8004ce6:	e00b      	b.n	8004d00 <HAL_ADC_Init+0x560>
 8004ce8:	50000100 	.word	0x50000100
 8004cec:	50000400 	.word	0x50000400
 8004cf0:	50000500 	.word	0x50000500
 8004cf4:	50000600 	.word	0x50000600
 8004cf8:	0801cc1c 	.word	0x0801cc1c
 8004cfc:	20000000 	.word	0x20000000
 8004d00:	4a86      	ldr	r2, [pc, #536]	; (8004f1c <HAL_ADC_Init+0x77c>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	3301      	adds	r3, #1
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d0e:	e002      	b.n	8004d16 <HAL_ADC_Init+0x576>
    {
      wait_loop_index--;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1f9      	bne.n	8004d10 <HAL_ADC_Init+0x570>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fc79 	bl	8004618 <LL_ADC_IsInternalRegulatorEnabled>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10d      	bne.n	8004d48 <HAL_ADC_Init+0x5a8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	f043 0210 	orr.w	r2, r3, #16
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d3c:	f043 0201 	orr.w	r2, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff fced 	bl	800472c <LL_ADC_REG_IsConversionOngoing>
 8004d52:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f040 81b6 	bne.w	80050ce <HAL_ADC_Init+0x92e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f040 81b2 	bne.w	80050ce <HAL_ADC_Init+0x92e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004d72:	f043 0202 	orr.w	r2, r3, #2
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fc86 	bl	8004690 <LL_ADC_IsEnabled>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d141      	bne.n	8004e0e <HAL_ADC_Init+0x66e>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d92:	d004      	beq.n	8004d9e <HAL_ADC_Init+0x5fe>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a61      	ldr	r2, [pc, #388]	; (8004f20 <HAL_ADC_Init+0x780>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10f      	bne.n	8004dbe <HAL_ADC_Init+0x61e>
 8004d9e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004da2:	f7ff fc75 	bl	8004690 <LL_ADC_IsEnabled>
 8004da6:	4604      	mov	r4, r0
 8004da8:	485d      	ldr	r0, [pc, #372]	; (8004f20 <HAL_ADC_Init+0x780>)
 8004daa:	f7ff fc71 	bl	8004690 <LL_ADC_IsEnabled>
 8004dae:	4603      	mov	r3, r0
 8004db0:	4323      	orrs	r3, r4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bf0c      	ite	eq
 8004db6:	2301      	moveq	r3, #1
 8004db8:	2300      	movne	r3, #0
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	e012      	b.n	8004de4 <HAL_ADC_Init+0x644>
 8004dbe:	4859      	ldr	r0, [pc, #356]	; (8004f24 <HAL_ADC_Init+0x784>)
 8004dc0:	f7ff fc66 	bl	8004690 <LL_ADC_IsEnabled>
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	4858      	ldr	r0, [pc, #352]	; (8004f28 <HAL_ADC_Init+0x788>)
 8004dc8:	f7ff fc62 	bl	8004690 <LL_ADC_IsEnabled>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	431c      	orrs	r4, r3
 8004dd0:	4856      	ldr	r0, [pc, #344]	; (8004f2c <HAL_ADC_Init+0x78c>)
 8004dd2:	f7ff fc5d 	bl	8004690 <LL_ADC_IsEnabled>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4323      	orrs	r3, r4
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bf0c      	ite	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	2300      	movne	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d012      	beq.n	8004e0e <HAL_ADC_Init+0x66e>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004df0:	d004      	beq.n	8004dfc <HAL_ADC_Init+0x65c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a4a      	ldr	r2, [pc, #296]	; (8004f20 <HAL_ADC_Init+0x780>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <HAL_ADC_Init+0x660>
 8004dfc:	4a4c      	ldr	r2, [pc, #304]	; (8004f30 <HAL_ADC_Init+0x790>)
 8004dfe:	e000      	b.n	8004e02 <HAL_ADC_Init+0x662>
 8004e00:	4a4c      	ldr	r2, [pc, #304]	; (8004f34 <HAL_ADC_Init+0x794>)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f7ff fa3d 	bl	8004288 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	7f5b      	ldrb	r3, [r3, #29]
 8004e12:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e18:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004e1e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004e24:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e2c:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d106      	bne.n	8004e4a <HAL_ADC_Init+0x6aa>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	3b01      	subs	r3, #1
 8004e42:	045b      	lsls	r3, r3, #17
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_ADC_Init+0x6c6>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	4b32      	ldr	r3, [pc, #200]	; (8004f38 <HAL_ADC_Init+0x798>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	69b9      	ldr	r1, [r7, #24]
 8004e76:	430b      	orrs	r3, r1
 8004e78:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fc49 	bl	800472c <LL_ADC_REG_IsConversionOngoing>
 8004e9a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fc6a 	bl	800477a <LL_ADC_INJ_IsConversionOngoing>
 8004ea6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f040 80ed 	bne.w	800508a <HAL_ADC_Init+0x8ea>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f040 80e9 	bne.w	800508a <HAL_ADC_Init+0x8ea>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ebc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ec4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed4:	f023 0302 	bic.w	r3, r3, #2
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	69b9      	ldr	r1, [r7, #24]
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d028      	beq.n	8004f3c <HAL_ADC_Init+0x79c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ef8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6911      	ldr	r1, [r2, #16]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	430b      	orrs	r3, r1
 8004f14:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004f18:	e024      	b.n	8004f64 <HAL_ADC_Init+0x7c4>
 8004f1a:	bf00      	nop
 8004f1c:	053e2d63 	.word	0x053e2d63
 8004f20:	50000100 	.word	0x50000100
 8004f24:	50000400 	.word	0x50000400
 8004f28:	50000500 	.word	0x50000500
 8004f2c:	50000600 	.word	0x50000600
 8004f30:	50000300 	.word	0x50000300
 8004f34:	50000700 	.word	0x50000700
 8004f38:	fff04007 	.word	0xfff04007
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691a      	ldr	r2, [r3, #16]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f4a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f60:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	f040 8085 	bne.w	800507a <HAL_ADC_Init+0x8da>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_ADC_Init+0x81a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	2b04      	cmp	r3, #4
 8004f7e:	d01c      	beq.n	8004fba <HAL_ADC_Init+0x81a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d018      	beq.n	8004fba <HAL_ADC_Init+0x81a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8c:	2b0c      	cmp	r3, #12
 8004f8e:	d014      	beq.n	8004fba <HAL_ADC_Init+0x81a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d010      	beq.n	8004fba <HAL_ADC_Init+0x81a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9c:	2b14      	cmp	r3, #20
 8004f9e:	d00c      	beq.n	8004fba <HAL_ADC_Init+0x81a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	2b18      	cmp	r3, #24
 8004fa6:	d008      	beq.n	8004fba <HAL_ADC_Init+0x81a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fac:	2b1c      	cmp	r3, #28
 8004fae:	d004      	beq.n	8004fba <HAL_ADC_Init+0x81a>
 8004fb0:	f240 2177 	movw	r1, #631	; 0x277
 8004fb4:	484c      	ldr	r0, [pc, #304]	; (80050e8 <HAL_ADC_Init+0x948>)
 8004fb6:	f7fd fb3b 	bl	8002630 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d025      	beq.n	800500e <HAL_ADC_Init+0x86e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d021      	beq.n	800500e <HAL_ADC_Init+0x86e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d01d      	beq.n	800500e <HAL_ADC_Init+0x86e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd6:	2b60      	cmp	r3, #96	; 0x60
 8004fd8:	d019      	beq.n	800500e <HAL_ADC_Init+0x86e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fde:	2b80      	cmp	r3, #128	; 0x80
 8004fe0:	d015      	beq.n	800500e <HAL_ADC_Init+0x86e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe6:	2ba0      	cmp	r3, #160	; 0xa0
 8004fe8:	d011      	beq.n	800500e <HAL_ADC_Init+0x86e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fee:	2bc0      	cmp	r3, #192	; 0xc0
 8004ff0:	d00d      	beq.n	800500e <HAL_ADC_Init+0x86e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff6:	2be0      	cmp	r3, #224	; 0xe0
 8004ff8:	d009      	beq.n	800500e <HAL_ADC_Init+0x86e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005002:	d004      	beq.n	800500e <HAL_ADC_Init+0x86e>
 8005004:	f44f 711e 	mov.w	r1, #632	; 0x278
 8005008:	4837      	ldr	r0, [pc, #220]	; (80050e8 <HAL_ADC_Init+0x948>)
 800500a:	f7fd fb11 	bl	8002630 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_ADC_Init+0x88a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800501e:	d004      	beq.n	800502a <HAL_ADC_Init+0x88a>
 8005020:	f240 2179 	movw	r1, #633	; 0x279
 8005024:	4830      	ldr	r0, [pc, #192]	; (80050e8 <HAL_ADC_Init+0x948>)
 8005026:	f7fd fb03 	bl	8002630 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502e:	2b01      	cmp	r3, #1
 8005030:	d00a      	beq.n	8005048 <HAL_ADC_Init+0x8a8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005036:	f240 4201 	movw	r2, #1025	; 0x401
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <HAL_ADC_Init+0x8a8>
 800503e:	f240 217a 	movw	r1, #634	; 0x27a
 8005042:	4829      	ldr	r0, [pc, #164]	; (80050e8 <HAL_ADC_Init+0x948>)
 8005044:	f7fd faf4 	bl	8002630 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005052:	f023 0304 	bic.w	r3, r3, #4
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005064:	4311      	orrs	r1, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800506a:	430a      	orrs	r2, r1
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	611a      	str	r2, [r3, #16]
 8005078:	e007      	b.n	800508a <HAL_ADC_Init+0x8ea>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d10c      	bne.n	80050ac <HAL_ADC_Init+0x90c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	f023 010f 	bic.w	r1, r3, #15
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	1e5a      	subs	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	631a      	str	r2, [r3, #48]	; 0x30
 80050aa:	e007      	b.n	80050bc <HAL_ADC_Init+0x91c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 020f 	bic.w	r2, r2, #15
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c0:	f023 0303 	bic.w	r3, r3, #3
 80050c4:	f043 0201 	orr.w	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80050cc:	e007      	b.n	80050de <HAL_ADC_Init+0x93e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d2:	f043 0210 	orr.w	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80050de:	7ffb      	ldrb	r3, [r7, #31]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3724      	adds	r7, #36	; 0x24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd90      	pop	{r4, r7, pc}
 80050e8:	0801cc1c 	.word	0x0801cc1c

080050ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050fc:	d004      	beq.n	8005108 <HAL_ADC_Start+0x1c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a76      	ldr	r2, [pc, #472]	; (80052dc <HAL_ADC_Start+0x1f0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_ADC_Start+0x20>
 8005108:	4b75      	ldr	r3, [pc, #468]	; (80052e0 <HAL_ADC_Start+0x1f4>)
 800510a:	e000      	b.n	800510e <HAL_ADC_Start+0x22>
 800510c:	4b75      	ldr	r3, [pc, #468]	; (80052e4 <HAL_ADC_Start+0x1f8>)
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fa2c 	bl	800456c <LL_ADC_GetMultimode>
 8005114:	6138      	str	r0, [r7, #16]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800511e:	d018      	beq.n	8005152 <HAL_ADC_Start+0x66>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a6d      	ldr	r2, [pc, #436]	; (80052dc <HAL_ADC_Start+0x1f0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <HAL_ADC_Start+0x66>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a6e      	ldr	r2, [pc, #440]	; (80052e8 <HAL_ADC_Start+0x1fc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00e      	beq.n	8005152 <HAL_ADC_Start+0x66>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a6c      	ldr	r2, [pc, #432]	; (80052ec <HAL_ADC_Start+0x200>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d009      	beq.n	8005152 <HAL_ADC_Start+0x66>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a6b      	ldr	r2, [pc, #428]	; (80052f0 <HAL_ADC_Start+0x204>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <HAL_ADC_Start+0x66>
 8005148:	f240 41cd 	movw	r1, #1229	; 0x4cd
 800514c:	4869      	ldr	r0, [pc, #420]	; (80052f4 <HAL_ADC_Start+0x208>)
 800514e:	f7fd fa6f 	bl	8002630 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff fae8 	bl	800472c <LL_ADC_REG_IsConversionOngoing>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	f040 80b4 	bne.w	80052cc <HAL_ADC_Start+0x1e0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_ADC_Start+0x86>
 800516e:	2302      	movs	r3, #2
 8005170:	e0af      	b.n	80052d2 <HAL_ADC_Start+0x1e6>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f001 fb28 	bl	80067d0 <ADC_Enable>
 8005180:	4603      	mov	r3, r0
 8005182:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005184:	7dfb      	ldrb	r3, [r7, #23]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f040 809b 	bne.w	80052c2 <HAL_ADC_Start+0x1d6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005190:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005194:	f023 0301 	bic.w	r3, r3, #1
 8005198:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a4d      	ldr	r2, [pc, #308]	; (80052dc <HAL_ADC_Start+0x1f0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d009      	beq.n	80051be <HAL_ADC_Start+0xd2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a4f      	ldr	r2, [pc, #316]	; (80052ec <HAL_ADC_Start+0x200>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d002      	beq.n	80051ba <HAL_ADC_Start+0xce>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	e003      	b.n	80051c2 <HAL_ADC_Start+0xd6>
 80051ba:	4b4b      	ldr	r3, [pc, #300]	; (80052e8 <HAL_ADC_Start+0x1fc>)
 80051bc:	e001      	b.n	80051c2 <HAL_ADC_Start+0xd6>
 80051be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d002      	beq.n	80051d0 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d105      	bne.n	80051dc <HAL_ADC_Start+0xf0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e8:	d106      	bne.n	80051f8 <HAL_ADC_Start+0x10c>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ee:	f023 0206 	bic.w	r2, r3, #6
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	661a      	str	r2, [r3, #96]	; 0x60
 80051f6:	e002      	b.n	80051fe <HAL_ADC_Start+0x112>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	221c      	movs	r2, #28
 8005204:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a32      	ldr	r2, [pc, #200]	; (80052dc <HAL_ADC_Start+0x1f0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d009      	beq.n	800522c <HAL_ADC_Start+0x140>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a33      	ldr	r2, [pc, #204]	; (80052ec <HAL_ADC_Start+0x200>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d002      	beq.n	8005228 <HAL_ADC_Start+0x13c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	e003      	b.n	8005230 <HAL_ADC_Start+0x144>
 8005228:	4b2f      	ldr	r3, [pc, #188]	; (80052e8 <HAL_ADC_Start+0x1fc>)
 800522a:	e001      	b.n	8005230 <HAL_ADC_Start+0x144>
 800522c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	4293      	cmp	r3, r2
 8005236:	d008      	beq.n	800524a <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b05      	cmp	r3, #5
 8005242:	d002      	beq.n	800524a <HAL_ADC_Start+0x15e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b09      	cmp	r3, #9
 8005248:	d114      	bne.n	8005274 <HAL_ADC_Start+0x188>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d007      	beq.n	8005268 <HAL_ADC_Start+0x17c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005260:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff fa35 	bl	80046dc <LL_ADC_REG_StartConversion>
 8005272:	e02d      	b.n	80052d0 <HAL_ADC_Start+0x1e4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005278:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a15      	ldr	r2, [pc, #84]	; (80052dc <HAL_ADC_Start+0x1f0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_ADC_Start+0x1b2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a17      	ldr	r2, [pc, #92]	; (80052ec <HAL_ADC_Start+0x200>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d002      	beq.n	800529a <HAL_ADC_Start+0x1ae>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	e003      	b.n	80052a2 <HAL_ADC_Start+0x1b6>
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_ADC_Start+0x1fc>)
 800529c:	e001      	b.n	80052a2 <HAL_ADC_Start+0x1b6>
 800529e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80052a2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00f      	beq.n	80052d0 <HAL_ADC_Start+0x1e4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	65da      	str	r2, [r3, #92]	; 0x5c
 80052c0:	e006      	b.n	80052d0 <HAL_ADC_Start+0x1e4>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80052ca:	e001      	b.n	80052d0 <HAL_ADC_Start+0x1e4>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
 80052ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	50000100 	.word	0x50000100
 80052e0:	50000300 	.word	0x50000300
 80052e4:	50000700 	.word	0x50000700
 80052e8:	50000400 	.word	0x50000400
 80052ec:	50000500 	.word	0x50000500
 80052f0:	50000600 	.word	0x50000600
 80052f4:	0801cc1c 	.word	0x0801cc1c

080052f8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005308:	d018      	beq.n	800533c <HAL_ADC_Stop+0x44>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a23      	ldr	r2, [pc, #140]	; (800539c <HAL_ADC_Stop+0xa4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <HAL_ADC_Stop+0x44>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a21      	ldr	r2, [pc, #132]	; (80053a0 <HAL_ADC_Stop+0xa8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <HAL_ADC_Stop+0x44>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a20      	ldr	r2, [pc, #128]	; (80053a4 <HAL_ADC_Stop+0xac>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_ADC_Stop+0x44>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <HAL_ADC_Stop+0xb0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_ADC_Stop+0x44>
 8005332:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8005336:	481d      	ldr	r0, [pc, #116]	; (80053ac <HAL_ADC_Stop+0xb4>)
 8005338:	f7fd f97a 	bl	8002630 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_ADC_Stop+0x52>
 8005346:	2302      	movs	r3, #2
 8005348:	e023      	b.n	8005392 <HAL_ADC_Stop+0x9a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005352:	2103      	movs	r1, #3
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f001 f949 	bl	80065ec <ADC_ConversionStop>
 800535a:	4603      	mov	r3, r0
 800535c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d111      	bne.n	8005388 <HAL_ADC_Stop+0x90>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 fa95 	bl	8006894 <ADC_Disable>
 800536a:	4603      	mov	r3, r0
 800536c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d109      	bne.n	8005388 <HAL_ADC_Stop+0x90>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	f043 0201 	orr.w	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005390:	7bfb      	ldrb	r3, [r7, #15]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	50000100 	.word	0x50000100
 80053a0:	50000400 	.word	0x50000400
 80053a4:	50000500 	.word	0x50000500
 80053a8:	50000600 	.word	0x50000600
 80053ac:	0801cc1c 	.word	0x0801cc1c

080053b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053c2:	d004      	beq.n	80053ce <HAL_ADC_PollForConversion+0x1e>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a86      	ldr	r2, [pc, #536]	; (80055e4 <HAL_ADC_PollForConversion+0x234>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d101      	bne.n	80053d2 <HAL_ADC_PollForConversion+0x22>
 80053ce:	4b86      	ldr	r3, [pc, #536]	; (80055e8 <HAL_ADC_PollForConversion+0x238>)
 80053d0:	e000      	b.n	80053d4 <HAL_ADC_PollForConversion+0x24>
 80053d2:	4b86      	ldr	r3, [pc, #536]	; (80055ec <HAL_ADC_PollForConversion+0x23c>)
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff f8c9 	bl	800456c <LL_ADC_GetMultimode>
 80053da:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053e4:	d018      	beq.n	8005418 <HAL_ADC_PollForConversion+0x68>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a7e      	ldr	r2, [pc, #504]	; (80055e4 <HAL_ADC_PollForConversion+0x234>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d013      	beq.n	8005418 <HAL_ADC_PollForConversion+0x68>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a7e      	ldr	r2, [pc, #504]	; (80055f0 <HAL_ADC_PollForConversion+0x240>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00e      	beq.n	8005418 <HAL_ADC_PollForConversion+0x68>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a7d      	ldr	r2, [pc, #500]	; (80055f4 <HAL_ADC_PollForConversion+0x244>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d009      	beq.n	8005418 <HAL_ADC_PollForConversion+0x68>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a7b      	ldr	r2, [pc, #492]	; (80055f8 <HAL_ADC_PollForConversion+0x248>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <HAL_ADC_PollForConversion+0x68>
 800540e:	f240 518c 	movw	r1, #1420	; 0x58c
 8005412:	487a      	ldr	r0, [pc, #488]	; (80055fc <HAL_ADC_PollForConversion+0x24c>)
 8005414:	f7fd f90c 	bl	8002630 <assert_failed>

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b08      	cmp	r3, #8
 800541e:	d102      	bne.n	8005426 <HAL_ADC_PollForConversion+0x76>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005420:	2308      	movs	r3, #8
 8005422:	61fb      	str	r3, [r7, #28]
 8005424:	e037      	b.n	8005496 <HAL_ADC_PollForConversion+0xe6>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_ADC_PollForConversion+0x88>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	2b05      	cmp	r3, #5
 8005430:	d002      	beq.n	8005438 <HAL_ADC_PollForConversion+0x88>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b09      	cmp	r3, #9
 8005436:	d111      	bne.n	800545c <HAL_ADC_PollForConversion+0xac>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544a:	f043 0220 	orr.w	r2, r3, #32
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e0c1      	b.n	80055da <HAL_ADC_PollForConversion+0x22a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005456:	2304      	movs	r3, #4
 8005458:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800545a:	e01c      	b.n	8005496 <HAL_ADC_PollForConversion+0xe6>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005464:	d004      	beq.n	8005470 <HAL_ADC_PollForConversion+0xc0>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a5e      	ldr	r2, [pc, #376]	; (80055e4 <HAL_ADC_PollForConversion+0x234>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d101      	bne.n	8005474 <HAL_ADC_PollForConversion+0xc4>
 8005470:	4b5d      	ldr	r3, [pc, #372]	; (80055e8 <HAL_ADC_PollForConversion+0x238>)
 8005472:	e000      	b.n	8005476 <HAL_ADC_PollForConversion+0xc6>
 8005474:	4b5d      	ldr	r3, [pc, #372]	; (80055ec <HAL_ADC_PollForConversion+0x23c>)
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff f886 	bl	8004588 <LL_ADC_GetMultiDMATransfer>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_ADC_PollForConversion+0xe2>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	f043 0220 	orr.w	r2, r3, #32
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e0a3      	b.n	80055da <HAL_ADC_PollForConversion+0x22a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005492:	2304      	movs	r3, #4
 8005494:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005496:	f7fe fec9 	bl	800422c <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800549c:	e021      	b.n	80054e2 <HAL_ADC_PollForConversion+0x132>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d01d      	beq.n	80054e2 <HAL_ADC_PollForConversion+0x132>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80054a6:	f7fe fec1 	bl	800422c <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d302      	bcc.n	80054bc <HAL_ADC_PollForConversion+0x10c>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d112      	bne.n	80054e2 <HAL_ADC_PollForConversion+0x132>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10b      	bne.n	80054e2 <HAL_ADC_PollForConversion+0x132>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ce:	f043 0204 	orr.w	r2, r3, #4
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e07b      	b.n	80055da <HAL_ADC_PollForConversion+0x22a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4013      	ands	r3, r2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0d6      	beq.n	800549e <HAL_ADC_PollForConversion+0xee>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe ffa1 	bl	8004448 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01c      	beq.n	8005546 <HAL_ADC_PollForConversion+0x196>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	7f5b      	ldrb	r3, [r3, #29]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d118      	bne.n	8005546 <HAL_ADC_PollForConversion+0x196>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0308 	and.w	r3, r3, #8
 800551e:	2b08      	cmp	r3, #8
 8005520:	d111      	bne.n	8005546 <HAL_ADC_PollForConversion+0x196>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d105      	bne.n	8005546 <HAL_ADC_PollForConversion+0x196>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553e:	f043 0201 	orr.w	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <HAL_ADC_PollForConversion+0x234>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_ADC_PollForConversion+0x1b4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <HAL_ADC_PollForConversion+0x244>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d002      	beq.n	8005560 <HAL_ADC_PollForConversion+0x1b0>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	e003      	b.n	8005568 <HAL_ADC_PollForConversion+0x1b8>
 8005560:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <HAL_ADC_PollForConversion+0x240>)
 8005562:	e001      	b.n	8005568 <HAL_ADC_PollForConversion+0x1b8>
 8005564:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	4293      	cmp	r3, r2
 800556e:	d008      	beq.n	8005582 <HAL_ADC_PollForConversion+0x1d2>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <HAL_ADC_PollForConversion+0x1d2>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d002      	beq.n	8005582 <HAL_ADC_PollForConversion+0x1d2>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b09      	cmp	r3, #9
 8005580:	d104      	bne.n	800558c <HAL_ADC_PollForConversion+0x1dc>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	e014      	b.n	80055b6 <HAL_ADC_PollForConversion+0x206>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <HAL_ADC_PollForConversion+0x234>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d009      	beq.n	80055aa <HAL_ADC_PollForConversion+0x1fa>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <HAL_ADC_PollForConversion+0x244>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d002      	beq.n	80055a6 <HAL_ADC_PollForConversion+0x1f6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	e003      	b.n	80055ae <HAL_ADC_PollForConversion+0x1fe>
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <HAL_ADC_PollForConversion+0x240>)
 80055a8:	e001      	b.n	80055ae <HAL_ADC_PollForConversion+0x1fe>
 80055aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80055ae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d104      	bne.n	80055c6 <HAL_ADC_PollForConversion+0x216>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2208      	movs	r2, #8
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e008      	b.n	80055d8 <HAL_ADC_PollForConversion+0x228>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d103      	bne.n	80055d8 <HAL_ADC_PollForConversion+0x228>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	220c      	movs	r2, #12
 80055d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	50000100 	.word	0x50000100
 80055e8:	50000300 	.word	0x50000300
 80055ec:	50000700 	.word	0x50000700
 80055f0:	50000400 	.word	0x50000400
 80055f4:	50000500 	.word	0x50000500
 80055f8:	50000600 	.word	0x50000600
 80055fc:	0801cc1c 	.word	0x0801cc1c

08005600 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005610:	d018      	beq.n	8005644 <HAL_ADC_GetValue+0x44>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a0f      	ldr	r2, [pc, #60]	; (8005654 <HAL_ADC_GetValue+0x54>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d013      	beq.n	8005644 <HAL_ADC_GetValue+0x44>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0d      	ldr	r2, [pc, #52]	; (8005658 <HAL_ADC_GetValue+0x58>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00e      	beq.n	8005644 <HAL_ADC_GetValue+0x44>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a0c      	ldr	r2, [pc, #48]	; (800565c <HAL_ADC_GetValue+0x5c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d009      	beq.n	8005644 <HAL_ADC_GetValue+0x44>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <HAL_ADC_GetValue+0x60>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d004      	beq.n	8005644 <HAL_ADC_GetValue+0x44>
 800563a:	f640 01b7 	movw	r1, #2231	; 0x8b7
 800563e:	4809      	ldr	r0, [pc, #36]	; (8005664 <HAL_ADC_GetValue+0x64>)
 8005640:	f7fc fff6 	bl	8002630 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	50000100 	.word	0x50000100
 8005658:	50000400 	.word	0x50000400
 800565c:	50000500 	.word	0x50000500
 8005660:	50000600 	.word	0x50000600
 8005664:	0801cc1c 	.word	0x0801cc1c

08005668 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b0b7      	sub	sp, #220	; 0xdc
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005684:	d018      	beq.n	80056b8 <HAL_ADC_ConfigChannel+0x50>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a92      	ldr	r2, [pc, #584]	; (80058d4 <HAL_ADC_ConfigChannel+0x26c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_ADC_ConfigChannel+0x50>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a90      	ldr	r2, [pc, #576]	; (80058d8 <HAL_ADC_ConfigChannel+0x270>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_ADC_ConfigChannel+0x50>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a8f      	ldr	r2, [pc, #572]	; (80058dc <HAL_ADC_ConfigChannel+0x274>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_ADC_ConfigChannel+0x50>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a8d      	ldr	r2, [pc, #564]	; (80058e0 <HAL_ADC_ConfigChannel+0x278>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_ADC_ConfigChannel+0x50>
 80056ae:	f44f 612d 	mov.w	r1, #2768	; 0xad0
 80056b2:	488c      	ldr	r0, [pc, #560]	; (80058e4 <HAL_ADC_ConfigChannel+0x27c>)
 80056b4:	f7fc ffbc 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b06      	cmp	r3, #6
 80056be:	d04f      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b0c      	cmp	r3, #12
 80056c6:	d04b      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b12      	cmp	r3, #18
 80056ce:	d047      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b18      	cmp	r3, #24
 80056d6:	d043      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e0:	d03e      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80056ea:	d039      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80056f4:	d034      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 80056fe:	d02f      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8005708:	d02a      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005712:	d025      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f240 2206 	movw	r2, #518	; 0x206
 800571c:	4293      	cmp	r3, r2
 800571e:	d01f      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8005728:	d01a      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f240 2212 	movw	r2, #530	; 0x212
 8005732:	4293      	cmp	r3, r2
 8005734:	d014      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800573e:	d00f      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005748:	d00a      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f240 3206 	movw	r2, #774	; 0x306
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_ADC_ConfigChannel+0xf8>
 8005756:	f640 21d1 	movw	r1, #2769	; 0xad1
 800575a:	4862      	ldr	r0, [pc, #392]	; (80058e4 <HAL_ADC_ConfigChannel+0x27c>)
 800575c:	f7fc ff68 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d025      	beq.n	80057b4 <HAL_ADC_ConfigChannel+0x14c>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005770:	d020      	beq.n	80057b4 <HAL_ADC_ConfigChannel+0x14c>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d01c      	beq.n	80057b4 <HAL_ADC_ConfigChannel+0x14c>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d018      	beq.n	80057b4 <HAL_ADC_ConfigChannel+0x14c>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	2b03      	cmp	r3, #3
 8005788:	d014      	beq.n	80057b4 <HAL_ADC_ConfigChannel+0x14c>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b04      	cmp	r3, #4
 8005790:	d010      	beq.n	80057b4 <HAL_ADC_ConfigChannel+0x14c>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b05      	cmp	r3, #5
 8005798:	d00c      	beq.n	80057b4 <HAL_ADC_ConfigChannel+0x14c>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b06      	cmp	r3, #6
 80057a0:	d008      	beq.n	80057b4 <HAL_ADC_ConfigChannel+0x14c>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b07      	cmp	r3, #7
 80057a8:	d004      	beq.n	80057b4 <HAL_ADC_ConfigChannel+0x14c>
 80057aa:	f640 21d2 	movw	r1, #2770	; 0xad2
 80057ae:	484d      	ldr	r0, [pc, #308]	; (80058e4 <HAL_ADC_ConfigChannel+0x27c>)
 80057b0:	f7fc ff3e 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b7f      	cmp	r3, #127	; 0x7f
 80057ba:	d009      	beq.n	80057d0 <HAL_ADC_ConfigChannel+0x168>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4a49      	ldr	r2, [pc, #292]	; (80058e8 <HAL_ADC_ConfigChannel+0x280>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_ADC_ConfigChannel+0x168>
 80057c6:	f640 21d3 	movw	r1, #2771	; 0xad3
 80057ca:	4846      	ldr	r0, [pc, #280]	; (80058e4 <HAL_ADC_ConfigChannel+0x27c>)
 80057cc:	f7fc ff30 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d014      	beq.n	8005802 <HAL_ADC_ConfigChannel+0x19a>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d010      	beq.n	8005802 <HAL_ADC_ConfigChannel+0x19a>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d00c      	beq.n	8005802 <HAL_ADC_ConfigChannel+0x19a>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d008      	beq.n	8005802 <HAL_ADC_ConfigChannel+0x19a>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d004      	beq.n	8005802 <HAL_ADC_ConfigChannel+0x19a>
 80057f8:	f640 21d4 	movw	r1, #2772	; 0xad4
 80057fc:	4839      	ldr	r0, [pc, #228]	; (80058e4 <HAL_ADC_ConfigChannel+0x27c>)
 80057fe:	f7fc ff17 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	695c      	ldr	r4, [r3, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fd70 	bl	80042f0 <LL_ADC_GetResolution>
 8005810:	4603      	mov	r3, r0
 8005812:	089b      	lsrs	r3, r3, #2
 8005814:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	429c      	cmp	r4, r3
 800581e:	d904      	bls.n	800582a <HAL_ADC_ConfigChannel+0x1c2>
 8005820:	f640 21d5 	movw	r1, #2773	; 0xad5
 8005824:	482f      	ldr	r0, [pc, #188]	; (80058e4 <HAL_ADC_ConfigChannel+0x27c>)
 8005826:	f7fc ff03 	bl	8002630 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b04      	cmp	r3, #4
 8005830:	d009      	beq.n	8005846 <HAL_ADC_ConfigChannel+0x1de>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005838:	2b01      	cmp	r3, #1
 800583a:	d104      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x1de>
 800583c:	f640 21d9 	movw	r1, #2777	; 0xad9
 8005840:	4828      	ldr	r0, [pc, #160]	; (80058e4 <HAL_ADC_ConfigChannel+0x27c>)
 8005842:	f7fc fef5 	bl	8002630 <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <HAL_ADC_ConfigChannel+0x280>)
 800584c:	4293      	cmp	r3, r2
 800584e:	f000 8183 	beq.w	8005b58 <HAL_ADC_ConfigChannel+0x4f0>
  {
    assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a25      	ldr	r2, [pc, #148]	; (80058ec <HAL_ADC_ConfigChannel+0x284>)
 8005858:	4293      	cmp	r3, r2
 800585a:	f000 824c 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a23      	ldr	r2, [pc, #140]	; (80058f0 <HAL_ADC_ConfigChannel+0x288>)
 8005864:	4293      	cmp	r3, r2
 8005866:	f000 8246 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a21      	ldr	r2, [pc, #132]	; (80058f4 <HAL_ADC_ConfigChannel+0x28c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	f000 8240 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <HAL_ADC_ConfigChannel+0x290>)
 800587c:	4293      	cmp	r3, r2
 800587e:	f000 823a 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <HAL_ADC_ConfigChannel+0x294>)
 8005888:	4293      	cmp	r3, r2
 800588a:	f000 8234 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <HAL_ADC_ConfigChannel+0x298>)
 8005894:	4293      	cmp	r3, r2
 8005896:	f000 822e 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a19      	ldr	r2, [pc, #100]	; (8005904 <HAL_ADC_ConfigChannel+0x29c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	f000 8228 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <HAL_ADC_ConfigChannel+0x2a0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	f000 8222 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a15      	ldr	r2, [pc, #84]	; (800590c <HAL_ADC_ConfigChannel+0x2a4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	f000 821c 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a13      	ldr	r2, [pc, #76]	; (8005910 <HAL_ADC_ConfigChannel+0x2a8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	f000 8216 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a11      	ldr	r2, [pc, #68]	; (8005914 <HAL_ADC_ConfigChannel+0x2ac>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	e021      	b.n	8005918 <HAL_ADC_ConfigChannel+0x2b0>
 80058d4:	50000100 	.word	0x50000100
 80058d8:	50000400 	.word	0x50000400
 80058dc:	50000500 	.word	0x50000500
 80058e0:	50000600 	.word	0x50000600
 80058e4:	0801cc1c 	.word	0x0801cc1c
 80058e8:	407f0000 	.word	0x407f0000
 80058ec:	04300002 	.word	0x04300002
 80058f0:	08600004 	.word	0x08600004
 80058f4:	19200040 	.word	0x19200040
 80058f8:	1d500080 	.word	0x1d500080
 80058fc:	21800100 	.word	0x21800100
 8005900:	25b00200 	.word	0x25b00200
 8005904:	2a000400 	.word	0x2a000400
 8005908:	2e300800 	.word	0x2e300800
 800590c:	32601000 	.word	0x32601000
 8005910:	3ac04000 	.word	0x3ac04000
 8005914:	3ef08000 	.word	0x3ef08000
 8005918:	f000 81ed 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005924:	d129      	bne.n	800597a <HAL_ADC_ConfigChannel+0x312>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a75      	ldr	r2, [pc, #468]	; (8005b00 <HAL_ADC_ConfigChannel+0x498>)
 800592c:	4293      	cmp	r3, r2
 800592e:	f000 81e2 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a73      	ldr	r2, [pc, #460]	; (8005b04 <HAL_ADC_ConfigChannel+0x49c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	f000 81dc 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a71      	ldr	r2, [pc, #452]	; (8005b08 <HAL_ADC_ConfigChannel+0x4a0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	f000 81d6 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a6f      	ldr	r2, [pc, #444]	; (8005b0c <HAL_ADC_ConfigChannel+0x4a4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	f000 81d0 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a6d      	ldr	r2, [pc, #436]	; (8005b10 <HAL_ADC_ConfigChannel+0x4a8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	f000 81ca 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a6b      	ldr	r2, [pc, #428]	; (8005b14 <HAL_ADC_ConfigChannel+0x4ac>)
 8005968:	4293      	cmp	r3, r2
 800596a:	f000 81c4 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a69      	ldr	r2, [pc, #420]	; (8005b18 <HAL_ADC_ConfigChannel+0x4b0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	f000 81be 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a67      	ldr	r2, [pc, #412]	; (8005b1c <HAL_ADC_ConfigChannel+0x4b4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d129      	bne.n	80059d8 <HAL_ADC_ConfigChannel+0x370>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a5d      	ldr	r2, [pc, #372]	; (8005b00 <HAL_ADC_ConfigChannel+0x498>)
 800598a:	4293      	cmp	r3, r2
 800598c:	f000 81b3 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a5b      	ldr	r2, [pc, #364]	; (8005b04 <HAL_ADC_ConfigChannel+0x49c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	f000 81ad 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a59      	ldr	r2, [pc, #356]	; (8005b08 <HAL_ADC_ConfigChannel+0x4a0>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	f000 81a7 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a5c      	ldr	r2, [pc, #368]	; (8005b20 <HAL_ADC_ConfigChannel+0x4b8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	f000 81a1 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a5a      	ldr	r2, [pc, #360]	; (8005b24 <HAL_ADC_ConfigChannel+0x4bc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	f000 819b 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a58      	ldr	r2, [pc, #352]	; (8005b28 <HAL_ADC_ConfigChannel+0x4c0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	f000 8195 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a56      	ldr	r2, [pc, #344]	; (8005b2c <HAL_ADC_ConfigChannel+0x4c4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	f000 818f 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a54      	ldr	r2, [pc, #336]	; (8005b30 <HAL_ADC_ConfigChannel+0x4c8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d129      	bne.n	8005a36 <HAL_ADC_ConfigChannel+0x3ce>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a46      	ldr	r2, [pc, #280]	; (8005b00 <HAL_ADC_ConfigChannel+0x498>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	f000 8184 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a44      	ldr	r2, [pc, #272]	; (8005b04 <HAL_ADC_ConfigChannel+0x49c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	f000 817e 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a42      	ldr	r2, [pc, #264]	; (8005b08 <HAL_ADC_ConfigChannel+0x4a0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	f000 8178 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a4a      	ldr	r2, [pc, #296]	; (8005b34 <HAL_ADC_ConfigChannel+0x4cc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	f000 8172 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a48      	ldr	r2, [pc, #288]	; (8005b38 <HAL_ADC_ConfigChannel+0x4d0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	f000 816c 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a3c      	ldr	r2, [pc, #240]	; (8005b14 <HAL_ADC_ConfigChannel+0x4ac>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	f000 8166 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3a      	ldr	r2, [pc, #232]	; (8005b18 <HAL_ADC_ConfigChannel+0x4b0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	f000 8160 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a40      	ldr	r2, [pc, #256]	; (8005b3c <HAL_ADC_ConfigChannel+0x4d4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d129      	bne.n	8005a94 <HAL_ADC_ConfigChannel+0x42c>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <HAL_ADC_ConfigChannel+0x498>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	f000 8155 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <HAL_ADC_ConfigChannel+0x49c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	f000 814f 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a2a      	ldr	r2, [pc, #168]	; (8005b08 <HAL_ADC_ConfigChannel+0x4a0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	f000 8149 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2d      	ldr	r2, [pc, #180]	; (8005b20 <HAL_ADC_ConfigChannel+0x4b8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	f000 8143 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a30      	ldr	r2, [pc, #192]	; (8005b38 <HAL_ADC_ConfigChannel+0x4d0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	f000 813d 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2f      	ldr	r2, [pc, #188]	; (8005b40 <HAL_ADC_ConfigChannel+0x4d8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	f000 8137 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <HAL_ADC_ConfigChannel+0x4b0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	f000 8131 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <HAL_ADC_ConfigChannel+0x4dc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d129      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x48a>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a29      	ldr	r2, [pc, #164]	; (8005b48 <HAL_ADC_ConfigChannel+0x4e0>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	f000 8126 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a27      	ldr	r2, [pc, #156]	; (8005b4c <HAL_ADC_ConfigChannel+0x4e4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	f000 8120 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a25      	ldr	r2, [pc, #148]	; (8005b50 <HAL_ADC_ConfigChannel+0x4e8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	f000 811a 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a16      	ldr	r2, [pc, #88]	; (8005b20 <HAL_ADC_ConfigChannel+0x4b8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	f000 8114 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a19      	ldr	r2, [pc, #100]	; (8005b38 <HAL_ADC_ConfigChannel+0x4d0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	f000 810e 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a0d      	ldr	r2, [pc, #52]	; (8005b14 <HAL_ADC_ConfigChannel+0x4ac>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	f000 8108 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a0b      	ldr	r2, [pc, #44]	; (8005b18 <HAL_ADC_ConfigChannel+0x4b0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	f000 8102 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005af2:	f640 21de 	movw	r1, #2782	; 0xade
 8005af6:	4817      	ldr	r0, [pc, #92]	; (8005b54 <HAL_ADC_ConfigChannel+0x4ec>)
 8005af8:	f7fc fd9a 	bl	8002630 <assert_failed>
 8005afc:	e0fb      	b.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005afe:	bf00      	nop
 8005b00:	0c900008 	.word	0x0c900008
 8005b04:	10c00010 	.word	0x10c00010
 8005b08:	14f00020 	.word	0x14f00020
 8005b0c:	b6902000 	.word	0xb6902000
 8005b10:	c3210000 	.word	0xc3210000
 8005b14:	c7520000 	.word	0xc7520000
 8005b18:	cb840000 	.word	0xcb840000
 8005b1c:	50000100 	.word	0x50000100
 8005b20:	36902000 	.word	0x36902000
 8005b24:	c3290000 	.word	0xc3290000
 8005b28:	47520000 	.word	0x47520000
 8005b2c:	cb8c0000 	.word	0xcb8c0000
 8005b30:	50000400 	.word	0x50000400
 8005b34:	b6982000 	.word	0xb6982000
 8005b38:	43210000 	.word	0x43210000
 8005b3c:	50000500 	.word	0x50000500
 8005b40:	c75a0000 	.word	0xc75a0000
 8005b44:	50000600 	.word	0x50000600
 8005b48:	8c900008 	.word	0x8c900008
 8005b4c:	90c00010 	.word	0x90c00010
 8005b50:	94f00020 	.word	0x94f00020
 8005b54:	0801cc1c 	.word	0x0801cc1c
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a8b      	ldr	r2, [pc, #556]	; (8005d8c <HAL_ADC_ConfigChannel+0x724>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	f000 80c9 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a89      	ldr	r2, [pc, #548]	; (8005d90 <HAL_ADC_ConfigChannel+0x728>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	f000 80c3 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a87      	ldr	r2, [pc, #540]	; (8005d94 <HAL_ADC_ConfigChannel+0x72c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	f000 80bd 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a85      	ldr	r2, [pc, #532]	; (8005d98 <HAL_ADC_ConfigChannel+0x730>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	f000 80b7 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a83      	ldr	r2, [pc, #524]	; (8005d9c <HAL_ADC_ConfigChannel+0x734>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	f000 80b1 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a81      	ldr	r2, [pc, #516]	; (8005da0 <HAL_ADC_ConfigChannel+0x738>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	f000 80ab 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a7f      	ldr	r2, [pc, #508]	; (8005da4 <HAL_ADC_ConfigChannel+0x73c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	f000 80a5 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a7d      	ldr	r2, [pc, #500]	; (8005da8 <HAL_ADC_ConfigChannel+0x740>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	f000 809f 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bc0:	d117      	bne.n	8005bf2 <HAL_ADC_ConfigChannel+0x58a>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a79      	ldr	r2, [pc, #484]	; (8005dac <HAL_ADC_ConfigChannel+0x744>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	f000 8094 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a77      	ldr	r2, [pc, #476]	; (8005db0 <HAL_ADC_ConfigChannel+0x748>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	f000 808e 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a75      	ldr	r2, [pc, #468]	; (8005db4 <HAL_ADC_ConfigChannel+0x74c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	f000 8088 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a73      	ldr	r2, [pc, #460]	; (8005db8 <HAL_ADC_ConfigChannel+0x750>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	f000 8082 	beq.w	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a71      	ldr	r2, [pc, #452]	; (8005dbc <HAL_ADC_ConfigChannel+0x754>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d11d      	bne.n	8005c38 <HAL_ADC_ConfigChannel+0x5d0>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a6a      	ldr	r2, [pc, #424]	; (8005dac <HAL_ADC_ConfigChannel+0x744>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d077      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a69      	ldr	r2, [pc, #420]	; (8005db0 <HAL_ADC_ConfigChannel+0x748>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d072      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a67      	ldr	r2, [pc, #412]	; (8005db4 <HAL_ADC_ConfigChannel+0x74c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d06d      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a66      	ldr	r2, [pc, #408]	; (8005db8 <HAL_ADC_ConfigChannel+0x750>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d068      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a65      	ldr	r2, [pc, #404]	; (8005dc0 <HAL_ADC_ConfigChannel+0x758>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d063      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a64      	ldr	r2, [pc, #400]	; (8005dc4 <HAL_ADC_ConfigChannel+0x75c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d05e      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a62      	ldr	r2, [pc, #392]	; (8005dc8 <HAL_ADC_ConfigChannel+0x760>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d118      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x60c>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a59      	ldr	r2, [pc, #356]	; (8005dac <HAL_ADC_ConfigChannel+0x744>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d054      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a57      	ldr	r2, [pc, #348]	; (8005db0 <HAL_ADC_ConfigChannel+0x748>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d04f      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a56      	ldr	r2, [pc, #344]	; (8005db4 <HAL_ADC_ConfigChannel+0x74c>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d04a      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a54      	ldr	r2, [pc, #336]	; (8005db8 <HAL_ADC_ConfigChannel+0x750>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d045      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a57      	ldr	r2, [pc, #348]	; (8005dcc <HAL_ADC_ConfigChannel+0x764>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d040      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a55      	ldr	r2, [pc, #340]	; (8005dd0 <HAL_ADC_ConfigChannel+0x768>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d122      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x65c>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a4a      	ldr	r2, [pc, #296]	; (8005dac <HAL_ADC_ConfigChannel+0x744>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d036      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a48      	ldr	r2, [pc, #288]	; (8005db0 <HAL_ADC_ConfigChannel+0x748>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d031      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a47      	ldr	r2, [pc, #284]	; (8005db4 <HAL_ADC_ConfigChannel+0x74c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d02c      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a45      	ldr	r2, [pc, #276]	; (8005db8 <HAL_ADC_ConfigChannel+0x750>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d027      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a45      	ldr	r2, [pc, #276]	; (8005dc0 <HAL_ADC_ConfigChannel+0x758>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d022      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a43      	ldr	r2, [pc, #268]	; (8005dc4 <HAL_ADC_ConfigChannel+0x75c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01d      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a43      	ldr	r2, [pc, #268]	; (8005dcc <HAL_ADC_ConfigChannel+0x764>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d018      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a42      	ldr	r2, [pc, #264]	; (8005dd4 <HAL_ADC_ConfigChannel+0x76c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10e      	bne.n	8005cec <HAL_ADC_ConfigChannel+0x684>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a3b      	ldr	r2, [pc, #236]	; (8005dc0 <HAL_ADC_ConfigChannel+0x758>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00e      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a39      	ldr	r2, [pc, #228]	; (8005dc4 <HAL_ADC_ConfigChannel+0x75c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d009      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a39      	ldr	r2, [pc, #228]	; (8005dcc <HAL_ADC_ConfigChannel+0x764>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_ADC_ConfigChannel+0x68e>
 8005cec:	f640 21e2 	movw	r1, #2786	; 0xae2
 8005cf0:	4839      	ldr	r0, [pc, #228]	; (8005dd8 <HAL_ADC_ConfigChannel+0x770>)
 8005cf2:	f7fc fc9d 	bl	8002630 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d102      	bne.n	8005d06 <HAL_ADC_ConfigChannel+0x69e>
 8005d00:	2302      	movs	r3, #2
 8005d02:	f000 bc58 	b.w	80065b6 <HAL_ADC_ConfigChannel+0xf4e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe fd0a 	bl	800472c <LL_ADC_REG_IsConversionOngoing>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f040 8438 	bne.w	8006590 <HAL_ADC_ConfigChannel+0xf28>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6859      	ldr	r1, [r3, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f7fe fb9e 	bl	800446e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fcf8 	bl	800472c <LL_ADC_REG_IsConversionOngoing>
 8005d3c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fe fd18 	bl	800477a <LL_ADC_INJ_IsConversionOngoing>
 8005d4a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 821f 	bne.w	8006196 <HAL_ADC_ConfigChannel+0xb2e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f040 821a 	bne.w	8006196 <HAL_ADC_ConfigChannel+0xb2e>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d6a:	d137      	bne.n	8005ddc <HAL_ADC_ConfigChannel+0x774>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6818      	ldr	r0, [r3, #0]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2200      	movs	r2, #0
 8005d76:	4619      	mov	r1, r3
 8005d78:	f7fe fba5 	bl	80044c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe fb4c 	bl	8004422 <LL_ADC_SetSamplingTimeCommonConfig>
 8005d8a:	e036      	b.n	8005dfa <HAL_ADC_ConfigChannel+0x792>
 8005d8c:	04300002 	.word	0x04300002
 8005d90:	19200040 	.word	0x19200040
 8005d94:	1d500080 	.word	0x1d500080
 8005d98:	21800100 	.word	0x21800100
 8005d9c:	25b00200 	.word	0x25b00200
 8005da0:	2a000400 	.word	0x2a000400
 8005da4:	2e300800 	.word	0x2e300800
 8005da8:	3ac04000 	.word	0x3ac04000
 8005dac:	08600004 	.word	0x08600004
 8005db0:	0c900008 	.word	0x0c900008
 8005db4:	10c00010 	.word	0x10c00010
 8005db8:	14f00020 	.word	0x14f00020
 8005dbc:	50000100 	.word	0x50000100
 8005dc0:	32601000 	.word	0x32601000
 8005dc4:	36902000 	.word	0x36902000
 8005dc8:	50000400 	.word	0x50000400
 8005dcc:	3ef08000 	.word	0x3ef08000
 8005dd0:	50000500 	.word	0x50000500
 8005dd4:	50000600 	.word	0x50000600
 8005dd8:	0801cc1c 	.word	0x0801cc1c
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6818      	ldr	r0, [r3, #0]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	6819      	ldr	r1, [r3, #0]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	461a      	mov	r2, r3
 8005dea:	f7fe fb6c 	bl	80044c6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2100      	movs	r1, #0
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe fb14 	bl	8004422 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	08db      	lsrs	r3, r3, #3
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d03d      	beq.n	8005e98 <HAL_ADC_ConfigChannel+0x830>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	6919      	ldr	r1, [r3, #16]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e2c:	f7fe fa6e 	bl	800430c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d009      	beq.n	8005e4c <HAL_ADC_ConfigChannel+0x7e4>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e40:	d004      	beq.n	8005e4c <HAL_ADC_ConfigChannel+0x7e4>
 8005e42:	f640 311a 	movw	r1, #2842	; 0xb1a
 8005e46:	48b3      	ldr	r0, [pc, #716]	; (8006114 <HAL_ADC_ConfigChannel+0xaac>)
 8005e48:	f7fc fbf2 	bl	8002630 <assert_failed>
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	7f1b      	ldrb	r3, [r3, #28]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_ADC_ConfigChannel+0x7fe>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	7f1b      	ldrb	r3, [r3, #28]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d004      	beq.n	8005e66 <HAL_ADC_ConfigChannel+0x7fe>
 8005e5c:	f640 311b 	movw	r1, #2843	; 0xb1b
 8005e60:	48ac      	ldr	r0, [pc, #688]	; (8006114 <HAL_ADC_ConfigChannel+0xaac>)
 8005e62:	f7fc fbe5 	bl	8002630 <assert_failed>
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6919      	ldr	r1, [r3, #16]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f7fe fa9f 	bl	80043b6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6919      	ldr	r1, [r3, #16]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	7f1b      	ldrb	r3, [r3, #28]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d102      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x826>
 8005e88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e8c:	e000      	b.n	8005e90 <HAL_ADC_ConfigChannel+0x828>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	461a      	mov	r2, r3
 8005e92:	f7fe faab 	bl	80043ec <LL_ADC_SetOffsetSaturation>
 8005e96:	e17e      	b.n	8006196 <HAL_ADC_ConfigChannel+0xb2e>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fa58 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <HAL_ADC_ConfigChannel+0x85c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe fa4d 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	0e9b      	lsrs	r3, r3, #26
 8005ebe:	f003 021f 	and.w	r2, r3, #31
 8005ec2:	e01e      	b.n	8005f02 <HAL_ADC_ConfigChannel+0x89a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fe fa42 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eda:	fa93 f3a3 	rbit	r3, r3
 8005ede:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8005ee2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8005eea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x88e>
    return 32U;
 8005ef2:	2320      	movs	r3, #32
 8005ef4:	e004      	b.n	8005f00 <HAL_ADC_ConfigChannel+0x898>
  return __builtin_clz(value);
 8005ef6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005efa:	fab3 f383 	clz	r3, r3
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d105      	bne.n	8005f1a <HAL_ADC_ConfigChannel+0x8b2>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	0e9b      	lsrs	r3, r3, #26
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	e018      	b.n	8005f4c <HAL_ADC_ConfigChannel+0x8e4>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f26:	fa93 f3a3 	rbit	r3, r3
 8005f2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005f2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005f36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_ADC_ConfigChannel+0x8da>
    return 32U;
 8005f3e:	2320      	movs	r3, #32
 8005f40:	e004      	b.n	8005f4c <HAL_ADC_ConfigChannel+0x8e4>
  return __builtin_clz(value);
 8005f42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f46:	fab3 f383 	clz	r3, r3
 8005f4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d106      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x8f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2200      	movs	r2, #0
 8005f56:	2100      	movs	r1, #0
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe fa11 	bl	8004380 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2101      	movs	r1, #1
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe f9f5 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <HAL_ADC_ConfigChannel+0x922>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2101      	movs	r1, #1
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe f9ea 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005f80:	4603      	mov	r3, r0
 8005f82:	0e9b      	lsrs	r3, r3, #26
 8005f84:	f003 021f 	and.w	r2, r3, #31
 8005f88:	e01e      	b.n	8005fc8 <HAL_ADC_ConfigChannel+0x960>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2101      	movs	r1, #1
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe f9df 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fa0:	fa93 f3a3 	rbit	r3, r3
 8005fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005fa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_ADC_ConfigChannel+0x954>
    return 32U;
 8005fb8:	2320      	movs	r3, #32
 8005fba:	e004      	b.n	8005fc6 <HAL_ADC_ConfigChannel+0x95e>
  return __builtin_clz(value);
 8005fbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fc0:	fab3 f383 	clz	r3, r3
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <HAL_ADC_ConfigChannel+0x978>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	0e9b      	lsrs	r3, r3, #26
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	e018      	b.n	8006012 <HAL_ADC_ConfigChannel+0x9aa>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fec:	fa93 f3a3 	rbit	r3, r3
 8005ff0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005ff4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <HAL_ADC_ConfigChannel+0x9a0>
    return 32U;
 8006004:	2320      	movs	r3, #32
 8006006:	e004      	b.n	8006012 <HAL_ADC_ConfigChannel+0x9aa>
  return __builtin_clz(value);
 8006008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800600c:	fab3 f383 	clz	r3, r3
 8006010:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006012:	429a      	cmp	r2, r3
 8006014:	d106      	bne.n	8006024 <HAL_ADC_ConfigChannel+0x9bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	2101      	movs	r1, #1
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe f9ae 	bl	8004380 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2102      	movs	r1, #2
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe f992 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8006030:	4603      	mov	r3, r0
 8006032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <HAL_ADC_ConfigChannel+0x9e8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2102      	movs	r1, #2
 8006040:	4618      	mov	r0, r3
 8006042:	f7fe f987 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8006046:	4603      	mov	r3, r0
 8006048:	0e9b      	lsrs	r3, r3, #26
 800604a:	f003 021f 	and.w	r2, r3, #31
 800604e:	e01e      	b.n	800608e <HAL_ADC_ConfigChannel+0xa26>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2102      	movs	r1, #2
 8006056:	4618      	mov	r0, r3
 8006058:	f7fe f97c 	bl	8004354 <LL_ADC_GetOffsetChannel>
 800605c:	4603      	mov	r3, r0
 800605e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006066:	fa93 f3a3 	rbit	r3, r3
 800606a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800606e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006076:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_ADC_ConfigChannel+0xa1a>
    return 32U;
 800607e:	2320      	movs	r3, #32
 8006080:	e004      	b.n	800608c <HAL_ADC_ConfigChannel+0xa24>
  return __builtin_clz(value);
 8006082:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006086:	fab3 f383 	clz	r3, r3
 800608a:	b2db      	uxtb	r3, r3
 800608c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006096:	2b00      	cmp	r3, #0
 8006098:	d105      	bne.n	80060a6 <HAL_ADC_ConfigChannel+0xa3e>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	0e9b      	lsrs	r3, r3, #26
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	e016      	b.n	80060d4 <HAL_ADC_ConfigChannel+0xa6c>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060b2:	fa93 f3a3 	rbit	r3, r3
 80060b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80060b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80060be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_ADC_ConfigChannel+0xa62>
    return 32U;
 80060c6:	2320      	movs	r3, #32
 80060c8:	e004      	b.n	80060d4 <HAL_ADC_ConfigChannel+0xa6c>
  return __builtin_clz(value);
 80060ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060ce:	fab3 f383 	clz	r3, r3
 80060d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d106      	bne.n	80060e6 <HAL_ADC_ConfigChannel+0xa7e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2200      	movs	r2, #0
 80060de:	2102      	movs	r1, #2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe f94d 	bl	8004380 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2103      	movs	r1, #3
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fe f931 	bl	8004354 <LL_ADC_GetOffsetChannel>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10d      	bne.n	8006118 <HAL_ADC_ConfigChannel+0xab0>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2103      	movs	r1, #3
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe f926 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8006108:	4603      	mov	r3, r0
 800610a:	0e9b      	lsrs	r3, r3, #26
 800610c:	f003 021f 	and.w	r2, r3, #31
 8006110:	e01a      	b.n	8006148 <HAL_ADC_ConfigChannel+0xae0>
 8006112:	bf00      	nop
 8006114:	0801cc1c 	.word	0x0801cc1c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2103      	movs	r1, #3
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe f918 	bl	8004354 <LL_ADC_GetOffsetChannel>
 8006124:	4603      	mov	r3, r0
 8006126:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006128:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800612a:	fa93 f3a3 	rbit	r3, r3
 800612e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006130:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006132:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_ADC_ConfigChannel+0xad6>
    return 32U;
 800613a:	2320      	movs	r3, #32
 800613c:	e003      	b.n	8006146 <HAL_ADC_ConfigChannel+0xade>
  return __builtin_clz(value);
 800613e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006140:	fab3 f383 	clz	r3, r3
 8006144:	b2db      	uxtb	r3, r3
 8006146:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006150:	2b00      	cmp	r3, #0
 8006152:	d105      	bne.n	8006160 <HAL_ADC_ConfigChannel+0xaf8>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	0e9b      	lsrs	r3, r3, #26
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	e011      	b.n	8006184 <HAL_ADC_ConfigChannel+0xb1c>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006168:	fa93 f3a3 	rbit	r3, r3
 800616c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800616e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006170:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_ADC_ConfigChannel+0xb14>
    return 32U;
 8006178:	2320      	movs	r3, #32
 800617a:	e003      	b.n	8006184 <HAL_ADC_ConfigChannel+0xb1c>
  return __builtin_clz(value);
 800617c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617e:	fab3 f383 	clz	r3, r3
 8006182:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006184:	429a      	cmp	r2, r3
 8006186:	d106      	bne.n	8006196 <HAL_ADC_ConfigChannel+0xb2e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2200      	movs	r2, #0
 800618e:	2103      	movs	r1, #3
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe f8f5 	bl	8004380 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fa78 	bl	8004690 <LL_ADC_IsEnabled>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f040 813d 	bne.w	8006422 <HAL_ADC_ConfigChannel+0xdba>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	6819      	ldr	r1, [r3, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	461a      	mov	r2, r3
 80061b6:	f7fe f9b1 	bl	800451c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	4aa2      	ldr	r2, [pc, #648]	; (8006448 <HAL_ADC_ConfigChannel+0xde0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	f040 812e 	bne.w	8006422 <HAL_ADC_ConfigChannel+0xdba>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10b      	bne.n	80061ee <HAL_ADC_ConfigChannel+0xb86>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	0e9b      	lsrs	r3, r3, #26
 80061dc:	3301      	adds	r3, #1
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2b09      	cmp	r3, #9
 80061e4:	bf94      	ite	ls
 80061e6:	2301      	movls	r3, #1
 80061e8:	2300      	movhi	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	e019      	b.n	8006222 <HAL_ADC_ConfigChannel+0xbba>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f6:	fa93 f3a3 	rbit	r3, r3
 80061fa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80061fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_ADC_ConfigChannel+0xba2>
    return 32U;
 8006206:	2320      	movs	r3, #32
 8006208:	e003      	b.n	8006212 <HAL_ADC_ConfigChannel+0xbaa>
  return __builtin_clz(value);
 800620a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800620c:	fab3 f383 	clz	r3, r3
 8006210:	b2db      	uxtb	r3, r3
 8006212:	3301      	adds	r3, #1
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2b09      	cmp	r3, #9
 800621a:	bf94      	ite	ls
 800621c:	2301      	movls	r3, #1
 800621e:	2300      	movhi	r3, #0
 8006220:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006222:	2b00      	cmp	r3, #0
 8006224:	d079      	beq.n	800631a <HAL_ADC_ConfigChannel+0xcb2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800622e:	2b00      	cmp	r3, #0
 8006230:	d107      	bne.n	8006242 <HAL_ADC_ConfigChannel+0xbda>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	0e9b      	lsrs	r3, r3, #26
 8006238:	3301      	adds	r3, #1
 800623a:	069b      	lsls	r3, r3, #26
 800623c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006240:	e015      	b.n	800626e <HAL_ADC_ConfigChannel+0xc06>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624a:	fa93 f3a3 	rbit	r3, r3
 800624e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006252:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_ADC_ConfigChannel+0xbf6>
    return 32U;
 800625a:	2320      	movs	r3, #32
 800625c:	e003      	b.n	8006266 <HAL_ADC_ConfigChannel+0xbfe>
  return __builtin_clz(value);
 800625e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006260:	fab3 f383 	clz	r3, r3
 8006264:	b2db      	uxtb	r3, r3
 8006266:	3301      	adds	r3, #1
 8006268:	069b      	lsls	r3, r3, #26
 800626a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <HAL_ADC_ConfigChannel+0xc26>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	0e9b      	lsrs	r3, r3, #26
 8006280:	3301      	adds	r3, #1
 8006282:	f003 031f 	and.w	r3, r3, #31
 8006286:	2101      	movs	r1, #1
 8006288:	fa01 f303 	lsl.w	r3, r1, r3
 800628c:	e017      	b.n	80062be <HAL_ADC_ConfigChannel+0xc56>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006296:	fa93 f3a3 	rbit	r3, r3
 800629a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800629c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80062a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_ADC_ConfigChannel+0xc42>
    return 32U;
 80062a6:	2320      	movs	r3, #32
 80062a8:	e003      	b.n	80062b2 <HAL_ADC_ConfigChannel+0xc4a>
  return __builtin_clz(value);
 80062aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ac:	fab3 f383 	clz	r3, r3
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	3301      	adds	r3, #1
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	2101      	movs	r1, #1
 80062ba:	fa01 f303 	lsl.w	r3, r1, r3
 80062be:	ea42 0103 	orr.w	r1, r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <HAL_ADC_ConfigChannel+0xc7c>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	0e9b      	lsrs	r3, r3, #26
 80062d4:	3301      	adds	r3, #1
 80062d6:	f003 021f 	and.w	r2, r3, #31
 80062da:	4613      	mov	r3, r2
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	4413      	add	r3, r2
 80062e0:	051b      	lsls	r3, r3, #20
 80062e2:	e018      	b.n	8006316 <HAL_ADC_ConfigChannel+0xcae>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	fa93 f3a3 	rbit	r3, r3
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80062f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80062f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <HAL_ADC_ConfigChannel+0xc98>
    return 32U;
 80062fc:	2320      	movs	r3, #32
 80062fe:	e003      	b.n	8006308 <HAL_ADC_ConfigChannel+0xca0>
  return __builtin_clz(value);
 8006300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006302:	fab3 f383 	clz	r3, r3
 8006306:	b2db      	uxtb	r3, r3
 8006308:	3301      	adds	r3, #1
 800630a:	f003 021f 	and.w	r2, r3, #31
 800630e:	4613      	mov	r3, r2
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	4413      	add	r3, r2
 8006314:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006316:	430b      	orrs	r3, r1
 8006318:	e07e      	b.n	8006418 <HAL_ADC_ConfigChannel+0xdb0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006322:	2b00      	cmp	r3, #0
 8006324:	d107      	bne.n	8006336 <HAL_ADC_ConfigChannel+0xcce>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	0e9b      	lsrs	r3, r3, #26
 800632c:	3301      	adds	r3, #1
 800632e:	069b      	lsls	r3, r3, #26
 8006330:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006334:	e015      	b.n	8006362 <HAL_ADC_ConfigChannel+0xcfa>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	fa93 f3a3 	rbit	r3, r3
 8006342:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_ADC_ConfigChannel+0xcea>
    return 32U;
 800634e:	2320      	movs	r3, #32
 8006350:	e003      	b.n	800635a <HAL_ADC_ConfigChannel+0xcf2>
  return __builtin_clz(value);
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	fab3 f383 	clz	r3, r3
 8006358:	b2db      	uxtb	r3, r3
 800635a:	3301      	adds	r3, #1
 800635c:	069b      	lsls	r3, r3, #26
 800635e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800636a:	2b00      	cmp	r3, #0
 800636c:	d109      	bne.n	8006382 <HAL_ADC_ConfigChannel+0xd1a>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	0e9b      	lsrs	r3, r3, #26
 8006374:	3301      	adds	r3, #1
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	2101      	movs	r1, #1
 800637c:	fa01 f303 	lsl.w	r3, r1, r3
 8006380:	e017      	b.n	80063b2 <HAL_ADC_ConfigChannel+0xd4a>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	fa93 f3a3 	rbit	r3, r3
 800638e:	61fb      	str	r3, [r7, #28]
  return result;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_ADC_ConfigChannel+0xd36>
    return 32U;
 800639a:	2320      	movs	r3, #32
 800639c:	e003      	b.n	80063a6 <HAL_ADC_ConfigChannel+0xd3e>
  return __builtin_clz(value);
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	fab3 f383 	clz	r3, r3
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	3301      	adds	r3, #1
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2101      	movs	r1, #1
 80063ae:	fa01 f303 	lsl.w	r3, r1, r3
 80063b2:	ea42 0103 	orr.w	r1, r2, r3
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10d      	bne.n	80063de <HAL_ADC_ConfigChannel+0xd76>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	0e9b      	lsrs	r3, r3, #26
 80063c8:	3301      	adds	r3, #1
 80063ca:	f003 021f 	and.w	r2, r3, #31
 80063ce:	4613      	mov	r3, r2
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	4413      	add	r3, r2
 80063d4:	3b1e      	subs	r3, #30
 80063d6:	051b      	lsls	r3, r3, #20
 80063d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063dc:	e01b      	b.n	8006416 <HAL_ADC_ConfigChannel+0xdae>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	fa93 f3a3 	rbit	r3, r3
 80063ea:	613b      	str	r3, [r7, #16]
  return result;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_ADC_ConfigChannel+0xd92>
    return 32U;
 80063f6:	2320      	movs	r3, #32
 80063f8:	e003      	b.n	8006402 <HAL_ADC_ConfigChannel+0xd9a>
  return __builtin_clz(value);
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	fab3 f383 	clz	r3, r3
 8006400:	b2db      	uxtb	r3, r3
 8006402:	3301      	adds	r3, #1
 8006404:	f003 021f 	and.w	r2, r3, #31
 8006408:	4613      	mov	r3, r2
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	4413      	add	r3, r2
 800640e:	3b1e      	subs	r3, #30
 8006410:	051b      	lsls	r3, r3, #20
 8006412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006416:	430b      	orrs	r3, r1
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	6892      	ldr	r2, [r2, #8]
 800641c:	4619      	mov	r1, r3
 800641e:	f7fe f852 	bl	80044c6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b09      	ldr	r3, [pc, #36]	; (800644c <HAL_ADC_ConfigChannel+0xde4>)
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 80bd 	beq.w	80065aa <HAL_ADC_ConfigChannel+0xf42>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006438:	d004      	beq.n	8006444 <HAL_ADC_ConfigChannel+0xddc>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a04      	ldr	r2, [pc, #16]	; (8006450 <HAL_ADC_ConfigChannel+0xde8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d109      	bne.n	8006458 <HAL_ADC_ConfigChannel+0xdf0>
 8006444:	4b03      	ldr	r3, [pc, #12]	; (8006454 <HAL_ADC_ConfigChannel+0xdec>)
 8006446:	e008      	b.n	800645a <HAL_ADC_ConfigChannel+0xdf2>
 8006448:	407f0000 	.word	0x407f0000
 800644c:	80080000 	.word	0x80080000
 8006450:	50000100 	.word	0x50000100
 8006454:	50000300 	.word	0x50000300
 8006458:	4b59      	ldr	r3, [pc, #356]	; (80065c0 <HAL_ADC_ConfigChannel+0xf58>)
 800645a:	4618      	mov	r0, r3
 800645c:	f7fd ff3a 	bl	80042d4 <LL_ADC_GetCommonPathInternalCh>
 8006460:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a56      	ldr	r2, [pc, #344]	; (80065c4 <HAL_ADC_ConfigChannel+0xf5c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <HAL_ADC_ConfigChannel+0xe10>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a55      	ldr	r2, [pc, #340]	; (80065c8 <HAL_ADC_ConfigChannel+0xf60>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d13a      	bne.n	80064ee <HAL_ADC_ConfigChannel+0xe86>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800647c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d134      	bne.n	80064ee <HAL_ADC_ConfigChannel+0xe86>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800648c:	d005      	beq.n	800649a <HAL_ADC_ConfigChannel+0xe32>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a4e      	ldr	r2, [pc, #312]	; (80065cc <HAL_ADC_ConfigChannel+0xf64>)
 8006494:	4293      	cmp	r3, r2
 8006496:	f040 8085 	bne.w	80065a4 <HAL_ADC_ConfigChannel+0xf3c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064a2:	d004      	beq.n	80064ae <HAL_ADC_ConfigChannel+0xe46>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a49      	ldr	r2, [pc, #292]	; (80065d0 <HAL_ADC_ConfigChannel+0xf68>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d101      	bne.n	80064b2 <HAL_ADC_ConfigChannel+0xe4a>
 80064ae:	4a49      	ldr	r2, [pc, #292]	; (80065d4 <HAL_ADC_ConfigChannel+0xf6c>)
 80064b0:	e000      	b.n	80064b4 <HAL_ADC_ConfigChannel+0xe4c>
 80064b2:	4a43      	ldr	r2, [pc, #268]	; (80065c0 <HAL_ADC_ConfigChannel+0xf58>)
 80064b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f7fd fef5 	bl	80042ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064c4:	4b44      	ldr	r3, [pc, #272]	; (80065d8 <HAL_ADC_ConfigChannel+0xf70>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	099b      	lsrs	r3, r3, #6
 80064ca:	4a44      	ldr	r2, [pc, #272]	; (80065dc <HAL_ADC_ConfigChannel+0xf74>)
 80064cc:	fba2 2303 	umull	r2, r3, r2, r3
 80064d0:	099b      	lsrs	r3, r3, #6
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	4613      	mov	r3, r2
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	4413      	add	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80064de:	e002      	b.n	80064e6 <HAL_ADC_ConfigChannel+0xe7e>
          {
            wait_loop_index--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f9      	bne.n	80064e0 <HAL_ADC_ConfigChannel+0xe78>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064ec:	e05a      	b.n	80065a4 <HAL_ADC_ConfigChannel+0xf3c>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a3b      	ldr	r2, [pc, #236]	; (80065e0 <HAL_ADC_ConfigChannel+0xf78>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d125      	bne.n	8006544 <HAL_ADC_ConfigChannel+0xedc>
 80064f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d11f      	bne.n	8006544 <HAL_ADC_ConfigChannel+0xedc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a31      	ldr	r2, [pc, #196]	; (80065d0 <HAL_ADC_ConfigChannel+0xf68>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d104      	bne.n	8006518 <HAL_ADC_ConfigChannel+0xeb0>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a34      	ldr	r2, [pc, #208]	; (80065e4 <HAL_ADC_ConfigChannel+0xf7c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d047      	beq.n	80065a8 <HAL_ADC_ConfigChannel+0xf40>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006520:	d004      	beq.n	800652c <HAL_ADC_ConfigChannel+0xec4>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2a      	ldr	r2, [pc, #168]	; (80065d0 <HAL_ADC_ConfigChannel+0xf68>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d101      	bne.n	8006530 <HAL_ADC_ConfigChannel+0xec8>
 800652c:	4a29      	ldr	r2, [pc, #164]	; (80065d4 <HAL_ADC_ConfigChannel+0xf6c>)
 800652e:	e000      	b.n	8006532 <HAL_ADC_ConfigChannel+0xeca>
 8006530:	4a23      	ldr	r2, [pc, #140]	; (80065c0 <HAL_ADC_ConfigChannel+0xf58>)
 8006532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f7fd feb6 	bl	80042ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006542:	e031      	b.n	80065a8 <HAL_ADC_ConfigChannel+0xf40>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a27      	ldr	r2, [pc, #156]	; (80065e8 <HAL_ADC_ConfigChannel+0xf80>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d12d      	bne.n	80065aa <HAL_ADC_ConfigChannel+0xf42>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800654e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d127      	bne.n	80065aa <HAL_ADC_ConfigChannel+0xf42>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1c      	ldr	r2, [pc, #112]	; (80065d0 <HAL_ADC_ConfigChannel+0xf68>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d022      	beq.n	80065aa <HAL_ADC_ConfigChannel+0xf42>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800656c:	d004      	beq.n	8006578 <HAL_ADC_ConfigChannel+0xf10>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a17      	ldr	r2, [pc, #92]	; (80065d0 <HAL_ADC_ConfigChannel+0xf68>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d101      	bne.n	800657c <HAL_ADC_ConfigChannel+0xf14>
 8006578:	4a16      	ldr	r2, [pc, #88]	; (80065d4 <HAL_ADC_ConfigChannel+0xf6c>)
 800657a:	e000      	b.n	800657e <HAL_ADC_ConfigChannel+0xf16>
 800657c:	4a10      	ldr	r2, [pc, #64]	; (80065c0 <HAL_ADC_ConfigChannel+0xf58>)
 800657e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006582:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f7fd fe90 	bl	80042ae <LL_ADC_SetCommonPathInternalCh>
 800658e:	e00c      	b.n	80065aa <HAL_ADC_ConfigChannel+0xf42>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006594:	f043 0220 	orr.w	r2, r3, #32
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80065a2:	e002      	b.n	80065aa <HAL_ADC_ConfigChannel+0xf42>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065a4:	bf00      	nop
 80065a6:	e000      	b.n	80065aa <HAL_ADC_ConfigChannel+0xf42>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80065b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	37dc      	adds	r7, #220	; 0xdc
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd90      	pop	{r4, r7, pc}
 80065be:	bf00      	nop
 80065c0:	50000700 	.word	0x50000700
 80065c4:	c3210000 	.word	0xc3210000
 80065c8:	90c00010 	.word	0x90c00010
 80065cc:	50000600 	.word	0x50000600
 80065d0:	50000100 	.word	0x50000100
 80065d4:	50000300 	.word	0x50000300
 80065d8:	20000000 	.word	0x20000000
 80065dc:	053e2d63 	.word	0x053e2d63
 80065e0:	c7520000 	.word	0xc7520000
 80065e4:	50000500 	.word	0x50000500
 80065e8:	cb840000 	.word	0xcb840000

080065ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006606:	d018      	beq.n	800663a <ADC_ConversionStop+0x4e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a6a      	ldr	r2, [pc, #424]	; (80067b8 <ADC_ConversionStop+0x1cc>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d013      	beq.n	800663a <ADC_ConversionStop+0x4e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a69      	ldr	r2, [pc, #420]	; (80067bc <ADC_ConversionStop+0x1d0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00e      	beq.n	800663a <ADC_ConversionStop+0x4e>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a67      	ldr	r2, [pc, #412]	; (80067c0 <ADC_ConversionStop+0x1d4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d009      	beq.n	800663a <ADC_ConversionStop+0x4e>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a66      	ldr	r2, [pc, #408]	; (80067c4 <ADC_ConversionStop+0x1d8>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d004      	beq.n	800663a <ADC_ConversionStop+0x4e>
 8006630:	f640 41e4 	movw	r1, #3300	; 0xce4
 8006634:	4864      	ldr	r0, [pc, #400]	; (80067c8 <ADC_ConversionStop+0x1dc>)
 8006636:	f7fb fffb 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d00a      	beq.n	8006656 <ADC_ConversionStop+0x6a>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d007      	beq.n	8006656 <ADC_ConversionStop+0x6a>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b03      	cmp	r3, #3
 800664a:	d004      	beq.n	8006656 <ADC_ConversionStop+0x6a>
 800664c:	f640 41e5 	movw	r1, #3301	; 0xce5
 8006650:	485d      	ldr	r0, [pc, #372]	; (80067c8 <ADC_ConversionStop+0x1dc>)
 8006652:	f7fb ffed 	bl	8002630 <assert_failed>

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe f866 	bl	800472c <LL_ADC_REG_IsConversionOngoing>
 8006660:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f7fe f887 	bl	800477a <LL_ADC_INJ_IsConversionOngoing>
 800666c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <ADC_ConversionStop+0x90>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 8098 	beq.w	80067ac <ADC_ConversionStop+0x1c0>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d02a      	beq.n	80066e0 <ADC_ConversionStop+0xf4>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	7f5b      	ldrb	r3, [r3, #29]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d126      	bne.n	80066e0 <ADC_ConversionStop+0xf4>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	7f1b      	ldrb	r3, [r3, #28]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d122      	bne.n	80066e0 <ADC_ConversionStop+0xf4>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800669a:	2301      	movs	r3, #1
 800669c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800669e:	e014      	b.n	80066ca <ADC_ConversionStop+0xde>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	4a4a      	ldr	r2, [pc, #296]	; (80067cc <ADC_ConversionStop+0x1e0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d90d      	bls.n	80066c4 <ADC_ConversionStop+0xd8>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ac:	f043 0210 	orr.w	r2, r3, #16
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b8:	f043 0201 	orr.w	r2, r3, #1
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e074      	b.n	80067ae <ADC_ConversionStop+0x1c2>
        }
        Conversion_Timeout_CPU_cycles ++;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3301      	adds	r3, #1
 80066c8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	d1e3      	bne.n	80066a0 <ADC_ConversionStop+0xb4>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2240      	movs	r2, #64	; 0x40
 80066de:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d014      	beq.n	8006710 <ADC_ConversionStop+0x124>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe f81e 	bl	800472c <LL_ADC_REG_IsConversionOngoing>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00c      	beq.n	8006710 <ADC_ConversionStop+0x124>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fd ffdb 	bl	80046b6 <LL_ADC_IsDisableOngoing>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d104      	bne.n	8006710 <ADC_ConversionStop+0x124>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7fd fffa 	bl	8004704 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d014      	beq.n	8006740 <ADC_ConversionStop+0x154>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe f82d 	bl	800477a <LL_ADC_INJ_IsConversionOngoing>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00c      	beq.n	8006740 <ADC_ConversionStop+0x154>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f7fd ffc3 	bl	80046b6 <LL_ADC_IsDisableOngoing>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <ADC_ConversionStop+0x154>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe f809 	bl	8004752 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d005      	beq.n	8006752 <ADC_ConversionStop+0x166>
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d105      	bne.n	8006758 <ADC_ConversionStop+0x16c>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800674c:	230c      	movs	r3, #12
 800674e:	617b      	str	r3, [r7, #20]
        break;
 8006750:	e005      	b.n	800675e <ADC_ConversionStop+0x172>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8006752:	2308      	movs	r3, #8
 8006754:	617b      	str	r3, [r7, #20]
        break;
 8006756:	e002      	b.n	800675e <ADC_ConversionStop+0x172>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006758:	2304      	movs	r3, #4
 800675a:	617b      	str	r3, [r7, #20]
        break;
 800675c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800675e:	f7fd fd65 	bl	800422c <HAL_GetTick>
 8006762:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006764:	e01b      	b.n	800679e <ADC_ConversionStop+0x1b2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006766:	f7fd fd61 	bl	800422c <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b05      	cmp	r3, #5
 8006772:	d914      	bls.n	800679e <ADC_ConversionStop+0x1b2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	4013      	ands	r3, r2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00d      	beq.n	800679e <ADC_ConversionStop+0x1b2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006786:	f043 0210 	orr.w	r2, r3, #16
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006792:	f043 0201 	orr.w	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e007      	b.n	80067ae <ADC_ConversionStop+0x1c2>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1dc      	bne.n	8006766 <ADC_ConversionStop+0x17a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3720      	adds	r7, #32
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	50000100 	.word	0x50000100
 80067bc:	50000400 	.word	0x50000400
 80067c0:	50000500 	.word	0x50000500
 80067c4:	50000600 	.word	0x50000600
 80067c8:	0801cc1c 	.word	0x0801cc1c
 80067cc:	a33fffff 	.word	0xa33fffff

080067d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fd ff57 	bl	8004690 <LL_ADC_IsEnabled>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d14d      	bne.n	8006884 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689a      	ldr	r2, [r3, #8]
 80067ee:	4b28      	ldr	r3, [pc, #160]	; (8006890 <ADC_Enable+0xc0>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00d      	beq.n	8006812 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fa:	f043 0210 	orr.w	r2, r3, #16
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006806:	f043 0201 	orr.w	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e039      	b.n	8006886 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f7fd ff12 	bl	8004640 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800681c:	f7fd fd06 	bl	800422c <HAL_GetTick>
 8006820:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006822:	e028      	b.n	8006876 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f7fd ff31 	bl	8004690 <LL_ADC_IsEnabled>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d104      	bne.n	800683e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f7fd ff01 	bl	8004640 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800683e:	f7fd fcf5 	bl	800422c <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d914      	bls.n	8006876 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b01      	cmp	r3, #1
 8006858:	d00d      	beq.n	8006876 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685e:	f043 0210 	orr.w	r2, r3, #16
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686a:	f043 0201 	orr.w	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e007      	b.n	8006886 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b01      	cmp	r3, #1
 8006882:	d1cf      	bne.n	8006824 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	8000003f 	.word	0x8000003f

08006894 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fd ff08 	bl	80046b6 <LL_ADC_IsDisableOngoing>
 80068a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7fd feef 	bl	8004690 <LL_ADC_IsEnabled>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d047      	beq.n	8006948 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d144      	bne.n	8006948 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f003 030d 	and.w	r3, r3, #13
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d10c      	bne.n	80068e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fd fec9 	bl	8004668 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2203      	movs	r2, #3
 80068dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80068de:	f7fd fca5 	bl	800422c <HAL_GetTick>
 80068e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80068e4:	e029      	b.n	800693a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ea:	f043 0210 	orr.w	r2, r3, #16
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f6:	f043 0201 	orr.w	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e023      	b.n	800694a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006902:	f7fd fc93 	bl	800422c <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d914      	bls.n	800693a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00d      	beq.n	800693a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006922:	f043 0210 	orr.w	r2, r3, #16
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692e:	f043 0201 	orr.w	r2, r3, #1
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e007      	b.n	800694a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1dc      	bne.n	8006902 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <LL_ADC_IsEnabled>:
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <LL_ADC_IsEnabled+0x18>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <LL_ADC_IsEnabled+0x1a>
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <LL_ADC_REG_IsConversionOngoing>:
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b04      	cmp	r3, #4
 800698a:	d101      	bne.n	8006990 <LL_ADC_REG_IsConversionOngoing+0x18>
 800698c:	2301      	movs	r3, #1
 800698e:	e000      	b.n	8006992 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b0a1      	sub	sp, #132	; 0x84
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSlave;
  uint32_t tmphadcSlave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069b8:	d009      	beq.n	80069ce <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a92      	ldr	r2, [pc, #584]	; (8006c08 <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d004      	beq.n	80069ce <HAL_ADCEx_MultiModeConfigChannel+0x2e>
 80069c4:	f640 0141 	movw	r1, #2113	; 0x841
 80069c8:	4890      	ldr	r0, [pc, #576]	; (8006c0c <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 80069ca:	f7fb fe31 	bl	8002630 <assert_failed>
  assert_param(IS_ADC_MULTIMODE(multimode->Mode));
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d020      	beq.n	8006a18 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d01c      	beq.n	8006a18 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d018      	beq.n	8006a18 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d014      	beq.n	8006a18 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d010      	beq.n	8006a18 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b06      	cmp	r3, #6
 80069fc:	d00c      	beq.n	8006a18 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b07      	cmp	r3, #7
 8006a04:	d008      	beq.n	8006a18 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b09      	cmp	r3, #9
 8006a0c:	d004      	beq.n	8006a18 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8006a0e:	f640 0142 	movw	r1, #2114	; 0x842
 8006a12:	487e      	ldr	r0, [pc, #504]	; (8006c0c <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8006a14:	f7fb fe0c 	bl	8002630 <assert_failed>
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d052      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00e      	beq.n	8006a46 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a30:	d009      	beq.n	8006a46 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a3a:	d004      	beq.n	8006a46 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8006a3c:	f640 0145 	movw	r1, #2117	; 0x845
 8006a40:	4872      	ldr	r0, [pc, #456]	; (8006c0c <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8006a42:	f7fb fdf5 	bl	8002630 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d03b      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a56:	d036      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a60:	d031      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a6a:	d02c      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a74:	d027      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006a7e:	d022      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a88:	d01d      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a92:	d018      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9c:	d013      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006ab0:	d009      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8006aba:	d004      	beq.n	8006ac6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006abc:	f640 0146 	movw	r1, #2118	; 0x846
 8006ac0:	4852      	ldr	r0, [pc, #328]	; (8006c0c <HAL_ADCEx_MultiModeConfigChannel+0x26c>)
 8006ac2:	f7fb fdb5 	bl	8002630 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d101      	bne.n	8006ad4 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e0f6      	b.n	8006cc2 <HAL_ADCEx_MultiModeConfigChannel+0x322>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006adc:	2300      	movs	r3, #0
 8006ade:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aec:	d102      	bne.n	8006af4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
 8006aee:	4b48      	ldr	r3, [pc, #288]	; (8006c10 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8006af0:	60bb      	str	r3, [r7, #8]
 8006af2:	e009      	b.n	8006b08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a43      	ldr	r2, [pc, #268]	; (8006c08 <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d102      	bne.n	8006b04 <HAL_ADCEx_MultiModeConfigChannel+0x164>
 8006afe:	4b45      	ldr	r3, [pc, #276]	; (8006c14 <HAL_ADCEx_MultiModeConfigChannel+0x274>)
 8006b00:	60bb      	str	r3, [r7, #8]
 8006b02:	e001      	b.n	8006b08 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006b04:	2300      	movs	r3, #0
 8006b06:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b12:	f043 0220 	orr.w	r2, r3, #32
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e0cd      	b.n	8006cc2 <HAL_ADCEx_MultiModeConfigChannel+0x322>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff ff25 	bl	8006978 <LL_ADC_REG_IsConversionOngoing>
 8006b2e:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff ff1f 	bl	8006978 <LL_ADC_REG_IsConversionOngoing>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f040 80af 	bne.w	8006ca0 <HAL_ADCEx_MultiModeConfigChannel+0x300>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f040 80ab 	bne.w	8006ca0 <HAL_ADCEx_MultiModeConfigChannel+0x300>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b52:	d004      	beq.n	8006b5e <HAL_ADCEx_MultiModeConfigChannel+0x1be>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a2d      	ldr	r2, [pc, #180]	; (8006c10 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d101      	bne.n	8006b62 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8006b5e:	4b2e      	ldr	r3, [pc, #184]	; (8006c18 <HAL_ADCEx_MultiModeConfigChannel+0x278>)
 8006b60:	e000      	b.n	8006b64 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
 8006b62:	4b2e      	ldr	r3, [pc, #184]	; (8006c1c <HAL_ADCEx_MultiModeConfigChannel+0x27c>)
 8006b64:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d05a      	beq.n	8006c24 <HAL_ADCEx_MultiModeConfigChannel+0x284>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006b6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6859      	ldr	r1, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b80:	035b      	lsls	r3, r3, #13
 8006b82:	430b      	orrs	r3, r1
 8006b84:	431a      	orrs	r2, r3
 8006b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b88:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b92:	d004      	beq.n	8006b9e <HAL_ADCEx_MultiModeConfigChannel+0x1fe>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1d      	ldr	r2, [pc, #116]	; (8006c10 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10f      	bne.n	8006bbe <HAL_ADCEx_MultiModeConfigChannel+0x21e>
 8006b9e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006ba2:	f7ff fed6 	bl	8006952 <LL_ADC_IsEnabled>
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4819      	ldr	r0, [pc, #100]	; (8006c10 <HAL_ADCEx_MultiModeConfigChannel+0x270>)
 8006baa:	f7ff fed2 	bl	8006952 <LL_ADC_IsEnabled>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4323      	orrs	r3, r4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	bf0c      	ite	eq
 8006bb6:	2301      	moveq	r3, #1
 8006bb8:	2300      	movne	r3, #0
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	e012      	b.n	8006be4 <HAL_ADCEx_MultiModeConfigChannel+0x244>
 8006bbe:	4812      	ldr	r0, [pc, #72]	; (8006c08 <HAL_ADCEx_MultiModeConfigChannel+0x268>)
 8006bc0:	f7ff fec7 	bl	8006952 <LL_ADC_IsEnabled>
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	4813      	ldr	r0, [pc, #76]	; (8006c14 <HAL_ADCEx_MultiModeConfigChannel+0x274>)
 8006bc8:	f7ff fec3 	bl	8006952 <LL_ADC_IsEnabled>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	431c      	orrs	r4, r3
 8006bd0:	4813      	ldr	r0, [pc, #76]	; (8006c20 <HAL_ADCEx_MultiModeConfigChannel+0x280>)
 8006bd2:	f7ff febe 	bl	8006952 <LL_ADC_IsEnabled>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4323      	orrs	r3, r4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	bf0c      	ite	eq
 8006bde:	2301      	moveq	r3, #1
 8006be0:	2300      	movne	r3, #0
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d065      	beq.n	8006cb4 <HAL_ADCEx_MultiModeConfigChannel+0x314>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006bf0:	f023 030f 	bic.w	r3, r3, #15
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	6811      	ldr	r1, [r2, #0]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	6892      	ldr	r2, [r2, #8]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c02:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c04:	e056      	b.n	8006cb4 <HAL_ADCEx_MultiModeConfigChannel+0x314>
 8006c06:	bf00      	nop
 8006c08:	50000400 	.word	0x50000400
 8006c0c:	0801cc54 	.word	0x0801cc54
 8006c10:	50000100 	.word	0x50000100
 8006c14:	50000500 	.word	0x50000500
 8006c18:	50000300 	.word	0x50000300
 8006c1c:	50000700 	.word	0x50000700
 8006c20:	50000600 	.word	0x50000600
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006c24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c2e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c38:	d004      	beq.n	8006c44 <HAL_ADCEx_MultiModeConfigChannel+0x2a4>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d10f      	bne.n	8006c64 <HAL_ADCEx_MultiModeConfigChannel+0x2c4>
 8006c44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006c48:	f7ff fe83 	bl	8006952 <LL_ADC_IsEnabled>
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	481f      	ldr	r0, [pc, #124]	; (8006ccc <HAL_ADCEx_MultiModeConfigChannel+0x32c>)
 8006c50:	f7ff fe7f 	bl	8006952 <LL_ADC_IsEnabled>
 8006c54:	4603      	mov	r3, r0
 8006c56:	4323      	orrs	r3, r4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	bf0c      	ite	eq
 8006c5c:	2301      	moveq	r3, #1
 8006c5e:	2300      	movne	r3, #0
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	e012      	b.n	8006c8a <HAL_ADCEx_MultiModeConfigChannel+0x2ea>
 8006c64:	481a      	ldr	r0, [pc, #104]	; (8006cd0 <HAL_ADCEx_MultiModeConfigChannel+0x330>)
 8006c66:	f7ff fe74 	bl	8006952 <LL_ADC_IsEnabled>
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	4819      	ldr	r0, [pc, #100]	; (8006cd4 <HAL_ADCEx_MultiModeConfigChannel+0x334>)
 8006c6e:	f7ff fe70 	bl	8006952 <LL_ADC_IsEnabled>
 8006c72:	4603      	mov	r3, r0
 8006c74:	431c      	orrs	r4, r3
 8006c76:	4818      	ldr	r0, [pc, #96]	; (8006cd8 <HAL_ADCEx_MultiModeConfigChannel+0x338>)
 8006c78:	f7ff fe6b 	bl	8006952 <LL_ADC_IsEnabled>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4323      	orrs	r3, r4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	bf0c      	ite	eq
 8006c84:	2301      	moveq	r3, #1
 8006c86:	2300      	movne	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d012      	beq.n	8006cb4 <HAL_ADCEx_MultiModeConfigChannel+0x314>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c96:	f023 030f 	bic.w	r3, r3, #15
 8006c9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006c9c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c9e:	e009      	b.n	8006cb4 <HAL_ADCEx_MultiModeConfigChannel+0x314>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca4:	f043 0220 	orr.w	r2, r3, #32
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006cb2:	e000      	b.n	8006cb6 <HAL_ADCEx_MultiModeConfigChannel+0x316>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cb4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006cbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3784      	adds	r7, #132	; 0x84
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd90      	pop	{r4, r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	50000100 	.word	0x50000100
 8006cd0:	50000400 	.word	0x50000400
 8006cd4:	50000500 	.word	0x50000500
 8006cd8:	50000600 	.word	0x50000600

08006cdc <__NVIC_SetPriorityGrouping>:
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cec:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <__NVIC_SetPriorityGrouping+0x44>)
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d0e:	4a04      	ldr	r2, [pc, #16]	; (8006d20 <__NVIC_SetPriorityGrouping+0x44>)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	60d3      	str	r3, [r2, #12]
}
 8006d14:	bf00      	nop
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	e000ed00 	.word	0xe000ed00

08006d24 <__NVIC_GetPriorityGrouping>:
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d28:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <__NVIC_GetPriorityGrouping+0x18>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	0a1b      	lsrs	r3, r3, #8
 8006d2e:	f003 0307 	and.w	r3, r3, #7
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	e000ed00 	.word	0xe000ed00

08006d40 <__NVIC_EnableIRQ>:
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	db0b      	blt.n	8006d6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	f003 021f 	and.w	r2, r3, #31
 8006d58:	4907      	ldr	r1, [pc, #28]	; (8006d78 <__NVIC_EnableIRQ+0x38>)
 8006d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d5e:	095b      	lsrs	r3, r3, #5
 8006d60:	2001      	movs	r0, #1
 8006d62:	fa00 f202 	lsl.w	r2, r0, r2
 8006d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006d6a:	bf00      	nop
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	e000e100 	.word	0xe000e100

08006d7c <__NVIC_SetPriority>:
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	6039      	str	r1, [r7, #0]
 8006d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	db0a      	blt.n	8006da6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	490c      	ldr	r1, [pc, #48]	; (8006dc8 <__NVIC_SetPriority+0x4c>)
 8006d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9a:	0112      	lsls	r2, r2, #4
 8006d9c:	b2d2      	uxtb	r2, r2
 8006d9e:	440b      	add	r3, r1
 8006da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006da4:	e00a      	b.n	8006dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	4908      	ldr	r1, [pc, #32]	; (8006dcc <__NVIC_SetPriority+0x50>)
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	3b04      	subs	r3, #4
 8006db4:	0112      	lsls	r2, r2, #4
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	440b      	add	r3, r1
 8006dba:	761a      	strb	r2, [r3, #24]
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	e000e100 	.word	0xe000e100
 8006dcc:	e000ed00 	.word	0xe000ed00

08006dd0 <NVIC_EncodePriority>:
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b089      	sub	sp, #36	; 0x24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f1c3 0307 	rsb	r3, r3, #7
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	bf28      	it	cs
 8006dee:	2304      	movcs	r3, #4
 8006df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	3304      	adds	r3, #4
 8006df6:	2b06      	cmp	r3, #6
 8006df8:	d902      	bls.n	8006e00 <NVIC_EncodePriority+0x30>
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	3b03      	subs	r3, #3
 8006dfe:	e000      	b.n	8006e02 <NVIC_EncodePriority+0x32>
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e04:	f04f 32ff 	mov.w	r2, #4294967295
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0e:	43da      	mvns	r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	401a      	ands	r2, r3
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e18:	f04f 31ff 	mov.w	r1, #4294967295
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e22:	43d9      	mvns	r1, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e28:	4313      	orrs	r3, r2
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3724      	adds	r7, #36	; 0x24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e48:	d301      	bcc.n	8006e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e00f      	b.n	8006e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e4e:	4a0a      	ldr	r2, [pc, #40]	; (8006e78 <SysTick_Config+0x40>)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e56:	210f      	movs	r1, #15
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	f7ff ff8e 	bl	8006d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e60:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <SysTick_Config+0x40>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e66:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <SysTick_Config+0x40>)
 8006e68:	2207      	movs	r2, #7
 8006e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	e000e010 	.word	0xe000e010

08006e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b07      	cmp	r3, #7
 8006e88:	d00f      	beq.n	8006eaa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b06      	cmp	r3, #6
 8006e8e:	d00c      	beq.n	8006eaa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	d009      	beq.n	8006eaa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d006      	beq.n	8006eaa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d003      	beq.n	8006eaa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8006ea2:	21a6      	movs	r1, #166	; 0xa6
 8006ea4:	4804      	ldr	r0, [pc, #16]	; (8006eb8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8006ea6:	f7fb fbc3 	bl	8002630 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff ff16 	bl	8006cdc <__NVIC_SetPriorityGrouping>
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	0801cc90 	.word	0x0801cc90

08006ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b0f      	cmp	r3, #15
 8006ece:	d903      	bls.n	8006ed8 <HAL_NVIC_SetPriority+0x1c>
 8006ed0:	21be      	movs	r1, #190	; 0xbe
 8006ed2:	480e      	ldr	r0, [pc, #56]	; (8006f0c <HAL_NVIC_SetPriority+0x50>)
 8006ed4:	f7fb fbac 	bl	8002630 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b0f      	cmp	r3, #15
 8006edc:	d903      	bls.n	8006ee6 <HAL_NVIC_SetPriority+0x2a>
 8006ede:	21bf      	movs	r1, #191	; 0xbf
 8006ee0:	480a      	ldr	r0, [pc, #40]	; (8006f0c <HAL_NVIC_SetPriority+0x50>)
 8006ee2:	f7fb fba5 	bl	8002630 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ee6:	f7ff ff1d 	bl	8006d24 <__NVIC_GetPriorityGrouping>
 8006eea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68b9      	ldr	r1, [r7, #8]
 8006ef0:	6978      	ldr	r0, [r7, #20]
 8006ef2:	f7ff ff6d 	bl	8006dd0 <NVIC_EncodePriority>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7ff ff3c 	bl	8006d7c <__NVIC_SetPriority>
}
 8006f04:	bf00      	nop
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	0801cc90 	.word	0x0801cc90

08006f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da03      	bge.n	8006f2a <HAL_NVIC_EnableIRQ+0x1a>
 8006f22:	21d2      	movs	r1, #210	; 0xd2
 8006f24:	4805      	ldr	r0, [pc, #20]	; (8006f3c <HAL_NVIC_EnableIRQ+0x2c>)
 8006f26:	f7fb fb83 	bl	8002630 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7ff ff06 	bl	8006d40 <__NVIC_EnableIRQ>
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	0801cc90 	.word	0x0801cc90

08006f40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ff75 	bl	8006e38 <SysTick_Config>
 8006f4e:	4603      	mov	r3, r0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e0a5      	b.n	80070b6 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a54      	ldr	r2, [pc, #336]	; (80070c0 <HAL_CRC_Init+0x168>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <HAL_CRC_Init+0x24>
 8006f74:	2170      	movs	r1, #112	; 0x70
 8006f76:	4853      	ldr	r0, [pc, #332]	; (80070c4 <HAL_CRC_Init+0x16c>)
 8006f78:	f7fb fb5a 	bl	8002630 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7f5b      	ldrb	r3, [r3, #29]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d105      	bne.n	8006f92 <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7fa fa93 	bl	80014b8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	791b      	ldrb	r3, [r3, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d007      	beq.n	8006fb0 <HAL_CRC_Init+0x58>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	791b      	ldrb	r3, [r3, #4]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d003      	beq.n	8006fb0 <HAL_CRC_Init+0x58>
 8006fa8:	217e      	movs	r1, #126	; 0x7e
 8006faa:	4846      	ldr	r0, [pc, #280]	; (80070c4 <HAL_CRC_Init+0x16c>)
 8006fac:	f7fb fb40 	bl	8002630 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	791b      	ldrb	r3, [r3, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10c      	bne.n	8006fd2 <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a42      	ldr	r2, [pc, #264]	; (80070c8 <HAL_CRC_Init+0x170>)
 8006fbe:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0218 	bic.w	r2, r2, #24
 8006fce:	609a      	str	r2, [r3, #8]
 8006fd0:	e00c      	b.n	8006fec <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6899      	ldr	r1, [r3, #8]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f875 	bl	80070cc <HAL_CRCEx_Polynomial_Set>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e064      	b.n	80070b6 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	795b      	ldrb	r3, [r3, #5]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <HAL_CRC_Init+0xac>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	795b      	ldrb	r3, [r3, #5]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d003      	beq.n	8007004 <HAL_CRC_Init+0xac>
 8006ffc:	2190      	movs	r1, #144	; 0x90
 8006ffe:	4831      	ldr	r0, [pc, #196]	; (80070c4 <HAL_CRC_Init+0x16c>)
 8007000:	f7fb fb16 	bl	8002630 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	795b      	ldrb	r3, [r3, #5]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d105      	bne.n	8007018 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f04f 32ff 	mov.w	r2, #4294967295
 8007014:	611a      	str	r2, [r3, #16]
 8007016:	e004      	b.n	8007022 <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6912      	ldr	r2, [r2, #16]
 8007020:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00f      	beq.n	800704a <HAL_CRC_Init+0xf2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	2b20      	cmp	r3, #32
 8007030:	d00b      	beq.n	800704a <HAL_CRC_Init+0xf2>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	2b40      	cmp	r3, #64	; 0x40
 8007038:	d007      	beq.n	800704a <HAL_CRC_Init+0xf2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	2b60      	cmp	r3, #96	; 0x60
 8007040:	d003      	beq.n	800704a <HAL_CRC_Init+0xf2>
 8007042:	219c      	movs	r1, #156	; 0x9c
 8007044:	481f      	ldr	r0, [pc, #124]	; (80070c4 <HAL_CRC_Init+0x16c>)
 8007046:	f7fb faf3 	bl	8002630 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	695a      	ldr	r2, [r3, #20]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d007      	beq.n	8007078 <HAL_CRC_Init+0x120>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	2b80      	cmp	r3, #128	; 0x80
 800706e:	d003      	beq.n	8007078 <HAL_CRC_Init+0x120>
 8007070:	21a0      	movs	r1, #160	; 0xa0
 8007072:	4814      	ldr	r0, [pc, #80]	; (80070c4 <HAL_CRC_Init+0x16c>)
 8007074:	f7fb fadc 	bl	8002630 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699a      	ldr	r2, [r3, #24]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d00b      	beq.n	80070ae <HAL_CRC_Init+0x156>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	2b02      	cmp	r3, #2
 800709c:	d007      	beq.n	80070ae <HAL_CRC_Init+0x156>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d003      	beq.n	80070ae <HAL_CRC_Init+0x156>
 80070a6:	21a5      	movs	r1, #165	; 0xa5
 80070a8:	4806      	ldr	r0, [pc, #24]	; (80070c4 <HAL_CRC_Init+0x16c>)
 80070aa:	f7fb fac1 	bl	8002630 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40023000 	.word	0x40023000
 80070c4:	0801cccc 	.word	0x0801cccc
 80070c8:	04c11db7 	.word	0x04c11db7

080070cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80070dc:	231f      	movs	r3, #31
 80070de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00c      	beq.n	8007100 <HAL_CRCEx_Polynomial_Set+0x34>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d009      	beq.n	8007100 <HAL_CRCEx_Polynomial_Set+0x34>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b10      	cmp	r3, #16
 80070f0:	d006      	beq.n	8007100 <HAL_CRCEx_Polynomial_Set+0x34>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b18      	cmp	r3, #24
 80070f6:	d003      	beq.n	8007100 <HAL_CRCEx_Polynomial_Set+0x34>
 80070f8:	215f      	movs	r1, #95	; 0x5f
 80070fa:	483e      	ldr	r0, [pc, #248]	; (80071f4 <HAL_CRCEx_Polynomial_Set+0x128>)
 80070fc:	f7fb fa98 	bl	8002630 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007100:	bf00      	nop
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1e5a      	subs	r2, r3, #1
 8007106:	613a      	str	r2, [r7, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d009      	beq.n	8007120 <HAL_CRCEx_Polynomial_Set+0x54>
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f003 031f 	and.w	r3, r3, #31
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	fa22 f303 	lsr.w	r3, r2, r3
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b18      	cmp	r3, #24
 8007124:	d846      	bhi.n	80071b4 <HAL_CRCEx_Polynomial_Set+0xe8>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <HAL_CRCEx_Polynomial_Set+0x60>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	080071bb 	.word	0x080071bb
 8007130:	080071b5 	.word	0x080071b5
 8007134:	080071b5 	.word	0x080071b5
 8007138:	080071b5 	.word	0x080071b5
 800713c:	080071b5 	.word	0x080071b5
 8007140:	080071b5 	.word	0x080071b5
 8007144:	080071b5 	.word	0x080071b5
 8007148:	080071b5 	.word	0x080071b5
 800714c:	080071a9 	.word	0x080071a9
 8007150:	080071b5 	.word	0x080071b5
 8007154:	080071b5 	.word	0x080071b5
 8007158:	080071b5 	.word	0x080071b5
 800715c:	080071b5 	.word	0x080071b5
 8007160:	080071b5 	.word	0x080071b5
 8007164:	080071b5 	.word	0x080071b5
 8007168:	080071b5 	.word	0x080071b5
 800716c:	0800719d 	.word	0x0800719d
 8007170:	080071b5 	.word	0x080071b5
 8007174:	080071b5 	.word	0x080071b5
 8007178:	080071b5 	.word	0x080071b5
 800717c:	080071b5 	.word	0x080071b5
 8007180:	080071b5 	.word	0x080071b5
 8007184:	080071b5 	.word	0x080071b5
 8007188:	080071b5 	.word	0x080071b5
 800718c:	08007191 	.word	0x08007191
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	2b06      	cmp	r3, #6
 8007194:	d913      	bls.n	80071be <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800719a:	e010      	b.n	80071be <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	2b07      	cmp	r3, #7
 80071a0:	d90f      	bls.n	80071c2 <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80071a6:	e00c      	b.n	80071c2 <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b0f      	cmp	r3, #15
 80071ac:	d90b      	bls.n	80071c6 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80071b2:	e008      	b.n	80071c6 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]
      break;
 80071b8:	e006      	b.n	80071c8 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80071ba:	bf00      	nop
 80071bc:	e004      	b.n	80071c8 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80071be:	bf00      	nop
 80071c0:	e002      	b.n	80071c8 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80071c2:	bf00      	nop
 80071c4:	e000      	b.n	80071c8 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 80071c6:	bf00      	nop
  }
  if (status == HAL_OK)
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10d      	bne.n	80071ea <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f023 0118 	bic.w	r1, r3, #24
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	0801cd04 	.word	0x0801cd04

080071f8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e02d      	b.n	8007266 <HAL_DAC_Init+0x6e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a18      	ldr	r2, [pc, #96]	; (8007270 <HAL_DAC_Init+0x78>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d013      	beq.n	800723c <HAL_DAC_Init+0x44>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a16      	ldr	r2, [pc, #88]	; (8007274 <HAL_DAC_Init+0x7c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00e      	beq.n	800723c <HAL_DAC_Init+0x44>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a15      	ldr	r2, [pc, #84]	; (8007278 <HAL_DAC_Init+0x80>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d009      	beq.n	800723c <HAL_DAC_Init+0x44>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a13      	ldr	r2, [pc, #76]	; (800727c <HAL_DAC_Init+0x84>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d004      	beq.n	800723c <HAL_DAC_Init+0x44>
 8007232:	f240 119d 	movw	r1, #413	; 0x19d
 8007236:	4812      	ldr	r0, [pc, #72]	; (8007280 <HAL_DAC_Init+0x88>)
 8007238:	f7fb f9fa 	bl	8002630 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	791b      	ldrb	r3, [r3, #4]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d105      	bne.n	8007252 <HAL_DAC_Init+0x5a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7fa f9c7 	bl	80015e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2202      	movs	r2, #2
 8007256:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	50000800 	.word	0x50000800
 8007274:	50000c00 	.word	0x50000c00
 8007278:	50001000 	.word	0x50001000
 800727c:	50001400 	.word	0x50001400
 8007280:	0801cd40 	.word	0x0801cd40

08007284 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800729a:	d120      	bne.n	80072de <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072aa:	d118      	bne.n	80072de <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2204      	movs	r2, #4
 80072b0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f043 0201 	orr.w	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072d6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f82d 	bl	8007338 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ec:	d120      	bne.n	8007330 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072fc:	d118      	bne.n	8007330 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2204      	movs	r2, #4
 8007302:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	f043 0202 	orr.w	r2, r3, #2
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007318:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007328:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fb66 	bl	80079fc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08a      	sub	sp, #40	; 0x28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC parameters */
  assert_param(IS_DAC_HIGH_FREQUENCY_MODE(sConfig->DAC_HighFrequency));
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d012      	beq.n	8007386 <HAL_DAC_ConfigChannel+0x3a>
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007368:	d00d      	beq.n	8007386 <HAL_DAC_ConfigChannel+0x3a>
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007372:	d008      	beq.n	8007386 <HAL_DAC_ConfigChannel+0x3a>
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d004      	beq.n	8007386 <HAL_DAC_ConfigChannel+0x3a>
 800737c:	f240 4155 	movw	r1, #1109	; 0x455
 8007380:	487d      	ldr	r0, [pc, #500]	; (8007578 <HAL_DAC_ConfigChannel+0x22c>)
 8007382:	f7fb f955 	bl	8002630 <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger));
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d070      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d06c      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	2b0a      	cmp	r3, #10
 800739c:	d068      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b0e      	cmp	r3, #14
 80073a4:	d064      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	2b12      	cmp	r3, #18
 80073ac:	d060      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b16      	cmp	r3, #22
 80073b4:	d05c      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	2b1a      	cmp	r3, #26
 80073bc:	d058      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2b1e      	cmp	r3, #30
 80073c4:	d054      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	2b22      	cmp	r3, #34	; 0x22
 80073cc:	d050      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	2b26      	cmp	r3, #38	; 0x26
 80073d4:	d04c      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	2b2a      	cmp	r3, #42	; 0x2a
 80073dc:	d048      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	2b2e      	cmp	r3, #46	; 0x2e
 80073e4:	d044      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b32      	cmp	r3, #50	; 0x32
 80073ec:	d040      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2b36      	cmp	r3, #54	; 0x36
 80073f4:	d03c      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b3a      	cmp	r3, #58	; 0x3a
 80073fc:	d038      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a5e      	ldr	r2, [pc, #376]	; (800757c <HAL_DAC_ConfigChannel+0x230>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d107      	bne.n	8007418 <HAL_DAC_ConfigChannel+0xcc>
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b06      	cmp	r3, #6
 800740e:	d02f      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b3e      	cmp	r3, #62	; 0x3e
 8007416:	d02b      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a58      	ldr	r2, [pc, #352]	; (8007580 <HAL_DAC_ConfigChannel+0x234>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d107      	bne.n	8007432 <HAL_DAC_ConfigChannel+0xe6>
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	2b06      	cmp	r3, #6
 8007428:	d022      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	2b3e      	cmp	r3, #62	; 0x3e
 8007430:	d01e      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a53      	ldr	r2, [pc, #332]	; (8007584 <HAL_DAC_ConfigChannel+0x238>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d107      	bne.n	800744c <HAL_DAC_ConfigChannel+0x100>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	2b06      	cmp	r3, #6
 8007442:	d015      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b3e      	cmp	r3, #62	; 0x3e
 800744a:	d011      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a4d      	ldr	r2, [pc, #308]	; (8007588 <HAL_DAC_ConfigChannel+0x23c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d107      	bne.n	8007466 <HAL_DAC_ConfigChannel+0x11a>
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	2b06      	cmp	r3, #6
 800745c:	d008      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	2b3e      	cmp	r3, #62	; 0x3e
 8007464:	d004      	beq.n	8007470 <HAL_DAC_ConfigChannel+0x124>
 8007466:	f240 4156 	movw	r1, #1110	; 0x456
 800746a:	4843      	ldr	r0, [pc, #268]	; (8007578 <HAL_DAC_ConfigChannel+0x22c>)
 800746c:	f7fb f8e0 	bl	8002630 <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger2));
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d070      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b02      	cmp	r3, #2
 800747e:	d06c      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b0a      	cmp	r3, #10
 8007486:	d068      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b0e      	cmp	r3, #14
 800748e:	d064      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	2b12      	cmp	r3, #18
 8007496:	d060      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b16      	cmp	r3, #22
 800749e:	d05c      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b1a      	cmp	r3, #26
 80074a6:	d058      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	2b1e      	cmp	r3, #30
 80074ae:	d054      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	2b22      	cmp	r3, #34	; 0x22
 80074b6:	d050      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	2b26      	cmp	r3, #38	; 0x26
 80074be:	d04c      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	2b2a      	cmp	r3, #42	; 0x2a
 80074c6:	d048      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b2e      	cmp	r3, #46	; 0x2e
 80074ce:	d044      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b32      	cmp	r3, #50	; 0x32
 80074d6:	d040      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b36      	cmp	r3, #54	; 0x36
 80074de:	d03c      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	2b3a      	cmp	r3, #58	; 0x3a
 80074e6:	d038      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a23      	ldr	r2, [pc, #140]	; (800757c <HAL_DAC_ConfigChannel+0x230>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d107      	bne.n	8007502 <HAL_DAC_ConfigChannel+0x1b6>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	2b06      	cmp	r3, #6
 80074f8:	d02f      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007500:	d02b      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a1e      	ldr	r2, [pc, #120]	; (8007580 <HAL_DAC_ConfigChannel+0x234>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d107      	bne.n	800751c <HAL_DAC_ConfigChannel+0x1d0>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b06      	cmp	r3, #6
 8007512:	d022      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b3e      	cmp	r3, #62	; 0x3e
 800751a:	d01e      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a18      	ldr	r2, [pc, #96]	; (8007584 <HAL_DAC_ConfigChannel+0x238>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d107      	bne.n	8007536 <HAL_DAC_ConfigChannel+0x1ea>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b06      	cmp	r3, #6
 800752c:	d015      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b3e      	cmp	r3, #62	; 0x3e
 8007534:	d011      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a13      	ldr	r2, [pc, #76]	; (8007588 <HAL_DAC_ConfigChannel+0x23c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d107      	bne.n	8007550 <HAL_DAC_ConfigChannel+0x204>
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	2b06      	cmp	r3, #6
 8007546:	d008      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	2b3e      	cmp	r3, #62	; 0x3e
 800754e:	d004      	beq.n	800755a <HAL_DAC_ConfigChannel+0x20e>
 8007550:	f240 4157 	movw	r1, #1111	; 0x457
 8007554:	4808      	ldr	r0, [pc, #32]	; (8007578 <HAL_DAC_ConfigChannel+0x22c>)
 8007556:	f7fb f86b 	bl	8002630 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d014      	beq.n	800758c <HAL_DAC_ConfigChannel+0x240>
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	2b02      	cmp	r3, #2
 8007568:	d010      	beq.n	800758c <HAL_DAC_ConfigChannel+0x240>
 800756a:	f44f 618b 	mov.w	r1, #1112	; 0x458
 800756e:	4802      	ldr	r0, [pc, #8]	; (8007578 <HAL_DAC_ConfigChannel+0x22c>)
 8007570:	f7fb f85e 	bl	8002630 <assert_failed>
 8007574:	e00a      	b.n	800758c <HAL_DAC_ConfigChannel+0x240>
 8007576:	bf00      	nop
 8007578:	0801cd40 	.word	0x0801cd40
 800757c:	50000800 	.word	0x50000800
 8007580:	50000c00 	.word	0x50000c00
 8007584:	50001000 	.word	0x50001000
 8007588:	50001400 	.word	0x50001400
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d00c      	beq.n	80075ae <HAL_DAC_ConfigChannel+0x262>
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	2b02      	cmp	r3, #2
 800759a:	d008      	beq.n	80075ae <HAL_DAC_ConfigChannel+0x262>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	2b04      	cmp	r3, #4
 80075a2:	d004      	beq.n	80075ae <HAL_DAC_ConfigChannel+0x262>
 80075a4:	f240 4159 	movw	r1, #1113	; 0x459
 80075a8:	4867      	ldr	r0, [pc, #412]	; (8007748 <HAL_DAC_ConfigChannel+0x3fc>)
 80075aa:	f7fb f841 	bl	8002630 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d008      	beq.n	80075c8 <HAL_DAC_ConfigChannel+0x27c>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d004      	beq.n	80075c8 <HAL_DAC_ConfigChannel+0x27c>
 80075be:	f240 415a 	movw	r1, #1114	; 0x45a
 80075c2:	4861      	ldr	r0, [pc, #388]	; (8007748 <HAL_DAC_ConfigChannel+0x3fc>)
 80075c4:	f7fb f834 	bl	8002630 <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d108      	bne.n	80075e2 <HAL_DAC_ConfigChannel+0x296>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	2b1f      	cmp	r3, #31
 80075d6:	d904      	bls.n	80075e2 <HAL_DAC_ConfigChannel+0x296>
 80075d8:	f240 415d 	movw	r1, #1117	; 0x45d
 80075dc:	485a      	ldr	r0, [pc, #360]	; (8007748 <HAL_DAC_ConfigChannel+0x3fc>)
 80075de:	f7fb f827 	bl	8002630 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d008      	beq.n	80075fc <HAL_DAC_ConfigChannel+0x2b0>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d004      	beq.n	80075fc <HAL_DAC_ConfigChannel+0x2b0>
 80075f2:	f240 415f 	movw	r1, #1119	; 0x45f
 80075f6:	4854      	ldr	r0, [pc, #336]	; (8007748 <HAL_DAC_ConfigChannel+0x3fc>)
 80075f8:	f7fb f81a 	bl	8002630 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	2b04      	cmp	r3, #4
 8007602:	d11c      	bne.n	800763e <HAL_DAC_ConfigChannel+0x2f2>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800760c:	d304      	bcc.n	8007618 <HAL_DAC_ConfigChannel+0x2cc>
 800760e:	f240 4162 	movw	r1, #1122	; 0x462
 8007612:	484d      	ldr	r0, [pc, #308]	; (8007748 <HAL_DAC_ConfigChannel+0x3fc>)
 8007614:	f7fb f80c 	bl	8002630 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007620:	d304      	bcc.n	800762c <HAL_DAC_ConfigChannel+0x2e0>
 8007622:	f240 4163 	movw	r1, #1123	; 0x463
 8007626:	4848      	ldr	r0, [pc, #288]	; (8007748 <HAL_DAC_ConfigChannel+0x3fc>)
 8007628:	f7fb f802 	bl	8002630 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	2bff      	cmp	r3, #255	; 0xff
 8007632:	d904      	bls.n	800763e <HAL_DAC_ConfigChannel+0x2f2>
 8007634:	f240 4164 	movw	r1, #1124	; 0x464
 8007638:	4843      	ldr	r0, [pc, #268]	; (8007748 <HAL_DAC_ConfigChannel+0x3fc>)
 800763a:	f7fa fff9 	bl	8002630 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a42      	ldr	r2, [pc, #264]	; (800774c <HAL_DAC_ConfigChannel+0x400>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d106      	bne.n	8007656 <HAL_DAC_ConfigChannel+0x30a>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	bf0c      	ite	eq
 800764e:	2301      	moveq	r3, #1
 8007650:	2300      	movne	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	e00b      	b.n	800766e <HAL_DAC_ConfigChannel+0x322>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <HAL_DAC_ConfigChannel+0x316>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b10      	cmp	r3, #16
 8007660:	d101      	bne.n	8007666 <HAL_DAC_ConfigChannel+0x31a>
 8007662:	2301      	movs	r3, #1
 8007664:	e000      	b.n	8007668 <HAL_DAC_ConfigChannel+0x31c>
 8007666:	2300      	movs	r3, #0
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d104      	bne.n	800767c <HAL_DAC_ConfigChannel+0x330>
 8007672:	f240 4166 	movw	r1, #1126	; 0x466
 8007676:	4834      	ldr	r0, [pc, #208]	; (8007748 <HAL_DAC_ConfigChannel+0x3fc>)
 8007678:	f7fa ffda 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	791b      	ldrb	r3, [r3, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d008      	beq.n	8007696 <HAL_DAC_ConfigChannel+0x34a>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	791b      	ldrb	r3, [r3, #4]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d004      	beq.n	8007696 <HAL_DAC_ConfigChannel+0x34a>
 800768c:	f240 4167 	movw	r1, #1127	; 0x467
 8007690:	482d      	ldr	r0, [pc, #180]	; (8007748 <HAL_DAC_ConfigChannel+0x3fc>)
 8007692:	f7fa ffcd 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	795b      	ldrb	r3, [r3, #5]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d008      	beq.n	80076b0 <HAL_DAC_ConfigChannel+0x364>
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	795b      	ldrb	r3, [r3, #5]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d004      	beq.n	80076b0 <HAL_DAC_ConfigChannel+0x364>
 80076a6:	f44f 618d 	mov.w	r1, #1128	; 0x468
 80076aa:	4827      	ldr	r0, [pc, #156]	; (8007748 <HAL_DAC_ConfigChannel+0x3fc>)
 80076ac:	f7fa ffc0 	bl	8002630 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	795b      	ldrb	r3, [r3, #5]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_DAC_ConfigChannel+0x370>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e197      	b.n	80079ec <HAL_DAC_ConfigChannel+0x6a0>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2201      	movs	r2, #1
 80076c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2202      	movs	r2, #2
 80076c6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d179      	bne.n	80077c4 <HAL_DAC_ConfigChannel+0x478>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80076d0:	f7fc fdac 	bl	800422c <HAL_GetTick>
 80076d4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d139      	bne.n	8007750 <HAL_DAC_ConfigChannel+0x404>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80076dc:	e011      	b.n	8007702 <HAL_DAC_ConfigChannel+0x3b6>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80076de:	f7fc fda5 	bl	800422c <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d90a      	bls.n	8007702 <HAL_DAC_ConfigChannel+0x3b6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f043 0208 	orr.w	r2, r3, #8
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2203      	movs	r2, #3
 80076fc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e174      	b.n	80079ec <HAL_DAC_ConfigChannel+0x6a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e6      	bne.n	80076de <HAL_DAC_ConfigChannel+0x392>
        }
      }
      HAL_Delay(1);
 8007710:	2001      	movs	r0, #1
 8007712:	f7fc fd97 	bl	8004244 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800771e:	641a      	str	r2, [r3, #64]	; 0x40
 8007720:	e023      	b.n	800776a <HAL_DAC_ConfigChannel+0x41e>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007722:	f7fc fd83 	bl	800422c <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d90f      	bls.n	8007750 <HAL_DAC_ConfigChannel+0x404>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	f043 0208 	orr.w	r2, r3, #8
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2203      	movs	r2, #3
 8007740:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e152      	b.n	80079ec <HAL_DAC_ConfigChannel+0x6a0>
 8007746:	bf00      	nop
 8007748:	0801cd40 	.word	0x0801cd40
 800774c:	50000c00 	.word	0x50000c00
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007756:	2b00      	cmp	r3, #0
 8007758:	dbe3      	blt.n	8007722 <HAL_DAC_ConfigChannel+0x3d6>
        }
      }
      HAL_Delay(1U);
 800775a:	2001      	movs	r0, #1
 800775c:	f7fc fd72 	bl	8004244 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007768:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800777a:	fa01 f303 	lsl.w	r3, r1, r3
 800777e:	43db      	mvns	r3, r3
 8007780:	ea02 0103 	and.w	r1, r2, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f003 0310 	and.w	r3, r3, #16
 800778e:	409a      	lsls	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	21ff      	movs	r1, #255	; 0xff
 80077a6:	fa01 f303 	lsl.w	r3, r1, r3
 80077aa:	43db      	mvns	r3, r3
 80077ac:	ea02 0103 	and.w	r1, r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f003 0310 	and.w	r3, r3, #16
 80077ba:	409a      	lsls	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d11d      	bne.n	8007808 <HAL_DAC_ConfigChannel+0x4bc>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	221f      	movs	r2, #31
 80077dc:	fa02 f303 	lsl.w	r3, r2, r3
 80077e0:	43db      	mvns	r3, r3
 80077e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e4:	4013      	ands	r3, r2
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fc:	4313      	orrs	r3, r2
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007806:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2207      	movs	r2, #7
 8007818:	fa02 f303 	lsl.w	r3, r2, r3
 800781c:	43db      	mvns	r3, r3
 800781e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007820:	4013      	ands	r3, r2
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d102      	bne.n	8007832 <HAL_DAC_ConfigChannel+0x4e6>
  {
    connectOnChip = 0x00000000UL;
 800782c:	2300      	movs	r3, #0
 800782e:	623b      	str	r3, [r7, #32]
 8007830:	e00f      	b.n	8007852 <HAL_DAC_ConfigChannel+0x506>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	2b02      	cmp	r3, #2
 8007838:	d102      	bne.n	8007840 <HAL_DAC_ConfigChannel+0x4f4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800783a:	2301      	movs	r3, #1
 800783c:	623b      	str	r3, [r7, #32]
 800783e:	e008      	b.n	8007852 <HAL_DAC_ConfigChannel+0x506>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <HAL_DAC_ConfigChannel+0x502>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007848:	2301      	movs	r3, #1
 800784a:	623b      	str	r3, [r7, #32]
 800784c:	e001      	b.n	8007852 <HAL_DAC_ConfigChannel+0x506>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800784e:	2300      	movs	r3, #0
 8007850:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	6a3a      	ldr	r2, [r7, #32]
 800785e:	4313      	orrs	r3, r2
 8007860:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f003 0310 	and.w	r3, r3, #16
 8007868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	43db      	mvns	r3, r3
 8007872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007874:	4013      	ands	r3, r2
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	791b      	ldrb	r3, [r3, #4]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d102      	bne.n	8007886 <HAL_DAC_ConfigChannel+0x53a>
 8007880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007884:	e000      	b.n	8007888 <HAL_DAC_ConfigChannel+0x53c>
 8007886:	2300      	movs	r3, #0
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	4313      	orrs	r3, r2
 800788c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007898:	fa02 f303 	lsl.w	r3, r2, r3
 800789c:	43db      	mvns	r3, r3
 800789e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a0:	4013      	ands	r3, r2
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	795b      	ldrb	r3, [r3, #5]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d102      	bne.n	80078b2 <HAL_DAC_ConfigChannel+0x566>
 80078ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b0:	e000      	b.n	80078b4 <HAL_DAC_ConfigChannel+0x568>
 80078b2:	2300      	movs	r3, #0
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d114      	bne.n	80078f4 <HAL_DAC_ConfigChannel+0x5a8>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80078ca:	f003 fddf 	bl	800b48c <HAL_RCC_GetHCLKFreq>
 80078ce:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	4a48      	ldr	r2, [pc, #288]	; (80079f4 <HAL_DAC_ConfigChannel+0x6a8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d904      	bls.n	80078e2 <HAL_DAC_ConfigChannel+0x596>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
 80078e0:	e00f      	b.n	8007902 <HAL_DAC_ConfigChannel+0x5b6>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	4a44      	ldr	r2, [pc, #272]	; (80079f8 <HAL_DAC_ConfigChannel+0x6ac>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d90a      	bls.n	8007900 <HAL_DAC_ConfigChannel+0x5b4>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
 80078f2:	e006      	b.n	8007902 <HAL_DAC_ConfigChannel+0x5b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fa:	4313      	orrs	r3, r2
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
 80078fe:	e000      	b.n	8007902 <HAL_DAC_ConfigChannel+0x5b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8007900:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f003 0310 	and.w	r3, r3, #16
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007910:	4313      	orrs	r3, r2
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6819      	ldr	r1, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
 8007930:	43da      	mvns	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	400a      	ands	r2, r1
 8007938:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	f640 72fe 	movw	r2, #4094	; 0xffe
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	43db      	mvns	r3, r3
 8007952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007954:	4013      	ands	r3, r2
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	fa02 f303 	lsl.w	r3, r2, r3
 800796a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796c:	4313      	orrs	r3, r2
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007976:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6819      	ldr	r1, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	22c0      	movs	r2, #192	; 0xc0
 8007986:	fa02 f303 	lsl.w	r3, r2, r3
 800798a:	43da      	mvns	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	400a      	ands	r2, r1
 8007992:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	089b      	lsrs	r3, r3, #2
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	089b      	lsrs	r3, r3, #2
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f003 0310 	and.w	r3, r3, #16
 80079be:	f640 710f 	movw	r1, #3855	; 0xf0f
 80079c2:	fa01 f303 	lsl.w	r3, r1, r3
 80079c6:	43db      	mvns	r3, r3
 80079c8:	ea02 0103 	and.w	r1, r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	409a      	lsls	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3728      	adds	r7, #40	; 0x28
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	09896800 	.word	0x09896800
 80079f8:	04c4b400 	.word	0x04c4b400

080079fc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e296      	b.n	8007f50 <HAL_FDCAN_Init+0x540>
  }

  /* Check function parameters */
  assert_param(IS_FDCAN_ALL_INSTANCE(hfdcan->Instance));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a8f      	ldr	r2, [pc, #572]	; (8007c64 <HAL_FDCAN_Init+0x254>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d00e      	beq.n	8007a4a <HAL_FDCAN_Init+0x3a>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a8d      	ldr	r2, [pc, #564]	; (8007c68 <HAL_FDCAN_Init+0x258>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d009      	beq.n	8007a4a <HAL_FDCAN_Init+0x3a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a8c      	ldr	r2, [pc, #560]	; (8007c6c <HAL_FDCAN_Init+0x25c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d004      	beq.n	8007a4a <HAL_FDCAN_Init+0x3a>
 8007a40:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8007a44:	488a      	ldr	r0, [pc, #552]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007a46:	f7fa fdf3 	bl	8002630 <assert_failed>
  if (hfdcan->Instance == FDCAN1)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a85      	ldr	r2, [pc, #532]	; (8007c64 <HAL_FDCAN_Init+0x254>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d144      	bne.n	8007ade <HAL_FDCAN_Init+0xce>
  {
    assert_param(IS_FDCAN_CKDIV(hfdcan->Init.ClockDivider));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d040      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d03c      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d038      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d034      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d030      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b05      	cmp	r3, #5
 8007a82:	d02c      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	2b06      	cmp	r3, #6
 8007a8a:	d028      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	2b07      	cmp	r3, #7
 8007a92:	d024      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d020      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	2b09      	cmp	r3, #9
 8007aa2:	d01c      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	2b0a      	cmp	r3, #10
 8007aaa:	d018      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	2b0b      	cmp	r3, #11
 8007ab2:	d014      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b0c      	cmp	r3, #12
 8007aba:	d010      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2b0d      	cmp	r3, #13
 8007ac2:	d00c      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b0e      	cmp	r3, #14
 8007aca:	d008      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b0f      	cmp	r3, #15
 8007ad2:	d004      	beq.n	8007ade <HAL_FDCAN_Init+0xce>
 8007ad4:	f240 112d 	movw	r1, #301	; 0x12d
 8007ad8:	4865      	ldr	r0, [pc, #404]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007ada:	f7fa fda9 	bl	8002630 <assert_failed>
  }
  assert_param(IS_FDCAN_FRAME_FORMAT(hfdcan->Init.FrameFormat));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00e      	beq.n	8007b04 <HAL_FDCAN_Init+0xf4>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aee:	d009      	beq.n	8007b04 <HAL_FDCAN_Init+0xf4>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007af8:	d004      	beq.n	8007b04 <HAL_FDCAN_Init+0xf4>
 8007afa:	f240 112f 	movw	r1, #303	; 0x12f
 8007afe:	485c      	ldr	r0, [pc, #368]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007b00:	f7fa fd96 	bl	8002630 <assert_failed>
  assert_param(IS_FDCAN_MODE(hfdcan->Init.Mode));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d014      	beq.n	8007b36 <HAL_FDCAN_Init+0x126>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d010      	beq.n	8007b36 <HAL_FDCAN_Init+0x126>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d00c      	beq.n	8007b36 <HAL_FDCAN_Init+0x126>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d008      	beq.n	8007b36 <HAL_FDCAN_Init+0x126>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d004      	beq.n	8007b36 <HAL_FDCAN_Init+0x126>
 8007b2c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8007b30:	484f      	ldr	r0, [pc, #316]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007b32:	f7fa fd7d 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.AutoRetransmission));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	7c1b      	ldrb	r3, [r3, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d008      	beq.n	8007b50 <HAL_FDCAN_Init+0x140>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	7c1b      	ldrb	r3, [r3, #16]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d004      	beq.n	8007b50 <HAL_FDCAN_Init+0x140>
 8007b46:	f240 1131 	movw	r1, #305	; 0x131
 8007b4a:	4849      	ldr	r0, [pc, #292]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007b4c:	f7fa fd70 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.TransmitPause));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7c5b      	ldrb	r3, [r3, #17]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d008      	beq.n	8007b6a <HAL_FDCAN_Init+0x15a>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7c5b      	ldrb	r3, [r3, #17]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d004      	beq.n	8007b6a <HAL_FDCAN_Init+0x15a>
 8007b60:	f44f 7199 	mov.w	r1, #306	; 0x132
 8007b64:	4842      	ldr	r0, [pc, #264]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007b66:	f7fa fd63 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hfdcan->Init.ProtocolException));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7c9b      	ldrb	r3, [r3, #18]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d008      	beq.n	8007b84 <HAL_FDCAN_Init+0x174>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7c9b      	ldrb	r3, [r3, #18]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d004      	beq.n	8007b84 <HAL_FDCAN_Init+0x174>
 8007b7a:	f240 1133 	movw	r1, #307	; 0x133
 8007b7e:	483c      	ldr	r0, [pc, #240]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007b80:	f7fa fd56 	bl	8002630 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_PRESCALER(hfdcan->Init.NominalPrescaler));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d004      	beq.n	8007b96 <HAL_FDCAN_Init+0x186>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b94:	d904      	bls.n	8007ba0 <HAL_FDCAN_Init+0x190>
 8007b96:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007b9a:	4835      	ldr	r0, [pc, #212]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007b9c:	f7fa fd48 	bl	8002630 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_SJW(hfdcan->Init.NominalSyncJumpWidth));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <HAL_FDCAN_Init+0x1a0>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	2b80      	cmp	r3, #128	; 0x80
 8007bae:	d904      	bls.n	8007bba <HAL_FDCAN_Init+0x1aa>
 8007bb0:	f240 1135 	movw	r1, #309	; 0x135
 8007bb4:	482e      	ldr	r0, [pc, #184]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007bb6:	f7fa fd3b 	bl	8002630 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG1(hfdcan->Init.NominalTimeSeg1));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d004      	beq.n	8007bcc <HAL_FDCAN_Init+0x1bc>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bca:	d904      	bls.n	8007bd6 <HAL_FDCAN_Init+0x1c6>
 8007bcc:	f44f 719b 	mov.w	r1, #310	; 0x136
 8007bd0:	4827      	ldr	r0, [pc, #156]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007bd2:	f7fa fd2d 	bl	8002630 <assert_failed>
  assert_param(IS_FDCAN_NOMINAL_TSEG2(hfdcan->Init.NominalTimeSeg2));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_FDCAN_Init+0x1d6>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	d904      	bls.n	8007bf0 <HAL_FDCAN_Init+0x1e0>
 8007be6:	f240 1137 	movw	r1, #311	; 0x137
 8007bea:	4821      	ldr	r0, [pc, #132]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007bec:	f7fa fd20 	bl	8002630 <assert_failed>
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bf8:	d13c      	bne.n	8007c74 <HAL_FDCAN_Init+0x264>
  {
    assert_param(IS_FDCAN_DATA_PRESCALER(hfdcan->Init.DataPrescaler));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_FDCAN_Init+0x1fa>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d904      	bls.n	8007c14 <HAL_FDCAN_Init+0x204>
 8007c0a:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8007c0e:	4818      	ldr	r0, [pc, #96]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007c10:	f7fa fd0e 	bl	8002630 <assert_failed>
    assert_param(IS_FDCAN_DATA_SJW(hfdcan->Init.DataSyncJumpWidth));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <HAL_FDCAN_Init+0x214>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	d904      	bls.n	8007c2e <HAL_FDCAN_Init+0x21e>
 8007c24:	f240 113b 	movw	r1, #315	; 0x13b
 8007c28:	4811      	ldr	r0, [pc, #68]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007c2a:	f7fa fd01 	bl	8002630 <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG1(hfdcan->Init.DataTimeSeg1));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_FDCAN_Init+0x22e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d904      	bls.n	8007c48 <HAL_FDCAN_Init+0x238>
 8007c3e:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8007c42:	480b      	ldr	r0, [pc, #44]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007c44:	f7fa fcf4 	bl	8002630 <assert_failed>
    assert_param(IS_FDCAN_DATA_TSEG2(hfdcan->Init.DataTimeSeg2));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_FDCAN_Init+0x248>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c54:	2b10      	cmp	r3, #16
 8007c56:	d90d      	bls.n	8007c74 <HAL_FDCAN_Init+0x264>
 8007c58:	f240 113d 	movw	r1, #317	; 0x13d
 8007c5c:	4804      	ldr	r0, [pc, #16]	; (8007c70 <HAL_FDCAN_Init+0x260>)
 8007c5e:	f7fa fce7 	bl	8002630 <assert_failed>
 8007c62:	e007      	b.n	8007c74 <HAL_FDCAN_Init+0x264>
 8007c64:	40006400 	.word	0x40006400
 8007c68:	40006800 	.word	0x40006800
 8007c6c:	40006c00 	.word	0x40006c00
 8007c70:	0801cd78 	.word	0x0801cd78
  }
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.StdFiltersNbr, SRAMCAN_FLS_NBR));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	2b1c      	cmp	r3, #28
 8007c7a:	d904      	bls.n	8007c86 <HAL_FDCAN_Init+0x276>
 8007c7c:	f240 113f 	movw	r1, #319	; 0x13f
 8007c80:	4887      	ldr	r0, [pc, #540]	; (8007ea0 <HAL_FDCAN_Init+0x490>)
 8007c82:	f7fa fcd5 	bl	8002630 <assert_failed>
  assert_param(IS_FDCAN_MAX_VALUE(hfdcan->Init.ExtFiltersNbr, SRAMCAN_FLE_NBR));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	d904      	bls.n	8007c98 <HAL_FDCAN_Init+0x288>
 8007c8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c92:	4883      	ldr	r0, [pc, #524]	; (8007ea0 <HAL_FDCAN_Init+0x490>)
 8007c94:	f7fa fccc 	bl	8002630 <assert_failed>
  assert_param(IS_FDCAN_TX_FIFO_QUEUE_MODE(hfdcan->Init.TxFifoQueueMode));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d009      	beq.n	8007cb4 <HAL_FDCAN_Init+0x2a4>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ca8:	d004      	beq.n	8007cb4 <HAL_FDCAN_Init+0x2a4>
 8007caa:	f240 1141 	movw	r1, #321	; 0x141
 8007cae:	487c      	ldr	r0, [pc, #496]	; (8007ea0 <HAL_FDCAN_Init+0x490>)
 8007cb0:	f7fa fcbe 	bl	8002630 <assert_failed>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <HAL_FDCAN_Init+0x2be>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7f9 fe0f 	bl	80018ec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	699a      	ldr	r2, [r3, #24]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0210 	bic.w	r2, r2, #16
 8007cdc:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cde:	f7fc faa5 	bl	800422c <HAL_GetTick>
 8007ce2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007ce4:	e012      	b.n	8007d0c <HAL_FDCAN_Init+0x2fc>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007ce6:	f7fc faa1 	bl	800422c <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b0a      	cmp	r3, #10
 8007cf2:	d90b      	bls.n	8007d0c <HAL_FDCAN_Init+0x2fc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf8:	f043 0201 	orr.w	r2, r3, #1
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2203      	movs	r2, #3
 8007d04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e121      	b.n	8007f50 <HAL_FDCAN_Init+0x540>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d0e5      	beq.n	8007ce6 <HAL_FDCAN_Init+0x2d6>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	699a      	ldr	r2, [r3, #24]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0201 	orr.w	r2, r2, #1
 8007d28:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d2a:	f7fc fa7f 	bl	800422c <HAL_GetTick>
 8007d2e:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007d30:	e012      	b.n	8007d58 <HAL_FDCAN_Init+0x348>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007d32:	f7fc fa7b 	bl	800422c <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	2b0a      	cmp	r3, #10
 8007d3e:	d90b      	bls.n	8007d58 <HAL_FDCAN_Init+0x348>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d44:	f043 0201 	orr.w	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2203      	movs	r2, #3
 8007d50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e0fb      	b.n	8007f50 <HAL_FDCAN_Init+0x540>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0e5      	beq.n	8007d32 <HAL_FDCAN_Init+0x322>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	699a      	ldr	r2, [r3, #24]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f042 0202 	orr.w	r2, r2, #2
 8007d74:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a4a      	ldr	r2, [pc, #296]	; (8007ea4 <HAL_FDCAN_Init+0x494>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d103      	bne.n	8007d88 <HAL_FDCAN_Init+0x378>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007d80:	4a49      	ldr	r2, [pc, #292]	; (8007ea8 <HAL_FDCAN_Init+0x498>)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	7c1b      	ldrb	r3, [r3, #16]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d108      	bne.n	8007da2 <HAL_FDCAN_Init+0x392>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d9e:	619a      	str	r2, [r3, #24]
 8007da0:	e007      	b.n	8007db2 <HAL_FDCAN_Init+0x3a2>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	7c5b      	ldrb	r3, [r3, #17]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d108      	bne.n	8007dcc <HAL_FDCAN_Init+0x3bc>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	699a      	ldr	r2, [r3, #24]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dc8:	619a      	str	r2, [r3, #24]
 8007dca:	e007      	b.n	8007ddc <HAL_FDCAN_Init+0x3cc>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007dda:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	7c9b      	ldrb	r3, [r3, #18]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d108      	bne.n	8007df6 <HAL_FDCAN_Init+0x3e6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007df2:	619a      	str	r2, [r3, #24]
 8007df4:	e007      	b.n	8007e06 <HAL_FDCAN_Init+0x3f6>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699a      	ldr	r2, [r3, #24]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e04:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007e2a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	691a      	ldr	r2, [r3, #16]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 0210 	bic.w	r2, r2, #16
 8007e3a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d108      	bne.n	8007e56 <HAL_FDCAN_Init+0x446>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699a      	ldr	r2, [r3, #24]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0204 	orr.w	r2, r2, #4
 8007e52:	619a      	str	r2, [r3, #24]
 8007e54:	e032      	b.n	8007ebc <HAL_FDCAN_Init+0x4ac>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d02e      	beq.n	8007ebc <HAL_FDCAN_Init+0x4ac>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d022      	beq.n	8007eac <HAL_FDCAN_Init+0x49c>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	699a      	ldr	r2, [r3, #24]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e74:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f042 0210 	orr.w	r2, r2, #16
 8007e84:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d116      	bne.n	8007ebc <HAL_FDCAN_Init+0x4ac>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	699a      	ldr	r2, [r3, #24]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f042 0220 	orr.w	r2, r2, #32
 8007e9c:	619a      	str	r2, [r3, #24]
 8007e9e:	e00d      	b.n	8007ebc <HAL_FDCAN_Init+0x4ac>
 8007ea0:	0801cd78 	.word	0x0801cd78
 8007ea4:	40006400 	.word	0x40006400
 8007ea8:	40006500 	.word	0x40006500
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0220 	orr.w	r2, r2, #32
 8007eba:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ecc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007ed4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007ee4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ee6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ef0:	d115      	bne.n	8007f1e <HAL_FDCAN_Init+0x50e>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	3b01      	subs	r3, #1
 8007efe:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007f00:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	3b01      	subs	r3, #1
 8007f08:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007f0a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	3b01      	subs	r3, #1
 8007f14:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007f1a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007f1c:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f80f 	bl	8007f58 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007f60:	4b30      	ldr	r3, [pc, #192]	; (8008024 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8007f62:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a2f      	ldr	r2, [pc, #188]	; (8008028 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d103      	bne.n	8007f76 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f74:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a2c      	ldr	r2, [pc, #176]	; (800802c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d103      	bne.n	8007f88 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8007f86:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f96:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9e:	041a      	lsls	r2, r3, #16
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fbc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	061a      	lsls	r2, r3, #24
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	60fb      	str	r3, [r7, #12]
 8007ffc:	e005      	b.n	800800a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3304      	adds	r3, #4
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	429a      	cmp	r2, r3
 8008014:	d3f3      	bcc.n	8007ffe <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	4000a400 	.word	0x4000a400
 8008028:	40006800 	.word	0x40006800
 800802c:	40006c00 	.word	0x40006c00

08008030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800803a:	2300      	movs	r3, #0
 800803c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008044:	d01b      	beq.n	800807e <HAL_GPIO_Init+0x4e>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a38      	ldr	r2, [pc, #224]	; (800812c <HAL_GPIO_Init+0xfc>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d017      	beq.n	800807e <HAL_GPIO_Init+0x4e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a37      	ldr	r2, [pc, #220]	; (8008130 <HAL_GPIO_Init+0x100>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d013      	beq.n	800807e <HAL_GPIO_Init+0x4e>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a36      	ldr	r2, [pc, #216]	; (8008134 <HAL_GPIO_Init+0x104>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00f      	beq.n	800807e <HAL_GPIO_Init+0x4e>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a35      	ldr	r2, [pc, #212]	; (8008138 <HAL_GPIO_Init+0x108>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d00b      	beq.n	800807e <HAL_GPIO_Init+0x4e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a34      	ldr	r2, [pc, #208]	; (800813c <HAL_GPIO_Init+0x10c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d007      	beq.n	800807e <HAL_GPIO_Init+0x4e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a33      	ldr	r2, [pc, #204]	; (8008140 <HAL_GPIO_Init+0x110>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d003      	beq.n	800807e <HAL_GPIO_Init+0x4e>
 8008076:	21a9      	movs	r1, #169	; 0xa9
 8008078:	4832      	ldr	r0, [pc, #200]	; (8008144 <HAL_GPIO_Init+0x114>)
 800807a:	f7fa fad9 	bl	8002630 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	b29b      	uxth	r3, r3
 8008084:	2b00      	cmp	r3, #0
 8008086:	d005      	beq.n	8008094 <HAL_GPIO_Init+0x64>
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	041b      	lsls	r3, r3, #16
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_GPIO_Init+0x6c>
 8008094:	21aa      	movs	r1, #170	; 0xaa
 8008096:	482b      	ldr	r0, [pc, #172]	; (8008144 <HAL_GPIO_Init+0x114>)
 8008098:	f7fa faca 	bl	8002630 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 820a 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	f000 8205 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	2b11      	cmp	r3, #17
 80080b6:	f000 8200 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	f000 81fb 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	2b12      	cmp	r3, #18
 80080ca:	f000 81f6 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80080d6:	f000 81f0 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80080e2:	f000 81ea 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80080ee:	f000 81e4 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80080fa:	f000 81de 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8008106:	f000 81d8 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8008112:	f000 81d2 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b03      	cmp	r3, #3
 800811c:	f000 81cd 	beq.w	80084ba <HAL_GPIO_Init+0x48a>
 8008120:	21ab      	movs	r1, #171	; 0xab
 8008122:	4808      	ldr	r0, [pc, #32]	; (8008144 <HAL_GPIO_Init+0x114>)
 8008124:	f7fa fa84 	bl	8002630 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008128:	e1c7      	b.n	80084ba <HAL_GPIO_Init+0x48a>
 800812a:	bf00      	nop
 800812c:	48000400 	.word	0x48000400
 8008130:	48000800 	.word	0x48000800
 8008134:	48000c00 	.word	0x48000c00
 8008138:	48001000 	.word	0x48001000
 800813c:	48001400 	.word	0x48001400
 8008140:	48001800 	.word	0x48001800
 8008144:	0801cdb4 	.word	0x0801cdb4
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	2101      	movs	r1, #1
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	fa01 f303 	lsl.w	r3, r1, r3
 8008154:	4013      	ands	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 81aa 	beq.w	80084b4 <HAL_GPIO_Init+0x484>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f003 0303 	and.w	r3, r3, #3
 8008168:	2b01      	cmp	r3, #1
 800816a:	d005      	beq.n	8008178 <HAL_GPIO_Init+0x148>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008174:	2b02      	cmp	r3, #2
 8008176:	d144      	bne.n	8008202 <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00f      	beq.n	80081a0 <HAL_GPIO_Init+0x170>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d00b      	beq.n	80081a0 <HAL_GPIO_Init+0x170>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	2b02      	cmp	r3, #2
 800818e:	d007      	beq.n	80081a0 <HAL_GPIO_Init+0x170>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	2b03      	cmp	r3, #3
 8008196:	d003      	beq.n	80081a0 <HAL_GPIO_Init+0x170>
 8008198:	21bb      	movs	r1, #187	; 0xbb
 800819a:	488b      	ldr	r0, [pc, #556]	; (80083c8 <HAL_GPIO_Init+0x398>)
 800819c:	f7fa fa48 	bl	8002630 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	2203      	movs	r2, #3
 80081ac:	fa02 f303 	lsl.w	r3, r2, r3
 80081b0:	43db      	mvns	r3, r3
 80081b2:	693a      	ldr	r2, [r7, #16]
 80081b4:	4013      	ands	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	68da      	ldr	r2, [r3, #12]
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	fa02 f303 	lsl.w	r3, r2, r3
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081d6:	2201      	movs	r2, #1
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	fa02 f303 	lsl.w	r3, r2, r3
 80081de:	43db      	mvns	r3, r3
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	4013      	ands	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	091b      	lsrs	r3, r3, #4
 80081ec:	f003 0201 	and.w	r2, r3, #1
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	fa02 f303 	lsl.w	r3, r2, r3
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	2b03      	cmp	r3, #3
 800820c:	d027      	beq.n	800825e <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00b      	beq.n	800822e <HAL_GPIO_Init+0x1fe>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d007      	beq.n	800822e <HAL_GPIO_Init+0x1fe>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d003      	beq.n	800822e <HAL_GPIO_Init+0x1fe>
 8008226:	21cc      	movs	r1, #204	; 0xcc
 8008228:	4867      	ldr	r0, [pc, #412]	; (80083c8 <HAL_GPIO_Init+0x398>)
 800822a:	f7fa fa01 	bl	8002630 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	2203      	movs	r2, #3
 800823a:	fa02 f303 	lsl.w	r3, r2, r3
 800823e:	43db      	mvns	r3, r3
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	4013      	ands	r3, r2
 8008244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	005b      	lsls	r3, r3, #1
 800824e:	fa02 f303 	lsl.w	r3, r2, r3
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	4313      	orrs	r3, r2
 8008256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d14b      	bne.n	8008302 <HAL_GPIO_Init+0x2d2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008270:	d01b      	beq.n	80082aa <HAL_GPIO_Init+0x27a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a55      	ldr	r2, [pc, #340]	; (80083cc <HAL_GPIO_Init+0x39c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d017      	beq.n	80082aa <HAL_GPIO_Init+0x27a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a54      	ldr	r2, [pc, #336]	; (80083d0 <HAL_GPIO_Init+0x3a0>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d013      	beq.n	80082aa <HAL_GPIO_Init+0x27a>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a53      	ldr	r2, [pc, #332]	; (80083d4 <HAL_GPIO_Init+0x3a4>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00f      	beq.n	80082aa <HAL_GPIO_Init+0x27a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a52      	ldr	r2, [pc, #328]	; (80083d8 <HAL_GPIO_Init+0x3a8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00b      	beq.n	80082aa <HAL_GPIO_Init+0x27a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a51      	ldr	r2, [pc, #324]	; (80083dc <HAL_GPIO_Init+0x3ac>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d007      	beq.n	80082aa <HAL_GPIO_Init+0x27a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a50      	ldr	r2, [pc, #320]	; (80083e0 <HAL_GPIO_Init+0x3b0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d003      	beq.n	80082aa <HAL_GPIO_Init+0x27a>
 80082a2:	21d9      	movs	r1, #217	; 0xd9
 80082a4:	4848      	ldr	r0, [pc, #288]	; (80083c8 <HAL_GPIO_Init+0x398>)
 80082a6:	f7fa f9c3 	bl	8002630 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b0f      	cmp	r3, #15
 80082b0:	d903      	bls.n	80082ba <HAL_GPIO_Init+0x28a>
 80082b2:	21da      	movs	r1, #218	; 0xda
 80082b4:	4844      	ldr	r0, [pc, #272]	; (80083c8 <HAL_GPIO_Init+0x398>)
 80082b6:	f7fa f9bb 	bl	8002630 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	08da      	lsrs	r2, r3, #3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3208      	adds	r2, #8
 80082c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	220f      	movs	r2, #15
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	43db      	mvns	r3, r3
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4013      	ands	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	691a      	ldr	r2, [r3, #16]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	fa02 f303 	lsl.w	r3, r2, r3
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	08da      	lsrs	r2, r3, #3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3208      	adds	r2, #8
 80082fc:	6939      	ldr	r1, [r7, #16]
 80082fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	2203      	movs	r2, #3
 800830e:	fa02 f303 	lsl.w	r3, r2, r3
 8008312:	43db      	mvns	r3, r3
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4013      	ands	r3, r2
 8008318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f003 0203 	and.w	r2, r3, #3
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	fa02 f303 	lsl.w	r3, r2, r3
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	4313      	orrs	r3, r2
 800832e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 80b8 	beq.w	80084b4 <HAL_GPIO_Init+0x484>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008344:	4b27      	ldr	r3, [pc, #156]	; (80083e4 <HAL_GPIO_Init+0x3b4>)
 8008346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008348:	4a26      	ldr	r2, [pc, #152]	; (80083e4 <HAL_GPIO_Init+0x3b4>)
 800834a:	f043 0301 	orr.w	r3, r3, #1
 800834e:	6613      	str	r3, [r2, #96]	; 0x60
 8008350:	4b24      	ldr	r3, [pc, #144]	; (80083e4 <HAL_GPIO_Init+0x3b4>)
 8008352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	60bb      	str	r3, [r7, #8]
 800835a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800835c:	4a22      	ldr	r2, [pc, #136]	; (80083e8 <HAL_GPIO_Init+0x3b8>)
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	089b      	lsrs	r3, r3, #2
 8008362:	3302      	adds	r3, #2
 8008364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f003 0303 	and.w	r3, r3, #3
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	220f      	movs	r2, #15
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	43db      	mvns	r3, r3
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4013      	ands	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008386:	d031      	beq.n	80083ec <HAL_GPIO_Init+0x3bc>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a10      	ldr	r2, [pc, #64]	; (80083cc <HAL_GPIO_Init+0x39c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d019      	beq.n	80083c4 <HAL_GPIO_Init+0x394>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a0f      	ldr	r2, [pc, #60]	; (80083d0 <HAL_GPIO_Init+0x3a0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d013      	beq.n	80083c0 <HAL_GPIO_Init+0x390>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a0e      	ldr	r2, [pc, #56]	; (80083d4 <HAL_GPIO_Init+0x3a4>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00d      	beq.n	80083bc <HAL_GPIO_Init+0x38c>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a0d      	ldr	r2, [pc, #52]	; (80083d8 <HAL_GPIO_Init+0x3a8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d007      	beq.n	80083b8 <HAL_GPIO_Init+0x388>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a0c      	ldr	r2, [pc, #48]	; (80083dc <HAL_GPIO_Init+0x3ac>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d101      	bne.n	80083b4 <HAL_GPIO_Init+0x384>
 80083b0:	2305      	movs	r3, #5
 80083b2:	e01c      	b.n	80083ee <HAL_GPIO_Init+0x3be>
 80083b4:	2306      	movs	r3, #6
 80083b6:	e01a      	b.n	80083ee <HAL_GPIO_Init+0x3be>
 80083b8:	2304      	movs	r3, #4
 80083ba:	e018      	b.n	80083ee <HAL_GPIO_Init+0x3be>
 80083bc:	2303      	movs	r3, #3
 80083be:	e016      	b.n	80083ee <HAL_GPIO_Init+0x3be>
 80083c0:	2302      	movs	r3, #2
 80083c2:	e014      	b.n	80083ee <HAL_GPIO_Init+0x3be>
 80083c4:	2301      	movs	r3, #1
 80083c6:	e012      	b.n	80083ee <HAL_GPIO_Init+0x3be>
 80083c8:	0801cdb4 	.word	0x0801cdb4
 80083cc:	48000400 	.word	0x48000400
 80083d0:	48000800 	.word	0x48000800
 80083d4:	48000c00 	.word	0x48000c00
 80083d8:	48001000 	.word	0x48001000
 80083dc:	48001400 	.word	0x48001400
 80083e0:	48001800 	.word	0x48001800
 80083e4:	40021000 	.word	0x40021000
 80083e8:	40010000 	.word	0x40010000
 80083ec:	2300      	movs	r3, #0
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	f002 0203 	and.w	r2, r2, #3
 80083f4:	0092      	lsls	r2, r2, #2
 80083f6:	4093      	lsls	r3, r2
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083fe:	4935      	ldr	r1, [pc, #212]	; (80084d4 <HAL_GPIO_Init+0x4a4>)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	089b      	lsrs	r3, r3, #2
 8008404:	3302      	adds	r3, #2
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800840c:	4b32      	ldr	r3, [pc, #200]	; (80084d8 <HAL_GPIO_Init+0x4a8>)
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	43db      	mvns	r3, r3
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4013      	ands	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_GPIO_Init+0x400>
        {
          temp |= iocurrent;
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4313      	orrs	r3, r2
 800842e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008430:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <HAL_GPIO_Init+0x4a8>)
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008436:	4b28      	ldr	r3, [pc, #160]	; (80084d8 <HAL_GPIO_Init+0x4a8>)
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	43db      	mvns	r3, r3
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4013      	ands	r3, r2
 8008444:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_GPIO_Init+0x42a>
        {
          temp |= iocurrent;
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800845a:	4a1f      	ldr	r2, [pc, #124]	; (80084d8 <HAL_GPIO_Init+0x4a8>)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008460:	4b1d      	ldr	r3, [pc, #116]	; (80084d8 <HAL_GPIO_Init+0x4a8>)
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	43db      	mvns	r3, r3
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	4013      	ands	r3, r2
 800846e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008484:	4a14      	ldr	r2, [pc, #80]	; (80084d8 <HAL_GPIO_Init+0x4a8>)
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800848a:	4b13      	ldr	r3, [pc, #76]	; (80084d8 <HAL_GPIO_Init+0x4a8>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	43db      	mvns	r3, r3
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4013      	ands	r3, r2
 8008498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80084ae:	4a0a      	ldr	r2, [pc, #40]	; (80084d8 <HAL_GPIO_Init+0x4a8>)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	3301      	adds	r3, #1
 80084b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	fa22 f303 	lsr.w	r3, r2, r3
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f47f ae3f 	bne.w	8008148 <HAL_GPIO_Init+0x118>
  }
}
 80084ca:	bf00      	nop
 80084cc:	bf00      	nop
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	40010000 	.word	0x40010000
 80084d8:	40010400 	.word	0x40010400

080084dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e109      	b.n	8008702 <HAL_I2C_Init+0x226>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a86      	ldr	r2, [pc, #536]	; (800870c <HAL_I2C_Init+0x230>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <HAL_I2C_Init+0x44>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a84      	ldr	r2, [pc, #528]	; (8008710 <HAL_I2C_Init+0x234>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d00e      	beq.n	8008520 <HAL_I2C_Init+0x44>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a83      	ldr	r2, [pc, #524]	; (8008714 <HAL_I2C_Init+0x238>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d009      	beq.n	8008520 <HAL_I2C_Init+0x44>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a81      	ldr	r2, [pc, #516]	; (8008718 <HAL_I2C_Init+0x23c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d004      	beq.n	8008520 <HAL_I2C_Init+0x44>
 8008516:	f240 2115 	movw	r1, #533	; 0x215
 800851a:	4880      	ldr	r0, [pc, #512]	; (800871c <HAL_I2C_Init+0x240>)
 800851c:	f7fa f888 	bl	8002630 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008528:	d304      	bcc.n	8008534 <HAL_I2C_Init+0x58>
 800852a:	f240 2116 	movw	r1, #534	; 0x216
 800852e:	487b      	ldr	r0, [pc, #492]	; (800871c <HAL_I2C_Init+0x240>)
 8008530:	f7fa f87e 	bl	8002630 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b01      	cmp	r3, #1
 800853a:	d008      	beq.n	800854e <HAL_I2C_Init+0x72>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d004      	beq.n	800854e <HAL_I2C_Init+0x72>
 8008544:	f240 2117 	movw	r1, #535	; 0x217
 8008548:	4874      	ldr	r0, [pc, #464]	; (800871c <HAL_I2C_Init+0x240>)
 800854a:	f7fa f871 	bl	8002630 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d009      	beq.n	800856a <HAL_I2C_Init+0x8e>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855e:	d004      	beq.n	800856a <HAL_I2C_Init+0x8e>
 8008560:	f44f 7106 	mov.w	r1, #536	; 0x218
 8008564:	486d      	ldr	r0, [pc, #436]	; (800871c <HAL_I2C_Init+0x240>)
 8008566:	f7fa f863 	bl	8002630 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	2bff      	cmp	r3, #255	; 0xff
 8008570:	d904      	bls.n	800857c <HAL_I2C_Init+0xa0>
 8008572:	f240 2119 	movw	r1, #537	; 0x219
 8008576:	4869      	ldr	r0, [pc, #420]	; (800871c <HAL_I2C_Init+0x240>)
 8008578:	f7fa f85a 	bl	8002630 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d020      	beq.n	80085c6 <HAL_I2C_Init+0xea>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d01c      	beq.n	80085c6 <HAL_I2C_Init+0xea>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	2b02      	cmp	r3, #2
 8008592:	d018      	beq.n	80085c6 <HAL_I2C_Init+0xea>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	2b03      	cmp	r3, #3
 800859a:	d014      	beq.n	80085c6 <HAL_I2C_Init+0xea>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d010      	beq.n	80085c6 <HAL_I2C_Init+0xea>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	2b05      	cmp	r3, #5
 80085aa:	d00c      	beq.n	80085c6 <HAL_I2C_Init+0xea>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	2b06      	cmp	r3, #6
 80085b2:	d008      	beq.n	80085c6 <HAL_I2C_Init+0xea>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	2b07      	cmp	r3, #7
 80085ba:	d004      	beq.n	80085c6 <HAL_I2C_Init+0xea>
 80085bc:	f240 211a 	movw	r1, #538	; 0x21a
 80085c0:	4856      	ldr	r0, [pc, #344]	; (800871c <HAL_I2C_Init+0x240>)
 80085c2:	f7fa f835 	bl	8002630 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d009      	beq.n	80085e2 <HAL_I2C_Init+0x106>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085d6:	d004      	beq.n	80085e2 <HAL_I2C_Init+0x106>
 80085d8:	f240 211b 	movw	r1, #539	; 0x21b
 80085dc:	484f      	ldr	r0, [pc, #316]	; (800871c <HAL_I2C_Init+0x240>)
 80085de:	f7fa f827 	bl	8002630 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d009      	beq.n	80085fe <HAL_I2C_Init+0x122>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085f2:	d004      	beq.n	80085fe <HAL_I2C_Init+0x122>
 80085f4:	f44f 7107 	mov.w	r1, #540	; 0x21c
 80085f8:	4848      	ldr	r0, [pc, #288]	; (800871c <HAL_I2C_Init+0x240>)
 80085fa:	f7fa f819 	bl	8002630 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d106      	bne.n	8008618 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7f9 fe88 	bl	8002328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2224      	movs	r2, #36	; 0x24
 800861c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 0201 	bic.w	r2, r2, #1
 800862e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800863c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800864c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d107      	bne.n	8008666 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008662:	609a      	str	r2, [r3, #8]
 8008664:	e006      	b.n	8008674 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008672:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d104      	bne.n	8008686 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	6812      	ldr	r2, [r2, #0]
 8008690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68da      	ldr	r2, [r3, #12]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691a      	ldr	r2, [r3, #16]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	69d9      	ldr	r1, [r3, #28]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a1a      	ldr	r2, [r3, #32]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	430a      	orrs	r2, r1
 80086d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0201 	orr.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	40005400 	.word	0x40005400
 8008710:	40005800 	.word	0x40005800
 8008714:	40007800 	.word	0x40007800
 8008718:	40008400 	.word	0x40008400
 800871c:	0801cdf0 	.word	0x0801cdf0

08008720 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a32      	ldr	r2, [pc, #200]	; (80087f8 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d012      	beq.n	800875a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a30      	ldr	r2, [pc, #192]	; (80087fc <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00d      	beq.n	800875a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a2f      	ldr	r2, [pc, #188]	; (8008800 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d008      	beq.n	800875a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a2d      	ldr	r2, [pc, #180]	; (8008804 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d003      	beq.n	800875a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8008752:	2163      	movs	r1, #99	; 0x63
 8008754:	482c      	ldr	r0, [pc, #176]	; (8008808 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8008756:	f7f9 ff6b 	bl	8002630 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008766:	d003      	beq.n	8008770 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8008768:	2164      	movs	r1, #100	; 0x64
 800876a:	4827      	ldr	r0, [pc, #156]	; (8008808 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800876c:	f7f9 ff60 	bl	8002630 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b20      	cmp	r3, #32
 800877a:	d138      	bne.n	80087ee <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008782:	2b01      	cmp	r3, #1
 8008784:	d101      	bne.n	800878a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8008786:	2302      	movs	r3, #2
 8008788:	e032      	b.n	80087f0 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2224      	movs	r2, #36	; 0x24
 8008796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0201 	bic.w	r2, r2, #1
 80087a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6819      	ldr	r1, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f042 0201 	orr.w	r2, r2, #1
 80087d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2220      	movs	r2, #32
 80087de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	e000      	b.n	80087f0 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80087ee:	2302      	movs	r3, #2
  }
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	40005400 	.word	0x40005400
 80087fc:	40005800 	.word	0x40005800
 8008800:	40007800 	.word	0x40007800
 8008804:	40008400 	.word	0x40008400
 8008808:	0801ce28 	.word	0x0801ce28

0800880c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a31      	ldr	r2, [pc, #196]	; (80088e0 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d012      	beq.n	8008846 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a2f      	ldr	r2, [pc, #188]	; (80088e4 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d00d      	beq.n	8008846 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a2e      	ldr	r2, [pc, #184]	; (80088e8 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d008      	beq.n	8008846 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a2c      	ldr	r2, [pc, #176]	; (80088ec <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d003      	beq.n	8008846 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800883e:	2191      	movs	r1, #145	; 0x91
 8008840:	482b      	ldr	r0, [pc, #172]	; (80088f0 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8008842:	f7f9 fef5 	bl	8002630 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b0f      	cmp	r3, #15
 800884a:	d903      	bls.n	8008854 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 800884c:	2192      	movs	r1, #146	; 0x92
 800884e:	4828      	ldr	r0, [pc, #160]	; (80088f0 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8008850:	f7f9 feee 	bl	8002630 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b20      	cmp	r3, #32
 800885e:	d139      	bne.n	80088d4 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008866:	2b01      	cmp	r3, #1
 8008868:	d101      	bne.n	800886e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800886a:	2302      	movs	r3, #2
 800886c:	e033      	b.n	80088d6 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2224      	movs	r2, #36	; 0x24
 800887a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0201 	bic.w	r2, r2, #1
 800888c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800889c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f042 0201 	orr.w	r2, r2, #1
 80088be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	e000      	b.n	80088d6 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80088d4:	2302      	movs	r3, #2
  }
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	40005400 	.word	0x40005400
 80088e4:	40005800 	.word	0x40005800
 80088e8:	40007800 	.word	0x40007800
 80088ec:	40008400 	.word	0x40008400
 80088f0:	0801ce28 	.word	0x0801ce28

080088f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80088f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088f6:	b08b      	sub	sp, #44	; 0x2c
 80088f8:	af06      	add	r7, sp, #24
 80088fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e0e0      	b.n	8008ac8 <HAL_PCD_Init+0x1d4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a71      	ldr	r2, [pc, #452]	; (8008ad0 <HAL_PCD_Init+0x1dc>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d003      	beq.n	8008918 <HAL_PCD_Init+0x24>
 8008910:	2187      	movs	r1, #135	; 0x87
 8008912:	4870      	ldr	r0, [pc, #448]	; (8008ad4 <HAL_PCD_Init+0x1e0>)
 8008914:	f7f9 fe8c 	bl	8002630 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d106      	bne.n	8008932 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f010 fc1f 	bl	8019170 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2203      	movs	r2, #3
 8008936:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f009 fc49 	bl	80121d6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]
 8008948:	e04c      	b.n	80089e4 <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	6879      	ldr	r1, [r7, #4]
 800894e:	1c5a      	adds	r2, r3, #1
 8008950:	4613      	mov	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	440b      	add	r3, r1
 800895a:	3301      	adds	r3, #1
 800895c:	2201      	movs	r2, #1
 800895e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	6879      	ldr	r1, [r7, #4]
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	440b      	add	r3, r1
 8008970:	7bfa      	ldrb	r2, [r7, #15]
 8008972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008974:	7bfa      	ldrb	r2, [r7, #15]
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	b298      	uxth	r0, r3
 800897a:	6879      	ldr	r1, [r7, #4]
 800897c:	4613      	mov	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	00db      	lsls	r3, r3, #3
 8008984:	440b      	add	r3, r1
 8008986:	3336      	adds	r3, #54	; 0x36
 8008988:	4602      	mov	r2, r0
 800898a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	1c5a      	adds	r2, r3, #1
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	440b      	add	r3, r1
 800899c:	3303      	adds	r3, #3
 800899e:	2200      	movs	r2, #0
 80089a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80089a2:	7bfa      	ldrb	r2, [r7, #15]
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	440b      	add	r3, r1
 80089b0:	3338      	adds	r3, #56	; 0x38
 80089b2:	2200      	movs	r2, #0
 80089b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80089b6:	7bfa      	ldrb	r2, [r7, #15]
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	440b      	add	r3, r1
 80089c4:	333c      	adds	r3, #60	; 0x3c
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80089ca:	7bfa      	ldrb	r2, [r7, #15]
 80089cc:	6879      	ldr	r1, [r7, #4]
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	440b      	add	r3, r1
 80089d8:	3340      	adds	r3, #64	; 0x40
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	3301      	adds	r3, #1
 80089e2:	73fb      	strb	r3, [r7, #15]
 80089e4:	7bfa      	ldrb	r2, [r7, #15]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d3ad      	bcc.n	800894a <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
 80089f2:	e044      	b.n	8008a7e <HAL_PCD_Init+0x18a>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80089f4:	7bfa      	ldrb	r2, [r7, #15]
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	440b      	add	r3, r1
 8008a02:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008a06:	2200      	movs	r2, #0
 8008a08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008a0a:	7bfa      	ldrb	r2, [r7, #15]
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	00db      	lsls	r3, r3, #3
 8008a16:	440b      	add	r3, r1
 8008a18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008a1c:	7bfa      	ldrb	r2, [r7, #15]
 8008a1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008a20:	7bfa      	ldrb	r2, [r7, #15]
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4613      	mov	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	440b      	add	r3, r1
 8008a2e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008a32:	2200      	movs	r2, #0
 8008a34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008a36:	7bfa      	ldrb	r2, [r7, #15]
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	00db      	lsls	r3, r3, #3
 8008a42:	440b      	add	r3, r1
 8008a44:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8008a48:	2200      	movs	r2, #0
 8008a4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008a4c:	7bfa      	ldrb	r2, [r7, #15]
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	4613      	mov	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4413      	add	r3, r2
 8008a56:	00db      	lsls	r3, r3, #3
 8008a58:	440b      	add	r3, r1
 8008a5a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008a62:	7bfa      	ldrb	r2, [r7, #15]
 8008a64:	6879      	ldr	r1, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	00db      	lsls	r3, r3, #3
 8008a6e:	440b      	add	r3, r1
 8008a70:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008a74:	2200      	movs	r2, #0
 8008a76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	73fb      	strb	r3, [r7, #15]
 8008a7e:	7bfa      	ldrb	r2, [r7, #15]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d3b5      	bcc.n	80089f4 <HAL_PCD_Init+0x100>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	603b      	str	r3, [r7, #0]
 8008a8e:	687e      	ldr	r6, [r7, #4]
 8008a90:	466d      	mov	r5, sp
 8008a92:	f106 0410 	add.w	r4, r6, #16
 8008a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	602b      	str	r3, [r5, #0]
 8008a9e:	1d33      	adds	r3, r6, #4
 8008aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008aa2:	6838      	ldr	r0, [r7, #0]
 8008aa4:	f009 fbb2 	bl	801220c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d102      	bne.n	8008ac6 <HAL_PCD_Init+0x1d2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f001 fc2d 	bl	800a320 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ad0:	40005c00 	.word	0x40005c00
 8008ad4:	0801ce64 	.word	0x0801ce64

08008ad8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d101      	bne.n	8008aee <HAL_PCD_Start+0x16>
 8008aea:	2302      	movs	r3, #2
 8008aec:	e012      	b.n	8008b14 <HAL_PCD_Start+0x3c>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f009 fb54 	bl	80121a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f00b fd6d 	bl	80145e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f00b fd72 	bl	8014612 <USB_ReadInterrupts>
 8008b2e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fb26 	bl	800918c <PCD_EP_ISR_Handler>

    return;
 8008b40:	e110      	b.n	8008d64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d013      	beq.n	8008b74 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b5e:	b292      	uxth	r2, r2
 8008b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f010 fb94 	bl	8019292 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008b6a:	2100      	movs	r1, #0
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f8fc 	bl	8008d6a <HAL_PCD_SetAddress>

    return;
 8008b72:	e0f7      	b.n	8008d64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b86:	b29a      	uxth	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b90:	b292      	uxth	r2, r2
 8008b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008b96:	e0e5      	b.n	8008d64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00c      	beq.n	8008bbc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bb4:	b292      	uxth	r2, r2
 8008bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008bba:	e0d3      	b.n	8008d64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d034      	beq.n	8008c30 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 0204 	bic.w	r2, r2, #4
 8008bd8:	b292      	uxth	r2, r2
 8008bda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f022 0208 	bic.w	r2, r2, #8
 8008bf0:	b292      	uxth	r2, r2
 8008bf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d107      	bne.n	8008c10 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008c08:	2100      	movs	r1, #0
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f010 fd36 	bl	801967c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f010 fb77 	bl	8019304 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c28:	b292      	uxth	r2, r2
 8008c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008c2e:	e099      	b.n	8008d64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d027      	beq.n	8008c8a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f042 0208 	orr.w	r2, r2, #8
 8008c4c:	b292      	uxth	r2, r2
 8008c4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c64:	b292      	uxth	r2, r2
 8008c66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f042 0204 	orr.w	r2, r2, #4
 8008c7c:	b292      	uxth	r2, r2
 8008c7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f010 fb24 	bl	80192d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008c88:	e06c      	b.n	8008d64 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d040      	beq.n	8008d16 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ca6:	b292      	uxth	r2, r2
 8008ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d12b      	bne.n	8008d0e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f042 0204 	orr.w	r2, r2, #4
 8008cc8:	b292      	uxth	r2, r2
 8008cca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f042 0208 	orr.w	r2, r2, #8
 8008ce0:	b292      	uxth	r2, r2
 8008ce2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	089b      	lsrs	r3, r3, #2
 8008cfa:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008d04:	2101      	movs	r1, #1
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f010 fcb8 	bl	801967c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008d0c:	e02a      	b.n	8008d64 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f010 fade 	bl	80192d0 <HAL_PCD_SuspendCallback>
    return;
 8008d14:	e026      	b.n	8008d64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00f      	beq.n	8008d40 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008d32:	b292      	uxth	r2, r2
 8008d34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f010 fa9c 	bl	8019276 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008d3e:	e011      	b.n	8008d64 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00c      	beq.n	8008d64 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d5c:	b292      	uxth	r2, r2
 8008d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008d62:	bf00      	nop
  }
}
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
 8008d72:	460b      	mov	r3, r1
 8008d74:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_PCD_SetAddress+0x1a>
 8008d80:	2302      	movs	r3, #2
 8008d82:	e013      	b.n	8008dac <HAL_PCD_SetAddress+0x42>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	78fa      	ldrb	r2, [r7, #3]
 8008d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	78fa      	ldrb	r2, [r7, #3]
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f00b fc0d 	bl	80145bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	70fb      	strb	r3, [r7, #3]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	803b      	strh	r3, [r7, #0]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	da0e      	bge.n	8008df8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	f003 0307 	and.w	r3, r3, #7
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	705a      	strb	r2, [r3, #1]
 8008df6:	e00e      	b.n	8008e16 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008df8:	78fb      	ldrb	r3, [r7, #3]
 8008dfa:	f003 0207 	and.w	r2, r3, #7
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	00db      	lsls	r3, r3, #3
 8008e06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008e16:	78fb      	ldrb	r3, [r7, #3]
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008e22:	883a      	ldrh	r2, [r7, #0]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	78ba      	ldrb	r2, [r7, #2]
 8008e2c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	785b      	ldrb	r3, [r3, #1]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d004      	beq.n	8008e40 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008e40:	78bb      	ldrb	r3, [r7, #2]
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d102      	bne.n	8008e4c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d101      	bne.n	8008e5a <HAL_PCD_EP_Open+0xa6>
 8008e56:	2302      	movs	r3, #2
 8008e58:	e00e      	b.n	8008e78 <HAL_PCD_EP_Open+0xc4>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f009 f9f1 	bl	8012250 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8008e76:	7afb      	ldrb	r3, [r7, #11]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	da0e      	bge.n	8008eb2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2201      	movs	r2, #1
 8008eae:	705a      	strb	r2, [r3, #1]
 8008eb0:	e00e      	b.n	8008ed0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008eb2:	78fb      	ldrb	r3, [r7, #3]
 8008eb4:	f003 0207 	and.w	r2, r3, #7
 8008eb8:	4613      	mov	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	4413      	add	r3, r2
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d101      	bne.n	8008eea <HAL_PCD_EP_Close+0x6a>
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	e00e      	b.n	8008f08 <HAL_PCD_EP_Close+0x88>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68f9      	ldr	r1, [r7, #12]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f009 fd3d 	bl	8012978 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f20:	7afb      	ldrb	r3, [r7, #11]
 8008f22:	f003 0207 	and.w	r2, r3, #7
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	00db      	lsls	r3, r3, #3
 8008f2e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4413      	add	r3, r2
 8008f36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2200      	movs	r2, #0
 8008f48:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	f003 0307 	and.w	r3, r3, #7
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6979      	ldr	r1, [r7, #20]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f009 fef0 	bl	8012d52 <USB_EPStartXfer>
 8008f72:	e005      	b.n	8008f80 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6979      	ldr	r1, [r7, #20]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f009 fee9 	bl	8012d52 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3718      	adds	r7, #24
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	f003 0207 	and.w	r2, r3, #7
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	440b      	add	r3, r1
 8008fa8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8008fac:	681b      	ldr	r3, [r3, #0]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	603b      	str	r3, [r7, #0]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fca:	7afb      	ldrb	r3, [r7, #11]
 8008fcc:	f003 0307 	and.w	r3, r3, #7
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	00db      	lsls	r3, r3, #3
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	4413      	add	r3, r2
 8008fde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	2201      	movs	r2, #1
 8009004:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009006:	7afb      	ldrb	r3, [r7, #11]
 8009008:	f003 0307 	and.w	r3, r3, #7
 800900c:	b2da      	uxtb	r2, r3
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009012:	7afb      	ldrb	r3, [r7, #11]
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	2b00      	cmp	r3, #0
 800901a:	d106      	bne.n	800902a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6979      	ldr	r1, [r7, #20]
 8009022:	4618      	mov	r0, r3
 8009024:	f009 fe95 	bl	8012d52 <USB_EPStartXfer>
 8009028:	e005      	b.n	8009036 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6979      	ldr	r1, [r7, #20]
 8009030:	4618      	mov	r0, r3
 8009032:	f009 fe8e 	bl	8012d52 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3718      	adds	r7, #24
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800904c:	78fb      	ldrb	r3, [r7, #3]
 800904e:	f003 0207 	and.w	r2, r3, #7
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	429a      	cmp	r2, r3
 8009058:	d901      	bls.n	800905e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e03e      	b.n	80090dc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800905e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009062:	2b00      	cmp	r3, #0
 8009064:	da0e      	bge.n	8009084 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009066:	78fb      	ldrb	r3, [r7, #3]
 8009068:	f003 0307 	and.w	r3, r3, #7
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	4613      	mov	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4413      	add	r3, r2
 8009074:	00db      	lsls	r3, r3, #3
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	705a      	strb	r2, [r3, #1]
 8009082:	e00c      	b.n	800909e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009084:	78fa      	ldrb	r2, [r7, #3]
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	4413      	add	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2201      	movs	r2, #1
 80090a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_PCD_EP_SetStall+0x7e>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e00e      	b.n	80090dc <HAL_PCD_EP_SetStall+0x9c>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f00b f976 	bl	80143be <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	460b      	mov	r3, r1
 80090ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	f003 020f 	and.w	r2, r3, #15
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d901      	bls.n	8009102 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e040      	b.n	8009184 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009106:	2b00      	cmp	r3, #0
 8009108:	da0e      	bge.n	8009128 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	f003 0307 	and.w	r3, r3, #7
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	4613      	mov	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	00db      	lsls	r3, r3, #3
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	4413      	add	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2201      	movs	r2, #1
 8009124:	705a      	strb	r2, [r3, #1]
 8009126:	e00e      	b.n	8009146 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	f003 0207 	and.w	r2, r3, #7
 800912e:	4613      	mov	r3, r2
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	4413      	add	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800914c:	78fb      	ldrb	r3, [r7, #3]
 800914e:	f003 0307 	and.w	r3, r3, #7
 8009152:	b2da      	uxtb	r2, r3
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_PCD_EP_ClrStall+0x82>
 8009162:	2302      	movs	r3, #2
 8009164:	e00e      	b.n	8009184 <HAL_PCD_EP_ClrStall+0xa0>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68f9      	ldr	r1, [r7, #12]
 8009174:	4618      	mov	r0, r3
 8009176:	f00b f973 	bl	8014460 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b096      	sub	sp, #88	; 0x58
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009194:	e39c      	b.n	80098d0 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800919e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80091a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 030f 	and.w	r3, r3, #15
 80091ac:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80091b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f040 815e 	bne.w	8009476 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80091ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80091be:	f003 0310 	and.w	r3, r3, #16
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d150      	bne.n	8009268 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80091d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d6:	81fb      	strh	r3, [r7, #14]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	89fb      	ldrh	r3, [r7, #14]
 80091de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	3328      	adds	r3, #40	; 0x28
 80091ee:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	461a      	mov	r2, r3
 80091fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	00db      	lsls	r3, r3, #3
 8009202:	4413      	add	r3, r2
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	6812      	ldr	r2, [r2, #0]
 8009208:	4413      	add	r3, r2
 800920a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009216:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800921a:	695a      	ldr	r2, [r3, #20]
 800921c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	441a      	add	r2, r3
 8009222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009224:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009226:	2100      	movs	r1, #0
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f010 f80a 	bl	8019242 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 834a 	beq.w	80098d0 <PCD_EP_ISR_Handler+0x744>
 800923c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	2b00      	cmp	r3, #0
 8009242:	f040 8345 	bne.w	80098d0 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009252:	b2da      	uxtb	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	b292      	uxth	r2, r2
 800925a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009266:	e333      	b.n	80098d0 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800926e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	881b      	ldrh	r3, [r3, #0]
 8009276:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800927a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800927e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009282:	2b00      	cmp	r3, #0
 8009284:	d032      	beq.n	80092ec <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800928e:	b29b      	uxth	r3, r3
 8009290:	461a      	mov	r2, r3
 8009292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	4413      	add	r3, r2
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	6812      	ldr	r2, [r2, #0]
 800929e:	4413      	add	r3, r2
 80092a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80092aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80092b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80092bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	f00b f9f8 	bl	80146b6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80092d2:	4013      	ands	r3, r2
 80092d4:	823b      	strh	r3, [r7, #16]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	8a3a      	ldrh	r2, [r7, #16]
 80092dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092e0:	b292      	uxth	r2, r2
 80092e2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f00f ff7f 	bl	80191e8 <HAL_PCD_SetupStageCallback>
 80092ea:	e2f1      	b.n	80098d0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80092ec:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f280 82ed 	bge.w	80098d0 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	881b      	ldrh	r3, [r3, #0]
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009302:	4013      	ands	r3, r2
 8009304:	83fb      	strh	r3, [r7, #30]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	8bfa      	ldrh	r2, [r7, #30]
 800930c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009310:	b292      	uxth	r2, r2
 8009312:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800931c:	b29b      	uxth	r3, r3
 800931e:	461a      	mov	r2, r3
 8009320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	00db      	lsls	r3, r3, #3
 8009326:	4413      	add	r3, r2
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6812      	ldr	r2, [r2, #0]
 800932c:	4413      	add	r3, r2
 800932e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800933c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d019      	beq.n	8009378 <PCD_EP_ISR_Handler+0x1ec>
 8009344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d015      	beq.n	8009378 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009352:	6959      	ldr	r1, [r3, #20]
 8009354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009356:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800935a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800935c:	b29b      	uxth	r3, r3
 800935e:	f00b f9aa 	bl	80146b6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009364:	695a      	ldr	r2, [r3, #20]
 8009366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	441a      	add	r2, r3
 800936c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800936e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009370:	2100      	movs	r1, #0
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f00f ff4a 	bl	801920c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	881b      	ldrh	r3, [r3, #0]
 800937e:	b29b      	uxth	r3, r3
 8009380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009384:	2b00      	cmp	r3, #0
 8009386:	f040 82a3 	bne.w	80098d0 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	61bb      	str	r3, [r7, #24]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009398:	b29b      	uxth	r3, r3
 800939a:	461a      	mov	r2, r3
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	4413      	add	r3, r2
 80093a0:	61bb      	str	r3, [r7, #24]
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80093a8:	617b      	str	r3, [r7, #20]
 80093aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	2b3e      	cmp	r3, #62	; 0x3e
 80093b0:	d918      	bls.n	80093e4 <PCD_EP_ISR_Handler+0x258>
 80093b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093b4:	691b      	ldr	r3, [r3, #16]
 80093b6:	095b      	lsrs	r3, r3, #5
 80093b8:	647b      	str	r3, [r7, #68]	; 0x44
 80093ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f003 031f 	and.w	r3, r3, #31
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d102      	bne.n	80093cc <PCD_EP_ISR_Handler+0x240>
 80093c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c8:	3b01      	subs	r3, #1
 80093ca:	647b      	str	r3, [r7, #68]	; 0x44
 80093cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	029b      	lsls	r3, r3, #10
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093dc:	b29a      	uxth	r2, r3
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	801a      	strh	r2, [r3, #0]
 80093e2:	e029      	b.n	8009438 <PCD_EP_ISR_Handler+0x2ac>
 80093e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d112      	bne.n	8009412 <PCD_EP_ISR_Handler+0x286>
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	801a      	strh	r2, [r3, #0]
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	b29b      	uxth	r3, r3
 8009402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800940a:	b29a      	uxth	r2, r3
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	e012      	b.n	8009438 <PCD_EP_ISR_Handler+0x2ac>
 8009412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	647b      	str	r3, [r7, #68]	; 0x44
 800941a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <PCD_EP_ISR_Handler+0x2a0>
 8009426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009428:	3301      	adds	r3, #1
 800942a:	647b      	str	r3, [r7, #68]	; 0x44
 800942c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800942e:	b29b      	uxth	r3, r3
 8009430:	029b      	lsls	r3, r3, #10
 8009432:	b29a      	uxth	r2, r3
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	b29b      	uxth	r3, r3
 8009440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009448:	827b      	strh	r3, [r7, #18]
 800944a:	8a7b      	ldrh	r3, [r7, #18]
 800944c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009450:	827b      	strh	r3, [r7, #18]
 8009452:	8a7b      	ldrh	r3, [r7, #18]
 8009454:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009458:	827b      	strh	r3, [r7, #18]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	8a7b      	ldrh	r3, [r7, #18]
 8009460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009470:	b29b      	uxth	r3, r3
 8009472:	8013      	strh	r3, [r2, #0]
 8009474:	e22c      	b.n	80098d0 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800948a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800948e:	2b00      	cmp	r3, #0
 8009490:	f280 80f6 	bge.w	8009680 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	461a      	mov	r2, r3
 800949a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80094aa:	4013      	ands	r3, r2
 80094ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	461a      	mov	r2, r3
 80094b6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80094c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094c6:	b292      	uxth	r2, r2
 80094c8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80094ca:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80094ce:	4613      	mov	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	00db      	lsls	r3, r3, #3
 80094d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	4413      	add	r3, r2
 80094de:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80094e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094e2:	7b1b      	ldrb	r3, [r3, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d123      	bne.n	8009530 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	461a      	mov	r2, r3
 80094f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	00db      	lsls	r3, r3, #3
 80094fa:	4413      	add	r3, r2
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	6812      	ldr	r2, [r2, #0]
 8009500:	4413      	add	r3, r2
 8009502:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800950c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8009510:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 808e 	beq.w	8009636 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009520:	6959      	ldr	r1, [r3, #20]
 8009522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009524:	88da      	ldrh	r2, [r3, #6]
 8009526:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800952a:	f00b f8c4 	bl	80146b6 <USB_ReadPMA>
 800952e:	e082      	b.n	8009636 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009532:	78db      	ldrb	r3, [r3, #3]
 8009534:	2b02      	cmp	r3, #2
 8009536:	d10a      	bne.n	800954e <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009538:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800953c:	461a      	mov	r2, r3
 800953e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f9d3 	bl	80098ec <HAL_PCD_EP_DB_Receive>
 8009546:	4603      	mov	r3, r0
 8009548:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800954c:	e073      	b.n	8009636 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	881b      	ldrh	r3, [r3, #0]
 800955e:	b29b      	uxth	r3, r3
 8009560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009568:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	441a      	add	r2, r3
 800957a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800957e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800958a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800958e:	b29b      	uxth	r3, r3
 8009590:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d022      	beq.n	80095f2 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	461a      	mov	r2, r3
 80095b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	4413      	add	r3, r2
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	6812      	ldr	r2, [r2, #0]
 80095c4:	4413      	add	r3, r2
 80095c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80095d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d02c      	beq.n	8009636 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e2:	6959      	ldr	r1, [r3, #20]
 80095e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e6:	891a      	ldrh	r2, [r3, #8]
 80095e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80095ec:	f00b f863 	bl	80146b6 <USB_ReadPMA>
 80095f0:	e021      	b.n	8009636 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	461a      	mov	r2, r3
 80095fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	4413      	add	r3, r2
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	6812      	ldr	r2, [r2, #0]
 800960a:	4413      	add	r3, r2
 800960c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009616:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800961a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800961e:	2b00      	cmp	r3, #0
 8009620:	d009      	beq.n	8009636 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009628:	6959      	ldr	r1, [r3, #20]
 800962a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800962c:	895a      	ldrh	r2, [r3, #10]
 800962e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009632:	f00b f840 	bl	80146b6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009638:	69da      	ldr	r2, [r3, #28]
 800963a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800963e:	441a      	add	r2, r3
 8009640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009642:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009646:	695a      	ldr	r2, [r3, #20]
 8009648:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800964c:	441a      	add	r2, r3
 800964e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009650:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <PCD_EP_ISR_Handler+0x4da>
 800965a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800965e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	429a      	cmp	r2, r3
 8009664:	d206      	bcs.n	8009674 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f00f fdcd 	bl	801920c <HAL_PCD_DataOutStageCallback>
 8009672:	e005      	b.n	8009680 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800967a:	4618      	mov	r0, r3
 800967c:	f009 fb69 	bl	8012d52 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009680:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 8121 	beq.w	80098d0 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800968e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	4613      	mov	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	00db      	lsls	r3, r3, #3
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	4413      	add	r3, r2
 80096a0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80096b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	461a      	mov	r2, r3
 80096c6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	441a      	add	r2, r3
 80096ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80096d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096da:	b29b      	uxth	r3, r3
 80096dc:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80096de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e0:	78db      	ldrb	r3, [r3, #3]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	f000 80a2 	beq.w	800982c <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80096e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ea:	2200      	movs	r2, #0
 80096ec:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80096ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f0:	7b1b      	ldrb	r3, [r3, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 8093 	beq.w	800981e <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80096f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80096fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009700:	2b00      	cmp	r3, #0
 8009702:	d046      	beq.n	8009792 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009706:	785b      	ldrb	r3, [r3, #1]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d126      	bne.n	800975a <PCD_EP_ISR_Handler+0x5ce>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	627b      	str	r3, [r7, #36]	; 0x24
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800971a:	b29b      	uxth	r3, r3
 800971c:	461a      	mov	r2, r3
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009720:	4413      	add	r3, r2
 8009722:	627b      	str	r3, [r7, #36]	; 0x24
 8009724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	00da      	lsls	r2, r3, #3
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	4413      	add	r3, r2
 800972e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009732:	623b      	str	r3, [r7, #32]
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	881b      	ldrh	r3, [r3, #0]
 8009738:	b29b      	uxth	r3, r3
 800973a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800973e:	b29a      	uxth	r2, r3
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	b29b      	uxth	r3, r3
 800974a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800974e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009752:	b29a      	uxth	r2, r3
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	801a      	strh	r2, [r3, #0]
 8009758:	e061      	b.n	800981e <PCD_EP_ISR_Handler+0x692>
 800975a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	2b01      	cmp	r3, #1
 8009760:	d15d      	bne.n	800981e <PCD_EP_ISR_Handler+0x692>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009770:	b29b      	uxth	r3, r3
 8009772:	461a      	mov	r2, r3
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	4413      	add	r3, r2
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800977a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	00da      	lsls	r2, r3, #3
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	4413      	add	r3, r2
 8009784:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
 800978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978c:	2200      	movs	r2, #0
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	e045      	b.n	800981e <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800979a:	785b      	ldrb	r3, [r3, #1]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d126      	bne.n	80097ee <PCD_EP_ISR_Handler+0x662>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	637b      	str	r3, [r7, #52]	; 0x34
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b4:	4413      	add	r3, r2
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34
 80097b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	00da      	lsls	r2, r3, #3
 80097be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c0:	4413      	add	r3, r2
 80097c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097c6:	633b      	str	r3, [r7, #48]	; 0x30
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	881b      	ldrh	r3, [r3, #0]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	801a      	strh	r2, [r3, #0]
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	b29b      	uxth	r3, r3
 80097de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	801a      	strh	r2, [r3, #0]
 80097ec:	e017      	b.n	800981e <PCD_EP_ISR_Handler+0x692>
 80097ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f0:	785b      	ldrb	r3, [r3, #1]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d113      	bne.n	800981e <PCD_EP_ISR_Handler+0x692>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097fe:	b29b      	uxth	r3, r3
 8009800:	461a      	mov	r2, r3
 8009802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009804:	4413      	add	r3, r2
 8009806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	00da      	lsls	r2, r3, #3
 800980e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009810:	4413      	add	r3, r2
 8009812:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009816:	63bb      	str	r3, [r7, #56]	; 0x38
 8009818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981a:	2200      	movs	r2, #0
 800981c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800981e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f00f fd0c 	bl	8019242 <HAL_PCD_DataInStageCallback>
 800982a:	e051      	b.n	80098d0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800982c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009834:	2b00      	cmp	r3, #0
 8009836:	d144      	bne.n	80098c2 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009840:	b29b      	uxth	r3, r3
 8009842:	461a      	mov	r2, r3
 8009844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	4413      	add	r3, r2
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	6812      	ldr	r2, [r2, #0]
 8009850:	4413      	add	r3, r2
 8009852:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800985c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009868:	429a      	cmp	r2, r3
 800986a:	d907      	bls.n	800987c <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800986c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800986e:	699a      	ldr	r2, [r3, #24]
 8009870:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009874:	1ad2      	subs	r2, r2, r3
 8009876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009878:	619a      	str	r2, [r3, #24]
 800987a:	e002      	b.n	8009882 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800987c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800987e:	2200      	movs	r2, #0
 8009880:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800988a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f00f fcd6 	bl	8019242 <HAL_PCD_DataInStageCallback>
 8009896:	e01b      	b.n	80098d0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800989a:	695a      	ldr	r2, [r3, #20]
 800989c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80098a0:	441a      	add	r2, r3
 80098a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80098a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a8:	69da      	ldr	r2, [r3, #28]
 80098aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80098ae:	441a      	add	r2, r3
 80098b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80098ba:	4618      	mov	r0, r3
 80098bc:	f009 fa49 	bl	8012d52 <USB_EPStartXfer>
 80098c0:	e006      	b.n	80098d0 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80098c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80098c6:	461a      	mov	r2, r3
 80098c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f917 	bl	8009afe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098d8:	b29b      	uxth	r3, r3
 80098da:	b21b      	sxth	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f6ff ac5a 	blt.w	8009196 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3758      	adds	r7, #88	; 0x58
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4613      	mov	r3, r2
 80098f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80098fa:	88fb      	ldrh	r3, [r7, #6]
 80098fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d07c      	beq.n	80099fe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800990c:	b29b      	uxth	r3, r3
 800990e:	461a      	mov	r2, r3
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	4413      	add	r3, r2
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	6812      	ldr	r2, [r2, #0]
 800991c:	4413      	add	r3, r2
 800991e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009922:	881b      	ldrh	r3, [r3, #0]
 8009924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009928:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	699a      	ldr	r2, [r3, #24]
 800992e:	8b7b      	ldrh	r3, [r7, #26]
 8009930:	429a      	cmp	r2, r3
 8009932:	d306      	bcc.n	8009942 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	699a      	ldr	r2, [r3, #24]
 8009938:	8b7b      	ldrh	r3, [r7, #26]
 800993a:	1ad2      	subs	r2, r2, r3
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	619a      	str	r2, [r3, #24]
 8009940:	e002      	b.n	8009948 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2200      	movs	r2, #0
 8009946:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d123      	bne.n	8009998 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	461a      	mov	r2, r3
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	881b      	ldrh	r3, [r3, #0]
 8009960:	b29b      	uxth	r3, r3
 8009962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996a:	833b      	strh	r3, [r7, #24]
 800996c:	8b3b      	ldrh	r3, [r7, #24]
 800996e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009972:	833b      	strh	r3, [r7, #24]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	461a      	mov	r2, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	441a      	add	r2, r3
 8009982:	8b3b      	ldrh	r3, [r7, #24]
 8009984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800998c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009994:	b29b      	uxth	r3, r3
 8009996:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009998:	88fb      	ldrh	r3, [r7, #6]
 800999a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d01f      	beq.n	80099e2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099bc:	82fb      	strh	r3, [r7, #22]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	441a      	add	r2, r3
 80099cc:	8afb      	ldrh	r3, [r7, #22]
 80099ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099de:	b29b      	uxth	r3, r3
 80099e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80099e2:	8b7b      	ldrh	r3, [r7, #26]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 8085 	beq.w	8009af4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	6959      	ldr	r1, [r3, #20]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	891a      	ldrh	r2, [r3, #8]
 80099f6:	8b7b      	ldrh	r3, [r7, #26]
 80099f8:	f00a fe5d 	bl	80146b6 <USB_ReadPMA>
 80099fc:	e07a      	b.n	8009af4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	461a      	mov	r2, r3
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	00db      	lsls	r3, r3, #3
 8009a10:	4413      	add	r3, r2
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	6812      	ldr	r2, [r2, #0]
 8009a16:	4413      	add	r3, r2
 8009a18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a1c:	881b      	ldrh	r3, [r3, #0]
 8009a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	699a      	ldr	r2, [r3, #24]
 8009a28:	8b7b      	ldrh	r3, [r7, #26]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d306      	bcc.n	8009a3c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	699a      	ldr	r2, [r3, #24]
 8009a32:	8b7b      	ldrh	r3, [r7, #26]
 8009a34:	1ad2      	subs	r2, r2, r3
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	619a      	str	r2, [r3, #24]
 8009a3a:	e002      	b.n	8009a42 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d123      	bne.n	8009a92 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a64:	83fb      	strh	r3, [r7, #30]
 8009a66:	8bfb      	ldrh	r3, [r7, #30]
 8009a68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a6c:	83fb      	strh	r3, [r7, #30]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	441a      	add	r2, r3
 8009a7c:	8bfb      	ldrh	r3, [r7, #30]
 8009a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009a92:	88fb      	ldrh	r3, [r7, #6]
 8009a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d11f      	bne.n	8009adc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	881b      	ldrh	r3, [r3, #0]
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab6:	83bb      	strh	r3, [r7, #28]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	441a      	add	r2, r3
 8009ac6:	8bbb      	ldrh	r3, [r7, #28]
 8009ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009adc:	8b7b      	ldrh	r3, [r7, #26]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d008      	beq.n	8009af4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6818      	ldr	r0, [r3, #0]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	6959      	ldr	r1, [r3, #20]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	895a      	ldrh	r2, [r3, #10]
 8009aee:	8b7b      	ldrh	r3, [r7, #26]
 8009af0:	f00a fde1 	bl	80146b6 <USB_ReadPMA>
    }
  }

  return count;
 8009af4:	8b7b      	ldrh	r3, [r7, #26]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3720      	adds	r7, #32
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b0a2      	sub	sp, #136	; 0x88
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009b0c:	88fb      	ldrh	r3, [r7, #6]
 8009b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 81c5 	beq.w	8009ea2 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	00db      	lsls	r3, r3, #3
 8009b2a:	4413      	add	r3, r2
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	6812      	ldr	r2, [r2, #0]
 8009b30:	4413      	add	r3, r2
 8009b32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d907      	bls.n	8009b5c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	699a      	ldr	r2, [r3, #24]
 8009b50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b54:	1ad2      	subs	r2, r2, r3
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	619a      	str	r2, [r3, #24]
 8009b5a:	e002      	b.n	8009b62 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f040 80b9 	bne.w	8009cde <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	785b      	ldrb	r3, [r3, #1]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d126      	bne.n	8009bc2 <HAL_PCD_EP_DB_Transmit+0xc4>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	461a      	mov	r2, r3
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	4413      	add	r3, r2
 8009b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	00da      	lsls	r2, r3, #3
 8009b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b94:	4413      	add	r3, r2
 8009b96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	801a      	strh	r2, [r3, #0]
 8009bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bae:	881b      	ldrh	r3, [r3, #0]
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	e01a      	b.n	8009bf8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	785b      	ldrb	r3, [r3, #1]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d116      	bne.n	8009bf8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	633b      	str	r3, [r7, #48]	; 0x30
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bde:	4413      	add	r3, r2
 8009be0:	633b      	str	r3, [r7, #48]	; 0x30
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	00da      	lsls	r2, r3, #3
 8009be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bea:	4413      	add	r3, r2
 8009bec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	623b      	str	r3, [r7, #32]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	785b      	ldrb	r3, [r3, #1]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d126      	bne.n	8009c54 <HAL_PCD_EP_DB_Transmit+0x156>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	61bb      	str	r3, [r7, #24]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	461a      	mov	r2, r3
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	61bb      	str	r3, [r7, #24]
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	00da      	lsls	r2, r3, #3
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	4413      	add	r3, r2
 8009c28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c2c:	617b      	str	r3, [r7, #20]
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	801a      	strh	r2, [r3, #0]
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	801a      	strh	r2, [r3, #0]
 8009c52:	e017      	b.n	8009c84 <HAL_PCD_EP_DB_Transmit+0x186>
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	785b      	ldrb	r3, [r3, #1]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d113      	bne.n	8009c84 <HAL_PCD_EP_DB_Transmit+0x186>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	461a      	mov	r2, r3
 8009c68:	6a3b      	ldr	r3, [r7, #32]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	623b      	str	r3, [r7, #32]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	00da      	lsls	r2, r3, #3
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	4413      	add	r3, r2
 8009c78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c7c:	61fb      	str	r3, [r7, #28]
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	2200      	movs	r2, #0
 8009c82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f00f fad9 	bl	8019242 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009c90:	88fb      	ldrh	r3, [r7, #6]
 8009c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 82d2 	beq.w	800a240 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb6:	827b      	strh	r3, [r7, #18]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	441a      	add	r2, r3
 8009cc6:	8a7b      	ldrh	r3, [r7, #18]
 8009cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	8013      	strh	r3, [r2, #0]
 8009cdc:	e2b0      	b.n	800a240 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009cde:	88fb      	ldrh	r3, [r7, #6]
 8009ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d021      	beq.n	8009d2c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b29b      	uxth	r3, r3
 8009cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d02:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	441a      	add	r2, r3
 8009d14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	f040 8284 	bne.w	800a240 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	695a      	ldr	r2, [r3, #20]
 8009d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d40:	441a      	add	r2, r3
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	69da      	ldr	r2, [r3, #28]
 8009d4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d4e:	441a      	add	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	6a1a      	ldr	r2, [r3, #32]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d309      	bcc.n	8009d74 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	6a1a      	ldr	r2, [r3, #32]
 8009d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d6c:	1ad2      	subs	r2, r2, r3
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	621a      	str	r2, [r3, #32]
 8009d72:	e015      	b.n	8009da0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	6a1b      	ldr	r3, [r3, #32]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d107      	bne.n	8009d8c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8009d7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009d8a:	e009      	b.n	8009da0 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	6a1b      	ldr	r3, [r3, #32]
 8009d98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	785b      	ldrb	r3, [r3, #1]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d155      	bne.n	8009e54 <HAL_PCD_EP_DB_Transmit+0x356>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	461a      	mov	r2, r3
 8009dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dbc:	4413      	add	r3, r2
 8009dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	00da      	lsls	r2, r3, #3
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc8:	4413      	add	r3, r2
 8009dca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009dce:	637b      	str	r3, [r7, #52]	; 0x34
 8009dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dd2:	2b3e      	cmp	r3, #62	; 0x3e
 8009dd4:	d916      	bls.n	8009e04 <HAL_PCD_EP_DB_Transmit+0x306>
 8009dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dd8:	095b      	lsrs	r3, r3, #5
 8009dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dde:	f003 031f 	and.w	r3, r3, #31
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d102      	bne.n	8009dec <HAL_PCD_EP_DB_Transmit+0x2ee>
 8009de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009de8:	3b01      	subs	r3, #1
 8009dea:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	029b      	lsls	r3, r3, #10
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009df8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e00:	801a      	strh	r2, [r3, #0]
 8009e02:	e043      	b.n	8009e8c <HAL_PCD_EP_DB_Transmit+0x38e>
 8009e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d112      	bne.n	8009e30 <HAL_PCD_EP_DB_Transmit+0x332>
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e0c:	881b      	ldrh	r3, [r3, #0]
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e18:	801a      	strh	r2, [r3, #0]
 8009e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e2c:	801a      	strh	r2, [r3, #0]
 8009e2e:	e02d      	b.n	8009e8c <HAL_PCD_EP_DB_Transmit+0x38e>
 8009e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e32:	085b      	lsrs	r3, r3, #1
 8009e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d002      	beq.n	8009e46 <HAL_PCD_EP_DB_Transmit+0x348>
 8009e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e42:	3301      	adds	r3, #1
 8009e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	029b      	lsls	r3, r3, #10
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e50:	801a      	strh	r2, [r3, #0]
 8009e52:	e01b      	b.n	8009e8c <HAL_PCD_EP_DB_Transmit+0x38e>
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d117      	bne.n	8009e8c <HAL_PCD_EP_DB_Transmit+0x38e>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	643b      	str	r3, [r7, #64]	; 0x40
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e70:	4413      	add	r3, r2
 8009e72:	643b      	str	r3, [r7, #64]	; 0x40
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	00da      	lsls	r2, r3, #3
 8009e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e8a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6959      	ldr	r1, [r3, #20]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	891a      	ldrh	r2, [r3, #8]
 8009e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	f00a fbc9 	bl	8014632 <USB_WritePMA>
 8009ea0:	e1ce      	b.n	800a240 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	461a      	mov	r2, r3
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	4413      	add	r3, r2
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	6812      	ldr	r2, [r2, #0]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ec0:	881b      	ldrh	r3, [r3, #0]
 8009ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ec6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	699a      	ldr	r2, [r3, #24]
 8009ece:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d307      	bcc.n	8009ee6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	699a      	ldr	r2, [r3, #24]
 8009eda:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ede:	1ad2      	subs	r2, r2, r3
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	619a      	str	r2, [r3, #24]
 8009ee4:	e002      	b.n	8009eec <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f040 80c4 	bne.w	800a07e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	785b      	ldrb	r3, [r3, #1]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d126      	bne.n	8009f4c <HAL_PCD_EP_DB_Transmit+0x44e>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f12:	4413      	add	r3, r2
 8009f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	00da      	lsls	r2, r3, #3
 8009f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f1e:	4413      	add	r3, r2
 8009f20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f24:	667b      	str	r3, [r7, #100]	; 0x64
 8009f26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f34:	801a      	strh	r2, [r3, #0]
 8009f36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f48:	801a      	strh	r2, [r3, #0]
 8009f4a:	e01a      	b.n	8009f82 <HAL_PCD_EP_DB_Transmit+0x484>
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	785b      	ldrb	r3, [r3, #1]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d116      	bne.n	8009f82 <HAL_PCD_EP_DB_Transmit+0x484>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	673b      	str	r3, [r7, #112]	; 0x70
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	461a      	mov	r2, r3
 8009f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f68:	4413      	add	r3, r2
 8009f6a:	673b      	str	r3, [r7, #112]	; 0x70
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	00da      	lsls	r2, r3, #3
 8009f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f74:	4413      	add	r3, r2
 8009f76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f7e:	2200      	movs	r2, #0
 8009f80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	785b      	ldrb	r3, [r3, #1]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d12f      	bne.n	8009ff0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fa8:	4413      	add	r3, r2
 8009faa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	00da      	lsls	r2, r3, #3
 8009fb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fb8:	4413      	add	r3, r2
 8009fba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009fbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009fd4:	801a      	strh	r2, [r3, #0]
 8009fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009fec:	801a      	strh	r2, [r3, #0]
 8009fee:	e017      	b.n	800a020 <HAL_PCD_EP_DB_Transmit+0x522>
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	785b      	ldrb	r3, [r3, #1]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d113      	bne.n	800a020 <HAL_PCD_EP_DB_Transmit+0x522>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a000:	b29b      	uxth	r3, r3
 800a002:	461a      	mov	r2, r3
 800a004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a006:	4413      	add	r3, r2
 800a008:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	00da      	lsls	r2, r3, #3
 800a010:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a012:	4413      	add	r3, r2
 800a014:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a018:	67bb      	str	r3, [r7, #120]	; 0x78
 800a01a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a01c:	2200      	movs	r2, #0
 800a01e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	4619      	mov	r1, r3
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f00f f90b 	bl	8019242 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a02c:	88fb      	ldrh	r3, [r7, #6]
 800a02e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a032:	2b00      	cmp	r3, #0
 800a034:	f040 8104 	bne.w	800a240 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	461a      	mov	r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a04e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a052:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	441a      	add	r2, r3
 800a064:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a06c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a078:	b29b      	uxth	r3, r3
 800a07a:	8013      	strh	r3, [r2, #0]
 800a07c:	e0e0      	b.n	800a240 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a07e:	88fb      	ldrh	r3, [r7, #6]
 800a080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d121      	bne.n	800a0cc <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	441a      	add	r2, r3
 800a0b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a0b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	f040 80b4 	bne.w	800a240 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	695a      	ldr	r2, [r3, #20]
 800a0dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a0e0:	441a      	add	r2, r3
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	69da      	ldr	r2, [r3, #28]
 800a0ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a0ee:	441a      	add	r2, r3
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	6a1a      	ldr	r2, [r3, #32]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d309      	bcc.n	800a114 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	691b      	ldr	r3, [r3, #16]
 800a104:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	6a1a      	ldr	r2, [r3, #32]
 800a10a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a10c:	1ad2      	subs	r2, r2, r3
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	621a      	str	r2, [r3, #32]
 800a112:	e015      	b.n	800a140 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	6a1b      	ldr	r3, [r3, #32]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d107      	bne.n	800a12c <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800a11c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a120:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a12a:	e009      	b.n	800a140 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	2200      	movs	r2, #0
 800a136:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	663b      	str	r3, [r7, #96]	; 0x60
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	785b      	ldrb	r3, [r3, #1]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d155      	bne.n	800a1fa <HAL_PCD_EP_DB_Transmit+0x6fc>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	65bb      	str	r3, [r7, #88]	; 0x58
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	461a      	mov	r2, r3
 800a160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a162:	4413      	add	r3, r2
 800a164:	65bb      	str	r3, [r7, #88]	; 0x58
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	00da      	lsls	r2, r3, #3
 800a16c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a16e:	4413      	add	r3, r2
 800a170:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a174:	657b      	str	r3, [r7, #84]	; 0x54
 800a176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a178:	2b3e      	cmp	r3, #62	; 0x3e
 800a17a:	d916      	bls.n	800a1aa <HAL_PCD_EP_DB_Transmit+0x6ac>
 800a17c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a17e:	095b      	lsrs	r3, r3, #5
 800a180:	677b      	str	r3, [r7, #116]	; 0x74
 800a182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a184:	f003 031f 	and.w	r3, r3, #31
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d102      	bne.n	800a192 <HAL_PCD_EP_DB_Transmit+0x694>
 800a18c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a18e:	3b01      	subs	r3, #1
 800a190:	677b      	str	r3, [r7, #116]	; 0x74
 800a192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a194:	b29b      	uxth	r3, r3
 800a196:	029b      	lsls	r3, r3, #10
 800a198:	b29b      	uxth	r3, r3
 800a19a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a19e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a6:	801a      	strh	r2, [r3, #0]
 800a1a8:	e040      	b.n	800a22c <HAL_PCD_EP_DB_Transmit+0x72e>
 800a1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d112      	bne.n	800a1d6 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800a1b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1be:	801a      	strh	r2, [r3, #0]
 800a1c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1d2:	801a      	strh	r2, [r3, #0]
 800a1d4:	e02a      	b.n	800a22c <HAL_PCD_EP_DB_Transmit+0x72e>
 800a1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1d8:	085b      	lsrs	r3, r3, #1
 800a1da:	677b      	str	r3, [r7, #116]	; 0x74
 800a1dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d002      	beq.n	800a1ec <HAL_PCD_EP_DB_Transmit+0x6ee>
 800a1e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	677b      	str	r3, [r7, #116]	; 0x74
 800a1ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	029b      	lsls	r3, r3, #10
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1f6:	801a      	strh	r2, [r3, #0]
 800a1f8:	e018      	b.n	800a22c <HAL_PCD_EP_DB_Transmit+0x72e>
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	785b      	ldrb	r3, [r3, #1]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d114      	bne.n	800a22c <HAL_PCD_EP_DB_Transmit+0x72e>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	461a      	mov	r2, r3
 800a20e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a210:	4413      	add	r3, r2
 800a212:	663b      	str	r3, [r7, #96]	; 0x60
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	00da      	lsls	r2, r3, #3
 800a21a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a21c:	4413      	add	r3, r2
 800a21e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a222:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a226:	b29a      	uxth	r2, r3
 800a228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a22a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6818      	ldr	r0, [r3, #0]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	6959      	ldr	r1, [r3, #20]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	895a      	ldrh	r2, [r3, #10]
 800a238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	f00a f9f9 	bl	8014632 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	461a      	mov	r2, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	b29b      	uxth	r3, r3
 800a252:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a25a:	823b      	strh	r3, [r7, #16]
 800a25c:	8a3b      	ldrh	r3, [r7, #16]
 800a25e:	f083 0310 	eor.w	r3, r3, #16
 800a262:	823b      	strh	r3, [r7, #16]
 800a264:	8a3b      	ldrh	r3, [r7, #16]
 800a266:	f083 0320 	eor.w	r3, r3, #32
 800a26a:	823b      	strh	r3, [r7, #16]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	461a      	mov	r2, r3
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	441a      	add	r2, r3
 800a27a:	8a3b      	ldrh	r3, [r7, #16]
 800a27c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3788      	adds	r7, #136	; 0x88
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b087      	sub	sp, #28
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	607b      	str	r3, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	817b      	strh	r3, [r7, #10]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a2ac:	897b      	ldrh	r3, [r7, #10]
 800a2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00b      	beq.n	800a2d0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2b8:	897b      	ldrh	r3, [r7, #10]
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	4413      	add	r3, r2
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	617b      	str	r3, [r7, #20]
 800a2ce:	e009      	b.n	800a2e4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a2d0:	897a      	ldrh	r2, [r7, #10]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	4413      	add	r3, r2
 800a2d8:	00db      	lsls	r3, r3, #3
 800a2da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a2e4:	893b      	ldrh	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d107      	bne.n	800a2fa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	80da      	strh	r2, [r3, #6]
 800a2f8:	e00b      	b.n	800a312 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	b29a      	uxth	r2, r3
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	0c1b      	lsrs	r3, r3, #16
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	371c      	adds	r7, #28
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a344:	b29b      	uxth	r3, r3
 800a346:	f043 0301 	orr.w	r3, r3, #1
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a358:	b29b      	uxth	r3, r3
 800a35a:	f043 0302 	orr.w	r3, r3, #2
 800a35e:	b29a      	uxth	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00b      	beq.n	800a39a <HAL_PWREx_ControlVoltageScaling+0x26>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a388:	d007      	beq.n	800a39a <HAL_PWREx_ControlVoltageScaling+0x26>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a390:	d003      	beq.n	800a39a <HAL_PWREx_ControlVoltageScaling+0x26>
 800a392:	219d      	movs	r1, #157	; 0x9d
 800a394:	484d      	ldr	r0, [pc, #308]	; (800a4cc <HAL_PWREx_ControlVoltageScaling+0x158>)
 800a396:	f7f8 f94b 	bl	8002630 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d141      	bne.n	800a424 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a3a0:	4b4b      	ldr	r3, [pc, #300]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3ac:	d131      	bne.n	800a412 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a3ae:	4b48      	ldr	r3, [pc, #288]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3b4:	4a46      	ldr	r2, [pc, #280]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a3b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a3be:	4b44      	ldr	r3, [pc, #272]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a3c6:	4a42      	ldr	r2, [pc, #264]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a3c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a3ce:	4b41      	ldr	r3, [pc, #260]	; (800a4d4 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2232      	movs	r2, #50	; 0x32
 800a3d4:	fb02 f303 	mul.w	r3, r2, r3
 800a3d8:	4a3f      	ldr	r2, [pc, #252]	; (800a4d8 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800a3da:	fba2 2303 	umull	r2, r3, r2, r3
 800a3de:	0c9b      	lsrs	r3, r3, #18
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3e4:	e002      	b.n	800a3ec <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3ec:	4b38      	ldr	r3, [pc, #224]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a3ee:	695b      	ldr	r3, [r3, #20]
 800a3f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3f8:	d102      	bne.n	800a400 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1f2      	bne.n	800a3e6 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a400:	4b33      	ldr	r3, [pc, #204]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a402:	695b      	ldr	r3, [r3, #20]
 800a404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a40c:	d158      	bne.n	800a4c0 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e057      	b.n	800a4c2 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a412:	4b2f      	ldr	r3, [pc, #188]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a418:	4a2d      	ldr	r2, [pc, #180]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a41a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a41e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a422:	e04d      	b.n	800a4c0 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a42a:	d141      	bne.n	800a4b0 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a42c:	4b28      	ldr	r3, [pc, #160]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a438:	d131      	bne.n	800a49e <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a43a:	4b25      	ldr	r3, [pc, #148]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a440:	4a23      	ldr	r2, [pc, #140]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a446:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a44a:	4b21      	ldr	r3, [pc, #132]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a452:	4a1f      	ldr	r2, [pc, #124]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a458:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a45a:	4b1e      	ldr	r3, [pc, #120]	; (800a4d4 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2232      	movs	r2, #50	; 0x32
 800a460:	fb02 f303 	mul.w	r3, r2, r3
 800a464:	4a1c      	ldr	r2, [pc, #112]	; (800a4d8 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800a466:	fba2 2303 	umull	r2, r3, r2, r3
 800a46a:	0c9b      	lsrs	r3, r3, #18
 800a46c:	3301      	adds	r3, #1
 800a46e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a470:	e002      	b.n	800a478 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3b01      	subs	r3, #1
 800a476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a478:	4b15      	ldr	r3, [pc, #84]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a484:	d102      	bne.n	800a48c <HAL_PWREx_ControlVoltageScaling+0x118>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1f2      	bne.n	800a472 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a48c:	4b10      	ldr	r3, [pc, #64]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a498:	d112      	bne.n	800a4c0 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e011      	b.n	800a4c2 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a49e:	4b0c      	ldr	r3, [pc, #48]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4a4:	4a0a      	ldr	r2, [pc, #40]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a4a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a4ae:	e007      	b.n	800a4c0 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a4b0:	4b07      	ldr	r3, [pc, #28]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a4b8:	4a05      	ldr	r2, [pc, #20]	; (800a4d0 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800a4ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4be:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	0801ce9c 	.word	0x0801ce9c
 800a4d0:	40007000 	.word	0x40007000
 800a4d4:	20000000 	.word	0x20000000
 800a4d8:	431bde83 	.word	0x431bde83

0800a4dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a4e0:	4b05      	ldr	r3, [pc, #20]	; (800a4f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	4a04      	ldr	r2, [pc, #16]	; (800a4f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a4e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4ea:	6093      	str	r3, [r2, #8]
}
 800a4ec:	bf00      	nop
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
 800a4f6:	bf00      	nop
 800a4f8:	40007000 	.word	0x40007000

0800a4fc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af02      	add	r7, sp, #8
 800a502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a504:	f7f9 fe92 	bl	800422c <HAL_GetTick>
 800a508:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e0f6      	b.n	800a702 <HAL_QSPI_Init+0x206>
  }

  /* Check the parameters */
  assert_param(IS_QSPI_ALL_INSTANCE(hqspi->Instance));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a7c      	ldr	r2, [pc, #496]	; (800a70c <HAL_QSPI_Init+0x210>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d004      	beq.n	800a528 <HAL_QSPI_Init+0x2c>
 800a51e:	f240 112f 	movw	r1, #303	; 0x12f
 800a522:	487b      	ldr	r0, [pc, #492]	; (800a710 <HAL_QSPI_Init+0x214>)
 800a524:	f7f8 f884 	bl	8002630 <assert_failed>
  assert_param(IS_QSPI_CLOCK_PRESCALER(hqspi->Init.ClockPrescaler));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	2bff      	cmp	r3, #255	; 0xff
 800a52e:	d904      	bls.n	800a53a <HAL_QSPI_Init+0x3e>
 800a530:	f44f 7198 	mov.w	r1, #304	; 0x130
 800a534:	4876      	ldr	r0, [pc, #472]	; (800a710 <HAL_QSPI_Init+0x214>)
 800a536:	f7f8 f87b 	bl	8002630 <assert_failed>
  assert_param(IS_QSPI_FIFO_THRESHOLD(hqspi->Init.FifoThreshold));
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d003      	beq.n	800a54a <HAL_QSPI_Init+0x4e>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	2b10      	cmp	r3, #16
 800a548:	d904      	bls.n	800a554 <HAL_QSPI_Init+0x58>
 800a54a:	f240 1131 	movw	r1, #305	; 0x131
 800a54e:	4870      	ldr	r0, [pc, #448]	; (800a710 <HAL_QSPI_Init+0x214>)
 800a550:	f7f8 f86e 	bl	8002630 <assert_failed>
  assert_param(IS_QSPI_SSHIFT(hqspi->Init.SampleShifting));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d008      	beq.n	800a56e <HAL_QSPI_Init+0x72>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	2b10      	cmp	r3, #16
 800a562:	d004      	beq.n	800a56e <HAL_QSPI_Init+0x72>
 800a564:	f44f 7199 	mov.w	r1, #306	; 0x132
 800a568:	4869      	ldr	r0, [pc, #420]	; (800a710 <HAL_QSPI_Init+0x214>)
 800a56a:	f7f8 f861 	bl	8002630 <assert_failed>
  assert_param(IS_QSPI_FLASH_SIZE(hqspi->Init.FlashSize));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	2b1f      	cmp	r3, #31
 800a574:	d904      	bls.n	800a580 <HAL_QSPI_Init+0x84>
 800a576:	f240 1133 	movw	r1, #307	; 0x133
 800a57a:	4865      	ldr	r0, [pc, #404]	; (800a710 <HAL_QSPI_Init+0x214>)
 800a57c:	f7f8 f858 	bl	8002630 <assert_failed>
  assert_param(IS_QSPI_CS_HIGH_TIME(hqspi->Init.ChipSelectHighTime));
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d027      	beq.n	800a5d8 <HAL_QSPI_Init+0xdc>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	695b      	ldr	r3, [r3, #20]
 800a58c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a590:	d022      	beq.n	800a5d8 <HAL_QSPI_Init+0xdc>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a59a:	d01d      	beq.n	800a5d8 <HAL_QSPI_Init+0xdc>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	695b      	ldr	r3, [r3, #20]
 800a5a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5a4:	d018      	beq.n	800a5d8 <HAL_QSPI_Init+0xdc>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ae:	d013      	beq.n	800a5d8 <HAL_QSPI_Init+0xdc>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a5b8:	d00e      	beq.n	800a5d8 <HAL_QSPI_Init+0xdc>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a5c2:	d009      	beq.n	800a5d8 <HAL_QSPI_Init+0xdc>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a5cc:	d004      	beq.n	800a5d8 <HAL_QSPI_Init+0xdc>
 800a5ce:	f44f 719a 	mov.w	r1, #308	; 0x134
 800a5d2:	484f      	ldr	r0, [pc, #316]	; (800a710 <HAL_QSPI_Init+0x214>)
 800a5d4:	f7f8 f82c 	bl	8002630 <assert_failed>
  assert_param(IS_QSPI_CLOCK_MODE(hqspi->Init.ClockMode));
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d008      	beq.n	800a5f2 <HAL_QSPI_Init+0xf6>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d004      	beq.n	800a5f2 <HAL_QSPI_Init+0xf6>
 800a5e8:	f240 1135 	movw	r1, #309	; 0x135
 800a5ec:	4848      	ldr	r0, [pc, #288]	; (800a710 <HAL_QSPI_Init+0x214>)
 800a5ee:	f7f8 f81f 	bl	8002630 <assert_failed>
  assert_param(IS_QSPI_DUAL_FLASH_MODE(hqspi->Init.DualFlash));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	2b40      	cmp	r3, #64	; 0x40
 800a5f8:	d008      	beq.n	800a60c <HAL_QSPI_Init+0x110>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d004      	beq.n	800a60c <HAL_QSPI_Init+0x110>
 800a602:	f44f 719b 	mov.w	r1, #310	; 0x136
 800a606:	4842      	ldr	r0, [pc, #264]	; (800a710 <HAL_QSPI_Init+0x214>)
 800a608:	f7f8 f812 	bl	8002630 <assert_failed>

  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a1b      	ldr	r3, [r3, #32]
 800a610:	2b40      	cmp	r3, #64	; 0x40
 800a612:	d00c      	beq.n	800a62e <HAL_QSPI_Init+0x132>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d008      	beq.n	800a62e <HAL_QSPI_Init+0x132>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	2b80      	cmp	r3, #128	; 0x80
 800a622:	d004      	beq.n	800a62e <HAL_QSPI_Init+0x132>
 800a624:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800a628:	4839      	ldr	r0, [pc, #228]	; (800a710 <HAL_QSPI_Init+0x214>)
 800a62a:	f7f8 f801 	bl	8002630 <assert_failed>
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10b      	bne.n	800a652 <HAL_QSPI_Init+0x156>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f7f8 f83c 	bl	80026c0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a648:	f241 3188 	movw	r1, #5000	; 0x1388
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f863 	bl	800a718 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	3b01      	subs	r3, #1
 800a662:	021a      	lsls	r2, r3, #8
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	430a      	orrs	r2, r1
 800a66a:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	2120      	movs	r1, #32
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f85b 	bl	800a734 <QSPI_WaitFlagStateUntilTimeout>
 800a67e:	4603      	mov	r3, r0
 800a680:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a682:	7afb      	ldrb	r3, [r7, #11]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d137      	bne.n	800a6f8 <HAL_QSPI_Init+0x1fc>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a692:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	6852      	ldr	r2, [r2, #4]
 800a69a:	0611      	lsls	r1, r2, #24
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	68d2      	ldr	r2, [r2, #12]
 800a6a0:	4311      	orrs	r1, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	69d2      	ldr	r2, [r2, #28]
 800a6a6:	4311      	orrs	r1, r2
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	6a12      	ldr	r2, [r2, #32]
 800a6ac:	4311      	orrs	r1, r2
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	6812      	ldr	r2, [r2, #0]
 800a6b2:	430b      	orrs	r3, r1
 800a6b4:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	4b15      	ldr	r3, [pc, #84]	; (800a714 <HAL_QSPI_Init+0x218>)
 800a6be:	4013      	ands	r3, r2
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	6912      	ldr	r2, [r2, #16]
 800a6c4:	0411      	lsls	r1, r2, #16
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	6952      	ldr	r2, [r2, #20]
 800a6ca:	4311      	orrs	r1, r2
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	6992      	ldr	r2, [r2, #24]
 800a6d0:	4311      	orrs	r1, r2
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6812      	ldr	r2, [r2, #0]
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0201 	orr.w	r2, r2, #1
 800a6e8:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800a700:	7afb      	ldrb	r3, [r7, #11]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	a0001000 	.word	0xa0001000
 800a710:	0801ced8 	.word	0x0801ced8
 800a714:	ffe0f8fe 	.word	0xffe0f8fe

0800a718 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	649a      	str	r2, [r3, #72]	; 0x48
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	603b      	str	r3, [r7, #0]
 800a740:	4613      	mov	r3, r2
 800a742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a744:	e01a      	b.n	800a77c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a74c:	d016      	beq.n	800a77c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a74e:	f7f9 fd6d 	bl	800422c <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d302      	bcc.n	800a764 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a75e:	69bb      	ldr	r3, [r7, #24]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10b      	bne.n	800a77c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2204      	movs	r2, #4
 800a768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a770:	f043 0201 	orr.w	r2, r3, #1
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e00e      	b.n	800a79a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	689a      	ldr	r2, [r3, #8]
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	4013      	ands	r3, r2
 800a786:	2b00      	cmp	r3, #0
 800a788:	bf14      	ite	ne
 800a78a:	2301      	movne	r3, #1
 800a78c:	2300      	moveq	r3, #0
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	461a      	mov	r2, r3
 800a792:	79fb      	ldrb	r3, [r7, #7]
 800a794:	429a      	cmp	r2, r3
 800a796:	d1d6      	bne.n	800a746 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d102      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	f000 bc02 	b.w	800afbc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d022      	beq.n	800a806 <HAL_RCC_OscConfig+0x62>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d11c      	bne.n	800a806 <HAL_RCC_OscConfig+0x62>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d116      	bne.n	800a806 <HAL_RCC_OscConfig+0x62>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0320 	and.w	r3, r3, #32
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d110      	bne.n	800a806 <HAL_RCC_OscConfig+0x62>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0308 	and.w	r3, r3, #8
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10a      	bne.n	800a806 <HAL_RCC_OscConfig+0x62>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0304 	and.w	r3, r3, #4
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d104      	bne.n	800a806 <HAL_RCC_OscConfig+0x62>
 800a7fc:	f240 1145 	movw	r1, #325	; 0x145
 800a800:	4892      	ldr	r0, [pc, #584]	; (800aa4c <HAL_RCC_OscConfig+0x2a8>)
 800a802:	f7f7 ff15 	bl	8002630 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 8089 	beq.w	800a926 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00e      	beq.n	800a83a <HAL_RCC_OscConfig+0x96>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a824:	d009      	beq.n	800a83a <HAL_RCC_OscConfig+0x96>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a82e:	d004      	beq.n	800a83a <HAL_RCC_OscConfig+0x96>
 800a830:	f240 114b 	movw	r1, #331	; 0x14b
 800a834:	4885      	ldr	r0, [pc, #532]	; (800aa4c <HAL_RCC_OscConfig+0x2a8>)
 800a836:	f7f7 fefb 	bl	8002630 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a83a:	4b85      	ldr	r3, [pc, #532]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	f003 030c 	and.w	r3, r3, #12
 800a842:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a844:	4b82      	ldr	r3, [pc, #520]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	f003 0303 	and.w	r3, r3, #3
 800a84c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	2b0c      	cmp	r3, #12
 800a852:	d102      	bne.n	800a85a <HAL_RCC_OscConfig+0xb6>
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2b03      	cmp	r3, #3
 800a858:	d002      	beq.n	800a860 <HAL_RCC_OscConfig+0xbc>
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	2b08      	cmp	r3, #8
 800a85e:	d10b      	bne.n	800a878 <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a860:	4b7b      	ldr	r3, [pc, #492]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d05b      	beq.n	800a924 <HAL_RCC_OscConfig+0x180>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d157      	bne.n	800a924 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	e3a1      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a880:	d106      	bne.n	800a890 <HAL_RCC_OscConfig+0xec>
 800a882:	4b73      	ldr	r3, [pc, #460]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4a72      	ldr	r2, [pc, #456]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	e01d      	b.n	800a8cc <HAL_RCC_OscConfig+0x128>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a898:	d10c      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x110>
 800a89a:	4b6d      	ldr	r3, [pc, #436]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a6c      	ldr	r2, [pc, #432]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a8a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	4b6a      	ldr	r3, [pc, #424]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a69      	ldr	r2, [pc, #420]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a8ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8b0:	6013      	str	r3, [r2, #0]
 800a8b2:	e00b      	b.n	800a8cc <HAL_RCC_OscConfig+0x128>
 800a8b4:	4b66      	ldr	r3, [pc, #408]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a65      	ldr	r2, [pc, #404]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a8ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	4b63      	ldr	r3, [pc, #396]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a62      	ldr	r2, [pc, #392]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a8c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d013      	beq.n	800a8fc <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8d4:	f7f9 fcaa 	bl	800422c <HAL_GetTick>
 800a8d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8da:	e008      	b.n	800a8ee <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8dc:	f7f9 fca6 	bl	800422c <HAL_GetTick>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	2b64      	cmp	r3, #100	; 0x64
 800a8e8:	d901      	bls.n	800a8ee <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e366      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8ee:	4b58      	ldr	r3, [pc, #352]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0f0      	beq.n	800a8dc <HAL_RCC_OscConfig+0x138>
 800a8fa:	e014      	b.n	800a926 <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8fc:	f7f9 fc96 	bl	800422c <HAL_GetTick>
 800a900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a902:	e008      	b.n	800a916 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a904:	f7f9 fc92 	bl	800422c <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	2b64      	cmp	r3, #100	; 0x64
 800a910:	d901      	bls.n	800a916 <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e352      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a916:	4b4e      	ldr	r3, [pc, #312]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1f0      	bne.n	800a904 <HAL_RCC_OscConfig+0x160>
 800a922:	e000      	b.n	800a926 <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f000 8093 	beq.w	800aa5a <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d009      	beq.n	800a950 <HAL_RCC_OscConfig+0x1ac>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a944:	d004      	beq.n	800a950 <HAL_RCC_OscConfig+0x1ac>
 800a946:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800a94a:	4840      	ldr	r0, [pc, #256]	; (800aa4c <HAL_RCC_OscConfig+0x2a8>)
 800a94c:	f7f7 fe70 	bl	8002630 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	2b7f      	cmp	r3, #127	; 0x7f
 800a956:	d904      	bls.n	800a962 <HAL_RCC_OscConfig+0x1be>
 800a958:	f240 1181 	movw	r1, #385	; 0x181
 800a95c:	483b      	ldr	r0, [pc, #236]	; (800aa4c <HAL_RCC_OscConfig+0x2a8>)
 800a95e:	f7f7 fe67 	bl	8002630 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a962:	4b3b      	ldr	r3, [pc, #236]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f003 030c 	and.w	r3, r3, #12
 800a96a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a96c:	4b38      	ldr	r3, [pc, #224]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	f003 0303 	and.w	r3, r3, #3
 800a974:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	2b0c      	cmp	r3, #12
 800a97a:	d102      	bne.n	800a982 <HAL_RCC_OscConfig+0x1de>
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d002      	beq.n	800a988 <HAL_RCC_OscConfig+0x1e4>
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	2b04      	cmp	r3, #4
 800a986:	d11f      	bne.n	800a9c8 <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a988:	4b31      	ldr	r3, [pc, #196]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a990:	2b00      	cmp	r3, #0
 800a992:	d005      	beq.n	800a9a0 <HAL_RCC_OscConfig+0x1fc>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d101      	bne.n	800a9a0 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e30d      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9a0:	4b2b      	ldr	r3, [pc, #172]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	061b      	lsls	r3, r3, #24
 800a9ae:	4928      	ldr	r1, [pc, #160]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a9b4:	4b27      	ldr	r3, [pc, #156]	; (800aa54 <HAL_RCC_OscConfig+0x2b0>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7f9 fbeb 	bl	8004194 <HAL_InitTick>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d049      	beq.n	800aa58 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e2f9      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d023      	beq.n	800aa18 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9d0:	4b1f      	ldr	r3, [pc, #124]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a1e      	ldr	r2, [pc, #120]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a9d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9dc:	f7f9 fc26 	bl	800422c <HAL_GetTick>
 800a9e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a9e2:	e008      	b.n	800a9f6 <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9e4:	f7f9 fc22 	bl	800422c <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d901      	bls.n	800a9f6 <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e2e2      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a9f6:	4b16      	ldr	r3, [pc, #88]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0f0      	beq.n	800a9e4 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa02:	4b13      	ldr	r3, [pc, #76]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	061b      	lsls	r3, r3, #24
 800aa10:	490f      	ldr	r1, [pc, #60]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800aa12:	4313      	orrs	r3, r2
 800aa14:	604b      	str	r3, [r1, #4]
 800aa16:	e020      	b.n	800aa5a <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aa18:	4b0d      	ldr	r3, [pc, #52]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a0c      	ldr	r2, [pc, #48]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800aa1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa24:	f7f9 fc02 	bl	800422c <HAL_GetTick>
 800aa28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aa2a:	e008      	b.n	800aa3e <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa2c:	f7f9 fbfe 	bl	800422c <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d901      	bls.n	800aa3e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	e2be      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800aa3e:	4b04      	ldr	r3, [pc, #16]	; (800aa50 <HAL_RCC_OscConfig+0x2ac>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1f0      	bne.n	800aa2c <HAL_RCC_OscConfig+0x288>
 800aa4a:	e006      	b.n	800aa5a <HAL_RCC_OscConfig+0x2b6>
 800aa4c:	0801cf14 	.word	0x0801cf14
 800aa50:	40021000 	.word	0x40021000
 800aa54:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f003 0308 	and.w	r3, r3, #8
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d049      	beq.n	800aafa <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d008      	beq.n	800aa80 <HAL_RCC_OscConfig+0x2dc>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	695b      	ldr	r3, [r3, #20]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d004      	beq.n	800aa80 <HAL_RCC_OscConfig+0x2dc>
 800aa76:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800aa7a:	48a3      	ldr	r0, [pc, #652]	; (800ad08 <HAL_RCC_OscConfig+0x564>)
 800aa7c:	f7f7 fdd8 	bl	8002630 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d01c      	beq.n	800aac2 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa88:	4ba0      	ldr	r3, [pc, #640]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800aa8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa8e:	4a9f      	ldr	r2, [pc, #636]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800aa90:	f043 0301 	orr.w	r3, r3, #1
 800aa94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa98:	f7f9 fbc8 	bl	800422c <HAL_GetTick>
 800aa9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aa9e:	e008      	b.n	800aab2 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaa0:	f7f9 fbc4 	bl	800422c <HAL_GetTick>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d901      	bls.n	800aab2 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e284      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800aab2:	4b96      	ldr	r3, [pc, #600]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800aab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aab8:	f003 0302 	and.w	r3, r3, #2
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0ef      	beq.n	800aaa0 <HAL_RCC_OscConfig+0x2fc>
 800aac0:	e01b      	b.n	800aafa <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aac2:	4b92      	ldr	r3, [pc, #584]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800aac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aac8:	4a90      	ldr	r2, [pc, #576]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800aaca:	f023 0301 	bic.w	r3, r3, #1
 800aace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aad2:	f7f9 fbab 	bl	800422c <HAL_GetTick>
 800aad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aad8:	e008      	b.n	800aaec <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aada:	f7f9 fba7 	bl	800422c <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d901      	bls.n	800aaec <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800aae8:	2303      	movs	r3, #3
 800aaea:	e267      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aaec:	4b87      	ldr	r3, [pc, #540]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800aaee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaf2:	f003 0302 	and.w	r3, r3, #2
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1ef      	bne.n	800aada <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0304 	and.w	r3, r3, #4
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f000 80b7 	beq.w	800ac76 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00c      	beq.n	800ab2e <HAL_RCC_OscConfig+0x38a>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d008      	beq.n	800ab2e <HAL_RCC_OscConfig+0x38a>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	2b05      	cmp	r3, #5
 800ab22:	d004      	beq.n	800ab2e <HAL_RCC_OscConfig+0x38a>
 800ab24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800ab28:	4877      	ldr	r0, [pc, #476]	; (800ad08 <HAL_RCC_OscConfig+0x564>)
 800ab2a:	f7f7 fd81 	bl	8002630 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ab2e:	4b77      	ldr	r3, [pc, #476]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800ab30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <HAL_RCC_OscConfig+0x39a>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e000      	b.n	800ab40 <HAL_RCC_OscConfig+0x39c>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00d      	beq.n	800ab60 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab44:	4b71      	ldr	r3, [pc, #452]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800ab46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab48:	4a70      	ldr	r2, [pc, #448]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800ab4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab4e:	6593      	str	r3, [r2, #88]	; 0x58
 800ab50:	4b6e      	ldr	r3, [pc, #440]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800ab52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab58:	60fb      	str	r3, [r7, #12]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab60:	4b6b      	ldr	r3, [pc, #428]	; (800ad10 <HAL_RCC_OscConfig+0x56c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d118      	bne.n	800ab9e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ab6c:	4b68      	ldr	r3, [pc, #416]	; (800ad10 <HAL_RCC_OscConfig+0x56c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a67      	ldr	r2, [pc, #412]	; (800ad10 <HAL_RCC_OscConfig+0x56c>)
 800ab72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab78:	f7f9 fb58 	bl	800422c <HAL_GetTick>
 800ab7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab7e:	e008      	b.n	800ab92 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab80:	f7f9 fb54 	bl	800422c <HAL_GetTick>
 800ab84:	4602      	mov	r2, r0
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d901      	bls.n	800ab92 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800ab8e:	2303      	movs	r3, #3
 800ab90:	e214      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab92:	4b5f      	ldr	r3, [pc, #380]	; (800ad10 <HAL_RCC_OscConfig+0x56c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d0f0      	beq.n	800ab80 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d108      	bne.n	800abb8 <HAL_RCC_OscConfig+0x414>
 800aba6:	4b59      	ldr	r3, [pc, #356]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800aba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abac:	4a57      	ldr	r2, [pc, #348]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800abae:	f043 0301 	orr.w	r3, r3, #1
 800abb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800abb6:	e024      	b.n	800ac02 <HAL_RCC_OscConfig+0x45e>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	2b05      	cmp	r3, #5
 800abbe:	d110      	bne.n	800abe2 <HAL_RCC_OscConfig+0x43e>
 800abc0:	4b52      	ldr	r3, [pc, #328]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800abc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc6:	4a51      	ldr	r2, [pc, #324]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800abc8:	f043 0304 	orr.w	r3, r3, #4
 800abcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800abd0:	4b4e      	ldr	r3, [pc, #312]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800abd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd6:	4a4d      	ldr	r2, [pc, #308]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800abd8:	f043 0301 	orr.w	r3, r3, #1
 800abdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800abe0:	e00f      	b.n	800ac02 <HAL_RCC_OscConfig+0x45e>
 800abe2:	4b4a      	ldr	r3, [pc, #296]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800abe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abe8:	4a48      	ldr	r2, [pc, #288]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800abea:	f023 0301 	bic.w	r3, r3, #1
 800abee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800abf2:	4b46      	ldr	r3, [pc, #280]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800abf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abf8:	4a44      	ldr	r2, [pc, #272]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800abfa:	f023 0304 	bic.w	r3, r3, #4
 800abfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d016      	beq.n	800ac38 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac0a:	f7f9 fb0f 	bl	800422c <HAL_GetTick>
 800ac0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ac10:	e00a      	b.n	800ac28 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac12:	f7f9 fb0b 	bl	800422c <HAL_GetTick>
 800ac16:	4602      	mov	r2, r0
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d901      	bls.n	800ac28 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e1c9      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ac28:	4b38      	ldr	r3, [pc, #224]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800ac2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac2e:	f003 0302 	and.w	r3, r3, #2
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0ed      	beq.n	800ac12 <HAL_RCC_OscConfig+0x46e>
 800ac36:	e015      	b.n	800ac64 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac38:	f7f9 faf8 	bl	800422c <HAL_GetTick>
 800ac3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ac3e:	e00a      	b.n	800ac56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac40:	f7f9 faf4 	bl	800422c <HAL_GetTick>
 800ac44:	4602      	mov	r2, r0
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d901      	bls.n	800ac56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e1b2      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ac56:	4b2d      	ldr	r3, [pc, #180]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800ac58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac5c:	f003 0302 	and.w	r3, r3, #2
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1ed      	bne.n	800ac40 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ac64:	7ffb      	ldrb	r3, [r7, #31]
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d105      	bne.n	800ac76 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac6a:	4b28      	ldr	r3, [pc, #160]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800ac6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6e:	4a27      	ldr	r2, [pc, #156]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800ac70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ac74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 0320 	and.w	r3, r3, #32
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d04f      	beq.n	800ad22 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d008      	beq.n	800ac9c <HAL_RCC_OscConfig+0x4f8>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d004      	beq.n	800ac9c <HAL_RCC_OscConfig+0x4f8>
 800ac92:	f240 213b 	movw	r1, #571	; 0x23b
 800ac96:	481c      	ldr	r0, [pc, #112]	; (800ad08 <HAL_RCC_OscConfig+0x564>)
 800ac98:	f7f7 fcca 	bl	8002630 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d01c      	beq.n	800acde <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aca4:	4b19      	ldr	r3, [pc, #100]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800aca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acaa:	4a18      	ldr	r2, [pc, #96]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800acac:	f043 0301 	orr.w	r3, r3, #1
 800acb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acb4:	f7f9 faba 	bl	800422c <HAL_GetTick>
 800acb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800acba:	e008      	b.n	800acce <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acbc:	f7f9 fab6 	bl	800422c <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d901      	bls.n	800acce <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 800acca:	2303      	movs	r3, #3
 800accc:	e176      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800acce:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800acd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acd4:	f003 0302 	and.w	r3, r3, #2
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d0ef      	beq.n	800acbc <HAL_RCC_OscConfig+0x518>
 800acdc:	e021      	b.n	800ad22 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800acde:	4b0b      	ldr	r3, [pc, #44]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800ace0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ace4:	4a09      	ldr	r2, [pc, #36]	; (800ad0c <HAL_RCC_OscConfig+0x568>)
 800ace6:	f023 0301 	bic.w	r3, r3, #1
 800acea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acee:	f7f9 fa9d 	bl	800422c <HAL_GetTick>
 800acf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800acf4:	e00e      	b.n	800ad14 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acf6:	f7f9 fa99 	bl	800422c <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d907      	bls.n	800ad14 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 800ad04:	2303      	movs	r3, #3
 800ad06:	e159      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
 800ad08:	0801cf14 	.word	0x0801cf14
 800ad0c:	40021000 	.word	0x40021000
 800ad10:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ad14:	4b89      	ldr	r3, [pc, #548]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800ad16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1e9      	bne.n	800acf6 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	69db      	ldr	r3, [r3, #28]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00c      	beq.n	800ad44 <HAL_RCC_OscConfig+0x5a0>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	69db      	ldr	r3, [r3, #28]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d008      	beq.n	800ad44 <HAL_RCC_OscConfig+0x5a0>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d004      	beq.n	800ad44 <HAL_RCC_OscConfig+0x5a0>
 800ad3a:	f44f 7119 	mov.w	r1, #612	; 0x264
 800ad3e:	4880      	ldr	r0, [pc, #512]	; (800af40 <HAL_RCC_OscConfig+0x79c>)
 800ad40:	f7f7 fc76 	bl	8002630 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	69db      	ldr	r3, [r3, #28]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 8136 	beq.w	800afba <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ad4e:	4b7b      	ldr	r3, [pc, #492]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	f003 030c 	and.w	r3, r3, #12
 800ad56:	2b0c      	cmp	r3, #12
 800ad58:	f000 80ea 	beq.w	800af30 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	69db      	ldr	r3, [r3, #28]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	f040 80bd 	bne.w	800aee0 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00c      	beq.n	800ad88 <HAL_RCC_OscConfig+0x5e4>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d008      	beq.n	800ad88 <HAL_RCC_OscConfig+0x5e4>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d004      	beq.n	800ad88 <HAL_RCC_OscConfig+0x5e4>
 800ad7e:	f240 216e 	movw	r1, #622	; 0x26e
 800ad82:	486f      	ldr	r0, [pc, #444]	; (800af40 <HAL_RCC_OscConfig+0x79c>)
 800ad84:	f7f7 fc54 	bl	8002630 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d003      	beq.n	800ad98 <HAL_RCC_OscConfig+0x5f4>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	2b10      	cmp	r3, #16
 800ad96:	d904      	bls.n	800ada2 <HAL_RCC_OscConfig+0x5fe>
 800ad98:	f240 216f 	movw	r1, #623	; 0x26f
 800ad9c:	4868      	ldr	r0, [pc, #416]	; (800af40 <HAL_RCC_OscConfig+0x79c>)
 800ad9e:	f7f7 fc47 	bl	8002630 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada6:	2b07      	cmp	r3, #7
 800ada8:	d903      	bls.n	800adb2 <HAL_RCC_OscConfig+0x60e>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adae:	2b7f      	cmp	r3, #127	; 0x7f
 800adb0:	d904      	bls.n	800adbc <HAL_RCC_OscConfig+0x618>
 800adb2:	f44f 711c 	mov.w	r1, #624	; 0x270
 800adb6:	4862      	ldr	r0, [pc, #392]	; (800af40 <HAL_RCC_OscConfig+0x79c>)
 800adb8:	f7f7 fc3a 	bl	8002630 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d903      	bls.n	800adcc <HAL_RCC_OscConfig+0x628>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc8:	2b1f      	cmp	r3, #31
 800adca:	d904      	bls.n	800add6 <HAL_RCC_OscConfig+0x632>
 800adcc:	f240 2171 	movw	r1, #625	; 0x271
 800add0:	485b      	ldr	r0, [pc, #364]	; (800af40 <HAL_RCC_OscConfig+0x79c>)
 800add2:	f7f7 fc2d 	bl	8002630 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adda:	2b02      	cmp	r3, #2
 800addc:	d010      	beq.n	800ae00 <HAL_RCC_OscConfig+0x65c>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade2:	2b04      	cmp	r3, #4
 800ade4:	d00c      	beq.n	800ae00 <HAL_RCC_OscConfig+0x65c>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adea:	2b06      	cmp	r3, #6
 800adec:	d008      	beq.n	800ae00 <HAL_RCC_OscConfig+0x65c>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf2:	2b08      	cmp	r3, #8
 800adf4:	d004      	beq.n	800ae00 <HAL_RCC_OscConfig+0x65c>
 800adf6:	f240 2172 	movw	r1, #626	; 0x272
 800adfa:	4851      	ldr	r0, [pc, #324]	; (800af40 <HAL_RCC_OscConfig+0x79c>)
 800adfc:	f7f7 fc18 	bl	8002630 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d010      	beq.n	800ae2a <HAL_RCC_OscConfig+0x686>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae0c:	2b04      	cmp	r3, #4
 800ae0e:	d00c      	beq.n	800ae2a <HAL_RCC_OscConfig+0x686>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae14:	2b06      	cmp	r3, #6
 800ae16:	d008      	beq.n	800ae2a <HAL_RCC_OscConfig+0x686>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae1c:	2b08      	cmp	r3, #8
 800ae1e:	d004      	beq.n	800ae2a <HAL_RCC_OscConfig+0x686>
 800ae20:	f240 2173 	movw	r1, #627	; 0x273
 800ae24:	4846      	ldr	r0, [pc, #280]	; (800af40 <HAL_RCC_OscConfig+0x79c>)
 800ae26:	f7f7 fc03 	bl	8002630 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae2a:	4b44      	ldr	r3, [pc, #272]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a43      	ldr	r2, [pc, #268]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800ae30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae36:	f7f9 f9f9 	bl	800422c <HAL_GetTick>
 800ae3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae3c:	e008      	b.n	800ae50 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae3e:	f7f9 f9f5 	bl	800422c <HAL_GetTick>
 800ae42:	4602      	mov	r2, r0
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	1ad3      	subs	r3, r2, r3
 800ae48:	2b02      	cmp	r3, #2
 800ae4a:	d901      	bls.n	800ae50 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e0b5      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae50:	4b3a      	ldr	r3, [pc, #232]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1f0      	bne.n	800ae3e <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae5c:	4b37      	ldr	r3, [pc, #220]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	4b38      	ldr	r3, [pc, #224]	; (800af44 <HAL_RCC_OscConfig+0x7a0>)
 800ae62:	4013      	ands	r3, r2
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	6a11      	ldr	r1, [r2, #32]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae6c:	3a01      	subs	r2, #1
 800ae6e:	0112      	lsls	r2, r2, #4
 800ae70:	4311      	orrs	r1, r2
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ae76:	0212      	lsls	r2, r2, #8
 800ae78:	4311      	orrs	r1, r2
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae7e:	0852      	lsrs	r2, r2, #1
 800ae80:	3a01      	subs	r2, #1
 800ae82:	0552      	lsls	r2, r2, #21
 800ae84:	4311      	orrs	r1, r2
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ae8a:	0852      	lsrs	r2, r2, #1
 800ae8c:	3a01      	subs	r2, #1
 800ae8e:	0652      	lsls	r2, r2, #25
 800ae90:	4311      	orrs	r1, r2
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae96:	06d2      	lsls	r2, r2, #27
 800ae98:	430a      	orrs	r2, r1
 800ae9a:	4928      	ldr	r1, [pc, #160]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aea0:	4b26      	ldr	r3, [pc, #152]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a25      	ldr	r2, [pc, #148]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aeaa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aeac:	4b23      	ldr	r3, [pc, #140]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	4a22      	ldr	r2, [pc, #136]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aeb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aeb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeb8:	f7f9 f9b8 	bl	800422c <HAL_GetTick>
 800aebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aebe:	e008      	b.n	800aed2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aec0:	f7f9 f9b4 	bl	800422c <HAL_GetTick>
 800aec4:	4602      	mov	r2, r0
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	2b02      	cmp	r3, #2
 800aecc:	d901      	bls.n	800aed2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800aece:	2303      	movs	r3, #3
 800aed0:	e074      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aed2:	4b1a      	ldr	r3, [pc, #104]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d0f0      	beq.n	800aec0 <HAL_RCC_OscConfig+0x71c>
 800aede:	e06c      	b.n	800afba <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aee0:	4b16      	ldr	r3, [pc, #88]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a15      	ldr	r2, [pc, #84]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aeea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800aeec:	4b13      	ldr	r3, [pc, #76]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	4a12      	ldr	r2, [pc, #72]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aef2:	f023 0303 	bic.w	r3, r3, #3
 800aef6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800aef8:	4b10      	ldr	r3, [pc, #64]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	4a0f      	ldr	r2, [pc, #60]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800aefe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800af02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af08:	f7f9 f990 	bl	800422c <HAL_GetTick>
 800af0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800af0e:	e008      	b.n	800af22 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af10:	f7f9 f98c 	bl	800422c <HAL_GetTick>
 800af14:	4602      	mov	r2, r0
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d901      	bls.n	800af22 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e04c      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800af22:	4b06      	ldr	r3, [pc, #24]	; (800af3c <HAL_RCC_OscConfig+0x798>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1f0      	bne.n	800af10 <HAL_RCC_OscConfig+0x76c>
 800af2e:	e044      	b.n	800afba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	69db      	ldr	r3, [r3, #28]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d107      	bne.n	800af48 <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	e03f      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
 800af3c:	40021000 	.word	0x40021000
 800af40:	0801cf14 	.word	0x0801cf14
 800af44:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800af48:	4b1e      	ldr	r3, [pc, #120]	; (800afc4 <HAL_RCC_OscConfig+0x820>)
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f003 0203 	and.w	r2, r3, #3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d12c      	bne.n	800afb6 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af66:	3b01      	subs	r3, #1
 800af68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d123      	bne.n	800afb6 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d11b      	bne.n	800afb6 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d113      	bne.n	800afb6 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af98:	085b      	lsrs	r3, r3, #1
 800af9a:	3b01      	subs	r3, #1
 800af9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d109      	bne.n	800afb6 <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afac:	085b      	lsrs	r3, r3, #1
 800afae:	3b01      	subs	r3, #1
 800afb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d001      	beq.n	800afba <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e000      	b.n	800afbc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3720      	adds	r7, #32
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	40021000 	.word	0x40021000

0800afc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b086      	sub	sp, #24
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d101      	bne.n	800afe0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e1e2      	b.n	800b3a6 <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 030f 	and.w	r3, r3, #15
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d005      	beq.n	800aff8 <HAL_RCC_ClockConfig+0x30>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f023 030f 	bic.w	r3, r3, #15
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d004      	beq.n	800b002 <HAL_RCC_ClockConfig+0x3a>
 800aff8:	f44f 7143 	mov.w	r1, #780	; 0x30c
 800affc:	4869      	ldr	r0, [pc, #420]	; (800b1a4 <HAL_RCC_ClockConfig+0x1dc>)
 800affe:	f7f7 fb17 	bl	8002630 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d031      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d02e      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d02b      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	2b03      	cmp	r3, #3
 800b018:	d028      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b04      	cmp	r3, #4
 800b01e:	d025      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	2b05      	cmp	r3, #5
 800b024:	d022      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b06      	cmp	r3, #6
 800b02a:	d01f      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2b07      	cmp	r3, #7
 800b030:	d01c      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	2b08      	cmp	r3, #8
 800b036:	d019      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	2b09      	cmp	r3, #9
 800b03c:	d016      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b0a      	cmp	r3, #10
 800b042:	d013      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b0b      	cmp	r3, #11
 800b048:	d010      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b0c      	cmp	r3, #12
 800b04e:	d00d      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	2b0d      	cmp	r3, #13
 800b054:	d00a      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	2b0e      	cmp	r3, #14
 800b05a:	d007      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	2b0f      	cmp	r3, #15
 800b060:	d004      	beq.n	800b06c <HAL_RCC_ClockConfig+0xa4>
 800b062:	f240 310d 	movw	r1, #781	; 0x30d
 800b066:	484f      	ldr	r0, [pc, #316]	; (800b1a4 <HAL_RCC_ClockConfig+0x1dc>)
 800b068:	f7f7 fae2 	bl	8002630 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b06c:	4b4e      	ldr	r3, [pc, #312]	; (800b1a8 <HAL_RCC_ClockConfig+0x1e0>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 030f 	and.w	r3, r3, #15
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d910      	bls.n	800b09c <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b07a:	4b4b      	ldr	r3, [pc, #300]	; (800b1a8 <HAL_RCC_ClockConfig+0x1e0>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f023 020f 	bic.w	r2, r3, #15
 800b082:	4949      	ldr	r1, [pc, #292]	; (800b1a8 <HAL_RCC_ClockConfig+0x1e0>)
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	4313      	orrs	r3, r2
 800b088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b08a:	4b47      	ldr	r3, [pc, #284]	; (800b1a8 <HAL_RCC_ClockConfig+0x1e0>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 030f 	and.w	r3, r3, #15
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	429a      	cmp	r2, r3
 800b096:	d001      	beq.n	800b09c <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	e184      	b.n	800b3a6 <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 808e 	beq.w	800b1c6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d00c      	beq.n	800b0cc <HAL_RCC_ClockConfig+0x104>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d008      	beq.n	800b0cc <HAL_RCC_ClockConfig+0x104>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d004      	beq.n	800b0cc <HAL_RCC_ClockConfig+0x104>
 800b0c2:	f44f 7149 	mov.w	r1, #804	; 0x324
 800b0c6:	4837      	ldr	r0, [pc, #220]	; (800b1a4 <HAL_RCC_ClockConfig+0x1dc>)
 800b0c8:	f7f7 fab2 	bl	8002630 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d129      	bne.n	800b128 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0d4:	4b35      	ldr	r3, [pc, #212]	; (800b1ac <HAL_RCC_ClockConfig+0x1e4>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e160      	b.n	800b3a6 <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b0e4:	f000 fa0a 	bl	800b4fc <RCC_GetSysClockFreqFromPLLSource>
 800b0e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	4a30      	ldr	r2, [pc, #192]	; (800b1b0 <HAL_RCC_ClockConfig+0x1e8>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d93f      	bls.n	800b172 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b0f2:	4b2e      	ldr	r3, [pc, #184]	; (800b1ac <HAL_RCC_ClockConfig+0x1e4>)
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d009      	beq.n	800b112 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b106:	2b00      	cmp	r3, #0
 800b108:	d033      	beq.n	800b172 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d12f      	bne.n	800b172 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b112:	4b26      	ldr	r3, [pc, #152]	; (800b1ac <HAL_RCC_ClockConfig+0x1e4>)
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b11a:	4a24      	ldr	r2, [pc, #144]	; (800b1ac <HAL_RCC_ClockConfig+0x1e4>)
 800b11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b120:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b122:	2380      	movs	r3, #128	; 0x80
 800b124:	617b      	str	r3, [r7, #20]
 800b126:	e024      	b.n	800b172 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	2b02      	cmp	r3, #2
 800b12e:	d107      	bne.n	800b140 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b130:	4b1e      	ldr	r3, [pc, #120]	; (800b1ac <HAL_RCC_ClockConfig+0x1e4>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d109      	bne.n	800b150 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e132      	b.n	800b3a6 <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b140:	4b1a      	ldr	r3, [pc, #104]	; (800b1ac <HAL_RCC_ClockConfig+0x1e4>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	e12a      	b.n	800b3a6 <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b150:	f000 f93a 	bl	800b3c8 <HAL_RCC_GetSysClockFreq>
 800b154:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	4a15      	ldr	r2, [pc, #84]	; (800b1b0 <HAL_RCC_ClockConfig+0x1e8>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d909      	bls.n	800b172 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b15e:	4b13      	ldr	r3, [pc, #76]	; (800b1ac <HAL_RCC_ClockConfig+0x1e4>)
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b166:	4a11      	ldr	r2, [pc, #68]	; (800b1ac <HAL_RCC_ClockConfig+0x1e4>)
 800b168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b16c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b16e:	2380      	movs	r3, #128	; 0x80
 800b170:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b172:	4b0e      	ldr	r3, [pc, #56]	; (800b1ac <HAL_RCC_ClockConfig+0x1e4>)
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f023 0203 	bic.w	r2, r3, #3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	490b      	ldr	r1, [pc, #44]	; (800b1ac <HAL_RCC_ClockConfig+0x1e4>)
 800b180:	4313      	orrs	r3, r2
 800b182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b184:	f7f9 f852 	bl	800422c <HAL_GetTick>
 800b188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b18a:	e013      	b.n	800b1b4 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b18c:	f7f9 f84e 	bl	800422c <HAL_GetTick>
 800b190:	4602      	mov	r2, r0
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	f241 3288 	movw	r2, #5000	; 0x1388
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d90a      	bls.n	800b1b4 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e101      	b.n	800b3a6 <HAL_RCC_ClockConfig+0x3de>
 800b1a2:	bf00      	nop
 800b1a4:	0801cf14 	.word	0x0801cf14
 800b1a8:	40022000 	.word	0x40022000
 800b1ac:	40021000 	.word	0x40021000
 800b1b0:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1b4:	4b7e      	ldr	r3, [pc, #504]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f003 020c 	and.w	r2, r3, #12
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d1e2      	bne.n	800b18c <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d04c      	beq.n	800b26c <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d005      	beq.n	800b1ea <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1de:	4b74      	ldr	r3, [pc, #464]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	4a73      	ldr	r2, [pc, #460]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b1e4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b1e8:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d007      	beq.n	800b206 <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b1f6:	4b6e      	ldr	r3, [pc, #440]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b1fe:	4a6c      	ldr	r2, [pc, #432]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b200:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b204:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d024      	beq.n	800b258 <HAL_RCC_ClockConfig+0x290>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	2b80      	cmp	r3, #128	; 0x80
 800b214:	d020      	beq.n	800b258 <HAL_RCC_ClockConfig+0x290>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	2b90      	cmp	r3, #144	; 0x90
 800b21c:	d01c      	beq.n	800b258 <HAL_RCC_ClockConfig+0x290>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	689b      	ldr	r3, [r3, #8]
 800b222:	2ba0      	cmp	r3, #160	; 0xa0
 800b224:	d018      	beq.n	800b258 <HAL_RCC_ClockConfig+0x290>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	2bb0      	cmp	r3, #176	; 0xb0
 800b22c:	d014      	beq.n	800b258 <HAL_RCC_ClockConfig+0x290>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	2bc0      	cmp	r3, #192	; 0xc0
 800b234:	d010      	beq.n	800b258 <HAL_RCC_ClockConfig+0x290>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	2bd0      	cmp	r3, #208	; 0xd0
 800b23c:	d00c      	beq.n	800b258 <HAL_RCC_ClockConfig+0x290>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	2be0      	cmp	r3, #224	; 0xe0
 800b244:	d008      	beq.n	800b258 <HAL_RCC_ClockConfig+0x290>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	2bf0      	cmp	r3, #240	; 0xf0
 800b24c:	d004      	beq.n	800b258 <HAL_RCC_ClockConfig+0x290>
 800b24e:	f240 317b 	movw	r1, #891	; 0x37b
 800b252:	4858      	ldr	r0, [pc, #352]	; (800b3b4 <HAL_RCC_ClockConfig+0x3ec>)
 800b254:	f7f7 f9ec 	bl	8002630 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b258:	4b55      	ldr	r3, [pc, #340]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	4952      	ldr	r1, [pc, #328]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b266:	4313      	orrs	r3, r2
 800b268:	608b      	str	r3, [r1, #8]
 800b26a:	e008      	b.n	800b27e <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	2b80      	cmp	r3, #128	; 0x80
 800b270:	d105      	bne.n	800b27e <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b272:	4b4f      	ldr	r3, [pc, #316]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	4a4e      	ldr	r2, [pc, #312]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b278:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b27c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b27e:	4b4e      	ldr	r3, [pc, #312]	; (800b3b8 <HAL_RCC_ClockConfig+0x3f0>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 030f 	and.w	r3, r3, #15
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d21d      	bcs.n	800b2c8 <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b28c:	4b4a      	ldr	r3, [pc, #296]	; (800b3b8 <HAL_RCC_ClockConfig+0x3f0>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f023 020f 	bic.w	r2, r3, #15
 800b294:	4948      	ldr	r1, [pc, #288]	; (800b3b8 <HAL_RCC_ClockConfig+0x3f0>)
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	4313      	orrs	r3, r2
 800b29a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b29c:	f7f8 ffc6 	bl	800422c <HAL_GetTick>
 800b2a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2a2:	e00a      	b.n	800b2ba <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2a4:	f7f8 ffc2 	bl	800422c <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d901      	bls.n	800b2ba <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	e075      	b.n	800b3a6 <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2ba:	4b3f      	ldr	r3, [pc, #252]	; (800b3b8 <HAL_RCC_ClockConfig+0x3f0>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 030f 	and.w	r3, r3, #15
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d1ed      	bne.n	800b2a4 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0304 	and.w	r3, r3, #4
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d025      	beq.n	800b320 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d018      	beq.n	800b30e <HAL_RCC_ClockConfig+0x346>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e4:	d013      	beq.n	800b30e <HAL_RCC_ClockConfig+0x346>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b2ee:	d00e      	beq.n	800b30e <HAL_RCC_ClockConfig+0x346>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b2f8:	d009      	beq.n	800b30e <HAL_RCC_ClockConfig+0x346>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b302:	d004      	beq.n	800b30e <HAL_RCC_ClockConfig+0x346>
 800b304:	f240 319d 	movw	r1, #925	; 0x39d
 800b308:	482a      	ldr	r0, [pc, #168]	; (800b3b4 <HAL_RCC_ClockConfig+0x3ec>)
 800b30a:	f7f7 f991 	bl	8002630 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b30e:	4b28      	ldr	r3, [pc, #160]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	4925      	ldr	r1, [pc, #148]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b31c:	4313      	orrs	r3, r2
 800b31e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0308 	and.w	r3, r3, #8
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d026      	beq.n	800b37a <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d018      	beq.n	800b366 <HAL_RCC_ClockConfig+0x39e>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	691b      	ldr	r3, [r3, #16]
 800b338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b33c:	d013      	beq.n	800b366 <HAL_RCC_ClockConfig+0x39e>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b346:	d00e      	beq.n	800b366 <HAL_RCC_ClockConfig+0x39e>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b350:	d009      	beq.n	800b366 <HAL_RCC_ClockConfig+0x39e>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b35a:	d004      	beq.n	800b366 <HAL_RCC_ClockConfig+0x39e>
 800b35c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800b360:	4814      	ldr	r0, [pc, #80]	; (800b3b4 <HAL_RCC_ClockConfig+0x3ec>)
 800b362:	f7f7 f965 	bl	8002630 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b366:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	00db      	lsls	r3, r3, #3
 800b374:	490e      	ldr	r1, [pc, #56]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b376:	4313      	orrs	r3, r2
 800b378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b37a:	f000 f825 	bl	800b3c8 <HAL_RCC_GetSysClockFreq>
 800b37e:	4602      	mov	r2, r0
 800b380:	4b0b      	ldr	r3, [pc, #44]	; (800b3b0 <HAL_RCC_ClockConfig+0x3e8>)
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	091b      	lsrs	r3, r3, #4
 800b386:	f003 030f 	and.w	r3, r3, #15
 800b38a:	490c      	ldr	r1, [pc, #48]	; (800b3bc <HAL_RCC_ClockConfig+0x3f4>)
 800b38c:	5ccb      	ldrb	r3, [r1, r3]
 800b38e:	f003 031f 	and.w	r3, r3, #31
 800b392:	fa22 f303 	lsr.w	r3, r2, r3
 800b396:	4a0a      	ldr	r2, [pc, #40]	; (800b3c0 <HAL_RCC_ClockConfig+0x3f8>)
 800b398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b39a:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <HAL_RCC_ClockConfig+0x3fc>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7f8 fef8 	bl	8004194 <HAL_InitTick>
 800b3a4:	4603      	mov	r3, r0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	40021000 	.word	0x40021000
 800b3b4:	0801cf14 	.word	0x0801cf14
 800b3b8:	40022000 	.word	0x40022000
 800b3bc:	0801d270 	.word	0x0801d270
 800b3c0:	20000000 	.word	0x20000000
 800b3c4:	20000004 	.word	0x20000004

0800b3c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b3ce:	4b2c      	ldr	r3, [pc, #176]	; (800b480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	f003 030c 	and.w	r3, r3, #12
 800b3d6:	2b04      	cmp	r3, #4
 800b3d8:	d102      	bne.n	800b3e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b3da:	4b2a      	ldr	r3, [pc, #168]	; (800b484 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b3dc:	613b      	str	r3, [r7, #16]
 800b3de:	e047      	b.n	800b470 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b3e0:	4b27      	ldr	r3, [pc, #156]	; (800b480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f003 030c 	and.w	r3, r3, #12
 800b3e8:	2b08      	cmp	r3, #8
 800b3ea:	d102      	bne.n	800b3f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b3ec:	4b26      	ldr	r3, [pc, #152]	; (800b488 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b3ee:	613b      	str	r3, [r7, #16]
 800b3f0:	e03e      	b.n	800b470 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b3f2:	4b23      	ldr	r3, [pc, #140]	; (800b480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	f003 030c 	and.w	r3, r3, #12
 800b3fa:	2b0c      	cmp	r3, #12
 800b3fc:	d136      	bne.n	800b46c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b3fe:	4b20      	ldr	r3, [pc, #128]	; (800b480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	f003 0303 	and.w	r3, r3, #3
 800b406:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b408:	4b1d      	ldr	r3, [pc, #116]	; (800b480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	091b      	lsrs	r3, r3, #4
 800b40e:	f003 030f 	and.w	r3, r3, #15
 800b412:	3301      	adds	r3, #1
 800b414:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2b03      	cmp	r3, #3
 800b41a:	d10c      	bne.n	800b436 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b41c:	4a1a      	ldr	r2, [pc, #104]	; (800b488 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	fbb2 f3f3 	udiv	r3, r2, r3
 800b424:	4a16      	ldr	r2, [pc, #88]	; (800b480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b426:	68d2      	ldr	r2, [r2, #12]
 800b428:	0a12      	lsrs	r2, r2, #8
 800b42a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b42e:	fb02 f303 	mul.w	r3, r2, r3
 800b432:	617b      	str	r3, [r7, #20]
      break;
 800b434:	e00c      	b.n	800b450 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b436:	4a13      	ldr	r2, [pc, #76]	; (800b484 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b43e:	4a10      	ldr	r2, [pc, #64]	; (800b480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b440:	68d2      	ldr	r2, [r2, #12]
 800b442:	0a12      	lsrs	r2, r2, #8
 800b444:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b448:	fb02 f303 	mul.w	r3, r2, r3
 800b44c:	617b      	str	r3, [r7, #20]
      break;
 800b44e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b450:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	0e5b      	lsrs	r3, r3, #25
 800b456:	f003 0303 	and.w	r3, r3, #3
 800b45a:	3301      	adds	r3, #1
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b460:	697a      	ldr	r2, [r7, #20]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	fbb2 f3f3 	udiv	r3, r2, r3
 800b468:	613b      	str	r3, [r7, #16]
 800b46a:	e001      	b.n	800b470 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b46c:	2300      	movs	r3, #0
 800b46e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b470:	693b      	ldr	r3, [r7, #16]
}
 800b472:	4618      	mov	r0, r3
 800b474:	371c      	adds	r7, #28
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	40021000 	.word	0x40021000
 800b484:	00f42400 	.word	0x00f42400
 800b488:	007a1200 	.word	0x007a1200

0800b48c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b48c:	b480      	push	{r7}
 800b48e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b490:	4b03      	ldr	r3, [pc, #12]	; (800b4a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b492:	681b      	ldr	r3, [r3, #0]
}
 800b494:	4618      	mov	r0, r3
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	20000000 	.word	0x20000000

0800b4a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b4a8:	f7ff fff0 	bl	800b48c <HAL_RCC_GetHCLKFreq>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	0a1b      	lsrs	r3, r3, #8
 800b4b4:	f003 0307 	and.w	r3, r3, #7
 800b4b8:	4904      	ldr	r1, [pc, #16]	; (800b4cc <HAL_RCC_GetPCLK1Freq+0x28>)
 800b4ba:	5ccb      	ldrb	r3, [r1, r3]
 800b4bc:	f003 031f 	and.w	r3, r3, #31
 800b4c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	40021000 	.word	0x40021000
 800b4cc:	0801d280 	.word	0x0801d280

0800b4d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b4d4:	f7ff ffda 	bl	800b48c <HAL_RCC_GetHCLKFreq>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	0adb      	lsrs	r3, r3, #11
 800b4e0:	f003 0307 	and.w	r3, r3, #7
 800b4e4:	4904      	ldr	r1, [pc, #16]	; (800b4f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b4e6:	5ccb      	ldrb	r3, [r1, r3]
 800b4e8:	f003 031f 	and.w	r3, r3, #31
 800b4ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	40021000 	.word	0x40021000
 800b4f8:	0801d280 	.word	0x0801d280

0800b4fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b087      	sub	sp, #28
 800b500:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b502:	4b1e      	ldr	r3, [pc, #120]	; (800b57c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	f003 0303 	and.w	r3, r3, #3
 800b50a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b50c:	4b1b      	ldr	r3, [pc, #108]	; (800b57c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	091b      	lsrs	r3, r3, #4
 800b512:	f003 030f 	and.w	r3, r3, #15
 800b516:	3301      	adds	r3, #1
 800b518:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	d10c      	bne.n	800b53a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b520:	4a17      	ldr	r2, [pc, #92]	; (800b580 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	fbb2 f3f3 	udiv	r3, r2, r3
 800b528:	4a14      	ldr	r2, [pc, #80]	; (800b57c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b52a:	68d2      	ldr	r2, [r2, #12]
 800b52c:	0a12      	lsrs	r2, r2, #8
 800b52e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b532:	fb02 f303 	mul.w	r3, r2, r3
 800b536:	617b      	str	r3, [r7, #20]
    break;
 800b538:	e00c      	b.n	800b554 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b53a:	4a12      	ldr	r2, [pc, #72]	; (800b584 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b542:	4a0e      	ldr	r2, [pc, #56]	; (800b57c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b544:	68d2      	ldr	r2, [r2, #12]
 800b546:	0a12      	lsrs	r2, r2, #8
 800b548:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b54c:	fb02 f303 	mul.w	r3, r2, r3
 800b550:	617b      	str	r3, [r7, #20]
    break;
 800b552:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b554:	4b09      	ldr	r3, [pc, #36]	; (800b57c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	0e5b      	lsrs	r3, r3, #25
 800b55a:	f003 0303 	and.w	r3, r3, #3
 800b55e:	3301      	adds	r3, #1
 800b560:	005b      	lsls	r3, r3, #1
 800b562:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	fbb2 f3f3 	udiv	r3, r2, r3
 800b56c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b56e:	687b      	ldr	r3, [r7, #4]
}
 800b570:	4618      	mov	r0, r3
 800b572:	371c      	adds	r7, #28
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	40021000 	.word	0x40021000
 800b580:	007a1200 	.word	0x007a1200
 800b584:	00f42400 	.word	0x00f42400

0800b588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b590:	2300      	movs	r3, #0
 800b592:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b594:	2300      	movs	r3, #0
 800b596:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 0301 	and.w	r3, r3, #1
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d175      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 0302 	and.w	r3, r3, #2
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d16f      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 0304 	and.w	r3, r3, #4
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d169      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0308 	and.w	r3, r3, #8
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d163      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 0310 	and.w	r3, r3, #16
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d15d      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f003 0320 	and.w	r3, r3, #32
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d157      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d151      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d14b      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b600:	2b00      	cmp	r3, #0
 800b602:	d145      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d13f      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d139      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b624:	2b00      	cmp	r3, #0
 800b626:	d133      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b630:	2b00      	cmp	r3, #0
 800b632:	d12d      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d127      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d121      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d11b      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d115      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10f      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d109      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d103      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800b688:	2183      	movs	r1, #131	; 0x83
 800b68a:	4855      	ldr	r0, [pc, #340]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b68c:	f7f6 ffd0 	bl	8002630 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 80b2 	beq.w	800b802 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d012      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6b2:	d00d      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6bc:	d008      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6c6:	d003      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800b6c8:	218b      	movs	r1, #139	; 0x8b
 800b6ca:	4845      	ldr	r0, [pc, #276]	; (800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800b6cc:	f7f6 ffb0 	bl	8002630 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6d0:	4b44      	ldr	r3, [pc, #272]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10d      	bne.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6dc:	4b41      	ldr	r3, [pc, #260]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b6de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e0:	4a40      	ldr	r2, [pc, #256]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b6e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b6e8:	4b3e      	ldr	r3, [pc, #248]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6f0:	60bb      	str	r3, [r7, #8]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6f8:	4b3b      	ldr	r3, [pc, #236]	; (800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a3a      	ldr	r2, [pc, #232]	; (800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b6fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b704:	f7f8 fd92 	bl	800422c <HAL_GetTick>
 800b708:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b70a:	e009      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b70c:	f7f8 fd8e 	bl	800422c <HAL_GetTick>
 800b710:	4602      	mov	r2, r0
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	2b02      	cmp	r3, #2
 800b718:	d902      	bls.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	74fb      	strb	r3, [r7, #19]
        break;
 800b71e:	e005      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b720:	4b31      	ldr	r3, [pc, #196]	; (800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0ef      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 800b72c:	7cfb      	ldrb	r3, [r7, #19]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d15c      	bne.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b732:	4b2c      	ldr	r3, [pc, #176]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b73c:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d01e      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d019      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b74e:	4b25      	ldr	r3, [pc, #148]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b758:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b75a:	4b22      	ldr	r3, [pc, #136]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b75c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b760:	4a20      	ldr	r2, [pc, #128]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b76a:	4b1e      	ldr	r3, [pc, #120]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b770:	4a1c      	ldr	r2, [pc, #112]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b77a:	4a1a      	ldr	r2, [pc, #104]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d016      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b78c:	f7f8 fd4e 	bl	800422c <HAL_GetTick>
 800b790:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b792:	e00b      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b794:	f7f8 fd4a 	bl	800422c <HAL_GetTick>
 800b798:	4602      	mov	r2, r0
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	1ad3      	subs	r3, r2, r3
 800b79e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d902      	bls.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	74fb      	strb	r3, [r7, #19]
            break;
 800b7aa:	e006      	b.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7ac:	4b0d      	ldr	r3, [pc, #52]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7b2:	f003 0302 	and.w	r3, r3, #2
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d0ec      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b7ba:	7cfb      	ldrb	r3, [r7, #19]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10b      	bne.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7c0:	4b08      	ldr	r3, [pc, #32]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b7c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ce:	4905      	ldr	r1, [pc, #20]	; (800b7e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b7d6:	e00b      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b7d8:	7cfb      	ldrb	r3, [r7, #19]
 800b7da:	74bb      	strb	r3, [r7, #18]
 800b7dc:	e008      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800b7de:	bf00      	nop
 800b7e0:	0801cf4c 	.word	0x0801cf4c
 800b7e4:	40021000 	.word	0x40021000
 800b7e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7ec:	7cfb      	ldrb	r3, [r7, #19]
 800b7ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b7f0:	7c7b      	ldrb	r3, [r7, #17]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d105      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7f6:	4b9a      	ldr	r3, [pc, #616]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7fa:	4a99      	ldr	r2, [pc, #612]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b7fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b800:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0301 	and.w	r3, r3, #1
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d01e      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00f      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d00b      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	2b03      	cmp	r3, #3
 800b824:	d007      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d003      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800b82e:	21e0      	movs	r1, #224	; 0xe0
 800b830:	488c      	ldr	r0, [pc, #560]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b832:	f7f6 fefd 	bl	8002630 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b836:	4b8a      	ldr	r3, [pc, #552]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b83c:	f023 0203 	bic.w	r2, r3, #3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	4986      	ldr	r1, [pc, #536]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b846:	4313      	orrs	r3, r2
 800b848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0302 	and.w	r3, r3, #2
 800b854:	2b00      	cmp	r3, #0
 800b856:	d01e      	beq.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00f      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	2b04      	cmp	r3, #4
 800b866:	d00b      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	2b0c      	cmp	r3, #12
 800b86e:	d007      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	2b08      	cmp	r3, #8
 800b876:	d003      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800b878:	21ea      	movs	r1, #234	; 0xea
 800b87a:	487a      	ldr	r0, [pc, #488]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b87c:	f7f6 fed8 	bl	8002630 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b880:	4b77      	ldr	r3, [pc, #476]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b886:	f023 020c 	bic.w	r2, r3, #12
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	689b      	ldr	r3, [r3, #8]
 800b88e:	4974      	ldr	r1, [pc, #464]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b890:	4313      	orrs	r3, r2
 800b892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 0304 	and.w	r3, r3, #4
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d01e      	beq.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d00f      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	2b10      	cmp	r3, #16
 800b8b0:	d00b      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	2b30      	cmp	r3, #48	; 0x30
 800b8b8:	d007      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	2b20      	cmp	r3, #32
 800b8c0:	d003      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b8c2:	21f4      	movs	r1, #244	; 0xf4
 800b8c4:	4867      	ldr	r0, [pc, #412]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b8c6:	f7f6 feb3 	bl	8002630 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b8ca:	4b65      	ldr	r3, [pc, #404]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	4961      	ldr	r1, [pc, #388]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 0308 	and.w	r3, r3, #8
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d01e      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00f      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	691b      	ldr	r3, [r3, #16]
 800b8f8:	2b40      	cmp	r3, #64	; 0x40
 800b8fa:	d00b      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	2bc0      	cmp	r3, #192	; 0xc0
 800b902:	d007      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	2b80      	cmp	r3, #128	; 0x80
 800b90a:	d003      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800b90c:	21ff      	movs	r1, #255	; 0xff
 800b90e:	4855      	ldr	r0, [pc, #340]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b910:	f7f6 fe8e 	bl	8002630 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b914:	4b52      	ldr	r3, [pc, #328]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b91a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	691b      	ldr	r3, [r3, #16]
 800b922:	494f      	ldr	r1, [pc, #316]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b924:	4313      	orrs	r3, r2
 800b926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f003 0310 	and.w	r3, r3, #16
 800b932:	2b00      	cmp	r3, #0
 800b934:	d022      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	695b      	ldr	r3, [r3, #20]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d013      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b946:	d00e      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	695b      	ldr	r3, [r3, #20]
 800b94c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b950:	d009      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b95a:	d004      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b95c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800b960:	4840      	ldr	r0, [pc, #256]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b962:	f7f6 fe65 	bl	8002630 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b966:	4b3e      	ldr	r3, [pc, #248]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b96c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	493a      	ldr	r1, [pc, #232]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b976:	4313      	orrs	r3, r2
 800b978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0320 	and.w	r3, r3, #32
 800b984:	2b00      	cmp	r3, #0
 800b986:	d022      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d013      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b998:	d00e      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9a2:	d009      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9ac:	d004      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800b9ae:	f44f 718c 	mov.w	r1, #280	; 0x118
 800b9b2:	482c      	ldr	r0, [pc, #176]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b9b4:	f7f6 fe3c 	bl	8002630 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b9b8:	4b29      	ldr	r3, [pc, #164]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b9ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	4926      	ldr	r1, [pc, #152]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d01d      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	69db      	ldr	r3, [r3, #28]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00e      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9ea:	d009      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	69db      	ldr	r3, [r3, #28]
 800b9f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9f4:	d004      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b9f6:	f44f 7191 	mov.w	r1, #290	; 0x122
 800b9fa:	481a      	ldr	r0, [pc, #104]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800b9fc:	f7f6 fe18 	bl	8002630 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ba00:	4b17      	ldr	r3, [pc, #92]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ba02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	4914      	ldr	r1, [pc, #80]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ba10:	4313      	orrs	r3, r2
 800ba12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d022      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00e      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba32:	d009      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a1b      	ldr	r3, [r3, #32]
 800ba38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba3c:	d004      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800ba3e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ba42:	4808      	ldr	r0, [pc, #32]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800ba44:	f7f6 fdf4 	bl	8002630 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ba48:	4b05      	ldr	r3, [pc, #20]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ba4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	4902      	ldr	r1, [pc, #8]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ba5e:	e003      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ba60:	40021000 	.word	0x40021000
 800ba64:	0801cf4c 	.word	0x0801cf4c
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d01d      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00e      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x512>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba84:	d009      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x512>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba8e:	d004      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x512>
 800ba90:	f44f 719b 	mov.w	r1, #310	; 0x136
 800ba94:	489e      	ldr	r0, [pc, #632]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800ba96:	f7f6 fdcb 	bl	8002630 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ba9a:	4b9e      	ldr	r3, [pc, #632]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800ba9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	499a      	ldr	r1, [pc, #616]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800baaa:	4313      	orrs	r3, r2
 800baac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d01b      	beq.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00c      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x556>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d008      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x556>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d004      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x556>
 800bad4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800bad8:	488d      	ldr	r0, [pc, #564]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800bada:	f7f6 fda9 	bl	8002630 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bade:	4b8d      	ldr	r3, [pc, #564]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bae0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bae4:	f023 0203 	bic.w	r2, r3, #3
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baec:	4989      	ldr	r1, [pc, #548]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800baee:	4313      	orrs	r3, r2
 800baf0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d022      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d013      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb10:	d00e      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800bb1a:	d009      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800bb24:	d004      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800bb26:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800bb2a:	4879      	ldr	r0, [pc, #484]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800bb2c:	f7f6 fd80 	bl	8002630 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb30:	4b78      	ldr	r3, [pc, #480]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bb32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb36:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3e:	4975      	ldr	r1, [pc, #468]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bb40:	4313      	orrs	r3, r2
 800bb42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d02d      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d013      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb62:	d00e      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb6c:	d009      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb76:	d004      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 800bb78:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800bb7c:	4864      	ldr	r0, [pc, #400]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800bb7e:	f7f6 fd57 	bl	8002630 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb82:	4b64      	ldr	r3, [pc, #400]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bb84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb90:	4960      	ldr	r1, [pc, #384]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bb92:	4313      	orrs	r3, r2
 800bb94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bba0:	d105      	bne.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x626>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bba2:	4b5c      	ldr	r3, [pc, #368]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	4a5b      	ldr	r2, [pc, #364]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d02d      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d013      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbca:	d00e      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bbd4:	d009      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbda:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bbde:	d004      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x662>
 800bbe0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800bbe4:	484a      	ldr	r0, [pc, #296]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800bbe6:	f7f6 fd23 	bl	8002630 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bbea:	4b4a      	ldr	r3, [pc, #296]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bbec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf8:	4946      	ldr	r1, [pc, #280]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc08:	d105      	bne.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc0a:	4b42      	ldr	r3, [pc, #264]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	4a41      	ldr	r2, [pc, #260]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bc10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc14:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d028      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00e      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc32:	d009      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc3c:	d004      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800bc3e:	f240 1179 	movw	r1, #377	; 0x179
 800bc42:	4833      	ldr	r0, [pc, #204]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800bc44:	f7f6 fcf4 	bl	8002630 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc48:	4b32      	ldr	r3, [pc, #200]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bc4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc56:	492f      	ldr	r1, [pc, #188]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc66:	d105      	bne.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc68:	4b2a      	ldr	r3, [pc, #168]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	4a29      	ldr	r2, [pc, #164]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bc6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d023      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x740>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d009      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x714>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc90:	d004      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x714>
 800bc92:	f240 118b 	movw	r1, #395	; 0x18b
 800bc96:	481e      	ldr	r0, [pc, #120]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800bc98:	f7f6 fcca 	bl	8002630 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc9c:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bc9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcaa:	491a      	ldr	r1, [pc, #104]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bcac:	4313      	orrs	r3, r2
 800bcae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcba:	d105      	bne.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bcbc:	4b15      	ldr	r3, [pc, #84]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	4a14      	ldr	r2, [pc, #80]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bcc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcc6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d028      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d009      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bce4:	d004      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x768>
 800bce6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800bcea:	4809      	ldr	r0, [pc, #36]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x788>)
 800bcec:	f7f6 fca0 	bl	8002630 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bcf0:	4b08      	ldr	r3, [pc, #32]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bcf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfe:	4905      	ldr	r1, [pc, #20]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800bd00:	4313      	orrs	r3, r2
 800bd02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd0e:	e003      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x790>
 800bd10:	0801cf4c 	.word	0x0801cf4c
 800bd14:	40021000 	.word	0x40021000
 800bd18:	d105      	bne.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd1a:	4b4c      	ldr	r3, [pc, #304]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	4a4b      	ldr	r2, [pc, #300]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800bd20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd24:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d028      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00e      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd42:	d009      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd4c:	d004      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 800bd4e:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800bd52:	483f      	ldr	r0, [pc, #252]	; (800be50 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800bd54:	f7f6 fc6c 	bl	8002630 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bd58:	4b3c      	ldr	r3, [pc, #240]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800bd5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd66:	4939      	ldr	r1, [pc, #228]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd76:	d105      	bne.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bd78:	4b34      	ldr	r3, [pc, #208]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	4a33      	ldr	r2, [pc, #204]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800bd7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d028      	beq.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x85a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d00e      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bda0:	d009      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bda6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdaa:	d004      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800bdac:	f240 11b9 	movw	r1, #441	; 0x1b9
 800bdb0:	4827      	ldr	r0, [pc, #156]	; (800be50 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800bdb2:	f7f6 fc3d 	bl	8002630 <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bdb6:	4b25      	ldr	r3, [pc, #148]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800bdb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdbc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdc4:	4921      	ldr	r1, [pc, #132]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdd4:	d105      	bne.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bdd6:	4b1d      	ldr	r3, [pc, #116]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	4a1c      	ldr	r2, [pc, #112]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800bddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bde0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d028      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdf6:	d00d      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d009      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be08:	d004      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800be0a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800be0e:	4810      	ldr	r0, [pc, #64]	; (800be50 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800be10:	f7f6 fc0e 	bl	8002630 <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800be14:	4b0d      	ldr	r3, [pc, #52]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800be16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be22:	490a      	ldr	r1, [pc, #40]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800be24:	4313      	orrs	r3, r2
 800be26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be32:	d105      	bne.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be34:	4b05      	ldr	r3, [pc, #20]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	4a04      	ldr	r2, [pc, #16]	; (800be4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800be3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800be40:	7cbb      	ldrb	r3, [r7, #18]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	40021000 	.word	0x40021000
 800be50:	0801cf4c 	.word	0x0801cf4c

0800be54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e1ed      	b.n	800c242 <HAL_SPI_Init+0x3ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a7e      	ldr	r2, [pc, #504]	; (800c064 <HAL_SPI_Init+0x210>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d013      	beq.n	800be98 <HAL_SPI_Init+0x44>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a7c      	ldr	r2, [pc, #496]	; (800c068 <HAL_SPI_Init+0x214>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d00e      	beq.n	800be98 <HAL_SPI_Init+0x44>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a7b      	ldr	r2, [pc, #492]	; (800c06c <HAL_SPI_Init+0x218>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d009      	beq.n	800be98 <HAL_SPI_Init+0x44>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a79      	ldr	r2, [pc, #484]	; (800c070 <HAL_SPI_Init+0x21c>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d004      	beq.n	800be98 <HAL_SPI_Init+0x44>
 800be8e:	f240 1145 	movw	r1, #325	; 0x145
 800be92:	4878      	ldr	r0, [pc, #480]	; (800c074 <HAL_SPI_Init+0x220>)
 800be94:	f7f6 fbcc 	bl	8002630 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d009      	beq.n	800beb4 <HAL_SPI_Init+0x60>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bea8:	d004      	beq.n	800beb4 <HAL_SPI_Init+0x60>
 800beaa:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800beae:	4871      	ldr	r0, [pc, #452]	; (800c074 <HAL_SPI_Init+0x220>)
 800beb0:	f7f6 fbbe 	bl	8002630 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00e      	beq.n	800beda <HAL_SPI_Init+0x86>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bec4:	d009      	beq.n	800beda <HAL_SPI_Init+0x86>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bece:	d004      	beq.n	800beda <HAL_SPI_Init+0x86>
 800bed0:	f240 1147 	movw	r1, #327	; 0x147
 800bed4:	4867      	ldr	r0, [pc, #412]	; (800c074 <HAL_SPI_Init+0x220>)
 800bed6:	f7f6 fbab 	bl	8002630 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bee2:	d040      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800beec:	d03b      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 800bef6:	d036      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf00:	d031      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 800bf0a:	d02c      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800bf14:	d027      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	68db      	ldr	r3, [r3, #12]
 800bf1a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800bf1e:	d022      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf28:	d01d      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf32:	d018      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bf3c:	d013      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68db      	ldr	r3, [r3, #12]
 800bf42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800bf46:	d00e      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf50:	d009      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf5a:	d004      	beq.n	800bf66 <HAL_SPI_Init+0x112>
 800bf5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800bf60:	4844      	ldr	r0, [pc, #272]	; (800c074 <HAL_SPI_Init+0x220>)
 800bf62:	f7f6 fb65 	bl	8002630 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	699b      	ldr	r3, [r3, #24]
 800bf6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf6e:	d00d      	beq.n	800bf8c <HAL_SPI_Init+0x138>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	699b      	ldr	r3, [r3, #24]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d009      	beq.n	800bf8c <HAL_SPI_Init+0x138>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bf80:	d004      	beq.n	800bf8c <HAL_SPI_Init+0x138>
 800bf82:	f240 1149 	movw	r1, #329	; 0x149
 800bf86:	483b      	ldr	r0, [pc, #236]	; (800c074 <HAL_SPI_Init+0x220>)
 800bf88:	f7f6 fb52 	bl	8002630 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf90:	2b08      	cmp	r3, #8
 800bf92:	d008      	beq.n	800bfa6 <HAL_SPI_Init+0x152>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d004      	beq.n	800bfa6 <HAL_SPI_Init+0x152>
 800bf9c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800bfa0:	4834      	ldr	r0, [pc, #208]	; (800c074 <HAL_SPI_Init+0x220>)
 800bfa2:	f7f6 fb45 	bl	8002630 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	69db      	ldr	r3, [r3, #28]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d020      	beq.n	800bff0 <HAL_SPI_Init+0x19c>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	69db      	ldr	r3, [r3, #28]
 800bfb2:	2b08      	cmp	r3, #8
 800bfb4:	d01c      	beq.n	800bff0 <HAL_SPI_Init+0x19c>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	69db      	ldr	r3, [r3, #28]
 800bfba:	2b10      	cmp	r3, #16
 800bfbc:	d018      	beq.n	800bff0 <HAL_SPI_Init+0x19c>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	69db      	ldr	r3, [r3, #28]
 800bfc2:	2b18      	cmp	r3, #24
 800bfc4:	d014      	beq.n	800bff0 <HAL_SPI_Init+0x19c>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	69db      	ldr	r3, [r3, #28]
 800bfca:	2b20      	cmp	r3, #32
 800bfcc:	d010      	beq.n	800bff0 <HAL_SPI_Init+0x19c>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	69db      	ldr	r3, [r3, #28]
 800bfd2:	2b28      	cmp	r3, #40	; 0x28
 800bfd4:	d00c      	beq.n	800bff0 <HAL_SPI_Init+0x19c>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	69db      	ldr	r3, [r3, #28]
 800bfda:	2b30      	cmp	r3, #48	; 0x30
 800bfdc:	d008      	beq.n	800bff0 <HAL_SPI_Init+0x19c>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	69db      	ldr	r3, [r3, #28]
 800bfe2:	2b38      	cmp	r3, #56	; 0x38
 800bfe4:	d004      	beq.n	800bff0 <HAL_SPI_Init+0x19c>
 800bfe6:	f240 114b 	movw	r1, #331	; 0x14b
 800bfea:	4822      	ldr	r0, [pc, #136]	; (800c074 <HAL_SPI_Init+0x220>)
 800bfec:	f7f6 fb20 	bl	8002630 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a1b      	ldr	r3, [r3, #32]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d008      	beq.n	800c00a <HAL_SPI_Init+0x1b6>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a1b      	ldr	r3, [r3, #32]
 800bffc:	2b80      	cmp	r3, #128	; 0x80
 800bffe:	d004      	beq.n	800c00a <HAL_SPI_Init+0x1b6>
 800c000:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800c004:	481b      	ldr	r0, [pc, #108]	; (800c074 <HAL_SPI_Init+0x220>)
 800c006:	f7f6 fb13 	bl	8002630 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d008      	beq.n	800c024 <HAL_SPI_Init+0x1d0>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c016:	2b10      	cmp	r3, #16
 800c018:	d004      	beq.n	800c024 <HAL_SPI_Init+0x1d0>
 800c01a:	f240 114d 	movw	r1, #333	; 0x14d
 800c01e:	4815      	ldr	r0, [pc, #84]	; (800c074 <HAL_SPI_Init+0x220>)
 800c020:	f7f6 fb06 	bl	8002630 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d154      	bne.n	800c0d6 <HAL_SPI_Init+0x282>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d008      	beq.n	800c046 <HAL_SPI_Init+0x1f2>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d004      	beq.n	800c046 <HAL_SPI_Init+0x1f2>
 800c03c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800c040:	480c      	ldr	r0, [pc, #48]	; (800c074 <HAL_SPI_Init+0x220>)
 800c042:	f7f6 faf5 	bl	8002630 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	695b      	ldr	r3, [r3, #20]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d014      	beq.n	800c078 <HAL_SPI_Init+0x224>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	695b      	ldr	r3, [r3, #20]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d010      	beq.n	800c078 <HAL_SPI_Init+0x224>
 800c056:	f240 1151 	movw	r1, #337	; 0x151
 800c05a:	4806      	ldr	r0, [pc, #24]	; (800c074 <HAL_SPI_Init+0x220>)
 800c05c:	f7f6 fae8 	bl	8002630 <assert_failed>
 800c060:	e00a      	b.n	800c078 <HAL_SPI_Init+0x224>
 800c062:	bf00      	nop
 800c064:	40013000 	.word	0x40013000
 800c068:	40003800 	.word	0x40003800
 800c06c:	40003c00 	.word	0x40003c00
 800c070:	40013c00 	.word	0x40013c00
 800c074:	0801cf88 	.word	0x0801cf88

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c080:	d125      	bne.n	800c0ce <HAL_SPI_Init+0x27a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d050      	beq.n	800c12c <HAL_SPI_Init+0x2d8>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	69db      	ldr	r3, [r3, #28]
 800c08e:	2b08      	cmp	r3, #8
 800c090:	d04c      	beq.n	800c12c <HAL_SPI_Init+0x2d8>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	69db      	ldr	r3, [r3, #28]
 800c096:	2b10      	cmp	r3, #16
 800c098:	d048      	beq.n	800c12c <HAL_SPI_Init+0x2d8>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	69db      	ldr	r3, [r3, #28]
 800c09e:	2b18      	cmp	r3, #24
 800c0a0:	d044      	beq.n	800c12c <HAL_SPI_Init+0x2d8>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	69db      	ldr	r3, [r3, #28]
 800c0a6:	2b20      	cmp	r3, #32
 800c0a8:	d040      	beq.n	800c12c <HAL_SPI_Init+0x2d8>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	69db      	ldr	r3, [r3, #28]
 800c0ae:	2b28      	cmp	r3, #40	; 0x28
 800c0b0:	d03c      	beq.n	800c12c <HAL_SPI_Init+0x2d8>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	2b30      	cmp	r3, #48	; 0x30
 800c0b8:	d038      	beq.n	800c12c <HAL_SPI_Init+0x2d8>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	2b38      	cmp	r3, #56	; 0x38
 800c0c0:	d034      	beq.n	800c12c <HAL_SPI_Init+0x2d8>
 800c0c2:	f240 1155 	movw	r1, #341	; 0x155
 800c0c6:	4861      	ldr	r0, [pc, #388]	; (800c24c <HAL_SPI_Init+0x3f8>)
 800c0c8:	f7f6 fab2 	bl	8002630 <assert_failed>
 800c0cc:	e02e      	b.n	800c12c <HAL_SPI_Init+0x2d8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	61da      	str	r2, [r3, #28]
 800c0d4:	e02a      	b.n	800c12c <HAL_SPI_Init+0x2d8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	69db      	ldr	r3, [r3, #28]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d020      	beq.n	800c120 <HAL_SPI_Init+0x2cc>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	69db      	ldr	r3, [r3, #28]
 800c0e2:	2b08      	cmp	r3, #8
 800c0e4:	d01c      	beq.n	800c120 <HAL_SPI_Init+0x2cc>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	69db      	ldr	r3, [r3, #28]
 800c0ea:	2b10      	cmp	r3, #16
 800c0ec:	d018      	beq.n	800c120 <HAL_SPI_Init+0x2cc>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	69db      	ldr	r3, [r3, #28]
 800c0f2:	2b18      	cmp	r3, #24
 800c0f4:	d014      	beq.n	800c120 <HAL_SPI_Init+0x2cc>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	69db      	ldr	r3, [r3, #28]
 800c0fa:	2b20      	cmp	r3, #32
 800c0fc:	d010      	beq.n	800c120 <HAL_SPI_Init+0x2cc>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	69db      	ldr	r3, [r3, #28]
 800c102:	2b28      	cmp	r3, #40	; 0x28
 800c104:	d00c      	beq.n	800c120 <HAL_SPI_Init+0x2cc>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	69db      	ldr	r3, [r3, #28]
 800c10a:	2b30      	cmp	r3, #48	; 0x30
 800c10c:	d008      	beq.n	800c120 <HAL_SPI_Init+0x2cc>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	69db      	ldr	r3, [r3, #28]
 800c112:	2b38      	cmp	r3, #56	; 0x38
 800c114:	d004      	beq.n	800c120 <HAL_SPI_Init+0x2cc>
 800c116:	f240 115f 	movw	r1, #351	; 0x15f
 800c11a:	484c      	ldr	r0, [pc, #304]	; (800c24c <HAL_SPI_Init+0x3f8>)
 800c11c:	f7f6 fa88 	bl	8002630 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2200      	movs	r2, #0
 800c12a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d106      	bne.n	800c14c <HAL_SPI_Init+0x2f8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7f6 fb8e 	bl	8002868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2202      	movs	r2, #2
 800c150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c162:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c16c:	d902      	bls.n	800c174 <HAL_SPI_Init+0x320>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c16e:	2300      	movs	r3, #0
 800c170:	60fb      	str	r3, [r7, #12]
 800c172:	e002      	b.n	800c17a <HAL_SPI_Init+0x326>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c178:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c182:	d007      	beq.n	800c194 <HAL_SPI_Init+0x340>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c18c:	d002      	beq.n	800c194 <HAL_SPI_Init+0x340>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c1a4:	431a      	orrs	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	f003 0302 	and.w	r3, r3, #2
 800c1ae:	431a      	orrs	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	f003 0301 	and.w	r3, r3, #1
 800c1b8:	431a      	orrs	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	699b      	ldr	r3, [r3, #24]
 800c1be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1c2:	431a      	orrs	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	69db      	ldr	r3, [r3, #28]
 800c1c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1cc:	431a      	orrs	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d6:	ea42 0103 	orr.w	r1, r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	430a      	orrs	r2, r1
 800c1e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	699b      	ldr	r3, [r3, #24]
 800c1ee:	0c1b      	lsrs	r3, r3, #16
 800c1f0:	f003 0204 	and.w	r2, r3, #4
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f8:	f003 0310 	and.w	r3, r3, #16
 800c1fc:	431a      	orrs	r2, r3
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c202:	f003 0308 	and.w	r3, r3, #8
 800c206:	431a      	orrs	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c210:	ea42 0103 	orr.w	r1, r2, r3
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	430a      	orrs	r2, r1
 800c220:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	69da      	ldr	r2, [r3, #28]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c230:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3710      	adds	r7, #16
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	0801cf88 	.word	0x0801cf88

0800c250 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	603b      	str	r3, [r7, #0]
 800c25c:	4613      	mov	r3, r2
 800c25e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d009      	beq.n	800c280 <HAL_SPI_Transmit+0x30>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c274:	d004      	beq.n	800c280 <HAL_SPI_Transmit+0x30>
 800c276:	f44f 714f 	mov.w	r1, #828	; 0x33c
 800c27a:	4886      	ldr	r0, [pc, #536]	; (800c494 <HAL_SPI_Transmit+0x244>)
 800c27c:	f7f6 f9d8 	bl	8002630 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c286:	2b01      	cmp	r3, #1
 800c288:	d101      	bne.n	800c28e <HAL_SPI_Transmit+0x3e>
 800c28a:	2302      	movs	r3, #2
 800c28c:	e15a      	b.n	800c544 <HAL_SPI_Transmit+0x2f4>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c296:	f7f7 ffc9 	bl	800422c <HAL_GetTick>
 800c29a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c29c:	88fb      	ldrh	r3, [r7, #6]
 800c29e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c2a6:	b2db      	uxtb	r3, r3
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d002      	beq.n	800c2b2 <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c2b0:	e13f      	b.n	800c532 <HAL_SPI_Transmit+0x2e2>
  }

  if ((pData == NULL) || (Size == 0U))
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <HAL_SPI_Transmit+0x6e>
 800c2b8:	88fb      	ldrh	r3, [r7, #6]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d102      	bne.n	800c2c4 <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c2c2:	e136      	b.n	800c532 <HAL_SPI_Transmit+0x2e2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2203      	movs	r2, #3
 800c2c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	88fa      	ldrh	r2, [r7, #6]
 800c2dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	88fa      	ldrh	r2, [r7, #6]
 800c2e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c30e:	d10f      	bne.n	800c330 <HAL_SPI_Transmit+0xe0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c31e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c32e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c33a:	2b40      	cmp	r3, #64	; 0x40
 800c33c:	d007      	beq.n	800c34e <HAL_SPI_Transmit+0xfe>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c34c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	68db      	ldr	r3, [r3, #12]
 800c352:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c356:	d94b      	bls.n	800c3f0 <HAL_SPI_Transmit+0x1a0>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <HAL_SPI_Transmit+0x116>
 800c360:	8afb      	ldrh	r3, [r7, #22]
 800c362:	2b01      	cmp	r3, #1
 800c364:	d13e      	bne.n	800c3e4 <HAL_SPI_Transmit+0x194>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36a:	881a      	ldrh	r2, [r3, #0]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c376:	1c9a      	adds	r2, r3, #2
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c380:	b29b      	uxth	r3, r3
 800c382:	3b01      	subs	r3, #1
 800c384:	b29a      	uxth	r2, r3
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c38a:	e02b      	b.n	800c3e4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	f003 0302 	and.w	r3, r3, #2
 800c396:	2b02      	cmp	r3, #2
 800c398:	d112      	bne.n	800c3c0 <HAL_SPI_Transmit+0x170>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c39e:	881a      	ldrh	r2, [r3, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3aa:	1c9a      	adds	r2, r3, #2
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	3b01      	subs	r3, #1
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c3be:	e011      	b.n	800c3e4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3c0:	f7f7 ff34 	bl	800422c <HAL_GetTick>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	1ad3      	subs	r3, r2, r3
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d803      	bhi.n	800c3d8 <HAL_SPI_Transmit+0x188>
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d6:	d102      	bne.n	800c3de <HAL_SPI_Transmit+0x18e>
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d102      	bne.n	800c3e4 <HAL_SPI_Transmit+0x194>
        {
          errorcode = HAL_TIMEOUT;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c3e2:	e0a6      	b.n	800c532 <HAL_SPI_Transmit+0x2e2>
    while (hspi->TxXferCount > 0U)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1ce      	bne.n	800c38c <HAL_SPI_Transmit+0x13c>
 800c3ee:	e07e      	b.n	800c4ee <HAL_SPI_Transmit+0x29e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <HAL_SPI_Transmit+0x1ae>
 800c3f8:	8afb      	ldrh	r3, [r7, #22]
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d172      	bne.n	800c4e4 <HAL_SPI_Transmit+0x294>
    {
      if (hspi->TxXferCount > 1U)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c402:	b29b      	uxth	r3, r3
 800c404:	2b01      	cmp	r3, #1
 800c406:	d912      	bls.n	800c42e <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40c:	881a      	ldrh	r2, [r3, #0]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c418:	1c9a      	adds	r2, r3, #2
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c422:	b29b      	uxth	r3, r3
 800c424:	3b02      	subs	r3, #2
 800c426:	b29a      	uxth	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c42c:	e05a      	b.n	800c4e4 <HAL_SPI_Transmit+0x294>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	330c      	adds	r3, #12
 800c438:	7812      	ldrb	r2, [r2, #0]
 800c43a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c440:	1c5a      	adds	r2, r3, #1
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	3b01      	subs	r3, #1
 800c44e:	b29a      	uxth	r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c454:	e046      	b.n	800c4e4 <HAL_SPI_Transmit+0x294>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	f003 0302 	and.w	r3, r3, #2
 800c460:	2b02      	cmp	r3, #2
 800c462:	d12d      	bne.n	800c4c0 <HAL_SPI_Transmit+0x270>
      {
        if (hspi->TxXferCount > 1U)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c468:	b29b      	uxth	r3, r3
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d914      	bls.n	800c498 <HAL_SPI_Transmit+0x248>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c472:	881a      	ldrh	r2, [r3, #0]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c47e:	1c9a      	adds	r2, r3, #2
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c488:	b29b      	uxth	r3, r3
 800c48a:	3b02      	subs	r3, #2
 800c48c:	b29a      	uxth	r2, r3
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c492:	e027      	b.n	800c4e4 <HAL_SPI_Transmit+0x294>
 800c494:	0801cf88 	.word	0x0801cf88
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	330c      	adds	r3, #12
 800c4a2:	7812      	ldrb	r2, [r2, #0]
 800c4a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4b4:	b29b      	uxth	r3, r3
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	b29a      	uxth	r2, r3
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c4be:	e011      	b.n	800c4e4 <HAL_SPI_Transmit+0x294>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4c0:	f7f7 feb4 	bl	800422c <HAL_GetTick>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d803      	bhi.n	800c4d8 <HAL_SPI_Transmit+0x288>
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d6:	d102      	bne.n	800c4de <HAL_SPI_Transmit+0x28e>
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d102      	bne.n	800c4e4 <HAL_SPI_Transmit+0x294>
        {
          errorcode = HAL_TIMEOUT;
 800c4de:	2303      	movs	r3, #3
 800c4e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c4e2:	e026      	b.n	800c532 <HAL_SPI_Transmit+0x2e2>
    while (hspi->TxXferCount > 0U)
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1b3      	bne.n	800c456 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c4ee:	69ba      	ldr	r2, [r7, #24]
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	68f8      	ldr	r0, [r7, #12]
 800c4f4:	f000 fb66 	bl	800cbc4 <SPI_EndRxTxTransaction>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d002      	beq.n	800c504 <HAL_SPI_Transmit+0x2b4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2220      	movs	r2, #32
 800c502:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10a      	bne.n	800c522 <HAL_SPI_Transmit+0x2d2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c50c:	2300      	movs	r3, #0
 800c50e:	613b      	str	r3, [r7, #16]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	613b      	str	r3, [r7, #16]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	613b      	str	r3, [r7, #16]
 800c520:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c526:	2b00      	cmp	r3, #0
 800c528:	d002      	beq.n	800c530 <HAL_SPI_Transmit+0x2e0>
  {
    errorcode = HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	77fb      	strb	r3, [r7, #31]
 800c52e:	e000      	b.n	800c532 <HAL_SPI_Transmit+0x2e2>
  }

error:
 800c530:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c542:	7ffb      	ldrb	r3, [r7, #31]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3720      	adds	r7, #32
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08a      	sub	sp, #40	; 0x28
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
 800c558:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c55a:	2301      	movs	r3, #1
 800c55c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c55e:	2300      	movs	r3, #0
 800c560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d004      	beq.n	800c576 <HAL_SPI_TransmitReceive+0x2a>
 800c56c:	f240 41f3 	movw	r1, #1267	; 0x4f3
 800c570:	4885      	ldr	r0, [pc, #532]	; (800c788 <HAL_SPI_TransmitReceive+0x23c>)
 800c572:	f7f6 f85d 	bl	8002630 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d101      	bne.n	800c584 <HAL_SPI_TransmitReceive+0x38>
 800c580:	2302      	movs	r3, #2
 800c582:	e1fd      	b.n	800c980 <HAL_SPI_TransmitReceive+0x434>
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c58c:	f7f7 fe4e 	bl	800422c <HAL_GetTick>
 800c590:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c598:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800c5a0:	887b      	ldrh	r3, [r7, #2]
 800c5a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800c5a4:	887b      	ldrh	r3, [r7, #2]
 800c5a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c5a8:	7efb      	ldrb	r3, [r7, #27]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d00e      	beq.n	800c5cc <HAL_SPI_TransmitReceive+0x80>
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5b4:	d106      	bne.n	800c5c4 <HAL_SPI_TransmitReceive+0x78>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d102      	bne.n	800c5c4 <HAL_SPI_TransmitReceive+0x78>
 800c5be:	7efb      	ldrb	r3, [r7, #27]
 800c5c0:	2b04      	cmp	r3, #4
 800c5c2:	d003      	beq.n	800c5cc <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c5ca:	e1cf      	b.n	800c96c <HAL_SPI_TransmitReceive+0x420>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d005      	beq.n	800c5de <HAL_SPI_TransmitReceive+0x92>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d002      	beq.n	800c5de <HAL_SPI_TransmitReceive+0x92>
 800c5d8:	887b      	ldrh	r3, [r7, #2]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d103      	bne.n	800c5e6 <HAL_SPI_TransmitReceive+0x9a>
  {
    errorcode = HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800c5e4:	e1c2      	b.n	800c96c <HAL_SPI_TransmitReceive+0x420>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	2b04      	cmp	r3, #4
 800c5f0:	d003      	beq.n	800c5fa <HAL_SPI_TransmitReceive+0xae>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2205      	movs	r2, #5
 800c5f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	887a      	ldrh	r2, [r7, #2]
 800c60a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	887a      	ldrh	r2, [r7, #2]
 800c612:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	887a      	ldrh	r2, [r7, #2]
 800c620:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	887a      	ldrh	r2, [r7, #2]
 800c626:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c63c:	d802      	bhi.n	800c644 <HAL_SPI_TransmitReceive+0xf8>
 800c63e:	8a3b      	ldrh	r3, [r7, #16]
 800c640:	2b01      	cmp	r3, #1
 800c642:	d908      	bls.n	800c656 <HAL_SPI_TransmitReceive+0x10a>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	685a      	ldr	r2, [r3, #4]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c652:	605a      	str	r2, [r3, #4]
 800c654:	e007      	b.n	800c666 <HAL_SPI_TransmitReceive+0x11a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c664:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c670:	2b40      	cmp	r3, #64	; 0x40
 800c672:	d007      	beq.n	800c684 <HAL_SPI_TransmitReceive+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c68c:	d97e      	bls.n	800c78c <HAL_SPI_TransmitReceive+0x240>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d002      	beq.n	800c69c <HAL_SPI_TransmitReceive+0x150>
 800c696:	8a7b      	ldrh	r3, [r7, #18]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d169      	bne.n	800c770 <HAL_SPI_TransmitReceive+0x224>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a0:	881a      	ldrh	r2, [r3, #0]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ac:	1c9a      	adds	r2, r3, #2
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6c0:	e056      	b.n	800c770 <HAL_SPI_TransmitReceive+0x224>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	f003 0302 	and.w	r3, r3, #2
 800c6cc:	2b02      	cmp	r3, #2
 800c6ce:	d11b      	bne.n	800c708 <HAL_SPI_TransmitReceive+0x1bc>
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6d4:	b29b      	uxth	r3, r3
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d016      	beq.n	800c708 <HAL_SPI_TransmitReceive+0x1bc>
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d113      	bne.n	800c708 <HAL_SPI_TransmitReceive+0x1bc>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e4:	881a      	ldrh	r2, [r3, #0]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f0:	1c9a      	adds	r2, r3, #2
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c704:	2300      	movs	r3, #0
 800c706:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f003 0301 	and.w	r3, r3, #1
 800c712:	2b01      	cmp	r3, #1
 800c714:	d11c      	bne.n	800c750 <HAL_SPI_TransmitReceive+0x204>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d016      	beq.n	800c750 <HAL_SPI_TransmitReceive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	68da      	ldr	r2, [r3, #12]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c72c:	b292      	uxth	r2, r2
 800c72e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c734:	1c9a      	adds	r2, r3, #2
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c740:	b29b      	uxth	r3, r3
 800c742:	3b01      	subs	r3, #1
 800c744:	b29a      	uxth	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c74c:	2301      	movs	r3, #1
 800c74e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c750:	f7f7 fd6c 	bl	800422c <HAL_GetTick>
 800c754:	4602      	mov	r2, r0
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d807      	bhi.n	800c770 <HAL_SPI_TransmitReceive+0x224>
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c766:	d003      	beq.n	800c770 <HAL_SPI_TransmitReceive+0x224>
      {
        errorcode = HAL_TIMEOUT;
 800c768:	2303      	movs	r3, #3
 800c76a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c76e:	e0fd      	b.n	800c96c <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c774:	b29b      	uxth	r3, r3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1a3      	bne.n	800c6c2 <HAL_SPI_TransmitReceive+0x176>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c780:	b29b      	uxth	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d19d      	bne.n	800c6c2 <HAL_SPI_TransmitReceive+0x176>
 800c786:	e0e1      	b.n	800c94c <HAL_SPI_TransmitReceive+0x400>
 800c788:	0801cf88 	.word	0x0801cf88
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d003      	beq.n	800c79c <HAL_SPI_TransmitReceive+0x250>
 800c794:	8a7b      	ldrh	r3, [r7, #18]
 800c796:	2b01      	cmp	r3, #1
 800c798:	f040 80cb 	bne.w	800c932 <HAL_SPI_TransmitReceive+0x3e6>
    {
      if (hspi->TxXferCount > 1U)
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d912      	bls.n	800c7cc <HAL_SPI_TransmitReceive+0x280>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7aa:	881a      	ldrh	r2, [r3, #0]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b6:	1c9a      	adds	r2, r3, #2
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	3b02      	subs	r3, #2
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c7ca:	e0b2      	b.n	800c932 <HAL_SPI_TransmitReceive+0x3e6>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	330c      	adds	r3, #12
 800c7d6:	7812      	ldrb	r2, [r2, #0]
 800c7d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c7f2:	e09e      	b.n	800c932 <HAL_SPI_TransmitReceive+0x3e6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	f003 0302 	and.w	r3, r3, #2
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d134      	bne.n	800c86c <HAL_SPI_TransmitReceive+0x320>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c806:	b29b      	uxth	r3, r3
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d02f      	beq.n	800c86c <HAL_SPI_TransmitReceive+0x320>
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d12c      	bne.n	800c86c <HAL_SPI_TransmitReceive+0x320>
      {
        if (hspi->TxXferCount > 1U)
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c816:	b29b      	uxth	r3, r3
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d912      	bls.n	800c842 <HAL_SPI_TransmitReceive+0x2f6>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c820:	881a      	ldrh	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82c:	1c9a      	adds	r2, r3, #2
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c836:	b29b      	uxth	r3, r3
 800c838:	3b02      	subs	r3, #2
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c840:	e012      	b.n	800c868 <HAL_SPI_TransmitReceive+0x31c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	330c      	adds	r3, #12
 800c84c:	7812      	ldrb	r2, [r2, #0]
 800c84e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c854:	1c5a      	adds	r2, r3, #1
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c85e:	b29b      	uxth	r3, r3
 800c860:	3b01      	subs	r3, #1
 800c862:	b29a      	uxth	r2, r3
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c868:	2300      	movs	r3, #0
 800c86a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	f003 0301 	and.w	r3, r3, #1
 800c876:	2b01      	cmp	r3, #1
 800c878:	d148      	bne.n	800c90c <HAL_SPI_TransmitReceive+0x3c0>
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c880:	b29b      	uxth	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d042      	beq.n	800c90c <HAL_SPI_TransmitReceive+0x3c0>
      {
        if (hspi->RxXferCount > 1U)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d923      	bls.n	800c8da <HAL_SPI_TransmitReceive+0x38e>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	68da      	ldr	r2, [r3, #12]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89c:	b292      	uxth	r2, r2
 800c89e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a4:	1c9a      	adds	r2, r3, #2
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	3b02      	subs	r3, #2
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d81f      	bhi.n	800c908 <HAL_SPI_TransmitReceive+0x3bc>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	685a      	ldr	r2, [r3, #4]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c8d6:	605a      	str	r2, [r3, #4]
 800c8d8:	e016      	b.n	800c908 <HAL_SPI_TransmitReceive+0x3bc>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f103 020c 	add.w	r2, r3, #12
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e6:	7812      	ldrb	r2, [r2, #0]
 800c8e8:	b2d2      	uxtb	r2, r2
 800c8ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f0:	1c5a      	adds	r2, r3, #1
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c8fc:	b29b      	uxth	r3, r3
 800c8fe:	3b01      	subs	r3, #1
 800c900:	b29a      	uxth	r2, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c908:	2301      	movs	r3, #1
 800c90a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c90c:	f7f7 fc8e 	bl	800422c <HAL_GetTick>
 800c910:	4602      	mov	r2, r0
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c918:	429a      	cmp	r2, r3
 800c91a:	d803      	bhi.n	800c924 <HAL_SPI_TransmitReceive+0x3d8>
 800c91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c922:	d102      	bne.n	800c92a <HAL_SPI_TransmitReceive+0x3de>
 800c924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c926:	2b00      	cmp	r3, #0
 800c928:	d103      	bne.n	800c932 <HAL_SPI_TransmitReceive+0x3e6>
      {
        errorcode = HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800c930:	e01c      	b.n	800c96c <HAL_SPI_TransmitReceive+0x420>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c936:	b29b      	uxth	r3, r3
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f47f af5b 	bne.w	800c7f4 <HAL_SPI_TransmitReceive+0x2a8>
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c944:	b29b      	uxth	r3, r3
 800c946:	2b00      	cmp	r3, #0
 800c948:	f47f af54 	bne.w	800c7f4 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c94c:	69fa      	ldr	r2, [r7, #28]
 800c94e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f000 f937 	bl	800cbc4 <SPI_EndRxTxTransaction>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d006      	beq.n	800c96a <HAL_SPI_TransmitReceive+0x41e>
  {
    errorcode = HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2220      	movs	r2, #32
 800c966:	661a      	str	r2, [r3, #96]	; 0x60
 800c968:	e000      	b.n	800c96c <HAL_SPI_TransmitReceive+0x420>
  }

error :
 800c96a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c97c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c980:	4618      	mov	r0, r3
 800c982:	3728      	adds	r7, #40	; 0x28
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b088      	sub	sp, #32
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	4613      	mov	r3, r2
 800c996:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c998:	f7f7 fc48 	bl	800422c <HAL_GetTick>
 800c99c:	4602      	mov	r2, r0
 800c99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a0:	1a9b      	subs	r3, r3, r2
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c9a8:	f7f7 fc40 	bl	800422c <HAL_GetTick>
 800c9ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c9ae:	4b39      	ldr	r3, [pc, #228]	; (800ca94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	015b      	lsls	r3, r3, #5
 800c9b4:	0d1b      	lsrs	r3, r3, #20
 800c9b6:	69fa      	ldr	r2, [r7, #28]
 800c9b8:	fb02 f303 	mul.w	r3, r2, r3
 800c9bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c9be:	e054      	b.n	800ca6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c6:	d050      	beq.n	800ca6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c9c8:	f7f7 fc30 	bl	800422c <HAL_GetTick>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	69fa      	ldr	r2, [r7, #28]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d902      	bls.n	800c9de <SPI_WaitFlagStateUntilTimeout+0x56>
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d13d      	bne.n	800ca5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c9ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9f6:	d111      	bne.n	800ca1c <SPI_WaitFlagStateUntilTimeout+0x94>
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca00:	d004      	beq.n	800ca0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca0a:	d107      	bne.n	800ca1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca24:	d10f      	bne.n	800ca46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca34:	601a      	str	r2, [r3, #0]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681a      	ldr	r2, [r3, #0]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2200      	movs	r2, #0
 800ca52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ca56:	2303      	movs	r3, #3
 800ca58:	e017      	b.n	800ca8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d101      	bne.n	800ca64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ca60:	2300      	movs	r3, #0
 800ca62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	3b01      	subs	r3, #1
 800ca68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	689a      	ldr	r2, [r3, #8]
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	4013      	ands	r3, r2
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	bf0c      	ite	eq
 800ca7a:	2301      	moveq	r3, #1
 800ca7c:	2300      	movne	r3, #0
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	461a      	mov	r2, r3
 800ca82:	79fb      	ldrb	r3, [r7, #7]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d19b      	bne.n	800c9c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3720      	adds	r7, #32
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20000000 	.word	0x20000000

0800ca98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08a      	sub	sp, #40	; 0x28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
 800caa4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800caa6:	2300      	movs	r3, #0
 800caa8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800caaa:	f7f7 fbbf 	bl	800422c <HAL_GetTick>
 800caae:	4602      	mov	r2, r0
 800cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab2:	1a9b      	subs	r3, r3, r2
 800cab4:	683a      	ldr	r2, [r7, #0]
 800cab6:	4413      	add	r3, r2
 800cab8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800caba:	f7f7 fbb7 	bl	800422c <HAL_GetTick>
 800cabe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	330c      	adds	r3, #12
 800cac6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cac8:	4b3d      	ldr	r3, [pc, #244]	; (800cbc0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	4613      	mov	r3, r2
 800cace:	009b      	lsls	r3, r3, #2
 800cad0:	4413      	add	r3, r2
 800cad2:	00da      	lsls	r2, r3, #3
 800cad4:	1ad3      	subs	r3, r2, r3
 800cad6:	0d1b      	lsrs	r3, r3, #20
 800cad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cada:	fb02 f303 	mul.w	r3, r2, r3
 800cade:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cae0:	e060      	b.n	800cba4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cae8:	d107      	bne.n	800cafa <SPI_WaitFifoStateUntilTimeout+0x62>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d104      	bne.n	800cafa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800caf8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb00:	d050      	beq.n	800cba4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cb02:	f7f7 fb93 	bl	800422c <HAL_GetTick>
 800cb06:	4602      	mov	r2, r0
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d902      	bls.n	800cb18 <SPI_WaitFifoStateUntilTimeout+0x80>
 800cb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d13d      	bne.n	800cb94 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cb26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb30:	d111      	bne.n	800cb56 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb3a:	d004      	beq.n	800cb46 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb44:	d107      	bne.n	800cb56 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb5e:	d10f      	bne.n	800cb80 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	681a      	ldr	r2, [r3, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb6e:	601a      	str	r2, [r3, #0]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cb90:	2303      	movs	r3, #3
 800cb92:	e010      	b.n	800cbb6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d101      	bne.n	800cb9e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	3b01      	subs	r3, #1
 800cba2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	689a      	ldr	r2, [r3, #8]
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	4013      	ands	r3, r2
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d196      	bne.n	800cae2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3728      	adds	r7, #40	; 0x28
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	20000000 	.word	0x20000000

0800cbc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af02      	add	r7, sp, #8
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f7ff ff5b 	bl	800ca98 <SPI_WaitFifoStateUntilTimeout>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d007      	beq.n	800cbf8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbec:	f043 0220 	orr.w	r2, r3, #32
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e027      	b.n	800cc48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	9300      	str	r3, [sp, #0]
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2180      	movs	r1, #128	; 0x80
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f7ff fec0 	bl	800c988 <SPI_WaitFlagStateUntilTimeout>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d007      	beq.n	800cc1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc12:	f043 0220 	orr.w	r2, r3, #32
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	e014      	b.n	800cc48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	9300      	str	r3, [sp, #0]
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f7ff ff34 	bl	800ca98 <SPI_WaitFifoStateUntilTimeout>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d007      	beq.n	800cc46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc3a:	f043 0220 	orr.w	r2, r3, #32
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cc42:	2303      	movs	r3, #3
 800cc44:	e000      	b.n	800cc48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800cc62:	2301      	movs	r3, #1
 800cc64:	e038      	b.n	800ccd8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d106      	bne.n	800cc80 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f7f4 ff56 	bl	8001b2c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	3308      	adds	r3, #8
 800cc88:	4619      	mov	r1, r3
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	f003 fe90 	bl	80109b0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6818      	ldr	r0, [r3, #0]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	461a      	mov	r2, r3
 800cc9a:	68b9      	ldr	r1, [r7, #8]
 800cc9c:	f004 f874 	bl	8010d88 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6858      	ldr	r0, [r3, #4]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	689a      	ldr	r2, [r3, #8]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccac:	6879      	ldr	r1, [r7, #4]
 800ccae:	f004 f93f 	bl	8010f30 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	6892      	ldr	r2, [r2, #8]
 800ccba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	6892      	ldr	r2, [r2, #8]
 800ccc6:	f041 0101 	orr.w	r1, r1, #1
 800ccca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	e0c3      	b.n	800ce7a <HAL_TIM_Base_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a63      	ldr	r2, [pc, #396]	; (800ce84 <HAL_TIM_Base_Init+0x1a4>)
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d03b      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd04:	d036      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a5f      	ldr	r2, [pc, #380]	; (800ce88 <HAL_TIM_Base_Init+0x1a8>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d031      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a5d      	ldr	r2, [pc, #372]	; (800ce8c <HAL_TIM_Base_Init+0x1ac>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d02c      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a5c      	ldr	r2, [pc, #368]	; (800ce90 <HAL_TIM_Base_Init+0x1b0>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d027      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a5a      	ldr	r2, [pc, #360]	; (800ce94 <HAL_TIM_Base_Init+0x1b4>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d022      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a59      	ldr	r2, [pc, #356]	; (800ce98 <HAL_TIM_Base_Init+0x1b8>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d01d      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a57      	ldr	r2, [pc, #348]	; (800ce9c <HAL_TIM_Base_Init+0x1bc>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d018      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a56      	ldr	r2, [pc, #344]	; (800cea0 <HAL_TIM_Base_Init+0x1c0>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d013      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a54      	ldr	r2, [pc, #336]	; (800cea4 <HAL_TIM_Base_Init+0x1c4>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d00e      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a53      	ldr	r2, [pc, #332]	; (800cea8 <HAL_TIM_Base_Init+0x1c8>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d009      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a51      	ldr	r2, [pc, #324]	; (800ceac <HAL_TIM_Base_Init+0x1cc>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d004      	beq.n	800cd74 <HAL_TIM_Base_Init+0x94>
 800cd6a:	f44f 7191 	mov.w	r1, #290	; 0x122
 800cd6e:	4850      	ldr	r0, [pc, #320]	; (800ceb0 <HAL_TIM_Base_Init+0x1d0>)
 800cd70:	f7f5 fc5e 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d014      	beq.n	800cda6 <HAL_TIM_Base_Init+0xc6>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	2b10      	cmp	r3, #16
 800cd82:	d010      	beq.n	800cda6 <HAL_TIM_Base_Init+0xc6>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	2b20      	cmp	r3, #32
 800cd8a:	d00c      	beq.n	800cda6 <HAL_TIM_Base_Init+0xc6>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	2b40      	cmp	r3, #64	; 0x40
 800cd92:	d008      	beq.n	800cda6 <HAL_TIM_Base_Init+0xc6>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	2b60      	cmp	r3, #96	; 0x60
 800cd9a:	d004      	beq.n	800cda6 <HAL_TIM_Base_Init+0xc6>
 800cd9c:	f240 1123 	movw	r1, #291	; 0x123
 800cda0:	4843      	ldr	r0, [pc, #268]	; (800ceb0 <HAL_TIM_Base_Init+0x1d0>)
 800cda2:	f7f5 fc45 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00e      	beq.n	800cdcc <HAL_TIM_Base_Init+0xec>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	691b      	ldr	r3, [r3, #16]
 800cdb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdb6:	d009      	beq.n	800cdcc <HAL_TIM_Base_Init+0xec>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	691b      	ldr	r3, [r3, #16]
 800cdbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdc0:	d004      	beq.n	800cdcc <HAL_TIM_Base_Init+0xec>
 800cdc2:	f44f 7192 	mov.w	r1, #292	; 0x124
 800cdc6:	483a      	ldr	r0, [pc, #232]	; (800ceb0 <HAL_TIM_Base_Init+0x1d0>)
 800cdc8:	f7f5 fc32 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	699b      	ldr	r3, [r3, #24]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d008      	beq.n	800cde6 <HAL_TIM_Base_Init+0x106>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	699b      	ldr	r3, [r3, #24]
 800cdd8:	2b80      	cmp	r3, #128	; 0x80
 800cdda:	d004      	beq.n	800cde6 <HAL_TIM_Base_Init+0x106>
 800cddc:	f240 1125 	movw	r1, #293	; 0x125
 800cde0:	4833      	ldr	r0, [pc, #204]	; (800ceb0 <HAL_TIM_Base_Init+0x1d0>)
 800cde2:	f7f5 fc25 	bl	8002630 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d106      	bne.n	800ce00 <HAL_TIM_Base_Init+0x120>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7f6 fb06 	bl	800340c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2202      	movs	r2, #2
 800ce04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3304      	adds	r3, #4
 800ce10:	4619      	mov	r1, r3
 800ce12:	4610      	mov	r0, r2
 800ce14:	f001 fa82 	bl	800e31c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce78:	2300      	movs	r3, #0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	40012c00 	.word	0x40012c00
 800ce88:	40000400 	.word	0x40000400
 800ce8c:	40000800 	.word	0x40000800
 800ce90:	40000c00 	.word	0x40000c00
 800ce94:	40001000 	.word	0x40001000
 800ce98:	40001400 	.word	0x40001400
 800ce9c:	40013400 	.word	0x40013400
 800cea0:	40014000 	.word	0x40014000
 800cea4:	40014400 	.word	0x40014400
 800cea8:	40014800 	.word	0x40014800
 800ceac:	40015000 	.word	0x40015000
 800ceb0:	0801cfc0 	.word	0x0801cfc0

0800ceb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e0c3      	b.n	800d04e <HAL_TIM_PWM_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a63      	ldr	r2, [pc, #396]	; (800d058 <HAL_TIM_PWM_Init+0x1a4>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d03b      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ced8:	d036      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4a5f      	ldr	r2, [pc, #380]	; (800d05c <HAL_TIM_PWM_Init+0x1a8>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d031      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a5d      	ldr	r2, [pc, #372]	; (800d060 <HAL_TIM_PWM_Init+0x1ac>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d02c      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	4a5c      	ldr	r2, [pc, #368]	; (800d064 <HAL_TIM_PWM_Init+0x1b0>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d027      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a5a      	ldr	r2, [pc, #360]	; (800d068 <HAL_TIM_PWM_Init+0x1b4>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d022      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a59      	ldr	r2, [pc, #356]	; (800d06c <HAL_TIM_PWM_Init+0x1b8>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d01d      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a57      	ldr	r2, [pc, #348]	; (800d070 <HAL_TIM_PWM_Init+0x1bc>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d018      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a56      	ldr	r2, [pc, #344]	; (800d074 <HAL_TIM_PWM_Init+0x1c0>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d013      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a54      	ldr	r2, [pc, #336]	; (800d078 <HAL_TIM_PWM_Init+0x1c4>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d00e      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a53      	ldr	r2, [pc, #332]	; (800d07c <HAL_TIM_PWM_Init+0x1c8>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d009      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4a51      	ldr	r2, [pc, #324]	; (800d080 <HAL_TIM_PWM_Init+0x1cc>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d004      	beq.n	800cf48 <HAL_TIM_PWM_Init+0x94>
 800cf3e:	f240 513c 	movw	r1, #1340	; 0x53c
 800cf42:	4850      	ldr	r0, [pc, #320]	; (800d084 <HAL_TIM_PWM_Init+0x1d0>)
 800cf44:	f7f5 fb74 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d014      	beq.n	800cf7a <HAL_TIM_PWM_Init+0xc6>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	2b10      	cmp	r3, #16
 800cf56:	d010      	beq.n	800cf7a <HAL_TIM_PWM_Init+0xc6>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	2b20      	cmp	r3, #32
 800cf5e:	d00c      	beq.n	800cf7a <HAL_TIM_PWM_Init+0xc6>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	2b40      	cmp	r3, #64	; 0x40
 800cf66:	d008      	beq.n	800cf7a <HAL_TIM_PWM_Init+0xc6>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	2b60      	cmp	r3, #96	; 0x60
 800cf6e:	d004      	beq.n	800cf7a <HAL_TIM_PWM_Init+0xc6>
 800cf70:	f240 513d 	movw	r1, #1341	; 0x53d
 800cf74:	4843      	ldr	r0, [pc, #268]	; (800d084 <HAL_TIM_PWM_Init+0x1d0>)
 800cf76:	f7f5 fb5b 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	691b      	ldr	r3, [r3, #16]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00e      	beq.n	800cfa0 <HAL_TIM_PWM_Init+0xec>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	691b      	ldr	r3, [r3, #16]
 800cf86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf8a:	d009      	beq.n	800cfa0 <HAL_TIM_PWM_Init+0xec>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf94:	d004      	beq.n	800cfa0 <HAL_TIM_PWM_Init+0xec>
 800cf96:	f240 513e 	movw	r1, #1342	; 0x53e
 800cf9a:	483a      	ldr	r0, [pc, #232]	; (800d084 <HAL_TIM_PWM_Init+0x1d0>)
 800cf9c:	f7f5 fb48 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	699b      	ldr	r3, [r3, #24]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d008      	beq.n	800cfba <HAL_TIM_PWM_Init+0x106>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	2b80      	cmp	r3, #128	; 0x80
 800cfae:	d004      	beq.n	800cfba <HAL_TIM_PWM_Init+0x106>
 800cfb0:	f240 513f 	movw	r1, #1343	; 0x53f
 800cfb4:	4833      	ldr	r0, [pc, #204]	; (800d084 <HAL_TIM_PWM_Init+0x1d0>)
 800cfb6:	f7f5 fb3b 	bl	8002630 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d106      	bne.n	800cfd4 <HAL_TIM_PWM_Init+0x120>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 f85a 	bl	800d088 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2202      	movs	r2, #2
 800cfd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	3304      	adds	r3, #4
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	f001 f998 	bl	800e31c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	40012c00 	.word	0x40012c00
 800d05c:	40000400 	.word	0x40000400
 800d060:	40000800 	.word	0x40000800
 800d064:	40000c00 	.word	0x40000c00
 800d068:	40001000 	.word	0x40001000
 800d06c:	40001400 	.word	0x40001400
 800d070:	40013400 	.word	0x40013400
 800d074:	40014000 	.word	0x40014000
 800d078:	40014400 	.word	0x40014400
 800d07c:	40014800 	.word	0x40014800
 800d080:	40015000 	.word	0x40015000
 800d084:	0801cfc0 	.word	0x0801cfc0

0800d088 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d090:	bf00      	nop
 800d092:	370c      	adds	r7, #12
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d016      	beq.n	800d0e0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b04      	cmp	r3, #4
 800d0b6:	d013      	beq.n	800d0e0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2b08      	cmp	r3, #8
 800d0bc:	d010      	beq.n	800d0e0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b0c      	cmp	r3, #12
 800d0c2:	d00d      	beq.n	800d0e0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b10      	cmp	r3, #16
 800d0c8:	d00a      	beq.n	800d0e0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b14      	cmp	r3, #20
 800d0ce:	d007      	beq.n	800d0e0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b3c      	cmp	r3, #60	; 0x3c
 800d0d4:	d004      	beq.n	800d0e0 <HAL_TIM_PWM_ConfigChannel+0x44>
 800d0d6:	f241 01e7 	movw	r1, #4327	; 0x10e7
 800d0da:	4890      	ldr	r0, [pc, #576]	; (800d31c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d0dc:	f7f5 faa8 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2b60      	cmp	r3, #96	; 0x60
 800d0e6:	d01c      	beq.n	800d122 <HAL_TIM_PWM_ConfigChannel+0x86>
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b70      	cmp	r3, #112	; 0x70
 800d0ee:	d018      	beq.n	800d122 <HAL_TIM_PWM_ConfigChannel+0x86>
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a8a      	ldr	r2, [pc, #552]	; (800d320 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d013      	beq.n	800d122 <HAL_TIM_PWM_ConfigChannel+0x86>
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a89      	ldr	r2, [pc, #548]	; (800d324 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d00e      	beq.n	800d122 <HAL_TIM_PWM_ConfigChannel+0x86>
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a87      	ldr	r2, [pc, #540]	; (800d328 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d009      	beq.n	800d122 <HAL_TIM_PWM_ConfigChannel+0x86>
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4a86      	ldr	r2, [pc, #536]	; (800d32c <HAL_TIM_PWM_ConfigChannel+0x290>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d004      	beq.n	800d122 <HAL_TIM_PWM_ConfigChannel+0x86>
 800d118:	f241 01e8 	movw	r1, #4328	; 0x10e8
 800d11c:	487f      	ldr	r0, [pc, #508]	; (800d31c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d11e:	f7f5 fa87 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d008      	beq.n	800d13c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	689b      	ldr	r3, [r3, #8]
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d004      	beq.n	800d13c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800d132:	f241 01e9 	movw	r1, #4329	; 0x10e9
 800d136:	4879      	ldr	r0, [pc, #484]	; (800d31c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d138:	f7f5 fa7a 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	691b      	ldr	r3, [r3, #16]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d008      	beq.n	800d156 <HAL_TIM_PWM_ConfigChannel+0xba>
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	691b      	ldr	r3, [r3, #16]
 800d148:	2b04      	cmp	r3, #4
 800d14a:	d004      	beq.n	800d156 <HAL_TIM_PWM_ConfigChannel+0xba>
 800d14c:	f241 01ea 	movw	r1, #4330	; 0x10ea
 800d150:	4872      	ldr	r0, [pc, #456]	; (800d31c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d152:	f7f5 fa6d 	bl	8002630 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d101      	bne.n	800d164 <HAL_TIM_PWM_ConfigChannel+0xc8>
 800d160:	2302      	movs	r3, #2
 800d162:	e1f9      	b.n	800d558 <HAL_TIM_PWM_ConfigChannel+0x4bc>
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b14      	cmp	r3, #20
 800d170:	f200 81ea 	bhi.w	800d548 <HAL_TIM_PWM_ConfigChannel+0x4ac>
 800d174:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 800d176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17a:	bf00      	nop
 800d17c:	0800d1d1 	.word	0x0800d1d1
 800d180:	0800d549 	.word	0x0800d549
 800d184:	0800d549 	.word	0x0800d549
 800d188:	0800d549 	.word	0x0800d549
 800d18c:	0800d27f 	.word	0x0800d27f
 800d190:	0800d549 	.word	0x0800d549
 800d194:	0800d549 	.word	0x0800d549
 800d198:	0800d549 	.word	0x0800d549
 800d19c:	0800d355 	.word	0x0800d355
 800d1a0:	0800d549 	.word	0x0800d549
 800d1a4:	0800d549 	.word	0x0800d549
 800d1a8:	0800d549 	.word	0x0800d549
 800d1ac:	0800d3e5 	.word	0x0800d3e5
 800d1b0:	0800d549 	.word	0x0800d549
 800d1b4:	0800d549 	.word	0x0800d549
 800d1b8:	0800d549 	.word	0x0800d549
 800d1bc:	0800d477 	.word	0x0800d477
 800d1c0:	0800d549 	.word	0x0800d549
 800d1c4:	0800d549 	.word	0x0800d549
 800d1c8:	0800d549 	.word	0x0800d549
 800d1cc:	0800d4df 	.word	0x0800d4df
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a56      	ldr	r2, [pc, #344]	; (800d330 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d031      	beq.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1e2:	d02c      	beq.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a52      	ldr	r2, [pc, #328]	; (800d334 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d027      	beq.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a51      	ldr	r2, [pc, #324]	; (800d338 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d022      	beq.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a4f      	ldr	r2, [pc, #316]	; (800d33c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d01d      	beq.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4a4e      	ldr	r2, [pc, #312]	; (800d340 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d018      	beq.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a4c      	ldr	r2, [pc, #304]	; (800d344 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d013      	beq.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a4b      	ldr	r2, [pc, #300]	; (800d348 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d00e      	beq.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a49      	ldr	r2, [pc, #292]	; (800d34c <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d009      	beq.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a48      	ldr	r2, [pc, #288]	; (800d350 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d004      	beq.n	800d23e <HAL_TIM_PWM_ConfigChannel+0x1a2>
 800d234:	f241 01f4 	movw	r1, #4340	; 0x10f4
 800d238:	4838      	ldr	r0, [pc, #224]	; (800d31c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d23a:	f7f5 f9f9 	bl	8002630 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	68b9      	ldr	r1, [r7, #8]
 800d244:	4618      	mov	r0, r3
 800d246:	f001 f911 	bl	800e46c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	699a      	ldr	r2, [r3, #24]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f042 0208 	orr.w	r2, r2, #8
 800d258:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	699a      	ldr	r2, [r3, #24]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f022 0204 	bic.w	r2, r2, #4
 800d268:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	6999      	ldr	r1, [r3, #24]
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	691a      	ldr	r2, [r3, #16]
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	430a      	orrs	r2, r1
 800d27a:	619a      	str	r2, [r3, #24]
      break;
 800d27c:	e167      	b.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4a2b      	ldr	r2, [pc, #172]	; (800d330 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800d284:	4293      	cmp	r3, r2
 800d286:	d027      	beq.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d290:	d022      	beq.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a27      	ldr	r2, [pc, #156]	; (800d334 <HAL_TIM_PWM_ConfigChannel+0x298>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d01d      	beq.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a25      	ldr	r2, [pc, #148]	; (800d338 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d018      	beq.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4a24      	ldr	r2, [pc, #144]	; (800d33c <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d013      	beq.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a22      	ldr	r2, [pc, #136]	; (800d340 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d00e      	beq.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4a21      	ldr	r2, [pc, #132]	; (800d344 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d009      	beq.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a21      	ldr	r2, [pc, #132]	; (800d350 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d004      	beq.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x23c>
 800d2ce:	f241 1105 	movw	r1, #4357	; 0x1105
 800d2d2:	4812      	ldr	r0, [pc, #72]	; (800d31c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800d2d4:	f7f5 f9ac 	bl	8002630 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	68b9      	ldr	r1, [r7, #8]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f001 f988 	bl	800e5f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	699a      	ldr	r2, [r3, #24]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	699a      	ldr	r2, [r3, #24]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6999      	ldr	r1, [r3, #24]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	691b      	ldr	r3, [r3, #16]
 800d30e:	021a      	lsls	r2, r3, #8
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	430a      	orrs	r2, r1
 800d316:	619a      	str	r2, [r3, #24]
      break;
 800d318:	e119      	b.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x4b2>
 800d31a:	bf00      	nop
 800d31c:	0801cfc0 	.word	0x0801cfc0
 800d320:	00010040 	.word	0x00010040
 800d324:	00010050 	.word	0x00010050
 800d328:	00010060 	.word	0x00010060
 800d32c:	00010070 	.word	0x00010070
 800d330:	40012c00 	.word	0x40012c00
 800d334:	40000400 	.word	0x40000400
 800d338:	40000800 	.word	0x40000800
 800d33c:	40000c00 	.word	0x40000c00
 800d340:	40013400 	.word	0x40013400
 800d344:	40014000 	.word	0x40014000
 800d348:	40014400 	.word	0x40014400
 800d34c:	40014800 	.word	0x40014800
 800d350:	40015000 	.word	0x40015000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a81      	ldr	r2, [pc, #516]	; (800d560 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d022      	beq.n	800d3a4 <HAL_TIM_PWM_ConfigChannel+0x308>
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d366:	d01d      	beq.n	800d3a4 <HAL_TIM_PWM_ConfigChannel+0x308>
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a7d      	ldr	r2, [pc, #500]	; (800d564 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d018      	beq.n	800d3a4 <HAL_TIM_PWM_ConfigChannel+0x308>
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	4a7c      	ldr	r2, [pc, #496]	; (800d568 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d013      	beq.n	800d3a4 <HAL_TIM_PWM_ConfigChannel+0x308>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4a7a      	ldr	r2, [pc, #488]	; (800d56c <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 800d382:	4293      	cmp	r3, r2
 800d384:	d00e      	beq.n	800d3a4 <HAL_TIM_PWM_ConfigChannel+0x308>
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4a79      	ldr	r2, [pc, #484]	; (800d570 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d009      	beq.n	800d3a4 <HAL_TIM_PWM_ConfigChannel+0x308>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	4a77      	ldr	r2, [pc, #476]	; (800d574 <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d004      	beq.n	800d3a4 <HAL_TIM_PWM_ConfigChannel+0x308>
 800d39a:	f241 1116 	movw	r1, #4374	; 0x1116
 800d39e:	4876      	ldr	r0, [pc, #472]	; (800d578 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800d3a0:	f7f5 f946 	bl	8002630 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f001 f9de 	bl	800e76c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	69da      	ldr	r2, [r3, #28]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f042 0208 	orr.w	r2, r2, #8
 800d3be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	69da      	ldr	r2, [r3, #28]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f022 0204 	bic.w	r2, r2, #4
 800d3ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	69d9      	ldr	r1, [r3, #28]
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	691a      	ldr	r2, [r3, #16]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	430a      	orrs	r2, r1
 800d3e0:	61da      	str	r2, [r3, #28]
      break;
 800d3e2:	e0b4      	b.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a5d      	ldr	r2, [pc, #372]	; (800d560 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d022      	beq.n	800d434 <HAL_TIM_PWM_ConfigChannel+0x398>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3f6:	d01d      	beq.n	800d434 <HAL_TIM_PWM_ConfigChannel+0x398>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a59      	ldr	r2, [pc, #356]	; (800d564 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d018      	beq.n	800d434 <HAL_TIM_PWM_ConfigChannel+0x398>
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a58      	ldr	r2, [pc, #352]	; (800d568 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d013      	beq.n	800d434 <HAL_TIM_PWM_ConfigChannel+0x398>
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a56      	ldr	r2, [pc, #344]	; (800d56c <HAL_TIM_PWM_ConfigChannel+0x4d0>)
 800d412:	4293      	cmp	r3, r2
 800d414:	d00e      	beq.n	800d434 <HAL_TIM_PWM_ConfigChannel+0x398>
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4a55      	ldr	r2, [pc, #340]	; (800d570 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d009      	beq.n	800d434 <HAL_TIM_PWM_ConfigChannel+0x398>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a53      	ldr	r2, [pc, #332]	; (800d574 <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d004      	beq.n	800d434 <HAL_TIM_PWM_ConfigChannel+0x398>
 800d42a:	f241 1127 	movw	r1, #4391	; 0x1127
 800d42e:	4852      	ldr	r0, [pc, #328]	; (800d578 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800d430:	f7f5 f8fe 	bl	8002630 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	68b9      	ldr	r1, [r7, #8]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f001 fa52 	bl	800e8e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	69da      	ldr	r2, [r3, #28]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d44e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	69da      	ldr	r2, [r3, #28]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d45e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	69d9      	ldr	r1, [r3, #28]
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	691b      	ldr	r3, [r3, #16]
 800d46a:	021a      	lsls	r2, r3, #8
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	430a      	orrs	r2, r1
 800d472:	61da      	str	r2, [r3, #28]
      break;
 800d474:	e06b      	b.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4a39      	ldr	r2, [pc, #228]	; (800d560 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d00e      	beq.n	800d49e <HAL_TIM_PWM_ConfigChannel+0x402>
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4a3a      	ldr	r2, [pc, #232]	; (800d570 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d009      	beq.n	800d49e <HAL_TIM_PWM_ConfigChannel+0x402>
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a39      	ldr	r2, [pc, #228]	; (800d574 <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d004      	beq.n	800d49e <HAL_TIM_PWM_ConfigChannel+0x402>
 800d494:	f241 1138 	movw	r1, #4408	; 0x1138
 800d498:	4837      	ldr	r0, [pc, #220]	; (800d578 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800d49a:	f7f5 f8c9 	bl	8002630 <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	68b9      	ldr	r1, [r7, #8]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f001 fad9 	bl	800ea5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f042 0208 	orr.w	r2, r2, #8
 800d4b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f022 0204 	bic.w	r2, r2, #4
 800d4c8:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	691a      	ldr	r2, [r3, #16]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	430a      	orrs	r2, r1
 800d4da:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d4dc:	e037      	b.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	4a1f      	ldr	r2, [pc, #124]	; (800d560 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d00e      	beq.n	800d506 <HAL_TIM_PWM_ConfigChannel+0x46a>
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a20      	ldr	r2, [pc, #128]	; (800d570 <HAL_TIM_PWM_ConfigChannel+0x4d4>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d009      	beq.n	800d506 <HAL_TIM_PWM_ConfigChannel+0x46a>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a1f      	ldr	r2, [pc, #124]	; (800d574 <HAL_TIM_PWM_ConfigChannel+0x4d8>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d004      	beq.n	800d506 <HAL_TIM_PWM_ConfigChannel+0x46a>
 800d4fc:	f241 1149 	movw	r1, #4425	; 0x1149
 800d500:	481d      	ldr	r0, [pc, #116]	; (800d578 <HAL_TIM_PWM_ConfigChannel+0x4dc>)
 800d502:	f7f5 f895 	bl	8002630 <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68b9      	ldr	r1, [r7, #8]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f001 fb0f 	bl	800eb30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d520:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d530:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	691b      	ldr	r3, [r3, #16]
 800d53c:	021a      	lsls	r2, r3, #8
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	430a      	orrs	r2, r1
 800d544:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800d546:	e002      	b.n	800d54e <HAL_TIM_PWM_ConfigChannel+0x4b2>
    }

    default:
      status = HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	75fb      	strb	r3, [r7, #23]
      break;
 800d54c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2200      	movs	r2, #0
 800d552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d556:	7dfb      	ldrb	r3, [r7, #23]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	40012c00 	.word	0x40012c00
 800d564:	40000400 	.word	0x40000400
 800d568:	40000800 	.word	0x40000800
 800d56c:	40000c00 	.word	0x40000c00
 800d570:	40013400 	.word	0x40013400
 800d574:	40015000 	.word	0x40015000
 800d578:	0801cfc0 	.word	0x0801cfc0

0800d57c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d586:	2300      	movs	r3, #0
 800d588:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d590:	2b01      	cmp	r3, #1
 800d592:	d102      	bne.n	800d59a <HAL_TIM_ConfigClockSource+0x1e>
 800d594:	2302      	movs	r3, #2
 800d596:	f000 beb3 	b.w	800e300 <HAL_TIM_ConfigClockSource+0xd84>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2201      	movs	r2, #1
 800d59e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5b2:	d051      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5bc:	d04c      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d048      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	2b10      	cmp	r3, #16
 800d5cc:	d044      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b20      	cmp	r3, #32
 800d5d4:	d040      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2b30      	cmp	r3, #48	; 0x30
 800d5dc:	d03c      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b40      	cmp	r3, #64	; 0x40
 800d5e4:	d038      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b50      	cmp	r3, #80	; 0x50
 800d5ec:	d034      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b60      	cmp	r3, #96	; 0x60
 800d5f4:	d030      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2b70      	cmp	r3, #112	; 0x70
 800d5fc:	d02c      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d606:	d027      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d610:	d022      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a7f      	ldr	r2, [pc, #508]	; (800d814 <HAL_TIM_ConfigClockSource+0x298>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d01d      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4a7d      	ldr	r2, [pc, #500]	; (800d818 <HAL_TIM_ConfigClockSource+0x29c>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d018      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4a7c      	ldr	r2, [pc, #496]	; (800d81c <HAL_TIM_ConfigClockSource+0x2a0>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d013      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a7a      	ldr	r2, [pc, #488]	; (800d820 <HAL_TIM_ConfigClockSource+0x2a4>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d00e      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a79      	ldr	r2, [pc, #484]	; (800d824 <HAL_TIM_ConfigClockSource+0x2a8>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d009      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a77      	ldr	r2, [pc, #476]	; (800d828 <HAL_TIM_ConfigClockSource+0x2ac>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d004      	beq.n	800d658 <HAL_TIM_ConfigClockSource+0xdc>
 800d64e:	f241 51b8 	movw	r1, #5560	; 0x15b8
 800d652:	4876      	ldr	r0, [pc, #472]	; (800d82c <HAL_TIM_ConfigClockSource+0x2b0>)
 800d654:	f7f4 ffec 	bl	8002630 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800d666:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d66a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	68ba      	ldr	r2, [r7, #8]
 800d67a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a69      	ldr	r2, [pc, #420]	; (800d828 <HAL_TIM_ConfigClockSource+0x2ac>)
 800d682:	4293      	cmp	r3, r2
 800d684:	f000 832a 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d688:	4a67      	ldr	r2, [pc, #412]	; (800d828 <HAL_TIM_ConfigClockSource+0x2ac>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	f200 862b 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d690:	4a64      	ldr	r2, [pc, #400]	; (800d824 <HAL_TIM_ConfigClockSource+0x2a8>)
 800d692:	4293      	cmp	r3, r2
 800d694:	f000 8322 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d698:	4a62      	ldr	r2, [pc, #392]	; (800d824 <HAL_TIM_ConfigClockSource+0x2a8>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	f200 8623 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d6a0:	4a5f      	ldr	r2, [pc, #380]	; (800d820 <HAL_TIM_ConfigClockSource+0x2a4>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	f000 831a 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d6a8:	4a5d      	ldr	r2, [pc, #372]	; (800d820 <HAL_TIM_ConfigClockSource+0x2a4>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	f200 861b 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d6b0:	4a5a      	ldr	r2, [pc, #360]	; (800d81c <HAL_TIM_ConfigClockSource+0x2a0>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	f000 8312 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d6b8:	4a58      	ldr	r2, [pc, #352]	; (800d81c <HAL_TIM_ConfigClockSource+0x2a0>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	f200 8613 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d6c0:	4a55      	ldr	r2, [pc, #340]	; (800d818 <HAL_TIM_ConfigClockSource+0x29c>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	f000 830a 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d6c8:	4a53      	ldr	r2, [pc, #332]	; (800d818 <HAL_TIM_ConfigClockSource+0x29c>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	f200 860b 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d6d0:	4a50      	ldr	r2, [pc, #320]	; (800d814 <HAL_TIM_ConfigClockSource+0x298>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	f000 8302 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d6d8:	4a4e      	ldr	r2, [pc, #312]	; (800d814 <HAL_TIM_ConfigClockSource+0x298>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	f200 8603 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d6e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d6e4:	f000 82fa 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d6e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d6ec:	f200 85fb 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d6f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6f4:	f000 82f2 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d6f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6fc:	f200 85f3 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d704:	f000 8125 	beq.w	800d952 <HAL_TIM_ConfigClockSource+0x3d6>
 800d708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d70c:	f200 85eb 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d714:	d02f      	beq.n	800d776 <HAL_TIM_ConfigClockSource+0x1fa>
 800d716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d71a:	f200 85e4 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d71e:	2b70      	cmp	r3, #112	; 0x70
 800d720:	f000 809c 	beq.w	800d85c <HAL_TIM_ConfigClockSource+0x2e0>
 800d724:	2b70      	cmp	r3, #112	; 0x70
 800d726:	f200 85de 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d72a:	2b60      	cmp	r3, #96	; 0x60
 800d72c:	f000 81f6 	beq.w	800db1c <HAL_TIM_ConfigClockSource+0x5a0>
 800d730:	2b60      	cmp	r3, #96	; 0x60
 800d732:	f200 85d8 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d736:	2b50      	cmp	r3, #80	; 0x50
 800d738:	f000 8190 	beq.w	800da5c <HAL_TIM_ConfigClockSource+0x4e0>
 800d73c:	2b50      	cmp	r3, #80	; 0x50
 800d73e:	f200 85d2 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d742:	2b40      	cmp	r3, #64	; 0x40
 800d744:	f000 825a 	beq.w	800dbfc <HAL_TIM_ConfigClockSource+0x680>
 800d748:	2b40      	cmp	r3, #64	; 0x40
 800d74a:	f200 85cc 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d74e:	2b30      	cmp	r3, #48	; 0x30
 800d750:	f000 82c4 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d754:	2b30      	cmp	r3, #48	; 0x30
 800d756:	f200 85c6 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d75a:	2b20      	cmp	r3, #32
 800d75c:	f000 82be 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d760:	2b20      	cmp	r3, #32
 800d762:	f200 85c0 	bhi.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 82b8 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d76c:	2b10      	cmp	r3, #16
 800d76e:	f000 82b5 	beq.w	800dcdc <HAL_TIM_ConfigClockSource+0x760>
 800d772:	f000 bdb8 	b.w	800e2e6 <HAL_TIM_ConfigClockSource+0xd6a>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a2d      	ldr	r2, [pc, #180]	; (800d830 <HAL_TIM_ConfigClockSource+0x2b4>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	f000 85b5 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d78a:	f000 85af 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4a28      	ldr	r2, [pc, #160]	; (800d834 <HAL_TIM_ConfigClockSource+0x2b8>)
 800d794:	4293      	cmp	r3, r2
 800d796:	f000 85a9 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a26      	ldr	r2, [pc, #152]	; (800d838 <HAL_TIM_ConfigClockSource+0x2bc>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	f000 85a3 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a24      	ldr	r2, [pc, #144]	; (800d83c <HAL_TIM_ConfigClockSource+0x2c0>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	f000 859d 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a22      	ldr	r2, [pc, #136]	; (800d840 <HAL_TIM_ConfigClockSource+0x2c4>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	f000 8597 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a20      	ldr	r2, [pc, #128]	; (800d844 <HAL_TIM_ConfigClockSource+0x2c8>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	f000 8591 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a1e      	ldr	r2, [pc, #120]	; (800d848 <HAL_TIM_ConfigClockSource+0x2cc>)
 800d7d0:	4293      	cmp	r3, r2
 800d7d2:	f000 858b 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a1c      	ldr	r2, [pc, #112]	; (800d84c <HAL_TIM_ConfigClockSource+0x2d0>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	f000 8585 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4a1a      	ldr	r2, [pc, #104]	; (800d850 <HAL_TIM_ConfigClockSource+0x2d4>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	f000 857f 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a18      	ldr	r2, [pc, #96]	; (800d854 <HAL_TIM_ConfigClockSource+0x2d8>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	f000 8579 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4a16      	ldr	r2, [pc, #88]	; (800d858 <HAL_TIM_ConfigClockSource+0x2dc>)
 800d800:	4293      	cmp	r3, r2
 800d802:	f000 8573 	beq.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d806:	f241 51c4 	movw	r1, #5572	; 0x15c4
 800d80a:	4808      	ldr	r0, [pc, #32]	; (800d82c <HAL_TIM_ConfigClockSource+0x2b0>)
 800d80c:	f7f4 ff10 	bl	8002630 <assert_failed>
      break;
 800d810:	f000 bd6c 	b.w	800e2ec <HAL_TIM_ConfigClockSource+0xd70>
 800d814:	00100020 	.word	0x00100020
 800d818:	00100030 	.word	0x00100030
 800d81c:	00100040 	.word	0x00100040
 800d820:	00100050 	.word	0x00100050
 800d824:	00100060 	.word	0x00100060
 800d828:	00100070 	.word	0x00100070
 800d82c:	0801cfc0 	.word	0x0801cfc0
 800d830:	40012c00 	.word	0x40012c00
 800d834:	40000400 	.word	0x40000400
 800d838:	40000800 	.word	0x40000800
 800d83c:	40000c00 	.word	0x40000c00
 800d840:	40001000 	.word	0x40001000
 800d844:	40001400 	.word	0x40001400
 800d848:	40013400 	.word	0x40013400
 800d84c:	40014000 	.word	0x40014000
 800d850:	40014400 	.word	0x40014400
 800d854:	40014800 	.word	0x40014800
 800d858:	40015000 	.word	0x40015000
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a77      	ldr	r2, [pc, #476]	; (800da40 <HAL_TIM_ConfigClockSource+0x4c4>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d022      	beq.n	800d8ac <HAL_TIM_ConfigClockSource+0x330>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d86e:	d01d      	beq.n	800d8ac <HAL_TIM_ConfigClockSource+0x330>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a73      	ldr	r2, [pc, #460]	; (800da44 <HAL_TIM_ConfigClockSource+0x4c8>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d018      	beq.n	800d8ac <HAL_TIM_ConfigClockSource+0x330>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a72      	ldr	r2, [pc, #456]	; (800da48 <HAL_TIM_ConfigClockSource+0x4cc>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d013      	beq.n	800d8ac <HAL_TIM_ConfigClockSource+0x330>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a70      	ldr	r2, [pc, #448]	; (800da4c <HAL_TIM_ConfigClockSource+0x4d0>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d00e      	beq.n	800d8ac <HAL_TIM_ConfigClockSource+0x330>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a6f      	ldr	r2, [pc, #444]	; (800da50 <HAL_TIM_ConfigClockSource+0x4d4>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d009      	beq.n	800d8ac <HAL_TIM_ConfigClockSource+0x330>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a6d      	ldr	r2, [pc, #436]	; (800da54 <HAL_TIM_ConfigClockSource+0x4d8>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d004      	beq.n	800d8ac <HAL_TIM_ConfigClockSource+0x330>
 800d8a2:	f241 51cb 	movw	r1, #5579	; 0x15cb
 800d8a6:	486c      	ldr	r0, [pc, #432]	; (800da58 <HAL_TIM_ConfigClockSource+0x4dc>)
 800d8a8:	f7f4 fec2 	bl	8002630 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d013      	beq.n	800d8dc <HAL_TIM_ConfigClockSource+0x360>
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8bc:	d00e      	beq.n	800d8dc <HAL_TIM_ConfigClockSource+0x360>
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8c6:	d009      	beq.n	800d8dc <HAL_TIM_ConfigClockSource+0x360>
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	689b      	ldr	r3, [r3, #8]
 800d8cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d8d0:	d004      	beq.n	800d8dc <HAL_TIM_ConfigClockSource+0x360>
 800d8d2:	f241 51ce 	movw	r1, #5582	; 0x15ce
 800d8d6:	4860      	ldr	r0, [pc, #384]	; (800da58 <HAL_TIM_ConfigClockSource+0x4dc>)
 800d8d8:	f7f4 feaa 	bl	8002630 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8e4:	d014      	beq.n	800d910 <HAL_TIM_ConfigClockSource+0x394>
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d010      	beq.n	800d910 <HAL_TIM_ConfigClockSource+0x394>
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00c      	beq.n	800d910 <HAL_TIM_ConfigClockSource+0x394>
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d008      	beq.n	800d910 <HAL_TIM_ConfigClockSource+0x394>
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	2b0a      	cmp	r3, #10
 800d904:	d004      	beq.n	800d910 <HAL_TIM_ConfigClockSource+0x394>
 800d906:	f241 51cf 	movw	r1, #5583	; 0x15cf
 800d90a:	4853      	ldr	r0, [pc, #332]	; (800da58 <HAL_TIM_ConfigClockSource+0x4dc>)
 800d90c:	f7f4 fe90 	bl	8002630 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	68db      	ldr	r3, [r3, #12]
 800d914:	2b0f      	cmp	r3, #15
 800d916:	d904      	bls.n	800d922 <HAL_TIM_ConfigClockSource+0x3a6>
 800d918:	f241 51d0 	movw	r1, #5584	; 0x15d0
 800d91c:	484e      	ldr	r0, [pc, #312]	; (800da58 <HAL_TIM_ConfigClockSource+0x4dc>)
 800d91e:	f7f4 fe87 	bl	8002630 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6818      	ldr	r0, [r3, #0]
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	6899      	ldr	r1, [r3, #8]
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	685a      	ldr	r2, [r3, #4]
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	f001 f9e5 	bl	800ed00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	68ba      	ldr	r2, [r7, #8]
 800d94c:	609a      	str	r2, [r3, #8]
      break;
 800d94e:	f000 bcce 	b.w	800e2ee <HAL_TIM_ConfigClockSource+0xd72>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a3a      	ldr	r2, [pc, #232]	; (800da40 <HAL_TIM_ConfigClockSource+0x4c4>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d022      	beq.n	800d9a2 <HAL_TIM_ConfigClockSource+0x426>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d964:	d01d      	beq.n	800d9a2 <HAL_TIM_ConfigClockSource+0x426>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4a36      	ldr	r2, [pc, #216]	; (800da44 <HAL_TIM_ConfigClockSource+0x4c8>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d018      	beq.n	800d9a2 <HAL_TIM_ConfigClockSource+0x426>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a34      	ldr	r2, [pc, #208]	; (800da48 <HAL_TIM_ConfigClockSource+0x4cc>)
 800d976:	4293      	cmp	r3, r2
 800d978:	d013      	beq.n	800d9a2 <HAL_TIM_ConfigClockSource+0x426>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a33      	ldr	r2, [pc, #204]	; (800da4c <HAL_TIM_ConfigClockSource+0x4d0>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d00e      	beq.n	800d9a2 <HAL_TIM_ConfigClockSource+0x426>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	4a31      	ldr	r2, [pc, #196]	; (800da50 <HAL_TIM_ConfigClockSource+0x4d4>)
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d009      	beq.n	800d9a2 <HAL_TIM_ConfigClockSource+0x426>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	4a30      	ldr	r2, [pc, #192]	; (800da54 <HAL_TIM_ConfigClockSource+0x4d8>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d004      	beq.n	800d9a2 <HAL_TIM_ConfigClockSource+0x426>
 800d998:	f241 51e3 	movw	r1, #5603	; 0x15e3
 800d99c:	482e      	ldr	r0, [pc, #184]	; (800da58 <HAL_TIM_ConfigClockSource+0x4dc>)
 800d99e:	f7f4 fe47 	bl	8002630 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d013      	beq.n	800d9d2 <HAL_TIM_ConfigClockSource+0x456>
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9b2:	d00e      	beq.n	800d9d2 <HAL_TIM_ConfigClockSource+0x456>
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d9bc:	d009      	beq.n	800d9d2 <HAL_TIM_ConfigClockSource+0x456>
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d9c6:	d004      	beq.n	800d9d2 <HAL_TIM_ConfigClockSource+0x456>
 800d9c8:	f241 51e6 	movw	r1, #5606	; 0x15e6
 800d9cc:	4822      	ldr	r0, [pc, #136]	; (800da58 <HAL_TIM_ConfigClockSource+0x4dc>)
 800d9ce:	f7f4 fe2f 	bl	8002630 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9da:	d014      	beq.n	800da06 <HAL_TIM_ConfigClockSource+0x48a>
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d010      	beq.n	800da06 <HAL_TIM_ConfigClockSource+0x48a>
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00c      	beq.n	800da06 <HAL_TIM_ConfigClockSource+0x48a>
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	d008      	beq.n	800da06 <HAL_TIM_ConfigClockSource+0x48a>
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	2b0a      	cmp	r3, #10
 800d9fa:	d004      	beq.n	800da06 <HAL_TIM_ConfigClockSource+0x48a>
 800d9fc:	f241 51e7 	movw	r1, #5607	; 0x15e7
 800da00:	4815      	ldr	r0, [pc, #84]	; (800da58 <HAL_TIM_ConfigClockSource+0x4dc>)
 800da02:	f7f4 fe15 	bl	8002630 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	2b0f      	cmp	r3, #15
 800da0c:	d904      	bls.n	800da18 <HAL_TIM_ConfigClockSource+0x49c>
 800da0e:	f241 51e8 	movw	r1, #5608	; 0x15e8
 800da12:	4811      	ldr	r0, [pc, #68]	; (800da58 <HAL_TIM_ConfigClockSource+0x4dc>)
 800da14:	f7f4 fe0c 	bl	8002630 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6818      	ldr	r0, [r3, #0]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	6899      	ldr	r1, [r3, #8]
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	685a      	ldr	r2, [r3, #4]
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	68db      	ldr	r3, [r3, #12]
 800da28:	f001 f96a 	bl	800ed00 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	689a      	ldr	r2, [r3, #8]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800da3a:	609a      	str	r2, [r3, #8]
      break;
 800da3c:	f000 bc57 	b.w	800e2ee <HAL_TIM_ConfigClockSource+0xd72>
 800da40:	40012c00 	.word	0x40012c00
 800da44:	40000400 	.word	0x40000400
 800da48:	40000800 	.word	0x40000800
 800da4c:	40000c00 	.word	0x40000c00
 800da50:	40013400 	.word	0x40013400
 800da54:	40015000 	.word	0x40015000
 800da58:	0801cfc0 	.word	0x0801cfc0
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a5e      	ldr	r2, [pc, #376]	; (800dbdc <HAL_TIM_ConfigClockSource+0x660>)
 800da62:	4293      	cmp	r3, r2
 800da64:	d027      	beq.n	800dab6 <HAL_TIM_ConfigClockSource+0x53a>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da6e:	d022      	beq.n	800dab6 <HAL_TIM_ConfigClockSource+0x53a>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4a5a      	ldr	r2, [pc, #360]	; (800dbe0 <HAL_TIM_ConfigClockSource+0x664>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d01d      	beq.n	800dab6 <HAL_TIM_ConfigClockSource+0x53a>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	4a59      	ldr	r2, [pc, #356]	; (800dbe4 <HAL_TIM_ConfigClockSource+0x668>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d018      	beq.n	800dab6 <HAL_TIM_ConfigClockSource+0x53a>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a57      	ldr	r2, [pc, #348]	; (800dbe8 <HAL_TIM_ConfigClockSource+0x66c>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d013      	beq.n	800dab6 <HAL_TIM_ConfigClockSource+0x53a>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4a56      	ldr	r2, [pc, #344]	; (800dbec <HAL_TIM_ConfigClockSource+0x670>)
 800da94:	4293      	cmp	r3, r2
 800da96:	d00e      	beq.n	800dab6 <HAL_TIM_ConfigClockSource+0x53a>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a54      	ldr	r2, [pc, #336]	; (800dbf0 <HAL_TIM_ConfigClockSource+0x674>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d009      	beq.n	800dab6 <HAL_TIM_ConfigClockSource+0x53a>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a53      	ldr	r2, [pc, #332]	; (800dbf4 <HAL_TIM_ConfigClockSource+0x678>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d004      	beq.n	800dab6 <HAL_TIM_ConfigClockSource+0x53a>
 800daac:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800dab0:	4851      	ldr	r0, [pc, #324]	; (800dbf8 <HAL_TIM_ConfigClockSource+0x67c>)
 800dab2:	f7f4 fdbd 	bl	8002630 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dabe:	d014      	beq.n	800daea <HAL_TIM_ConfigClockSource+0x56e>
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d010      	beq.n	800daea <HAL_TIM_ConfigClockSource+0x56e>
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d00c      	beq.n	800daea <HAL_TIM_ConfigClockSource+0x56e>
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d008      	beq.n	800daea <HAL_TIM_ConfigClockSource+0x56e>
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	2b0a      	cmp	r3, #10
 800dade:	d004      	beq.n	800daea <HAL_TIM_ConfigClockSource+0x56e>
 800dae0:	f241 51fa 	movw	r1, #5626	; 0x15fa
 800dae4:	4844      	ldr	r0, [pc, #272]	; (800dbf8 <HAL_TIM_ConfigClockSource+0x67c>)
 800dae6:	f7f4 fda3 	bl	8002630 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	2b0f      	cmp	r3, #15
 800daf0:	d904      	bls.n	800dafc <HAL_TIM_ConfigClockSource+0x580>
 800daf2:	f241 51fb 	movw	r1, #5627	; 0x15fb
 800daf6:	4840      	ldr	r0, [pc, #256]	; (800dbf8 <HAL_TIM_ConfigClockSource+0x67c>)
 800daf8:	f7f4 fd9a 	bl	8002630 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6818      	ldr	r0, [r3, #0]
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	6859      	ldr	r1, [r3, #4]
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	461a      	mov	r2, r3
 800db0a:	f001 f87d 	bl	800ec08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2150      	movs	r1, #80	; 0x50
 800db14:	4618      	mov	r0, r3
 800db16:	f001 f8d6 	bl	800ecc6 <TIM_ITRx_SetConfig>
      break;
 800db1a:	e3e8      	b.n	800e2ee <HAL_TIM_ConfigClockSource+0xd72>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a2e      	ldr	r2, [pc, #184]	; (800dbdc <HAL_TIM_ConfigClockSource+0x660>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d027      	beq.n	800db76 <HAL_TIM_ConfigClockSource+0x5fa>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db2e:	d022      	beq.n	800db76 <HAL_TIM_ConfigClockSource+0x5fa>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a2a      	ldr	r2, [pc, #168]	; (800dbe0 <HAL_TIM_ConfigClockSource+0x664>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d01d      	beq.n	800db76 <HAL_TIM_ConfigClockSource+0x5fa>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a29      	ldr	r2, [pc, #164]	; (800dbe4 <HAL_TIM_ConfigClockSource+0x668>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d018      	beq.n	800db76 <HAL_TIM_ConfigClockSource+0x5fa>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a27      	ldr	r2, [pc, #156]	; (800dbe8 <HAL_TIM_ConfigClockSource+0x66c>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d013      	beq.n	800db76 <HAL_TIM_ConfigClockSource+0x5fa>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	4a26      	ldr	r2, [pc, #152]	; (800dbec <HAL_TIM_ConfigClockSource+0x670>)
 800db54:	4293      	cmp	r3, r2
 800db56:	d00e      	beq.n	800db76 <HAL_TIM_ConfigClockSource+0x5fa>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a24      	ldr	r2, [pc, #144]	; (800dbf0 <HAL_TIM_ConfigClockSource+0x674>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d009      	beq.n	800db76 <HAL_TIM_ConfigClockSource+0x5fa>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a23      	ldr	r2, [pc, #140]	; (800dbf4 <HAL_TIM_ConfigClockSource+0x678>)
 800db68:	4293      	cmp	r3, r2
 800db6a:	d004      	beq.n	800db76 <HAL_TIM_ConfigClockSource+0x5fa>
 800db6c:	f241 6107 	movw	r1, #5639	; 0x1607
 800db70:	4821      	ldr	r0, [pc, #132]	; (800dbf8 <HAL_TIM_ConfigClockSource+0x67c>)
 800db72:	f7f4 fd5d 	bl	8002630 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db7e:	d014      	beq.n	800dbaa <HAL_TIM_ConfigClockSource+0x62e>
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d010      	beq.n	800dbaa <HAL_TIM_ConfigClockSource+0x62e>
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00c      	beq.n	800dbaa <HAL_TIM_ConfigClockSource+0x62e>
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	2b02      	cmp	r3, #2
 800db96:	d008      	beq.n	800dbaa <HAL_TIM_ConfigClockSource+0x62e>
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	2b0a      	cmp	r3, #10
 800db9e:	d004      	beq.n	800dbaa <HAL_TIM_ConfigClockSource+0x62e>
 800dba0:	f241 610a 	movw	r1, #5642	; 0x160a
 800dba4:	4814      	ldr	r0, [pc, #80]	; (800dbf8 <HAL_TIM_ConfigClockSource+0x67c>)
 800dba6:	f7f4 fd43 	bl	8002630 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	2b0f      	cmp	r3, #15
 800dbb0:	d904      	bls.n	800dbbc <HAL_TIM_ConfigClockSource+0x640>
 800dbb2:	f241 610b 	movw	r1, #5643	; 0x160b
 800dbb6:	4810      	ldr	r0, [pc, #64]	; (800dbf8 <HAL_TIM_ConfigClockSource+0x67c>)
 800dbb8:	f7f4 fd3a 	bl	8002630 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6818      	ldr	r0, [r3, #0]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	6859      	ldr	r1, [r3, #4]
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	f001 f84c 	bl	800ec66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2160      	movs	r1, #96	; 0x60
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f001 f876 	bl	800ecc6 <TIM_ITRx_SetConfig>
      break;
 800dbda:	e388      	b.n	800e2ee <HAL_TIM_ConfigClockSource+0xd72>
 800dbdc:	40012c00 	.word	0x40012c00
 800dbe0:	40000400 	.word	0x40000400
 800dbe4:	40000800 	.word	0x40000800
 800dbe8:	40000c00 	.word	0x40000c00
 800dbec:	40013400 	.word	0x40013400
 800dbf0:	40014000 	.word	0x40014000
 800dbf4:	40015000 	.word	0x40015000
 800dbf8:	0801cfc0 	.word	0x0801cfc0
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a2e      	ldr	r2, [pc, #184]	; (800dcbc <HAL_TIM_ConfigClockSource+0x740>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d027      	beq.n	800dc56 <HAL_TIM_ConfigClockSource+0x6da>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc0e:	d022      	beq.n	800dc56 <HAL_TIM_ConfigClockSource+0x6da>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a2a      	ldr	r2, [pc, #168]	; (800dcc0 <HAL_TIM_ConfigClockSource+0x744>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d01d      	beq.n	800dc56 <HAL_TIM_ConfigClockSource+0x6da>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4a29      	ldr	r2, [pc, #164]	; (800dcc4 <HAL_TIM_ConfigClockSource+0x748>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d018      	beq.n	800dc56 <HAL_TIM_ConfigClockSource+0x6da>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a27      	ldr	r2, [pc, #156]	; (800dcc8 <HAL_TIM_ConfigClockSource+0x74c>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d013      	beq.n	800dc56 <HAL_TIM_ConfigClockSource+0x6da>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a26      	ldr	r2, [pc, #152]	; (800dccc <HAL_TIM_ConfigClockSource+0x750>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d00e      	beq.n	800dc56 <HAL_TIM_ConfigClockSource+0x6da>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a24      	ldr	r2, [pc, #144]	; (800dcd0 <HAL_TIM_ConfigClockSource+0x754>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d009      	beq.n	800dc56 <HAL_TIM_ConfigClockSource+0x6da>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	4a23      	ldr	r2, [pc, #140]	; (800dcd4 <HAL_TIM_ConfigClockSource+0x758>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d004      	beq.n	800dc56 <HAL_TIM_ConfigClockSource+0x6da>
 800dc4c:	f241 6117 	movw	r1, #5655	; 0x1617
 800dc50:	4821      	ldr	r0, [pc, #132]	; (800dcd8 <HAL_TIM_ConfigClockSource+0x75c>)
 800dc52:	f7f4 fced 	bl	8002630 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc5e:	d014      	beq.n	800dc8a <HAL_TIM_ConfigClockSource+0x70e>
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d010      	beq.n	800dc8a <HAL_TIM_ConfigClockSource+0x70e>
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d00c      	beq.n	800dc8a <HAL_TIM_ConfigClockSource+0x70e>
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	d008      	beq.n	800dc8a <HAL_TIM_ConfigClockSource+0x70e>
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	2b0a      	cmp	r3, #10
 800dc7e:	d004      	beq.n	800dc8a <HAL_TIM_ConfigClockSource+0x70e>
 800dc80:	f241 611a 	movw	r1, #5658	; 0x161a
 800dc84:	4814      	ldr	r0, [pc, #80]	; (800dcd8 <HAL_TIM_ConfigClockSource+0x75c>)
 800dc86:	f7f4 fcd3 	bl	8002630 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	68db      	ldr	r3, [r3, #12]
 800dc8e:	2b0f      	cmp	r3, #15
 800dc90:	d904      	bls.n	800dc9c <HAL_TIM_ConfigClockSource+0x720>
 800dc92:	f241 611b 	movw	r1, #5659	; 0x161b
 800dc96:	4810      	ldr	r0, [pc, #64]	; (800dcd8 <HAL_TIM_ConfigClockSource+0x75c>)
 800dc98:	f7f4 fcca 	bl	8002630 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6818      	ldr	r0, [r3, #0]
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	6859      	ldr	r1, [r3, #4]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	f000 ffad 	bl	800ec08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2140      	movs	r1, #64	; 0x40
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f001 f806 	bl	800ecc6 <TIM_ITRx_SetConfig>
      break;
 800dcba:	e318      	b.n	800e2ee <HAL_TIM_ConfigClockSource+0xd72>
 800dcbc:	40012c00 	.word	0x40012c00
 800dcc0:	40000400 	.word	0x40000400
 800dcc4:	40000800 	.word	0x40000800
 800dcc8:	40000c00 	.word	0x40000c00
 800dccc:	40013400 	.word	0x40013400
 800dcd0:	40014000 	.word	0x40014000
 800dcd4:	40015000 	.word	0x40015000
 800dcd8:	0801cfc0 	.word	0x0801cfc0
    case TIM_CLOCKSOURCE_ITR10:
#endif /* HRTIM1 */
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4a9c      	ldr	r2, [pc, #624]	; (800df54 <HAL_TIM_ConfigClockSource+0x9d8>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	d158      	bne.n	800dd98 <HAL_TIM_ConfigClockSource+0x81c>
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcee:	f000 82f1 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dcfa:	f000 82eb 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2b10      	cmp	r3, #16
 800dd04:	f000 82e6 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b20      	cmp	r3, #32
 800dd0e:	f000 82e1 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b30      	cmp	r3, #48	; 0x30
 800dd18:	f000 82dc 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b40      	cmp	r3, #64	; 0x40
 800dd22:	f000 82d7 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2b50      	cmp	r3, #80	; 0x50
 800dd2c:	f000 82d2 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2b60      	cmp	r3, #96	; 0x60
 800dd36:	f000 82cd 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b70      	cmp	r3, #112	; 0x70
 800dd40:	f000 82c8 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd4c:	f000 82c2 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dd58:	f000 82bc 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a7d      	ldr	r2, [pc, #500]	; (800df58 <HAL_TIM_ConfigClockSource+0x9dc>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	f000 82b6 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a7b      	ldr	r2, [pc, #492]	; (800df5c <HAL_TIM_ConfigClockSource+0x9e0>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	f000 82b0 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a79      	ldr	r2, [pc, #484]	; (800df60 <HAL_TIM_ConfigClockSource+0x9e4>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	f000 82aa 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a77      	ldr	r2, [pc, #476]	; (800df64 <HAL_TIM_ConfigClockSource+0x9e8>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	f000 82a4 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a75      	ldr	r2, [pc, #468]	; (800df68 <HAL_TIM_ConfigClockSource+0x9ec>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	f000 829e 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dda0:	d15e      	bne.n	800de60 <HAL_TIM_ConfigClockSource+0x8e4>
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddaa:	f000 8293 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddb6:	f000 828d 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	f000 8288 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2b20      	cmp	r3, #32
 800ddca:	f000 8283 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2b30      	cmp	r3, #48	; 0x30
 800ddd4:	f000 827e 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2b40      	cmp	r3, #64	; 0x40
 800ddde:	f000 8279 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b50      	cmp	r3, #80	; 0x50
 800dde8:	f000 8274 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2b60      	cmp	r3, #96	; 0x60
 800ddf2:	f000 826f 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b70      	cmp	r3, #112	; 0x70
 800ddfc:	f000 826a 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de08:	f000 8264 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800de14:	f000 825e 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a4e      	ldr	r2, [pc, #312]	; (800df58 <HAL_TIM_ConfigClockSource+0x9dc>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	f000 8258 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4a4c      	ldr	r2, [pc, #304]	; (800df5c <HAL_TIM_ConfigClockSource+0x9e0>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	f000 8252 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a4a      	ldr	r2, [pc, #296]	; (800df60 <HAL_TIM_ConfigClockSource+0x9e4>)
 800de36:	4293      	cmp	r3, r2
 800de38:	f000 824c 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a48      	ldr	r2, [pc, #288]	; (800df64 <HAL_TIM_ConfigClockSource+0x9e8>)
 800de42:	4293      	cmp	r3, r2
 800de44:	f000 8246 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a46      	ldr	r2, [pc, #280]	; (800df68 <HAL_TIM_ConfigClockSource+0x9ec>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	f000 8240 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a44      	ldr	r2, [pc, #272]	; (800df6c <HAL_TIM_ConfigClockSource+0x9f0>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	f000 823a 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a42      	ldr	r2, [pc, #264]	; (800df70 <HAL_TIM_ConfigClockSource+0x9f4>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d158      	bne.n	800df1c <HAL_TIM_ConfigClockSource+0x9a0>
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de72:	f000 822f 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de7e:	f000 8229 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	f000 8224 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2b10      	cmp	r3, #16
 800de92:	f000 821f 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	2b30      	cmp	r3, #48	; 0x30
 800de9c:	f000 821a 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b40      	cmp	r3, #64	; 0x40
 800dea6:	f000 8215 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b50      	cmp	r3, #80	; 0x50
 800deb0:	f000 8210 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b60      	cmp	r3, #96	; 0x60
 800deba:	f000 820b 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b70      	cmp	r3, #112	; 0x70
 800dec4:	f000 8206 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ded0:	f000 8200 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dedc:	f000 81fa 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a1c      	ldr	r2, [pc, #112]	; (800df58 <HAL_TIM_ConfigClockSource+0x9dc>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	f000 81f4 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a1a      	ldr	r2, [pc, #104]	; (800df5c <HAL_TIM_ConfigClockSource+0x9e0>)
 800def2:	4293      	cmp	r3, r2
 800def4:	f000 81ee 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4a18      	ldr	r2, [pc, #96]	; (800df60 <HAL_TIM_ConfigClockSource+0x9e4>)
 800defe:	4293      	cmp	r3, r2
 800df00:	f000 81e8 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a16      	ldr	r2, [pc, #88]	; (800df64 <HAL_TIM_ConfigClockSource+0x9e8>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	f000 81e2 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a14      	ldr	r2, [pc, #80]	; (800df68 <HAL_TIM_ConfigClockSource+0x9ec>)
 800df16:	4293      	cmp	r3, r2
 800df18:	f000 81dc 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a14      	ldr	r2, [pc, #80]	; (800df74 <HAL_TIM_ConfigClockSource+0x9f8>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d16b      	bne.n	800dffe <HAL_TIM_ConfigClockSource+0xa82>
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df2e:	f000 81d1 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df3a:	f000 81cb 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	f000 81c6 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b10      	cmp	r3, #16
 800df4e:	f000 81c1 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800df52:	e011      	b.n	800df78 <HAL_TIM_ConfigClockSource+0x9fc>
 800df54:	40012c00 	.word	0x40012c00
 800df58:	00100020 	.word	0x00100020
 800df5c:	00100030 	.word	0x00100030
 800df60:	00100040 	.word	0x00100040
 800df64:	00100050 	.word	0x00100050
 800df68:	00100060 	.word	0x00100060
 800df6c:	00100070 	.word	0x00100070
 800df70:	40000400 	.word	0x40000400
 800df74:	40000800 	.word	0x40000800
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b20      	cmp	r3, #32
 800df7e:	f000 81a9 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df8a:	f000 81a3 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b40      	cmp	r3, #64	; 0x40
 800df94:	f000 819e 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b50      	cmp	r3, #80	; 0x50
 800df9e:	f000 8199 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2b60      	cmp	r3, #96	; 0x60
 800dfa8:	f000 8194 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b70      	cmp	r3, #112	; 0x70
 800dfb2:	f000 818f 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dfbe:	f000 8189 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4a96      	ldr	r2, [pc, #600]	; (800e220 <HAL_TIM_ConfigClockSource+0xca4>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	f000 8183 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4a94      	ldr	r2, [pc, #592]	; (800e224 <HAL_TIM_ConfigClockSource+0xca8>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	f000 817d 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	4a92      	ldr	r2, [pc, #584]	; (800e228 <HAL_TIM_ConfigClockSource+0xcac>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	f000 8177 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4a90      	ldr	r2, [pc, #576]	; (800e22c <HAL_TIM_ConfigClockSource+0xcb0>)
 800dfec:	4293      	cmp	r3, r2
 800dfee:	f000 8171 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	4a8e      	ldr	r2, [pc, #568]	; (800e230 <HAL_TIM_ConfigClockSource+0xcb4>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	f000 816b 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a8c      	ldr	r2, [pc, #560]	; (800e234 <HAL_TIM_ConfigClockSource+0xcb8>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d157      	bne.n	800e0b8 <HAL_TIM_ConfigClockSource+0xb3c>
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e010:	f000 8160 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e01c:	f000 815a 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2b00      	cmp	r3, #0
 800e026:	f000 8155 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b10      	cmp	r3, #16
 800e030:	f000 8150 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b20      	cmp	r3, #32
 800e03a:	f000 814b 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b30      	cmp	r3, #48	; 0x30
 800e044:	f000 8146 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2b40      	cmp	r3, #64	; 0x40
 800e04e:	f000 8141 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b50      	cmp	r3, #80	; 0x50
 800e058:	f000 813c 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2b60      	cmp	r3, #96	; 0x60
 800e062:	f000 8137 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b70      	cmp	r3, #112	; 0x70
 800e06c:	f000 8132 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e078:	f000 812c 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a67      	ldr	r2, [pc, #412]	; (800e220 <HAL_TIM_ConfigClockSource+0xca4>)
 800e082:	4293      	cmp	r3, r2
 800e084:	f000 8126 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a65      	ldr	r2, [pc, #404]	; (800e224 <HAL_TIM_ConfigClockSource+0xca8>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	f000 8120 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a63      	ldr	r2, [pc, #396]	; (800e228 <HAL_TIM_ConfigClockSource+0xcac>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	f000 811a 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a61      	ldr	r2, [pc, #388]	; (800e22c <HAL_TIM_ConfigClockSource+0xcb0>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	f000 8114 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	4a5f      	ldr	r2, [pc, #380]	; (800e230 <HAL_TIM_ConfigClockSource+0xcb4>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	f000 810e 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a5e      	ldr	r2, [pc, #376]	; (800e238 <HAL_TIM_ConfigClockSource+0xcbc>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d157      	bne.n	800e172 <HAL_TIM_ConfigClockSource+0xbf6>
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0ca:	f000 8103 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0d6:	f000 80fd 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	f000 80f8 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b10      	cmp	r3, #16
 800e0ea:	f000 80f3 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2b20      	cmp	r3, #32
 800e0f4:	f000 80ee 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	2b30      	cmp	r3, #48	; 0x30
 800e0fe:	f000 80e9 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b40      	cmp	r3, #64	; 0x40
 800e108:	f000 80e4 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b50      	cmp	r3, #80	; 0x50
 800e112:	f000 80df 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2b60      	cmp	r3, #96	; 0x60
 800e11c:	f000 80da 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b70      	cmp	r3, #112	; 0x70
 800e126:	f000 80d5 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e132:	f000 80cf 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a39      	ldr	r2, [pc, #228]	; (800e220 <HAL_TIM_ConfigClockSource+0xca4>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	f000 80c9 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	4a37      	ldr	r2, [pc, #220]	; (800e224 <HAL_TIM_ConfigClockSource+0xca8>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	f000 80c3 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a35      	ldr	r2, [pc, #212]	; (800e228 <HAL_TIM_ConfigClockSource+0xcac>)
 800e154:	4293      	cmp	r3, r2
 800e156:	f000 80bd 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	4a33      	ldr	r2, [pc, #204]	; (800e22c <HAL_TIM_ConfigClockSource+0xcb0>)
 800e160:	4293      	cmp	r3, r2
 800e162:	f000 80b7 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a31      	ldr	r2, [pc, #196]	; (800e230 <HAL_TIM_ConfigClockSource+0xcb4>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	f000 80b1 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a31      	ldr	r2, [pc, #196]	; (800e23c <HAL_TIM_ConfigClockSource+0xcc0>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d146      	bne.n	800e20a <HAL_TIM_ConfigClockSource+0xc8e>
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e184:	f000 80a6 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f000 80a1 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b10      	cmp	r3, #16
 800e198:	f000 809c 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b20      	cmp	r3, #32
 800e1a2:	f000 8097 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2b30      	cmp	r3, #48	; 0x30
 800e1ac:	f000 8092 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2b40      	cmp	r3, #64	; 0x40
 800e1b6:	f000 808d 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	2b50      	cmp	r3, #80	; 0x50
 800e1c0:	f000 8088 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2b60      	cmp	r3, #96	; 0x60
 800e1ca:	f000 8083 	beq.w	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e1d6:	d07d      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e1e0:	d078      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	4a0f      	ldr	r2, [pc, #60]	; (800e224 <HAL_TIM_ConfigClockSource+0xca8>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d073      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	4a0d      	ldr	r2, [pc, #52]	; (800e228 <HAL_TIM_ConfigClockSource+0xcac>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d06e      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4a0c      	ldr	r2, [pc, #48]	; (800e22c <HAL_TIM_ConfigClockSource+0xcb0>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d069      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a0a      	ldr	r2, [pc, #40]	; (800e230 <HAL_TIM_ConfigClockSource+0xcb4>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d064      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	4a0c      	ldr	r2, [pc, #48]	; (800e240 <HAL_TIM_ConfigClockSource+0xcc4>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d15a      	bne.n	800e2ca <HAL_TIM_ConfigClockSource+0xd4e>
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e21c:	d05a      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e21e:	e011      	b.n	800e244 <HAL_TIM_ConfigClockSource+0xcc8>
 800e220:	00100020 	.word	0x00100020
 800e224:	00100030 	.word	0x00100030
 800e228:	00100040 	.word	0x00100040
 800e22c:	00100050 	.word	0x00100050
 800e230:	00100060 	.word	0x00100060
 800e234:	40000c00 	.word	0x40000c00
 800e238:	40013400 	.word	0x40013400
 800e23c:	40014000 	.word	0x40014000
 800e240:	40015000 	.word	0x40015000
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e24c:	d042      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d03e      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b10      	cmp	r3, #16
 800e25c:	d03a      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2b20      	cmp	r3, #32
 800e264:	d036      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b30      	cmp	r3, #48	; 0x30
 800e26c:	d032      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b40      	cmp	r3, #64	; 0x40
 800e274:	d02e      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2b50      	cmp	r3, #80	; 0x50
 800e27c:	d02a      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2b60      	cmp	r3, #96	; 0x60
 800e284:	d026      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2b70      	cmp	r3, #112	; 0x70
 800e28c:	d022      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e296:	d01d      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e2a0:	d018      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a18      	ldr	r2, [pc, #96]	; (800e308 <HAL_TIM_ConfigClockSource+0xd8c>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d013      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a16      	ldr	r2, [pc, #88]	; (800e30c <HAL_TIM_ConfigClockSource+0xd90>)
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d00e      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a15      	ldr	r2, [pc, #84]	; (800e310 <HAL_TIM_ConfigClockSource+0xd94>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d009      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4a13      	ldr	r2, [pc, #76]	; (800e314 <HAL_TIM_ConfigClockSource+0xd98>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d004      	beq.n	800e2d4 <HAL_TIM_ConfigClockSource+0xd58>
 800e2ca:	f241 6138 	movw	r1, #5688	; 0x1638
 800e2ce:	4812      	ldr	r0, [pc, #72]	; (800e318 <HAL_TIM_ConfigClockSource+0xd9c>)
 800e2d0:	f7f4 f9ae 	bl	8002630 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4619      	mov	r1, r3
 800e2de:	4610      	mov	r0, r2
 800e2e0:	f000 fcf1 	bl	800ecc6 <TIM_ITRx_SetConfig>
      break;
 800e2e4:	e003      	b.n	800e2ee <HAL_TIM_ConfigClockSource+0xd72>
    }

    default:
      status = HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	73fb      	strb	r3, [r7, #15]
      break;
 800e2ea:	e000      	b.n	800e2ee <HAL_TIM_ConfigClockSource+0xd72>
      break;
 800e2ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3710      	adds	r7, #16
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	00100020 	.word	0x00100020
 800e30c:	00100030 	.word	0x00100030
 800e310:	00100040 	.word	0x00100040
 800e314:	00100060 	.word	0x00100060
 800e318:	0801cfc0 	.word	0x0801cfc0

0800e31c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a46      	ldr	r2, [pc, #280]	; (800e448 <TIM_Base_SetConfig+0x12c>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d017      	beq.n	800e364 <TIM_Base_SetConfig+0x48>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e33a:	d013      	beq.n	800e364 <TIM_Base_SetConfig+0x48>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4a43      	ldr	r2, [pc, #268]	; (800e44c <TIM_Base_SetConfig+0x130>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d00f      	beq.n	800e364 <TIM_Base_SetConfig+0x48>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4a42      	ldr	r2, [pc, #264]	; (800e450 <TIM_Base_SetConfig+0x134>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d00b      	beq.n	800e364 <TIM_Base_SetConfig+0x48>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4a41      	ldr	r2, [pc, #260]	; (800e454 <TIM_Base_SetConfig+0x138>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d007      	beq.n	800e364 <TIM_Base_SetConfig+0x48>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	4a40      	ldr	r2, [pc, #256]	; (800e458 <TIM_Base_SetConfig+0x13c>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d003      	beq.n	800e364 <TIM_Base_SetConfig+0x48>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	4a3f      	ldr	r2, [pc, #252]	; (800e45c <TIM_Base_SetConfig+0x140>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d108      	bne.n	800e376 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e36a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	685b      	ldr	r3, [r3, #4]
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	4313      	orrs	r3, r2
 800e374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4a33      	ldr	r2, [pc, #204]	; (800e448 <TIM_Base_SetConfig+0x12c>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d023      	beq.n	800e3c6 <TIM_Base_SetConfig+0xaa>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e384:	d01f      	beq.n	800e3c6 <TIM_Base_SetConfig+0xaa>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4a30      	ldr	r2, [pc, #192]	; (800e44c <TIM_Base_SetConfig+0x130>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d01b      	beq.n	800e3c6 <TIM_Base_SetConfig+0xaa>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4a2f      	ldr	r2, [pc, #188]	; (800e450 <TIM_Base_SetConfig+0x134>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d017      	beq.n	800e3c6 <TIM_Base_SetConfig+0xaa>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4a2e      	ldr	r2, [pc, #184]	; (800e454 <TIM_Base_SetConfig+0x138>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d013      	beq.n	800e3c6 <TIM_Base_SetConfig+0xaa>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4a2d      	ldr	r2, [pc, #180]	; (800e458 <TIM_Base_SetConfig+0x13c>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d00f      	beq.n	800e3c6 <TIM_Base_SetConfig+0xaa>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a2d      	ldr	r2, [pc, #180]	; (800e460 <TIM_Base_SetConfig+0x144>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d00b      	beq.n	800e3c6 <TIM_Base_SetConfig+0xaa>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	4a2c      	ldr	r2, [pc, #176]	; (800e464 <TIM_Base_SetConfig+0x148>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d007      	beq.n	800e3c6 <TIM_Base_SetConfig+0xaa>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	4a2b      	ldr	r2, [pc, #172]	; (800e468 <TIM_Base_SetConfig+0x14c>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d003      	beq.n	800e3c6 <TIM_Base_SetConfig+0xaa>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4a26      	ldr	r2, [pc, #152]	; (800e45c <TIM_Base_SetConfig+0x140>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d108      	bne.n	800e3d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	4313      	orrs	r3, r2
 800e3d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	695b      	ldr	r3, [r3, #20]
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	68fa      	ldr	r2, [r7, #12]
 800e3ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	689a      	ldr	r2, [r3, #8]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	4a12      	ldr	r2, [pc, #72]	; (800e448 <TIM_Base_SetConfig+0x12c>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d013      	beq.n	800e42c <TIM_Base_SetConfig+0x110>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	4a14      	ldr	r2, [pc, #80]	; (800e458 <TIM_Base_SetConfig+0x13c>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d00f      	beq.n	800e42c <TIM_Base_SetConfig+0x110>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	4a14      	ldr	r2, [pc, #80]	; (800e460 <TIM_Base_SetConfig+0x144>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d00b      	beq.n	800e42c <TIM_Base_SetConfig+0x110>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	4a13      	ldr	r2, [pc, #76]	; (800e464 <TIM_Base_SetConfig+0x148>)
 800e418:	4293      	cmp	r3, r2
 800e41a:	d007      	beq.n	800e42c <TIM_Base_SetConfig+0x110>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4a12      	ldr	r2, [pc, #72]	; (800e468 <TIM_Base_SetConfig+0x14c>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d003      	beq.n	800e42c <TIM_Base_SetConfig+0x110>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	4a0d      	ldr	r2, [pc, #52]	; (800e45c <TIM_Base_SetConfig+0x140>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d103      	bne.n	800e434 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	691a      	ldr	r2, [r3, #16]
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2201      	movs	r2, #1
 800e438:	615a      	str	r2, [r3, #20]
}
 800e43a:	bf00      	nop
 800e43c:	3714      	adds	r7, #20
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop
 800e448:	40012c00 	.word	0x40012c00
 800e44c:	40000400 	.word	0x40000400
 800e450:	40000800 	.word	0x40000800
 800e454:	40000c00 	.word	0x40000c00
 800e458:	40013400 	.word	0x40013400
 800e45c:	40015000 	.word	0x40015000
 800e460:	40014000 	.word	0x40014000
 800e464:	40014400 	.word	0x40014400
 800e468:	40014800 	.word	0x40014800

0800e46c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6a1b      	ldr	r3, [r3, #32]
 800e47a:	f023 0201 	bic.w	r2, r3, #1
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a1b      	ldr	r3, [r3, #32]
 800e486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	699b      	ldr	r3, [r3, #24]
 800e492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e49e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f023 0303 	bic.w	r3, r3, #3
 800e4a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	f023 0302 	bic.w	r3, r3, #2
 800e4b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	697a      	ldr	r2, [r7, #20]
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	4a44      	ldr	r2, [pc, #272]	; (800e5d8 <TIM_OC1_SetConfig+0x16c>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d013      	beq.n	800e4f4 <TIM_OC1_SetConfig+0x88>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	4a43      	ldr	r2, [pc, #268]	; (800e5dc <TIM_OC1_SetConfig+0x170>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d00f      	beq.n	800e4f4 <TIM_OC1_SetConfig+0x88>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	4a42      	ldr	r2, [pc, #264]	; (800e5e0 <TIM_OC1_SetConfig+0x174>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d00b      	beq.n	800e4f4 <TIM_OC1_SetConfig+0x88>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	4a41      	ldr	r2, [pc, #260]	; (800e5e4 <TIM_OC1_SetConfig+0x178>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d007      	beq.n	800e4f4 <TIM_OC1_SetConfig+0x88>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	4a40      	ldr	r2, [pc, #256]	; (800e5e8 <TIM_OC1_SetConfig+0x17c>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d003      	beq.n	800e4f4 <TIM_OC1_SetConfig+0x88>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4a3f      	ldr	r2, [pc, #252]	; (800e5ec <TIM_OC1_SetConfig+0x180>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d119      	bne.n	800e528 <TIM_OC1_SetConfig+0xbc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d008      	beq.n	800e50e <TIM_OC1_SetConfig+0xa2>
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	2b08      	cmp	r3, #8
 800e502:	d004      	beq.n	800e50e <TIM_OC1_SetConfig+0xa2>
 800e504:	f641 4111 	movw	r1, #7185	; 0x1c11
 800e508:	4839      	ldr	r0, [pc, #228]	; (800e5f0 <TIM_OC1_SetConfig+0x184>)
 800e50a:	f7f4 f891 	bl	8002630 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	f023 0308 	bic.w	r3, r3, #8
 800e514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	697a      	ldr	r2, [r7, #20]
 800e51c:	4313      	orrs	r3, r2
 800e51e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	f023 0304 	bic.w	r3, r3, #4
 800e526:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4a2b      	ldr	r2, [pc, #172]	; (800e5d8 <TIM_OC1_SetConfig+0x16c>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d013      	beq.n	800e558 <TIM_OC1_SetConfig+0xec>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	4a2a      	ldr	r2, [pc, #168]	; (800e5dc <TIM_OC1_SetConfig+0x170>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d00f      	beq.n	800e558 <TIM_OC1_SetConfig+0xec>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4a29      	ldr	r2, [pc, #164]	; (800e5e0 <TIM_OC1_SetConfig+0x174>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d00b      	beq.n	800e558 <TIM_OC1_SetConfig+0xec>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	4a28      	ldr	r2, [pc, #160]	; (800e5e4 <TIM_OC1_SetConfig+0x178>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d007      	beq.n	800e558 <TIM_OC1_SetConfig+0xec>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4a27      	ldr	r2, [pc, #156]	; (800e5e8 <TIM_OC1_SetConfig+0x17c>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d003      	beq.n	800e558 <TIM_OC1_SetConfig+0xec>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4a26      	ldr	r2, [pc, #152]	; (800e5ec <TIM_OC1_SetConfig+0x180>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d12d      	bne.n	800e5b4 <TIM_OC1_SetConfig+0x148>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	699b      	ldr	r3, [r3, #24]
 800e55c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e560:	d008      	beq.n	800e574 <TIM_OC1_SetConfig+0x108>
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	699b      	ldr	r3, [r3, #24]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d004      	beq.n	800e574 <TIM_OC1_SetConfig+0x108>
 800e56a:	f641 411e 	movw	r1, #7198	; 0x1c1e
 800e56e:	4820      	ldr	r0, [pc, #128]	; (800e5f0 <TIM_OC1_SetConfig+0x184>)
 800e570:	f7f4 f85e 	bl	8002630 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	695b      	ldr	r3, [r3, #20]
 800e578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e57c:	d008      	beq.n	800e590 <TIM_OC1_SetConfig+0x124>
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	695b      	ldr	r3, [r3, #20]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d004      	beq.n	800e590 <TIM_OC1_SetConfig+0x124>
 800e586:	f641 411f 	movw	r1, #7199	; 0x1c1f
 800e58a:	4819      	ldr	r0, [pc, #100]	; (800e5f0 <TIM_OC1_SetConfig+0x184>)
 800e58c:	f7f4 f850 	bl	8002630 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e596:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e59e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	695b      	ldr	r3, [r3, #20]
 800e5a4:	693a      	ldr	r2, [r7, #16]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	699b      	ldr	r3, [r3, #24]
 800e5ae:	693a      	ldr	r2, [r7, #16]
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	693a      	ldr	r2, [r7, #16]
 800e5b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	68fa      	ldr	r2, [r7, #12]
 800e5be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	697a      	ldr	r2, [r7, #20]
 800e5cc:	621a      	str	r2, [r3, #32]
}
 800e5ce:	bf00      	nop
 800e5d0:	3718      	adds	r7, #24
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	40012c00 	.word	0x40012c00
 800e5dc:	40013400 	.word	0x40013400
 800e5e0:	40014000 	.word	0x40014000
 800e5e4:	40014400 	.word	0x40014400
 800e5e8:	40014800 	.word	0x40014800
 800e5ec:	40015000 	.word	0x40015000
 800e5f0:	0801cfc0 	.word	0x0801cfc0

0800e5f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6a1b      	ldr	r3, [r3, #32]
 800e602:	f023 0210 	bic.w	r2, r3, #16
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6a1b      	ldr	r3, [r3, #32]
 800e60e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	699b      	ldr	r3, [r3, #24]
 800e61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e62e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	021b      	lsls	r3, r3, #8
 800e636:	68fa      	ldr	r2, [r7, #12]
 800e638:	4313      	orrs	r3, r2
 800e63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	f023 0320 	bic.w	r3, r3, #32
 800e642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	011b      	lsls	r3, r3, #4
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	4313      	orrs	r3, r2
 800e64e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4a3f      	ldr	r2, [pc, #252]	; (800e750 <TIM_OC2_SetConfig+0x15c>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d007      	beq.n	800e668 <TIM_OC2_SetConfig+0x74>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a3e      	ldr	r2, [pc, #248]	; (800e754 <TIM_OC2_SetConfig+0x160>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d003      	beq.n	800e668 <TIM_OC2_SetConfig+0x74>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4a3d      	ldr	r2, [pc, #244]	; (800e758 <TIM_OC2_SetConfig+0x164>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d11a      	bne.n	800e69e <TIM_OC2_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d008      	beq.n	800e682 <TIM_OC2_SetConfig+0x8e>
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	2b08      	cmp	r3, #8
 800e676:	d004      	beq.n	800e682 <TIM_OC2_SetConfig+0x8e>
 800e678:	f641 415c 	movw	r1, #7260	; 0x1c5c
 800e67c:	4837      	ldr	r0, [pc, #220]	; (800e75c <TIM_OC2_SetConfig+0x168>)
 800e67e:	f7f3 ffd7 	bl	8002630 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	011b      	lsls	r3, r3, #4
 800e690:	697a      	ldr	r2, [r7, #20]
 800e692:	4313      	orrs	r3, r2
 800e694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e69c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4a2b      	ldr	r2, [pc, #172]	; (800e750 <TIM_OC2_SetConfig+0x15c>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d013      	beq.n	800e6ce <TIM_OC2_SetConfig+0xda>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4a2a      	ldr	r2, [pc, #168]	; (800e754 <TIM_OC2_SetConfig+0x160>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d00f      	beq.n	800e6ce <TIM_OC2_SetConfig+0xda>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4a2b      	ldr	r2, [pc, #172]	; (800e760 <TIM_OC2_SetConfig+0x16c>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d00b      	beq.n	800e6ce <TIM_OC2_SetConfig+0xda>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4a2a      	ldr	r2, [pc, #168]	; (800e764 <TIM_OC2_SetConfig+0x170>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d007      	beq.n	800e6ce <TIM_OC2_SetConfig+0xda>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4a29      	ldr	r2, [pc, #164]	; (800e768 <TIM_OC2_SetConfig+0x174>)
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d003      	beq.n	800e6ce <TIM_OC2_SetConfig+0xda>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	4a23      	ldr	r2, [pc, #140]	; (800e758 <TIM_OC2_SetConfig+0x164>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d12f      	bne.n	800e72e <TIM_OC2_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	699b      	ldr	r3, [r3, #24]
 800e6d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6d6:	d008      	beq.n	800e6ea <TIM_OC2_SetConfig+0xf6>
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	699b      	ldr	r3, [r3, #24]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d004      	beq.n	800e6ea <TIM_OC2_SetConfig+0xf6>
 800e6e0:	f641 416a 	movw	r1, #7274	; 0x1c6a
 800e6e4:	481d      	ldr	r0, [pc, #116]	; (800e75c <TIM_OC2_SetConfig+0x168>)
 800e6e6:	f7f3 ffa3 	bl	8002630 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	695b      	ldr	r3, [r3, #20]
 800e6ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e6f2:	d008      	beq.n	800e706 <TIM_OC2_SetConfig+0x112>
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	695b      	ldr	r3, [r3, #20]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d004      	beq.n	800e706 <TIM_OC2_SetConfig+0x112>
 800e6fc:	f641 416b 	movw	r1, #7275	; 0x1c6b
 800e700:	4816      	ldr	r0, [pc, #88]	; (800e75c <TIM_OC2_SetConfig+0x168>)
 800e702:	f7f3 ff95 	bl	8002630 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e70c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	695b      	ldr	r3, [r3, #20]
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	693a      	ldr	r2, [r7, #16]
 800e71e:	4313      	orrs	r3, r2
 800e720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	699b      	ldr	r3, [r3, #24]
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	693a      	ldr	r2, [r7, #16]
 800e72a:	4313      	orrs	r3, r2
 800e72c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	693a      	ldr	r2, [r7, #16]
 800e732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	68fa      	ldr	r2, [r7, #12]
 800e738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	697a      	ldr	r2, [r7, #20]
 800e746:	621a      	str	r2, [r3, #32]
}
 800e748:	bf00      	nop
 800e74a:	3718      	adds	r7, #24
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	40012c00 	.word	0x40012c00
 800e754:	40013400 	.word	0x40013400
 800e758:	40015000 	.word	0x40015000
 800e75c:	0801cfc0 	.word	0x0801cfc0
 800e760:	40014000 	.word	0x40014000
 800e764:	40014400 	.word	0x40014400
 800e768:	40014800 	.word	0x40014800

0800e76c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b086      	sub	sp, #24
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6a1b      	ldr	r3, [r3, #32]
 800e77a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a1b      	ldr	r3, [r3, #32]
 800e786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	69db      	ldr	r3, [r3, #28]
 800e792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e79a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e79e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f023 0303 	bic.w	r3, r3, #3
 800e7a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e7b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	021b      	lsls	r3, r3, #8
 800e7c0:	697a      	ldr	r2, [r7, #20]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a3f      	ldr	r2, [pc, #252]	; (800e8c8 <TIM_OC3_SetConfig+0x15c>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d007      	beq.n	800e7de <TIM_OC3_SetConfig+0x72>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a3e      	ldr	r2, [pc, #248]	; (800e8cc <TIM_OC3_SetConfig+0x160>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d003      	beq.n	800e7de <TIM_OC3_SetConfig+0x72>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a3d      	ldr	r2, [pc, #244]	; (800e8d0 <TIM_OC3_SetConfig+0x164>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d11a      	bne.n	800e814 <TIM_OC3_SetConfig+0xa8>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d008      	beq.n	800e7f8 <TIM_OC3_SetConfig+0x8c>
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	2b08      	cmp	r3, #8
 800e7ec:	d004      	beq.n	800e7f8 <TIM_OC3_SetConfig+0x8c>
 800e7ee:	f641 41a7 	movw	r1, #7335	; 0x1ca7
 800e7f2:	4838      	ldr	r0, [pc, #224]	; (800e8d4 <TIM_OC3_SetConfig+0x168>)
 800e7f4:	f7f3 ff1c 	bl	8002630 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e7fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	68db      	ldr	r3, [r3, #12]
 800e804:	021b      	lsls	r3, r3, #8
 800e806:	697a      	ldr	r2, [r7, #20]
 800e808:	4313      	orrs	r3, r2
 800e80a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e812:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	4a2c      	ldr	r2, [pc, #176]	; (800e8c8 <TIM_OC3_SetConfig+0x15c>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d013      	beq.n	800e844 <TIM_OC3_SetConfig+0xd8>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	4a2b      	ldr	r2, [pc, #172]	; (800e8cc <TIM_OC3_SetConfig+0x160>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d00f      	beq.n	800e844 <TIM_OC3_SetConfig+0xd8>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	4a2c      	ldr	r2, [pc, #176]	; (800e8d8 <TIM_OC3_SetConfig+0x16c>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d00b      	beq.n	800e844 <TIM_OC3_SetConfig+0xd8>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	4a2b      	ldr	r2, [pc, #172]	; (800e8dc <TIM_OC3_SetConfig+0x170>)
 800e830:	4293      	cmp	r3, r2
 800e832:	d007      	beq.n	800e844 <TIM_OC3_SetConfig+0xd8>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a2a      	ldr	r2, [pc, #168]	; (800e8e0 <TIM_OC3_SetConfig+0x174>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d003      	beq.n	800e844 <TIM_OC3_SetConfig+0xd8>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a24      	ldr	r2, [pc, #144]	; (800e8d0 <TIM_OC3_SetConfig+0x164>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d12f      	bne.n	800e8a4 <TIM_OC3_SetConfig+0x138>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	699b      	ldr	r3, [r3, #24]
 800e848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e84c:	d008      	beq.n	800e860 <TIM_OC3_SetConfig+0xf4>
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	699b      	ldr	r3, [r3, #24]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d004      	beq.n	800e860 <TIM_OC3_SetConfig+0xf4>
 800e856:	f641 41b4 	movw	r1, #7348	; 0x1cb4
 800e85a:	481e      	ldr	r0, [pc, #120]	; (800e8d4 <TIM_OC3_SetConfig+0x168>)
 800e85c:	f7f3 fee8 	bl	8002630 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	695b      	ldr	r3, [r3, #20]
 800e864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e868:	d008      	beq.n	800e87c <TIM_OC3_SetConfig+0x110>
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	695b      	ldr	r3, [r3, #20]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d004      	beq.n	800e87c <TIM_OC3_SetConfig+0x110>
 800e872:	f641 41b5 	movw	r1, #7349	; 0x1cb5
 800e876:	4817      	ldr	r0, [pc, #92]	; (800e8d4 <TIM_OC3_SetConfig+0x168>)
 800e878:	f7f3 feda 	bl	8002630 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e88a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	695b      	ldr	r3, [r3, #20]
 800e890:	011b      	lsls	r3, r3, #4
 800e892:	693a      	ldr	r2, [r7, #16]
 800e894:	4313      	orrs	r3, r2
 800e896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	699b      	ldr	r3, [r3, #24]
 800e89c:	011b      	lsls	r3, r3, #4
 800e89e:	693a      	ldr	r2, [r7, #16]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	693a      	ldr	r2, [r7, #16]
 800e8a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	68fa      	ldr	r2, [r7, #12]
 800e8ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	685a      	ldr	r2, [r3, #4]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	697a      	ldr	r2, [r7, #20]
 800e8bc:	621a      	str	r2, [r3, #32]
}
 800e8be:	bf00      	nop
 800e8c0:	3718      	adds	r7, #24
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	40012c00 	.word	0x40012c00
 800e8cc:	40013400 	.word	0x40013400
 800e8d0:	40015000 	.word	0x40015000
 800e8d4:	0801cfc0 	.word	0x0801cfc0
 800e8d8:	40014000 	.word	0x40014000
 800e8dc:	40014400 	.word	0x40014400
 800e8e0:	40014800 	.word	0x40014800

0800e8e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a1b      	ldr	r3, [r3, #32]
 800e8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	69db      	ldr	r3, [r3, #28]
 800e90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e91e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	021b      	lsls	r3, r3, #8
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	4313      	orrs	r3, r2
 800e92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	031b      	lsls	r3, r3, #12
 800e93a:	697a      	ldr	r2, [r7, #20]
 800e93c:	4313      	orrs	r3, r2
 800e93e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4a3f      	ldr	r2, [pc, #252]	; (800ea40 <TIM_OC4_SetConfig+0x15c>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d007      	beq.n	800e958 <TIM_OC4_SetConfig+0x74>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	4a3e      	ldr	r2, [pc, #248]	; (800ea44 <TIM_OC4_SetConfig+0x160>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d003      	beq.n	800e958 <TIM_OC4_SetConfig+0x74>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	4a3d      	ldr	r2, [pc, #244]	; (800ea48 <TIM_OC4_SetConfig+0x164>)
 800e954:	4293      	cmp	r3, r2
 800e956:	d11a      	bne.n	800e98e <TIM_OC4_SetConfig+0xaa>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d008      	beq.n	800e972 <TIM_OC4_SetConfig+0x8e>
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	2b08      	cmp	r3, #8
 800e966:	d004      	beq.n	800e972 <TIM_OC4_SetConfig+0x8e>
 800e968:	f641 41f2 	movw	r1, #7410	; 0x1cf2
 800e96c:	4837      	ldr	r0, [pc, #220]	; (800ea4c <TIM_OC4_SetConfig+0x168>)
 800e96e:	f7f3 fe5f 	bl	8002630 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	031b      	lsls	r3, r3, #12
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	4313      	orrs	r3, r2
 800e984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e98c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4a2b      	ldr	r2, [pc, #172]	; (800ea40 <TIM_OC4_SetConfig+0x15c>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d013      	beq.n	800e9be <TIM_OC4_SetConfig+0xda>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4a2a      	ldr	r2, [pc, #168]	; (800ea44 <TIM_OC4_SetConfig+0x160>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d00f      	beq.n	800e9be <TIM_OC4_SetConfig+0xda>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a2b      	ldr	r2, [pc, #172]	; (800ea50 <TIM_OC4_SetConfig+0x16c>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d00b      	beq.n	800e9be <TIM_OC4_SetConfig+0xda>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4a2a      	ldr	r2, [pc, #168]	; (800ea54 <TIM_OC4_SetConfig+0x170>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d007      	beq.n	800e9be <TIM_OC4_SetConfig+0xda>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4a29      	ldr	r2, [pc, #164]	; (800ea58 <TIM_OC4_SetConfig+0x174>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d003      	beq.n	800e9be <TIM_OC4_SetConfig+0xda>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4a23      	ldr	r2, [pc, #140]	; (800ea48 <TIM_OC4_SetConfig+0x164>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d12f      	bne.n	800ea1e <TIM_OC4_SetConfig+0x13a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9c6:	d008      	beq.n	800e9da <TIM_OC4_SetConfig+0xf6>
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d004      	beq.n	800e9da <TIM_OC4_SetConfig+0xf6>
 800e9d0:	f641 41ff 	movw	r1, #7423	; 0x1cff
 800e9d4:	481d      	ldr	r0, [pc, #116]	; (800ea4c <TIM_OC4_SetConfig+0x168>)
 800e9d6:	f7f3 fe2b 	bl	8002630 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	695b      	ldr	r3, [r3, #20]
 800e9de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9e2:	d008      	beq.n	800e9f6 <TIM_OC4_SetConfig+0x112>
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	695b      	ldr	r3, [r3, #20]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d004      	beq.n	800e9f6 <TIM_OC4_SetConfig+0x112>
 800e9ec:	f44f 51e8 	mov.w	r1, #7424	; 0x1d00
 800e9f0:	4816      	ldr	r0, [pc, #88]	; (800ea4c <TIM_OC4_SetConfig+0x168>)
 800e9f2:	f7f3 fe1d 	bl	8002630 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e9fc:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ea04:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	695b      	ldr	r3, [r3, #20]
 800ea0a:	019b      	lsls	r3, r3, #6
 800ea0c:	693a      	ldr	r2, [r7, #16]
 800ea0e:	4313      	orrs	r3, r2
 800ea10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	019b      	lsls	r3, r3, #6
 800ea18:	693a      	ldr	r2, [r7, #16]
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	693a      	ldr	r2, [r7, #16]
 800ea22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	685a      	ldr	r2, [r3, #4]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	697a      	ldr	r2, [r7, #20]
 800ea36:	621a      	str	r2, [r3, #32]
}
 800ea38:	bf00      	nop
 800ea3a:	3718      	adds	r7, #24
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}
 800ea40:	40012c00 	.word	0x40012c00
 800ea44:	40013400 	.word	0x40013400
 800ea48:	40015000 	.word	0x40015000
 800ea4c:	0801cfc0 	.word	0x0801cfc0
 800ea50:	40014000 	.word	0x40014000
 800ea54:	40014400 	.word	0x40014400
 800ea58:	40014800 	.word	0x40014800

0800ea5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b087      	sub	sp, #28
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a1b      	ldr	r3, [r3, #32]
 800ea6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6a1b      	ldr	r3, [r3, #32]
 800ea76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ea8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	68fa      	ldr	r2, [r7, #12]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800eaa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	041b      	lsls	r3, r3, #16
 800eaa8:	693a      	ldr	r2, [r7, #16]
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a19      	ldr	r2, [pc, #100]	; (800eb18 <TIM_OC5_SetConfig+0xbc>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d013      	beq.n	800eade <TIM_OC5_SetConfig+0x82>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4a18      	ldr	r2, [pc, #96]	; (800eb1c <TIM_OC5_SetConfig+0xc0>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d00f      	beq.n	800eade <TIM_OC5_SetConfig+0x82>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4a17      	ldr	r2, [pc, #92]	; (800eb20 <TIM_OC5_SetConfig+0xc4>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d00b      	beq.n	800eade <TIM_OC5_SetConfig+0x82>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	4a16      	ldr	r2, [pc, #88]	; (800eb24 <TIM_OC5_SetConfig+0xc8>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d007      	beq.n	800eade <TIM_OC5_SetConfig+0x82>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	4a15      	ldr	r2, [pc, #84]	; (800eb28 <TIM_OC5_SetConfig+0xcc>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d003      	beq.n	800eade <TIM_OC5_SetConfig+0x82>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a14      	ldr	r2, [pc, #80]	; (800eb2c <TIM_OC5_SetConfig+0xd0>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d109      	bne.n	800eaf2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	021b      	lsls	r3, r3, #8
 800eaec:	697a      	ldr	r2, [r7, #20]
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	697a      	ldr	r2, [r7, #20]
 800eaf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	685a      	ldr	r2, [r3, #4]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	693a      	ldr	r2, [r7, #16]
 800eb0a:	621a      	str	r2, [r3, #32]
}
 800eb0c:	bf00      	nop
 800eb0e:	371c      	adds	r7, #28
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr
 800eb18:	40012c00 	.word	0x40012c00
 800eb1c:	40013400 	.word	0x40013400
 800eb20:	40014000 	.word	0x40014000
 800eb24:	40014400 	.word	0x40014400
 800eb28:	40014800 	.word	0x40014800
 800eb2c:	40015000 	.word	0x40015000

0800eb30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b087      	sub	sp, #28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a1b      	ldr	r3, [r3, #32]
 800eb3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eb5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	021b      	lsls	r3, r3, #8
 800eb6a:	68fa      	ldr	r2, [r7, #12]
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	051b      	lsls	r3, r3, #20
 800eb7e:	693a      	ldr	r2, [r7, #16]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4a1a      	ldr	r2, [pc, #104]	; (800ebf0 <TIM_OC6_SetConfig+0xc0>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d013      	beq.n	800ebb4 <TIM_OC6_SetConfig+0x84>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4a19      	ldr	r2, [pc, #100]	; (800ebf4 <TIM_OC6_SetConfig+0xc4>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d00f      	beq.n	800ebb4 <TIM_OC6_SetConfig+0x84>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4a18      	ldr	r2, [pc, #96]	; (800ebf8 <TIM_OC6_SetConfig+0xc8>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d00b      	beq.n	800ebb4 <TIM_OC6_SetConfig+0x84>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4a17      	ldr	r2, [pc, #92]	; (800ebfc <TIM_OC6_SetConfig+0xcc>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d007      	beq.n	800ebb4 <TIM_OC6_SetConfig+0x84>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	4a16      	ldr	r2, [pc, #88]	; (800ec00 <TIM_OC6_SetConfig+0xd0>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d003      	beq.n	800ebb4 <TIM_OC6_SetConfig+0x84>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	4a15      	ldr	r2, [pc, #84]	; (800ec04 <TIM_OC6_SetConfig+0xd4>)
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d109      	bne.n	800ebc8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ebba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	029b      	lsls	r3, r3, #10
 800ebc2:	697a      	ldr	r2, [r7, #20]
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	697a      	ldr	r2, [r7, #20]
 800ebcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	685a      	ldr	r2, [r3, #4]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	693a      	ldr	r2, [r7, #16]
 800ebe0:	621a      	str	r2, [r3, #32]
}
 800ebe2:	bf00      	nop
 800ebe4:	371c      	adds	r7, #28
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	40012c00 	.word	0x40012c00
 800ebf4:	40013400 	.word	0x40013400
 800ebf8:	40014000 	.word	0x40014000
 800ebfc:	40014400 	.word	0x40014400
 800ec00:	40014800 	.word	0x40014800
 800ec04:	40015000 	.word	0x40015000

0800ec08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b087      	sub	sp, #28
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	6a1b      	ldr	r3, [r3, #32]
 800ec18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6a1b      	ldr	r3, [r3, #32]
 800ec1e:	f023 0201 	bic.w	r2, r3, #1
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	699b      	ldr	r3, [r3, #24]
 800ec2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ec32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	011b      	lsls	r3, r3, #4
 800ec38:	693a      	ldr	r2, [r7, #16]
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	f023 030a 	bic.w	r3, r3, #10
 800ec44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ec46:	697a      	ldr	r2, [r7, #20]
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	693a      	ldr	r2, [r7, #16]
 800ec52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	697a      	ldr	r2, [r7, #20]
 800ec58:	621a      	str	r2, [r3, #32]
}
 800ec5a:	bf00      	nop
 800ec5c:	371c      	adds	r7, #28
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr

0800ec66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ec66:	b480      	push	{r7}
 800ec68:	b087      	sub	sp, #28
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	60f8      	str	r0, [r7, #12]
 800ec6e:	60b9      	str	r1, [r7, #8]
 800ec70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6a1b      	ldr	r3, [r3, #32]
 800ec76:	f023 0210 	bic.w	r2, r3, #16
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	699b      	ldr	r3, [r3, #24]
 800ec82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6a1b      	ldr	r3, [r3, #32]
 800ec88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ec90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	031b      	lsls	r3, r3, #12
 800ec96:	697a      	ldr	r2, [r7, #20]
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800eca2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	011b      	lsls	r3, r3, #4
 800eca8:	693a      	ldr	r2, [r7, #16]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	697a      	ldr	r2, [r7, #20]
 800ecb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	693a      	ldr	r2, [r7, #16]
 800ecb8:	621a      	str	r2, [r3, #32]
}
 800ecba:	bf00      	nop
 800ecbc:	371c      	adds	r7, #28
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr

0800ecc6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ecc6:	b480      	push	{r7}
 800ecc8:	b085      	sub	sp, #20
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
 800ecce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	689b      	ldr	r3, [r3, #8]
 800ecd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ecdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ece0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ece2:	683a      	ldr	r2, [r7, #0]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	4313      	orrs	r3, r2
 800ece8:	f043 0307 	orr.w	r3, r3, #7
 800ecec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	609a      	str	r2, [r3, #8]
}
 800ecf4:	bf00      	nop
 800ecf6:	3714      	adds	r7, #20
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr

0800ed00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b087      	sub	sp, #28
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	607a      	str	r2, [r7, #4]
 800ed0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	021a      	lsls	r2, r3, #8
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	431a      	orrs	r2, r3
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	697a      	ldr	r2, [r7, #20]
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	697a      	ldr	r2, [r7, #20]
 800ed32:	609a      	str	r2, [r3, #8]
}
 800ed34:	bf00      	nop
 800ed36:	371c      	adds	r7, #28
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b084      	sub	sp, #16
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4a39      	ldr	r2, [pc, #228]	; (800ee34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d031      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed5c:	d02c      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	4a35      	ldr	r2, [pc, #212]	; (800ee38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d027      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a33      	ldr	r2, [pc, #204]	; (800ee3c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d022      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	4a32      	ldr	r2, [pc, #200]	; (800ee40 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ed78:	4293      	cmp	r3, r2
 800ed7a:	d01d      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a30      	ldr	r2, [pc, #192]	; (800ee44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d018      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4a2f      	ldr	r2, [pc, #188]	; (800ee48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d013      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	4a2d      	ldr	r2, [pc, #180]	; (800ee4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d00e      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	4a2c      	ldr	r2, [pc, #176]	; (800ee50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d009      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a2a      	ldr	r2, [pc, #168]	; (800ee54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d004      	beq.n	800edb8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800edae:	f640 0193 	movw	r1, #2195	; 0x893
 800edb2:	4829      	ldr	r0, [pc, #164]	; (800ee58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800edb4:	f7f3 fc3c 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d025      	beq.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b10      	cmp	r3, #16
 800edc6:	d021      	beq.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b20      	cmp	r3, #32
 800edce:	d01d      	beq.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2b30      	cmp	r3, #48	; 0x30
 800edd6:	d019      	beq.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	2b40      	cmp	r3, #64	; 0x40
 800edde:	d015      	beq.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2b50      	cmp	r3, #80	; 0x50
 800ede6:	d011      	beq.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	2b60      	cmp	r3, #96	; 0x60
 800edee:	d00d      	beq.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2b70      	cmp	r3, #112	; 0x70
 800edf6:	d009      	beq.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee00:	d004      	beq.n	800ee0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800ee02:	f640 0194 	movw	r1, #2196	; 0x894
 800ee06:	4814      	ldr	r0, [pc, #80]	; (800ee58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ee08:	f7f3 fc12 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	2b80      	cmp	r3, #128	; 0x80
 800ee12:	d008      	beq.n	800ee26 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	689b      	ldr	r3, [r3, #8]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d004      	beq.n	800ee26 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
 800ee1c:	f640 0195 	movw	r1, #2197	; 0x895
 800ee20:	480d      	ldr	r0, [pc, #52]	; (800ee58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ee22:	f7f3 fc05 	bl	8002630 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ee2c:	2b01      	cmp	r3, #1
 800ee2e:	d115      	bne.n	800ee5c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800ee30:	2302      	movs	r3, #2
 800ee32:	e0e1      	b.n	800eff8 <HAL_TIMEx_MasterConfigSynchronization+0x2b8>
 800ee34:	40012c00 	.word	0x40012c00
 800ee38:	40000400 	.word	0x40000400
 800ee3c:	40000800 	.word	0x40000800
 800ee40:	40000c00 	.word	0x40000c00
 800ee44:	40001000 	.word	0x40001000
 800ee48:	40001400 	.word	0x40001400
 800ee4c:	40013400 	.word	0x40013400
 800ee50:	40014000 	.word	0x40014000
 800ee54:	40015000 	.word	0x40015000
 800ee58:	0801cff8 	.word	0x0801cff8
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2201      	movs	r2, #1
 800ee60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2202      	movs	r2, #2
 800ee68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a5f      	ldr	r2, [pc, #380]	; (800f000 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d009      	beq.n	800ee9a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a5e      	ldr	r2, [pc, #376]	; (800f004 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d004      	beq.n	800ee9a <HAL_TIMEx_MasterConfigSynchronization+0x15a>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a5c      	ldr	r2, [pc, #368]	; (800f008 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d161      	bne.n	800ef5e <HAL_TIMEx_MasterConfigSynchronization+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d054      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eeaa:	d04f      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eeb4:	d04a      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eebe:	d045      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	685b      	ldr	r3, [r3, #4]
 800eec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eec8:	d040      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800eed2:	d03b      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800eedc:	d036      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800eee6:	d031      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800eef0:	d02c      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eefa:	d027      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	685b      	ldr	r3, [r3, #4]
 800ef00:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 800ef04:	d022      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ef0e:	d01d      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 800ef18:	d018      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ef22:	d013      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800ef2c:	d00e      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 800ef36:	d009      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800ef40:	d004      	beq.n	800ef4c <HAL_TIMEx_MasterConfigSynchronization+0x20c>
 800ef42:	f640 01a7 	movw	r1, #2215	; 0x8a7
 800ef46:	4831      	ldr	r0, [pc, #196]	; (800f00c <HAL_TIMEx_MasterConfigSynchronization+0x2cc>)
 800ef48:	f7f3 fb72 	bl	8002630 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ef52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	68fa      	ldr	r2, [r7, #12]
 800ef5a:	4313      	orrs	r3, r2
 800ef5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ef64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68fa      	ldr	r2, [r7, #12]
 800ef70:	4313      	orrs	r3, r2
 800ef72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	68fa      	ldr	r2, [r7, #12]
 800ef7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a1f      	ldr	r2, [pc, #124]	; (800f000 <HAL_TIMEx_MasterConfigSynchronization+0x2c0>)
 800ef82:	4293      	cmp	r3, r2
 800ef84:	d022      	beq.n	800efcc <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef8e:	d01d      	beq.n	800efcc <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a1e      	ldr	r2, [pc, #120]	; (800f010 <HAL_TIMEx_MasterConfigSynchronization+0x2d0>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d018      	beq.n	800efcc <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	4a1d      	ldr	r2, [pc, #116]	; (800f014 <HAL_TIMEx_MasterConfigSynchronization+0x2d4>)
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d013      	beq.n	800efcc <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4a1b      	ldr	r2, [pc, #108]	; (800f018 <HAL_TIMEx_MasterConfigSynchronization+0x2d8>)
 800efaa:	4293      	cmp	r3, r2
 800efac:	d00e      	beq.n	800efcc <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4a14      	ldr	r2, [pc, #80]	; (800f004 <HAL_TIMEx_MasterConfigSynchronization+0x2c4>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d009      	beq.n	800efcc <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	4a17      	ldr	r2, [pc, #92]	; (800f01c <HAL_TIMEx_MasterConfigSynchronization+0x2dc>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d004      	beq.n	800efcc <HAL_TIMEx_MasterConfigSynchronization+0x28c>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4a10      	ldr	r2, [pc, #64]	; (800f008 <HAL_TIMEx_MasterConfigSynchronization+0x2c8>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d10c      	bne.n	800efe6 <HAL_TIMEx_MasterConfigSynchronization+0x2a6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	68ba      	ldr	r2, [r7, #8]
 800efda:	4313      	orrs	r3, r2
 800efdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	68ba      	ldr	r2, [r7, #8]
 800efe4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2201      	movs	r2, #1
 800efea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2200      	movs	r2, #0
 800eff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eff6:	2300      	movs	r3, #0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3710      	adds	r7, #16
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	40012c00 	.word	0x40012c00
 800f004:	40013400 	.word	0x40013400
 800f008:	40015000 	.word	0x40015000
 800f00c:	0801cff8 	.word	0x0801cff8
 800f010:	40000400 	.word	0x40000400
 800f014:	40000800 	.word	0x40000800
 800f018:	40000c00 	.word	0x40000c00
 800f01c:	40014000 	.word	0x40014000

0800f020 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f02a:	2300      	movs	r3, #0
 800f02c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a4c      	ldr	r2, [pc, #304]	; (800f164 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d01d      	beq.n	800f074 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a4a      	ldr	r2, [pc, #296]	; (800f168 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d018      	beq.n	800f074 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a49      	ldr	r2, [pc, #292]	; (800f16c <HAL_TIMEx_ConfigBreakDeadTime+0x14c>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d013      	beq.n	800f074 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4a47      	ldr	r2, [pc, #284]	; (800f170 <HAL_TIMEx_ConfigBreakDeadTime+0x150>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d00e      	beq.n	800f074 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	4a46      	ldr	r2, [pc, #280]	; (800f174 <HAL_TIMEx_ConfigBreakDeadTime+0x154>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d009      	beq.n	800f074 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a44      	ldr	r2, [pc, #272]	; (800f178 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d004      	beq.n	800f074 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
 800f06a:	f640 01dc 	movw	r1, #2268	; 0x8dc
 800f06e:	4843      	ldr	r0, [pc, #268]	; (800f17c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f070:	f7f3 fade 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f07c:	d008      	beq.n	800f090 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d004      	beq.n	800f090 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 800f086:	f640 01dd 	movw	r1, #2269	; 0x8dd
 800f08a:	483c      	ldr	r0, [pc, #240]	; (800f17c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f08c:	f7f3 fad0 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f098:	d008      	beq.n	800f0ac <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d004      	beq.n	800f0ac <HAL_TIMEx_ConfigBreakDeadTime+0x8c>
 800f0a2:	f640 01de 	movw	r1, #2270	; 0x8de
 800f0a6:	4835      	ldr	r0, [pc, #212]	; (800f17c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f0a8:	f7f3 fac2 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d013      	beq.n	800f0dc <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0bc:	d00e      	beq.n	800f0dc <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	689b      	ldr	r3, [r3, #8]
 800f0c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0c6:	d009      	beq.n	800f0dc <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f0d0:	d004      	beq.n	800f0dc <HAL_TIMEx_ConfigBreakDeadTime+0xbc>
 800f0d2:	f640 01df 	movw	r1, #2271	; 0x8df
 800f0d6:	4829      	ldr	r0, [pc, #164]	; (800f17c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f0d8:	f7f3 faaa 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	2bff      	cmp	r3, #255	; 0xff
 800f0e2:	d904      	bls.n	800f0ee <HAL_TIMEx_ConfigBreakDeadTime+0xce>
 800f0e4:	f44f 610e 	mov.w	r1, #2272	; 0x8e0
 800f0e8:	4824      	ldr	r0, [pc, #144]	; (800f17c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f0ea:	f7f3 faa1 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0f6:	d008      	beq.n	800f10a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	691b      	ldr	r3, [r3, #16]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d004      	beq.n	800f10a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 800f100:	f640 01e1 	movw	r1, #2273	; 0x8e1
 800f104:	481d      	ldr	r0, [pc, #116]	; (800f17c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f106:	f7f3 fa93 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	695b      	ldr	r3, [r3, #20]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d009      	beq.n	800f126 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	695b      	ldr	r3, [r3, #20]
 800f116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f11a:	d004      	beq.n	800f126 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
 800f11c:	f640 01e2 	movw	r1, #2274	; 0x8e2
 800f120:	4816      	ldr	r0, [pc, #88]	; (800f17c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f122:	f7f3 fa85 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	699b      	ldr	r3, [r3, #24]
 800f12a:	2b0f      	cmp	r3, #15
 800f12c:	d904      	bls.n	800f138 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800f12e:	f640 01e3 	movw	r1, #2275	; 0x8e3
 800f132:	4812      	ldr	r0, [pc, #72]	; (800f17c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f134:	f7f3 fa7c 	bl	8002630 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f13c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f140:	d008      	beq.n	800f154 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f146:	2b00      	cmp	r3, #0
 800f148:	d004      	beq.n	800f154 <HAL_TIMEx_ConfigBreakDeadTime+0x134>
 800f14a:	f640 01e4 	movw	r1, #2276	; 0x8e4
 800f14e:	480b      	ldr	r0, [pc, #44]	; (800f17c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800f150:	f7f3 fa6e 	bl	8002630 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f15a:	2b01      	cmp	r3, #1
 800f15c:	d110      	bne.n	800f180 <HAL_TIMEx_ConfigBreakDeadTime+0x160>
 800f15e:	2302      	movs	r3, #2
 800f160:	e0e6      	b.n	800f330 <HAL_TIMEx_ConfigBreakDeadTime+0x310>
 800f162:	bf00      	nop
 800f164:	40012c00 	.word	0x40012c00
 800f168:	40013400 	.word	0x40013400
 800f16c:	40014000 	.word	0x40014000
 800f170:	40014400 	.word	0x40014400
 800f174:	40014800 	.word	0x40014800
 800f178:	40015000 	.word	0x40015000
 800f17c:	0801cff8 	.word	0x0801cff8
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	4313      	orrs	r3, r2
 800f194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	691b      	ldr	r3, [r3, #16]
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	695b      	ldr	r3, [r3, #20]
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	699b      	ldr	r3, [r3, #24]
 800f1f4:	041b      	lsls	r3, r3, #16
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4a4e      	ldr	r2, [pc, #312]	; (800f338 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d009      	beq.n	800f218 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a4c      	ldr	r2, [pc, #304]	; (800f33c <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d004      	beq.n	800f218 <HAL_TIMEx_ConfigBreakDeadTime+0x1f8>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	4a4b      	ldr	r2, [pc, #300]	; (800f340 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 800f214:	4293      	cmp	r3, r2
 800f216:	d114      	bne.n	800f242 <HAL_TIMEx_ConfigBreakDeadTime+0x222>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	69db      	ldr	r3, [r3, #28]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d009      	beq.n	800f234 <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	69db      	ldr	r3, [r3, #28]
 800f224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f228:	d004      	beq.n	800f234 <HAL_TIMEx_ConfigBreakDeadTime+0x214>
 800f22a:	f640 01f9 	movw	r1, #2297	; 0x8f9
 800f22e:	4845      	ldr	r0, [pc, #276]	; (800f344 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 800f230:	f7f3 f9fe 	bl	8002630 <assert_failed>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	69db      	ldr	r3, [r3, #28]
 800f23e:	4313      	orrs	r3, r2
 800f240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4a3c      	ldr	r2, [pc, #240]	; (800f338 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d009      	beq.n	800f260 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4a3a      	ldr	r2, [pc, #232]	; (800f33c <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d004      	beq.n	800f260 <HAL_TIMEx_ConfigBreakDeadTime+0x240>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	4a39      	ldr	r2, [pc, #228]	; (800f340 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d15e      	bne.n	800f31e <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	6a1b      	ldr	r3, [r3, #32]
 800f264:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f268:	d008      	beq.n	800f27c <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	6a1b      	ldr	r3, [r3, #32]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d004      	beq.n	800f27c <HAL_TIMEx_ConfigBreakDeadTime+0x25c>
 800f272:	f640 1102 	movw	r1, #2306	; 0x902
 800f276:	4833      	ldr	r0, [pc, #204]	; (800f344 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 800f278:	f7f3 f9da 	bl	8002630 <assert_failed>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f280:	2b00      	cmp	r3, #0
 800f282:	d009      	beq.n	800f298 <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f28c:	d004      	beq.n	800f298 <HAL_TIMEx_ConfigBreakDeadTime+0x278>
 800f28e:	f640 1103 	movw	r1, #2307	; 0x903
 800f292:	482c      	ldr	r0, [pc, #176]	; (800f344 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 800f294:	f7f3 f9cc 	bl	8002630 <assert_failed>
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f29c:	2b0f      	cmp	r3, #15
 800f29e:	d904      	bls.n	800f2aa <HAL_TIMEx_ConfigBreakDeadTime+0x28a>
 800f2a0:	f640 1104 	movw	r1, #2308	; 0x904
 800f2a4:	4827      	ldr	r0, [pc, #156]	; (800f344 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 800f2a6:	f7f3 f9c3 	bl	8002630 <assert_failed>

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2b4:	051b      	lsls	r3, r3, #20
 800f2b6:	4313      	orrs	r3, r2
 800f2b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	6a1b      	ldr	r3, [r3, #32]
 800f2c4:	4313      	orrs	r3, r2
 800f2c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	4a17      	ldr	r2, [pc, #92]	; (800f338 <HAL_TIMEx_ConfigBreakDeadTime+0x318>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d009      	beq.n	800f2f4 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	4a15      	ldr	r2, [pc, #84]	; (800f33c <HAL_TIMEx_ConfigBreakDeadTime+0x31c>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d004      	beq.n	800f2f4 <HAL_TIMEx_ConfigBreakDeadTime+0x2d4>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	4a14      	ldr	r2, [pc, #80]	; (800f340 <HAL_TIMEx_ConfigBreakDeadTime+0x320>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d114      	bne.n	800f31e <HAL_TIMEx_ConfigBreakDeadTime+0x2fe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d009      	beq.n	800f310 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f304:	d004      	beq.n	800f310 <HAL_TIMEx_ConfigBreakDeadTime+0x2f0>
 800f306:	f640 110e 	movw	r1, #2318	; 0x90e
 800f30a:	480e      	ldr	r0, [pc, #56]	; (800f344 <HAL_TIMEx_ConfigBreakDeadTime+0x324>)
 800f30c:	f7f3 f990 	bl	8002630 <assert_failed>

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f31a:	4313      	orrs	r3, r2
 800f31c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f32e:	2300      	movs	r3, #0
}
 800f330:	4618      	mov	r0, r3
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	40012c00 	.word	0x40012c00
 800f33c:	40013400 	.word	0x40013400
 800f340:	40015000 	.word	0x40015000
 800f344:	0801cff8 	.word	0x0801cff8

0800f348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d101      	bne.n	800f35a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f356:	2301      	movs	r3, #1
 800f358:	e08d      	b.n	800f476 <HAL_UART_Init+0x12e>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	699b      	ldr	r3, [r3, #24]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d023      	beq.n	800f3aa <HAL_UART_Init+0x62>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4a46      	ldr	r2, [pc, #280]	; (800f480 <HAL_UART_Init+0x138>)
 800f368:	4293      	cmp	r3, r2
 800f36a:	d041      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4a44      	ldr	r2, [pc, #272]	; (800f484 <HAL_UART_Init+0x13c>)
 800f372:	4293      	cmp	r3, r2
 800f374:	d03c      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	4a43      	ldr	r2, [pc, #268]	; (800f488 <HAL_UART_Init+0x140>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d037      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a41      	ldr	r2, [pc, #260]	; (800f48c <HAL_UART_Init+0x144>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d032      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4a40      	ldr	r2, [pc, #256]	; (800f490 <HAL_UART_Init+0x148>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d02d      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4a3e      	ldr	r2, [pc, #248]	; (800f494 <HAL_UART_Init+0x14c>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d028      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f39e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800f3a2:	483d      	ldr	r0, [pc, #244]	; (800f498 <HAL_UART_Init+0x150>)
 800f3a4:	f7f3 f944 	bl	8002630 <assert_failed>
 800f3a8:	e022      	b.n	800f3f0 <HAL_UART_Init+0xa8>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	4a34      	ldr	r2, [pc, #208]	; (800f480 <HAL_UART_Init+0x138>)
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d01d      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	4a32      	ldr	r2, [pc, #200]	; (800f484 <HAL_UART_Init+0x13c>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d018      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	4a31      	ldr	r2, [pc, #196]	; (800f488 <HAL_UART_Init+0x140>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d013      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4a2f      	ldr	r2, [pc, #188]	; (800f48c <HAL_UART_Init+0x144>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d00e      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4a2e      	ldr	r2, [pc, #184]	; (800f490 <HAL_UART_Init+0x148>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d009      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4a2c      	ldr	r2, [pc, #176]	; (800f494 <HAL_UART_Init+0x14c>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d004      	beq.n	800f3f0 <HAL_UART_Init+0xa8>
 800f3e6:	f240 1143 	movw	r1, #323	; 0x143
 800f3ea:	482b      	ldr	r0, [pc, #172]	; (800f498 <HAL_UART_Init+0x150>)
 800f3ec:	f7f3 f920 	bl	8002630 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d106      	bne.n	800f408 <HAL_UART_Init+0xc0>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f7f4 fd36 	bl	8003e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2224      	movs	r2, #36	; 0x24
 800f40c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	681a      	ldr	r2, [r3, #0]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	f022 0201 	bic.w	r2, r2, #1
 800f41e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 f83b 	bl	800f49c <UART_SetConfig>
 800f426:	4603      	mov	r3, r0
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d101      	bne.n	800f430 <HAL_UART_Init+0xe8>
  {
    return HAL_ERROR;
 800f42c:	2301      	movs	r3, #1
 800f42e:	e022      	b.n	800f476 <HAL_UART_Init+0x12e>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <HAL_UART_Init+0xf6>
  {
    UART_AdvFeatureConfig(huart);
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 fc0f 	bl	800fc5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	685a      	ldr	r2, [r3, #4]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f44c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	689a      	ldr	r2, [r3, #8]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f45c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f042 0201 	orr.w	r2, r2, #1
 800f46c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 fd54 	bl	800ff1c <UART_CheckIdleState>
 800f474:	4603      	mov	r3, r0
}
 800f476:	4618      	mov	r0, r3
 800f478:	3708      	adds	r7, #8
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	40013800 	.word	0x40013800
 800f484:	40004400 	.word	0x40004400
 800f488:	40004800 	.word	0x40004800
 800f48c:	40004c00 	.word	0x40004c00
 800f490:	40005000 	.word	0x40005000
 800f494:	40008000 	.word	0x40008000
 800f498:	0801d034 	.word	0x0801d034

0800f49c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f49c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4a0:	b08c      	sub	sp, #48	; 0x30
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	4a17      	ldr	r2, [pc, #92]	; (800f510 <UART_SetConfig+0x74>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d904      	bls.n	800f4c0 <UART_SetConfig+0x24>
 800f4b6:	f640 31da 	movw	r1, #3034	; 0xbda
 800f4ba:	4816      	ldr	r0, [pc, #88]	; (800f514 <UART_SetConfig+0x78>)
 800f4bc:	f7f3 f8b8 	bl	8002630 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	689b      	ldr	r3, [r3, #8]
 800f4c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4c8:	d00d      	beq.n	800f4e6 <UART_SetConfig+0x4a>
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d009      	beq.n	800f4e6 <UART_SetConfig+0x4a>
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	689b      	ldr	r3, [r3, #8]
 800f4d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4da:	d004      	beq.n	800f4e6 <UART_SetConfig+0x4a>
 800f4dc:	f640 31db 	movw	r1, #3035	; 0xbdb
 800f4e0:	480c      	ldr	r0, [pc, #48]	; (800f514 <UART_SetConfig+0x78>)
 800f4e2:	f7f3 f8a5 	bl	8002630 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4a0b      	ldr	r2, [pc, #44]	; (800f518 <UART_SetConfig+0x7c>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d115      	bne.n	800f51c <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d037      	beq.n	800f568 <UART_SetConfig+0xcc>
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f500:	d032      	beq.n	800f568 <UART_SetConfig+0xcc>
 800f502:	f640 31de 	movw	r1, #3038	; 0xbde
 800f506:	4803      	ldr	r0, [pc, #12]	; (800f514 <UART_SetConfig+0x78>)
 800f508:	f7f3 f892 	bl	8002630 <assert_failed>
 800f50c:	e02c      	b.n	800f568 <UART_SetConfig+0xcc>
 800f50e:	bf00      	nop
 800f510:	011e1a30 	.word	0x011e1a30
 800f514:	0801d034 	.word	0x0801d034
 800f518:	40008000 	.word	0x40008000
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	68db      	ldr	r3, [r3, #12]
 800f520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f524:	d012      	beq.n	800f54c <UART_SetConfig+0xb0>
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d00e      	beq.n	800f54c <UART_SetConfig+0xb0>
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	68db      	ldr	r3, [r3, #12]
 800f532:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f536:	d009      	beq.n	800f54c <UART_SetConfig+0xb0>
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f540:	d004      	beq.n	800f54c <UART_SetConfig+0xb0>
 800f542:	f640 31e2 	movw	r1, #3042	; 0xbe2
 800f546:	489e      	ldr	r0, [pc, #632]	; (800f7c0 <UART_SetConfig+0x324>)
 800f548:	f7f3 f872 	bl	8002630 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	6a1b      	ldr	r3, [r3, #32]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d009      	beq.n	800f568 <UART_SetConfig+0xcc>
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	6a1b      	ldr	r3, [r3, #32]
 800f558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f55c:	d004      	beq.n	800f568 <UART_SetConfig+0xcc>
 800f55e:	f640 31e3 	movw	r1, #3043	; 0xbe3
 800f562:	4897      	ldr	r0, [pc, #604]	; (800f7c0 <UART_SetConfig+0x324>)
 800f564:	f7f3 f864 	bl	8002630 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	691b      	ldr	r3, [r3, #16]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d00e      	beq.n	800f58e <UART_SetConfig+0xf2>
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	691b      	ldr	r3, [r3, #16]
 800f574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f578:	d009      	beq.n	800f58e <UART_SetConfig+0xf2>
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	691b      	ldr	r3, [r3, #16]
 800f57e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f582:	d004      	beq.n	800f58e <UART_SetConfig+0xf2>
 800f584:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800f588:	488d      	ldr	r0, [pc, #564]	; (800f7c0 <UART_SetConfig+0x324>)
 800f58a:	f7f3 f851 	bl	8002630 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	695b      	ldr	r3, [r3, #20]
 800f592:	f023 030c 	bic.w	r3, r3, #12
 800f596:	2b00      	cmp	r3, #0
 800f598:	d103      	bne.n	800f5a2 <UART_SetConfig+0x106>
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	695b      	ldr	r3, [r3, #20]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d104      	bne.n	800f5ac <UART_SetConfig+0x110>
 800f5a2:	f640 31e7 	movw	r1, #3047	; 0xbe7
 800f5a6:	4886      	ldr	r0, [pc, #536]	; (800f7c0 <UART_SetConfig+0x324>)
 800f5a8:	f7f3 f842 	bl	8002630 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	699b      	ldr	r3, [r3, #24]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d013      	beq.n	800f5dc <UART_SetConfig+0x140>
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	699b      	ldr	r3, [r3, #24]
 800f5b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5bc:	d00e      	beq.n	800f5dc <UART_SetConfig+0x140>
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	699b      	ldr	r3, [r3, #24]
 800f5c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5c6:	d009      	beq.n	800f5dc <UART_SetConfig+0x140>
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	699b      	ldr	r3, [r3, #24]
 800f5cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f5d0:	d004      	beq.n	800f5dc <UART_SetConfig+0x140>
 800f5d2:	f640 31e8 	movw	r1, #3048	; 0xbe8
 800f5d6:	487a      	ldr	r0, [pc, #488]	; (800f7c0 <UART_SetConfig+0x324>)
 800f5d8:	f7f3 f82a 	bl	8002630 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	69db      	ldr	r3, [r3, #28]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d009      	beq.n	800f5f8 <UART_SetConfig+0x15c>
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	69db      	ldr	r3, [r3, #28]
 800f5e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5ec:	d004      	beq.n	800f5f8 <UART_SetConfig+0x15c>
 800f5ee:	f640 31e9 	movw	r1, #3049	; 0xbe9
 800f5f2:	4873      	ldr	r0, [pc, #460]	; (800f7c0 <UART_SetConfig+0x324>)
 800f5f4:	f7f3 f81c 	bl	8002630 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d030      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f604:	2b01      	cmp	r3, #1
 800f606:	d02c      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60c:	2b02      	cmp	r3, #2
 800f60e:	d028      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f614:	2b03      	cmp	r3, #3
 800f616:	d024      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f61c:	2b04      	cmp	r3, #4
 800f61e:	d020      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f624:	2b05      	cmp	r3, #5
 800f626:	d01c      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f62c:	2b06      	cmp	r3, #6
 800f62e:	d018      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f634:	2b07      	cmp	r3, #7
 800f636:	d014      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f63c:	2b08      	cmp	r3, #8
 800f63e:	d010      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f644:	2b09      	cmp	r3, #9
 800f646:	d00c      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f64c:	2b0a      	cmp	r3, #10
 800f64e:	d008      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f654:	2b0b      	cmp	r3, #11
 800f656:	d004      	beq.n	800f662 <UART_SetConfig+0x1c6>
 800f658:	f640 31ea 	movw	r1, #3050	; 0xbea
 800f65c:	4858      	ldr	r0, [pc, #352]	; (800f7c0 <UART_SetConfig+0x324>)
 800f65e:	f7f2 ffe7 	bl	8002630 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	689a      	ldr	r2, [r3, #8]
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	691b      	ldr	r3, [r3, #16]
 800f66a:	431a      	orrs	r2, r3
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	695b      	ldr	r3, [r3, #20]
 800f670:	431a      	orrs	r2, r3
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	69db      	ldr	r3, [r3, #28]
 800f676:	4313      	orrs	r3, r2
 800f678:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	4b50      	ldr	r3, [pc, #320]	; (800f7c4 <UART_SetConfig+0x328>)
 800f682:	4013      	ands	r3, r2
 800f684:	697a      	ldr	r2, [r7, #20]
 800f686:	6812      	ldr	r2, [r2, #0]
 800f688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f68a:	430b      	orrs	r3, r1
 800f68c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	68da      	ldr	r2, [r3, #12]
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	430a      	orrs	r2, r1
 800f6a2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	699b      	ldr	r3, [r3, #24]
 800f6a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4a46      	ldr	r2, [pc, #280]	; (800f7c8 <UART_SetConfig+0x32c>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d004      	beq.n	800f6be <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	6a1b      	ldr	r3, [r3, #32]
 800f6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800f6c8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800f6cc:	697a      	ldr	r2, [r7, #20]
 800f6ce:	6812      	ldr	r2, [r2, #0]
 800f6d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6d2:	430b      	orrs	r3, r1
 800f6d4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f6d6:	697b      	ldr	r3, [r7, #20]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6dc:	f023 010f 	bic.w	r1, r3, #15
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	430a      	orrs	r2, r1
 800f6ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4a36      	ldr	r2, [pc, #216]	; (800f7cc <UART_SetConfig+0x330>)
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d126      	bne.n	800f744 <UART_SetConfig+0x2a8>
 800f6f6:	4b36      	ldr	r3, [pc, #216]	; (800f7d0 <UART_SetConfig+0x334>)
 800f6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6fc:	f003 0303 	and.w	r3, r3, #3
 800f700:	2b03      	cmp	r3, #3
 800f702:	d81b      	bhi.n	800f73c <UART_SetConfig+0x2a0>
 800f704:	a201      	add	r2, pc, #4	; (adr r2, 800f70c <UART_SetConfig+0x270>)
 800f706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70a:	bf00      	nop
 800f70c:	0800f71d 	.word	0x0800f71d
 800f710:	0800f72d 	.word	0x0800f72d
 800f714:	0800f725 	.word	0x0800f725
 800f718:	0800f735 	.word	0x0800f735
 800f71c:	2301      	movs	r3, #1
 800f71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f722:	e112      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f724:	2302      	movs	r3, #2
 800f726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f72a:	e10e      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f72c:	2304      	movs	r3, #4
 800f72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f732:	e10a      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f734:	2308      	movs	r3, #8
 800f736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f73a:	e106      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f73c:	2310      	movs	r3, #16
 800f73e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f742:	e102      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a22      	ldr	r2, [pc, #136]	; (800f7d4 <UART_SetConfig+0x338>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d144      	bne.n	800f7d8 <UART_SetConfig+0x33c>
 800f74e:	4b20      	ldr	r3, [pc, #128]	; (800f7d0 <UART_SetConfig+0x334>)
 800f750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f754:	f003 030c 	and.w	r3, r3, #12
 800f758:	2b0c      	cmp	r3, #12
 800f75a:	d82d      	bhi.n	800f7b8 <UART_SetConfig+0x31c>
 800f75c:	a201      	add	r2, pc, #4	; (adr r2, 800f764 <UART_SetConfig+0x2c8>)
 800f75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f762:	bf00      	nop
 800f764:	0800f799 	.word	0x0800f799
 800f768:	0800f7b9 	.word	0x0800f7b9
 800f76c:	0800f7b9 	.word	0x0800f7b9
 800f770:	0800f7b9 	.word	0x0800f7b9
 800f774:	0800f7a9 	.word	0x0800f7a9
 800f778:	0800f7b9 	.word	0x0800f7b9
 800f77c:	0800f7b9 	.word	0x0800f7b9
 800f780:	0800f7b9 	.word	0x0800f7b9
 800f784:	0800f7a1 	.word	0x0800f7a1
 800f788:	0800f7b9 	.word	0x0800f7b9
 800f78c:	0800f7b9 	.word	0x0800f7b9
 800f790:	0800f7b9 	.word	0x0800f7b9
 800f794:	0800f7b1 	.word	0x0800f7b1
 800f798:	2300      	movs	r3, #0
 800f79a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f79e:	e0d4      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f7a0:	2302      	movs	r3, #2
 800f7a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7a6:	e0d0      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f7a8:	2304      	movs	r3, #4
 800f7aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7ae:	e0cc      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f7b0:	2308      	movs	r3, #8
 800f7b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7b6:	e0c8      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f7b8:	2310      	movs	r3, #16
 800f7ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f7be:	e0c4      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f7c0:	0801d034 	.word	0x0801d034
 800f7c4:	cfff69f3 	.word	0xcfff69f3
 800f7c8:	40008000 	.word	0x40008000
 800f7cc:	40013800 	.word	0x40013800
 800f7d0:	40021000 	.word	0x40021000
 800f7d4:	40004400 	.word	0x40004400
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	4aa9      	ldr	r2, [pc, #676]	; (800fa84 <UART_SetConfig+0x5e8>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d125      	bne.n	800f82e <UART_SetConfig+0x392>
 800f7e2:	4ba9      	ldr	r3, [pc, #676]	; (800fa88 <UART_SetConfig+0x5ec>)
 800f7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f7ec:	2b30      	cmp	r3, #48	; 0x30
 800f7ee:	d016      	beq.n	800f81e <UART_SetConfig+0x382>
 800f7f0:	2b30      	cmp	r3, #48	; 0x30
 800f7f2:	d818      	bhi.n	800f826 <UART_SetConfig+0x38a>
 800f7f4:	2b20      	cmp	r3, #32
 800f7f6:	d00a      	beq.n	800f80e <UART_SetConfig+0x372>
 800f7f8:	2b20      	cmp	r3, #32
 800f7fa:	d814      	bhi.n	800f826 <UART_SetConfig+0x38a>
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d002      	beq.n	800f806 <UART_SetConfig+0x36a>
 800f800:	2b10      	cmp	r3, #16
 800f802:	d008      	beq.n	800f816 <UART_SetConfig+0x37a>
 800f804:	e00f      	b.n	800f826 <UART_SetConfig+0x38a>
 800f806:	2300      	movs	r3, #0
 800f808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f80c:	e09d      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f80e:	2302      	movs	r3, #2
 800f810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f814:	e099      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f816:	2304      	movs	r3, #4
 800f818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f81c:	e095      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f81e:	2308      	movs	r3, #8
 800f820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f824:	e091      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f826:	2310      	movs	r3, #16
 800f828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f82c:	e08d      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	4a96      	ldr	r2, [pc, #600]	; (800fa8c <UART_SetConfig+0x5f0>)
 800f834:	4293      	cmp	r3, r2
 800f836:	d125      	bne.n	800f884 <UART_SetConfig+0x3e8>
 800f838:	4b93      	ldr	r3, [pc, #588]	; (800fa88 <UART_SetConfig+0x5ec>)
 800f83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f83e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f842:	2bc0      	cmp	r3, #192	; 0xc0
 800f844:	d016      	beq.n	800f874 <UART_SetConfig+0x3d8>
 800f846:	2bc0      	cmp	r3, #192	; 0xc0
 800f848:	d818      	bhi.n	800f87c <UART_SetConfig+0x3e0>
 800f84a:	2b80      	cmp	r3, #128	; 0x80
 800f84c:	d00a      	beq.n	800f864 <UART_SetConfig+0x3c8>
 800f84e:	2b80      	cmp	r3, #128	; 0x80
 800f850:	d814      	bhi.n	800f87c <UART_SetConfig+0x3e0>
 800f852:	2b00      	cmp	r3, #0
 800f854:	d002      	beq.n	800f85c <UART_SetConfig+0x3c0>
 800f856:	2b40      	cmp	r3, #64	; 0x40
 800f858:	d008      	beq.n	800f86c <UART_SetConfig+0x3d0>
 800f85a:	e00f      	b.n	800f87c <UART_SetConfig+0x3e0>
 800f85c:	2300      	movs	r3, #0
 800f85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f862:	e072      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f864:	2302      	movs	r3, #2
 800f866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f86a:	e06e      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f86c:	2304      	movs	r3, #4
 800f86e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f872:	e06a      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f874:	2308      	movs	r3, #8
 800f876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f87a:	e066      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f87c:	2310      	movs	r3, #16
 800f87e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f882:	e062      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	4a81      	ldr	r2, [pc, #516]	; (800fa90 <UART_SetConfig+0x5f4>)
 800f88a:	4293      	cmp	r3, r2
 800f88c:	d12a      	bne.n	800f8e4 <UART_SetConfig+0x448>
 800f88e:	4b7e      	ldr	r3, [pc, #504]	; (800fa88 <UART_SetConfig+0x5ec>)
 800f890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f898:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f89c:	d01a      	beq.n	800f8d4 <UART_SetConfig+0x438>
 800f89e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f8a2:	d81b      	bhi.n	800f8dc <UART_SetConfig+0x440>
 800f8a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8a8:	d00c      	beq.n	800f8c4 <UART_SetConfig+0x428>
 800f8aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8ae:	d815      	bhi.n	800f8dc <UART_SetConfig+0x440>
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d003      	beq.n	800f8bc <UART_SetConfig+0x420>
 800f8b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8b8:	d008      	beq.n	800f8cc <UART_SetConfig+0x430>
 800f8ba:	e00f      	b.n	800f8dc <UART_SetConfig+0x440>
 800f8bc:	2300      	movs	r3, #0
 800f8be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8c2:	e042      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f8c4:	2302      	movs	r3, #2
 800f8c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8ca:	e03e      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f8cc:	2304      	movs	r3, #4
 800f8ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8d2:	e03a      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f8d4:	2308      	movs	r3, #8
 800f8d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8da:	e036      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f8dc:	2310      	movs	r3, #16
 800f8de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f8e2:	e032      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a6a      	ldr	r2, [pc, #424]	; (800fa94 <UART_SetConfig+0x5f8>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d12a      	bne.n	800f944 <UART_SetConfig+0x4a8>
 800f8ee:	4b66      	ldr	r3, [pc, #408]	; (800fa88 <UART_SetConfig+0x5ec>)
 800f8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f8f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f8f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f8fc:	d01a      	beq.n	800f934 <UART_SetConfig+0x498>
 800f8fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f902:	d81b      	bhi.n	800f93c <UART_SetConfig+0x4a0>
 800f904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f908:	d00c      	beq.n	800f924 <UART_SetConfig+0x488>
 800f90a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f90e:	d815      	bhi.n	800f93c <UART_SetConfig+0x4a0>
 800f910:	2b00      	cmp	r3, #0
 800f912:	d003      	beq.n	800f91c <UART_SetConfig+0x480>
 800f914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f918:	d008      	beq.n	800f92c <UART_SetConfig+0x490>
 800f91a:	e00f      	b.n	800f93c <UART_SetConfig+0x4a0>
 800f91c:	2300      	movs	r3, #0
 800f91e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f922:	e012      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f924:	2302      	movs	r3, #2
 800f926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f92a:	e00e      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f92c:	2304      	movs	r3, #4
 800f92e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f932:	e00a      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f934:	2308      	movs	r3, #8
 800f936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f93a:	e006      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f93c:	2310      	movs	r3, #16
 800f93e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800f942:	e002      	b.n	800f94a <UART_SetConfig+0x4ae>
 800f944:	2310      	movs	r3, #16
 800f946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a51      	ldr	r2, [pc, #324]	; (800fa94 <UART_SetConfig+0x5f8>)
 800f950:	4293      	cmp	r3, r2
 800f952:	f040 80a5 	bne.w	800faa0 <UART_SetConfig+0x604>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f956:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f95a:	2b08      	cmp	r3, #8
 800f95c:	d823      	bhi.n	800f9a6 <UART_SetConfig+0x50a>
 800f95e:	a201      	add	r2, pc, #4	; (adr r2, 800f964 <UART_SetConfig+0x4c8>)
 800f960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f964:	0800f989 	.word	0x0800f989
 800f968:	0800f9a7 	.word	0x0800f9a7
 800f96c:	0800f991 	.word	0x0800f991
 800f970:	0800f9a7 	.word	0x0800f9a7
 800f974:	0800f997 	.word	0x0800f997
 800f978:	0800f9a7 	.word	0x0800f9a7
 800f97c:	0800f9a7 	.word	0x0800f9a7
 800f980:	0800f9a7 	.word	0x0800f9a7
 800f984:	0800f99f 	.word	0x0800f99f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f988:	f7fb fd8c 	bl	800b4a4 <HAL_RCC_GetPCLK1Freq>
 800f98c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f98e:	e010      	b.n	800f9b2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f990:	4b41      	ldr	r3, [pc, #260]	; (800fa98 <UART_SetConfig+0x5fc>)
 800f992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f994:	e00d      	b.n	800f9b2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f996:	f7fb fd17 	bl	800b3c8 <HAL_RCC_GetSysClockFreq>
 800f99a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f99c:	e009      	b.n	800f9b2 <UART_SetConfig+0x516>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f99e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f9a4:	e005      	b.n	800f9b2 <UART_SetConfig+0x516>
      default:
        pclk = 0U;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f9b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	f000 8137 	beq.w	800fc28 <UART_SetConfig+0x78c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9be:	4a37      	ldr	r2, [pc, #220]	; (800fa9c <UART_SetConfig+0x600>)
 800f9c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	685a      	ldr	r2, [r3, #4]
 800f9d2:	4613      	mov	r3, r2
 800f9d4:	005b      	lsls	r3, r3, #1
 800f9d6:	4413      	add	r3, r2
 800f9d8:	69ba      	ldr	r2, [r7, #24]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d305      	bcc.n	800f9ea <UART_SetConfig+0x54e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	685b      	ldr	r3, [r3, #4]
 800f9e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f9e4:	69ba      	ldr	r2, [r7, #24]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d903      	bls.n	800f9f2 <UART_SetConfig+0x556>
      {
        ret = HAL_ERROR;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f9f0:	e11a      	b.n	800fc28 <UART_SetConfig+0x78c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	60bb      	str	r3, [r7, #8]
 800f9f8:	60fa      	str	r2, [r7, #12]
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fe:	4a27      	ldr	r2, [pc, #156]	; (800fa9c <UART_SetConfig+0x600>)
 800fa00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	2200      	movs	r2, #0
 800fa08:	603b      	str	r3, [r7, #0]
 800fa0a:	607a      	str	r2, [r7, #4]
 800fa0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fa14:	f7f1 f842 	bl	8000a9c <__aeabi_uldivmod>
 800fa18:	4602      	mov	r2, r0
 800fa1a:	460b      	mov	r3, r1
 800fa1c:	4610      	mov	r0, r2
 800fa1e:	4619      	mov	r1, r3
 800fa20:	f04f 0200 	mov.w	r2, #0
 800fa24:	f04f 0300 	mov.w	r3, #0
 800fa28:	020b      	lsls	r3, r1, #8
 800fa2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fa2e:	0202      	lsls	r2, r0, #8
 800fa30:	6979      	ldr	r1, [r7, #20]
 800fa32:	6849      	ldr	r1, [r1, #4]
 800fa34:	0849      	lsrs	r1, r1, #1
 800fa36:	2000      	movs	r0, #0
 800fa38:	460c      	mov	r4, r1
 800fa3a:	4605      	mov	r5, r0
 800fa3c:	eb12 0804 	adds.w	r8, r2, r4
 800fa40:	eb43 0905 	adc.w	r9, r3, r5
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	469a      	mov	sl, r3
 800fa4c:	4693      	mov	fp, r2
 800fa4e:	4652      	mov	r2, sl
 800fa50:	465b      	mov	r3, fp
 800fa52:	4640      	mov	r0, r8
 800fa54:	4649      	mov	r1, r9
 800fa56:	f7f1 f821 	bl	8000a9c <__aeabi_uldivmod>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	4613      	mov	r3, r2
 800fa60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fa62:	6a3b      	ldr	r3, [r7, #32]
 800fa64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fa68:	d308      	bcc.n	800fa7c <UART_SetConfig+0x5e0>
 800fa6a:	6a3b      	ldr	r3, [r7, #32]
 800fa6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa70:	d204      	bcs.n	800fa7c <UART_SetConfig+0x5e0>
        {
          huart->Instance->BRR = usartdiv;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	6a3a      	ldr	r2, [r7, #32]
 800fa78:	60da      	str	r2, [r3, #12]
 800fa7a:	e0d5      	b.n	800fc28 <UART_SetConfig+0x78c>
        }
        else
        {
          ret = HAL_ERROR;
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fa82:	e0d1      	b.n	800fc28 <UART_SetConfig+0x78c>
 800fa84:	40004800 	.word	0x40004800
 800fa88:	40021000 	.word	0x40021000
 800fa8c:	40004c00 	.word	0x40004c00
 800fa90:	40005000 	.word	0x40005000
 800fa94:	40008000 	.word	0x40008000
 800fa98:	00f42400 	.word	0x00f42400
 800fa9c:	0801d290 	.word	0x0801d290
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	69db      	ldr	r3, [r3, #28]
 800faa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faa8:	d166      	bne.n	800fb78 <UART_SetConfig+0x6dc>
  {
    switch (clocksource)
 800faaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800faae:	2b08      	cmp	r3, #8
 800fab0:	d827      	bhi.n	800fb02 <UART_SetConfig+0x666>
 800fab2:	a201      	add	r2, pc, #4	; (adr r2, 800fab8 <UART_SetConfig+0x61c>)
 800fab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab8:	0800fadd 	.word	0x0800fadd
 800fabc:	0800fae5 	.word	0x0800fae5
 800fac0:	0800faed 	.word	0x0800faed
 800fac4:	0800fb03 	.word	0x0800fb03
 800fac8:	0800faf3 	.word	0x0800faf3
 800facc:	0800fb03 	.word	0x0800fb03
 800fad0:	0800fb03 	.word	0x0800fb03
 800fad4:	0800fb03 	.word	0x0800fb03
 800fad8:	0800fafb 	.word	0x0800fafb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fadc:	f7fb fce2 	bl	800b4a4 <HAL_RCC_GetPCLK1Freq>
 800fae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fae2:	e014      	b.n	800fb0e <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fae4:	f7fb fcf4 	bl	800b4d0 <HAL_RCC_GetPCLK2Freq>
 800fae8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800faea:	e010      	b.n	800fb0e <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800faec:	4b59      	ldr	r3, [pc, #356]	; (800fc54 <UART_SetConfig+0x7b8>)
 800faee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800faf0:	e00d      	b.n	800fb0e <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800faf2:	f7fb fc69 	bl	800b3c8 <HAL_RCC_GetSysClockFreq>
 800faf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800faf8:	e009      	b.n	800fb0e <UART_SetConfig+0x672>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fafa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fafe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fb00:	e005      	b.n	800fb0e <UART_SetConfig+0x672>
      default:
        pclk = 0U;
 800fb02:	2300      	movs	r3, #0
 800fb04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fb06:	2301      	movs	r3, #1
 800fb08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fb0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 8089 	beq.w	800fc28 <UART_SetConfig+0x78c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb1a:	4a4f      	ldr	r2, [pc, #316]	; (800fc58 <UART_SetConfig+0x7bc>)
 800fb1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb20:	461a      	mov	r2, r3
 800fb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb24:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb28:	005a      	lsls	r2, r3, #1
 800fb2a:	697b      	ldr	r3, [r7, #20]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	085b      	lsrs	r3, r3, #1
 800fb30:	441a      	add	r2, r3
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb3c:	6a3b      	ldr	r3, [r7, #32]
 800fb3e:	2b0f      	cmp	r3, #15
 800fb40:	d916      	bls.n	800fb70 <UART_SetConfig+0x6d4>
 800fb42:	6a3b      	ldr	r3, [r7, #32]
 800fb44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb48:	d212      	bcs.n	800fb70 <UART_SetConfig+0x6d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fb4a:	6a3b      	ldr	r3, [r7, #32]
 800fb4c:	b29b      	uxth	r3, r3
 800fb4e:	f023 030f 	bic.w	r3, r3, #15
 800fb52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fb54:	6a3b      	ldr	r3, [r7, #32]
 800fb56:	085b      	lsrs	r3, r3, #1
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	f003 0307 	and.w	r3, r3, #7
 800fb5e:	b29a      	uxth	r2, r3
 800fb60:	8bfb      	ldrh	r3, [r7, #30]
 800fb62:	4313      	orrs	r3, r2
 800fb64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	8bfa      	ldrh	r2, [r7, #30]
 800fb6c:	60da      	str	r2, [r3, #12]
 800fb6e:	e05b      	b.n	800fc28 <UART_SetConfig+0x78c>
      }
      else
      {
        ret = HAL_ERROR;
 800fb70:	2301      	movs	r3, #1
 800fb72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800fb76:	e057      	b.n	800fc28 <UART_SetConfig+0x78c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fb78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb7c:	2b08      	cmp	r3, #8
 800fb7e:	d828      	bhi.n	800fbd2 <UART_SetConfig+0x736>
 800fb80:	a201      	add	r2, pc, #4	; (adr r2, 800fb88 <UART_SetConfig+0x6ec>)
 800fb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb86:	bf00      	nop
 800fb88:	0800fbad 	.word	0x0800fbad
 800fb8c:	0800fbb5 	.word	0x0800fbb5
 800fb90:	0800fbbd 	.word	0x0800fbbd
 800fb94:	0800fbd3 	.word	0x0800fbd3
 800fb98:	0800fbc3 	.word	0x0800fbc3
 800fb9c:	0800fbd3 	.word	0x0800fbd3
 800fba0:	0800fbd3 	.word	0x0800fbd3
 800fba4:	0800fbd3 	.word	0x0800fbd3
 800fba8:	0800fbcb 	.word	0x0800fbcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbac:	f7fb fc7a 	bl	800b4a4 <HAL_RCC_GetPCLK1Freq>
 800fbb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fbb2:	e014      	b.n	800fbde <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fbb4:	f7fb fc8c 	bl	800b4d0 <HAL_RCC_GetPCLK2Freq>
 800fbb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fbba:	e010      	b.n	800fbde <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fbbc:	4b25      	ldr	r3, [pc, #148]	; (800fc54 <UART_SetConfig+0x7b8>)
 800fbbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fbc0:	e00d      	b.n	800fbde <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fbc2:	f7fb fc01 	bl	800b3c8 <HAL_RCC_GetSysClockFreq>
 800fbc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fbc8:	e009      	b.n	800fbde <UART_SetConfig+0x742>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fbd0:	e005      	b.n	800fbde <UART_SetConfig+0x742>
      default:
        pclk = 0U;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fbdc:	bf00      	nop
    }

    if (pclk != 0U)
 800fbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d021      	beq.n	800fc28 <UART_SetConfig+0x78c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe8:	4a1b      	ldr	r2, [pc, #108]	; (800fc58 <UART_SetConfig+0x7bc>)
 800fbea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbee:	461a      	mov	r2, r3
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf2:	fbb3 f2f2 	udiv	r2, r3, r2
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	085b      	lsrs	r3, r3, #1
 800fbfc:	441a      	add	r2, r3
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc08:	6a3b      	ldr	r3, [r7, #32]
 800fc0a:	2b0f      	cmp	r3, #15
 800fc0c:	d909      	bls.n	800fc22 <UART_SetConfig+0x786>
 800fc0e:	6a3b      	ldr	r3, [r7, #32]
 800fc10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc14:	d205      	bcs.n	800fc22 <UART_SetConfig+0x786>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fc16:	6a3b      	ldr	r3, [r7, #32]
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	60da      	str	r2, [r3, #12]
 800fc20:	e002      	b.n	800fc28 <UART_SetConfig+0x78c>
      }
      else
      {
        ret = HAL_ERROR;
 800fc22:	2301      	movs	r3, #1
 800fc24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	2201      	movs	r2, #1
 800fc34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	2200      	movs	r2, #0
 800fc42:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fc44:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3730      	adds	r7, #48	; 0x30
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fc52:	bf00      	nop
 800fc54:	00f42400 	.word	0x00f42400
 800fc58:	0801d290 	.word	0x0801d290

0800fc5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc68:	2bff      	cmp	r3, #255	; 0xff
 800fc6a:	d904      	bls.n	800fc76 <UART_AdvFeatureConfig+0x1a>
 800fc6c:	f640 41ab 	movw	r1, #3243	; 0xcab
 800fc70:	4891      	ldr	r0, [pc, #580]	; (800feb8 <UART_AdvFeatureConfig+0x25c>)
 800fc72:	f7f2 fcdd 	bl	8002630 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc7a:	f003 0301 	and.w	r3, r3, #1
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d018      	beq.n	800fcb4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d009      	beq.n	800fc9e <UART_AdvFeatureConfig+0x42>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fc92:	d004      	beq.n	800fc9e <UART_AdvFeatureConfig+0x42>
 800fc94:	f44f 614b 	mov.w	r1, #3248	; 0xcb0
 800fc98:	4887      	ldr	r0, [pc, #540]	; (800feb8 <UART_AdvFeatureConfig+0x25c>)
 800fc9a:	f7f2 fcc9 	bl	8002630 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	430a      	orrs	r2, r1
 800fcb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcb8:	f003 0302 	and.w	r3, r3, #2
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d018      	beq.n	800fcf2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d009      	beq.n	800fcdc <UART_AdvFeatureConfig+0x80>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcd0:	d004      	beq.n	800fcdc <UART_AdvFeatureConfig+0x80>
 800fcd2:	f640 41b7 	movw	r1, #3255	; 0xcb7
 800fcd6:	4878      	ldr	r0, [pc, #480]	; (800feb8 <UART_AdvFeatureConfig+0x25c>)
 800fcd8:	f7f2 fcaa 	bl	8002630 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	430a      	orrs	r2, r1
 800fcf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcf6:	f003 0304 	and.w	r3, r3, #4
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d018      	beq.n	800fd30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d009      	beq.n	800fd1a <UART_AdvFeatureConfig+0xbe>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800fd0e:	d004      	beq.n	800fd1a <UART_AdvFeatureConfig+0xbe>
 800fd10:	f640 41be 	movw	r1, #3262	; 0xcbe
 800fd14:	4868      	ldr	r0, [pc, #416]	; (800feb8 <UART_AdvFeatureConfig+0x25c>)
 800fd16:	f7f2 fc8b 	bl	8002630 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	430a      	orrs	r2, r1
 800fd2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd34:	f003 0308 	and.w	r3, r3, #8
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d018      	beq.n	800fd6e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d009      	beq.n	800fd58 <UART_AdvFeatureConfig+0xfc>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd4c:	d004      	beq.n	800fd58 <UART_AdvFeatureConfig+0xfc>
 800fd4e:	f640 41c5 	movw	r1, #3269	; 0xcc5
 800fd52:	4859      	ldr	r0, [pc, #356]	; (800feb8 <UART_AdvFeatureConfig+0x25c>)
 800fd54:	f7f2 fc6c 	bl	8002630 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	685b      	ldr	r3, [r3, #4]
 800fd5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	430a      	orrs	r2, r1
 800fd6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd72:	f003 0310 	and.w	r3, r3, #16
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d018      	beq.n	800fdac <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d009      	beq.n	800fd96 <UART_AdvFeatureConfig+0x13a>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd8a:	d004      	beq.n	800fd96 <UART_AdvFeatureConfig+0x13a>
 800fd8c:	f640 41cc 	movw	r1, #3276	; 0xccc
 800fd90:	4849      	ldr	r0, [pc, #292]	; (800feb8 <UART_AdvFeatureConfig+0x25c>)
 800fd92:	f7f2 fc4d 	bl	8002630 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	689b      	ldr	r3, [r3, #8]
 800fd9c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	430a      	orrs	r2, r1
 800fdaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdb0:	f003 0320 	and.w	r3, r3, #32
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d018      	beq.n	800fdea <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d009      	beq.n	800fdd4 <UART_AdvFeatureConfig+0x178>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fdc8:	d004      	beq.n	800fdd4 <UART_AdvFeatureConfig+0x178>
 800fdca:	f640 41d3 	movw	r1, #3283	; 0xcd3
 800fdce:	483a      	ldr	r0, [pc, #232]	; (800feb8 <UART_AdvFeatureConfig+0x25c>)
 800fdd0:	f7f2 fc2e 	bl	8002630 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	430a      	orrs	r2, r1
 800fde8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d06c      	beq.n	800fed0 <UART_AdvFeatureConfig+0x274>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	4a30      	ldr	r2, [pc, #192]	; (800febc <UART_AdvFeatureConfig+0x260>)
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d018      	beq.n	800fe32 <UART_AdvFeatureConfig+0x1d6>
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4a2e      	ldr	r2, [pc, #184]	; (800fec0 <UART_AdvFeatureConfig+0x264>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d013      	beq.n	800fe32 <UART_AdvFeatureConfig+0x1d6>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4a2d      	ldr	r2, [pc, #180]	; (800fec4 <UART_AdvFeatureConfig+0x268>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d00e      	beq.n	800fe32 <UART_AdvFeatureConfig+0x1d6>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	4a2b      	ldr	r2, [pc, #172]	; (800fec8 <UART_AdvFeatureConfig+0x26c>)
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d009      	beq.n	800fe32 <UART_AdvFeatureConfig+0x1d6>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	4a2a      	ldr	r2, [pc, #168]	; (800fecc <UART_AdvFeatureConfig+0x270>)
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d004      	beq.n	800fe32 <UART_AdvFeatureConfig+0x1d6>
 800fe28:	f640 41da 	movw	r1, #3290	; 0xcda
 800fe2c:	4822      	ldr	r0, [pc, #136]	; (800feb8 <UART_AdvFeatureConfig+0x25c>)
 800fe2e:	f7f2 fbff 	bl	8002630 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d009      	beq.n	800fe4e <UART_AdvFeatureConfig+0x1f2>
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe42:	d004      	beq.n	800fe4e <UART_AdvFeatureConfig+0x1f2>
 800fe44:	f640 41db 	movw	r1, #3291	; 0xcdb
 800fe48:	481b      	ldr	r0, [pc, #108]	; (800feb8 <UART_AdvFeatureConfig+0x25c>)
 800fe4a:	f7f2 fbf1 	bl	8002630 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	430a      	orrs	r2, r1
 800fe62:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe6c:	d130      	bne.n	800fed0 <UART_AdvFeatureConfig+0x274>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d013      	beq.n	800fe9e <UART_AdvFeatureConfig+0x242>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fe7e:	d00e      	beq.n	800fe9e <UART_AdvFeatureConfig+0x242>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fe88:	d009      	beq.n	800fe9e <UART_AdvFeatureConfig+0x242>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fe8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800fe92:	d004      	beq.n	800fe9e <UART_AdvFeatureConfig+0x242>
 800fe94:	f44f 614e 	mov.w	r1, #3296	; 0xce0
 800fe98:	4807      	ldr	r0, [pc, #28]	; (800feb8 <UART_AdvFeatureConfig+0x25c>)
 800fe9a:	f7f2 fbc9 	bl	8002630 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	430a      	orrs	r2, r1
 800feb2:	605a      	str	r2, [r3, #4]
 800feb4:	e00c      	b.n	800fed0 <UART_AdvFeatureConfig+0x274>
 800feb6:	bf00      	nop
 800feb8:	0801d034 	.word	0x0801d034
 800febc:	40013800 	.word	0x40013800
 800fec0:	40004400 	.word	0x40004400
 800fec4:	40004800 	.word	0x40004800
 800fec8:	40004c00 	.word	0x40004c00
 800fecc:	40005000 	.word	0x40005000
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d018      	beq.n	800ff0e <UART_AdvFeatureConfig+0x2b2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d009      	beq.n	800fef8 <UART_AdvFeatureConfig+0x29c>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fee8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800feec:	d004      	beq.n	800fef8 <UART_AdvFeatureConfig+0x29c>
 800feee:	f640 41e8 	movw	r1, #3304	; 0xce8
 800fef2:	4809      	ldr	r0, [pc, #36]	; (800ff18 <UART_AdvFeatureConfig+0x2bc>)
 800fef4:	f7f2 fb9c 	bl	8002630 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	430a      	orrs	r2, r1
 800ff0c:	605a      	str	r2, [r3, #4]
  }
}
 800ff0e:	bf00      	nop
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	0801d034 	.word	0x0801d034

0800ff1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b086      	sub	sp, #24
 800ff20:	af02      	add	r7, sp, #8
 800ff22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2200      	movs	r2, #0
 800ff28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ff2c:	f7f4 f97e 	bl	800422c <HAL_GetTick>
 800ff30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f003 0308 	and.w	r3, r3, #8
 800ff3c:	2b08      	cmp	r3, #8
 800ff3e:	d10e      	bne.n	800ff5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 f82f 	bl	800ffb2 <UART_WaitOnFlagUntilTimeout>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d001      	beq.n	800ff5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff5a:	2303      	movs	r3, #3
 800ff5c:	e025      	b.n	800ffaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f003 0304 	and.w	r3, r3, #4
 800ff68:	2b04      	cmp	r3, #4
 800ff6a:	d10e      	bne.n	800ff8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ff70:	9300      	str	r3, [sp, #0]
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	2200      	movs	r2, #0
 800ff76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ff7a:	6878      	ldr	r0, [r7, #4]
 800ff7c:	f000 f819 	bl	800ffb2 <UART_WaitOnFlagUntilTimeout>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d001      	beq.n	800ff8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ff86:	2303      	movs	r3, #3
 800ff88:	e00f      	b.n	800ffaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2220      	movs	r2, #32
 800ff8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2220      	movs	r2, #32
 800ff96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}

0800ffb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ffb2:	b580      	push	{r7, lr}
 800ffb4:	b09c      	sub	sp, #112	; 0x70
 800ffb6:	af00      	add	r7, sp, #0
 800ffb8:	60f8      	str	r0, [r7, #12]
 800ffba:	60b9      	str	r1, [r7, #8]
 800ffbc:	603b      	str	r3, [r7, #0]
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ffc2:	e0a9      	b.n	8010118 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ffc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ffc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffca:	f000 80a5 	beq.w	8010118 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ffce:	f7f4 f92d 	bl	800422c <HAL_GetTick>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d302      	bcc.n	800ffe4 <UART_WaitOnFlagUntilTimeout+0x32>
 800ffde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d140      	bne.n	8010066 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffec:	e853 3f00 	ldrex	r3, [r3]
 800fff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fff8:	667b      	str	r3, [r7, #100]	; 0x64
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	461a      	mov	r2, r3
 8010000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010004:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801000a:	e841 2300 	strex	r3, r2, [r1]
 801000e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010012:	2b00      	cmp	r3, #0
 8010014:	d1e6      	bne.n	800ffe4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	3308      	adds	r3, #8
 801001c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801001e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010020:	e853 3f00 	ldrex	r3, [r3]
 8010024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010028:	f023 0301 	bic.w	r3, r3, #1
 801002c:	663b      	str	r3, [r7, #96]	; 0x60
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	3308      	adds	r3, #8
 8010034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010036:	64ba      	str	r2, [r7, #72]	; 0x48
 8010038:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801003a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801003c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801003e:	e841 2300 	strex	r3, r2, [r1]
 8010042:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1e5      	bne.n	8010016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2220      	movs	r2, #32
 801004e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2220      	movs	r2, #32
 8010056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2200      	movs	r2, #0
 801005e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010062:	2303      	movs	r3, #3
 8010064:	e069      	b.n	801013a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f003 0304 	and.w	r3, r3, #4
 8010070:	2b00      	cmp	r3, #0
 8010072:	d051      	beq.n	8010118 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	69db      	ldr	r3, [r3, #28]
 801007a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801007e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010082:	d149      	bne.n	8010118 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801008c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010096:	e853 3f00 	ldrex	r3, [r3]
 801009a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801009c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80100a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	461a      	mov	r2, r3
 80100aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80100ac:	637b      	str	r3, [r7, #52]	; 0x34
 80100ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100b4:	e841 2300 	strex	r3, r2, [r1]
 80100b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80100ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d1e6      	bne.n	801008e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	3308      	adds	r3, #8
 80100c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	e853 3f00 	ldrex	r3, [r3]
 80100ce:	613b      	str	r3, [r7, #16]
   return(result);
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	f023 0301 	bic.w	r3, r3, #1
 80100d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	3308      	adds	r3, #8
 80100de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80100e0:	623a      	str	r2, [r7, #32]
 80100e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e4:	69f9      	ldr	r1, [r7, #28]
 80100e6:	6a3a      	ldr	r2, [r7, #32]
 80100e8:	e841 2300 	strex	r3, r2, [r1]
 80100ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80100ee:	69bb      	ldr	r3, [r7, #24]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d1e5      	bne.n	80100c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2220      	movs	r2, #32
 80100f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2220      	movs	r2, #32
 8010100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2220      	movs	r2, #32
 8010108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	2200      	movs	r2, #0
 8010110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010114:	2303      	movs	r3, #3
 8010116:	e010      	b.n	801013a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	69da      	ldr	r2, [r3, #28]
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	4013      	ands	r3, r2
 8010122:	68ba      	ldr	r2, [r7, #8]
 8010124:	429a      	cmp	r2, r3
 8010126:	bf0c      	ite	eq
 8010128:	2301      	moveq	r3, #1
 801012a:	2300      	movne	r3, #0
 801012c:	b2db      	uxtb	r3, r3
 801012e:	461a      	mov	r2, r3
 8010130:	79fb      	ldrb	r3, [r7, #7]
 8010132:	429a      	cmp	r2, r3
 8010134:	f43f af46 	beq.w	800ffc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010138:	2300      	movs	r3, #0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3770      	adds	r7, #112	; 0x70
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
	...

08010144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4a29      	ldr	r2, [pc, #164]	; (80101f8 <HAL_UARTEx_DisableFifoMode+0xb4>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d01d      	beq.n	8010192 <HAL_UARTEx_DisableFifoMode+0x4e>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4a28      	ldr	r2, [pc, #160]	; (80101fc <HAL_UARTEx_DisableFifoMode+0xb8>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d018      	beq.n	8010192 <HAL_UARTEx_DisableFifoMode+0x4e>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a26      	ldr	r2, [pc, #152]	; (8010200 <HAL_UARTEx_DisableFifoMode+0xbc>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d013      	beq.n	8010192 <HAL_UARTEx_DisableFifoMode+0x4e>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4a25      	ldr	r2, [pc, #148]	; (8010204 <HAL_UARTEx_DisableFifoMode+0xc0>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d00e      	beq.n	8010192 <HAL_UARTEx_DisableFifoMode+0x4e>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	4a23      	ldr	r2, [pc, #140]	; (8010208 <HAL_UARTEx_DisableFifoMode+0xc4>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d009      	beq.n	8010192 <HAL_UARTEx_DisableFifoMode+0x4e>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4a22      	ldr	r2, [pc, #136]	; (801020c <HAL_UARTEx_DisableFifoMode+0xc8>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d004      	beq.n	8010192 <HAL_UARTEx_DisableFifoMode+0x4e>
 8010188:	f44f 710d 	mov.w	r1, #564	; 0x234
 801018c:	4820      	ldr	r0, [pc, #128]	; (8010210 <HAL_UARTEx_DisableFifoMode+0xcc>)
 801018e:	f7f2 fa4f 	bl	8002630 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010198:	2b01      	cmp	r3, #1
 801019a:	d101      	bne.n	80101a0 <HAL_UARTEx_DisableFifoMode+0x5c>
 801019c:	2302      	movs	r3, #2
 801019e:	e027      	b.n	80101f0 <HAL_UARTEx_DisableFifoMode+0xac>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2201      	movs	r2, #1
 80101a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2224      	movs	r2, #36	; 0x24
 80101ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f022 0201 	bic.w	r2, r2, #1
 80101c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80101ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	68fa      	ldr	r2, [r7, #12]
 80101dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2220      	movs	r2, #32
 80101e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101ee:	2300      	movs	r3, #0
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3710      	adds	r7, #16
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	40013800 	.word	0x40013800
 80101fc:	40004400 	.word	0x40004400
 8010200:	40004800 	.word	0x40004800
 8010204:	40004c00 	.word	0x40004c00
 8010208:	40005000 	.word	0x40005000
 801020c:	40008000 	.word	0x40008000
 8010210:	0801d070 	.word	0x0801d070

08010214 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	4a3b      	ldr	r2, [pc, #236]	; (8010310 <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 8010224:	4293      	cmp	r3, r2
 8010226:	d01d      	beq.n	8010264 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4a39      	ldr	r2, [pc, #228]	; (8010314 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 801022e:	4293      	cmp	r3, r2
 8010230:	d018      	beq.n	8010264 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4a38      	ldr	r2, [pc, #224]	; (8010318 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 8010238:	4293      	cmp	r3, r2
 801023a:	d013      	beq.n	8010264 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a36      	ldr	r2, [pc, #216]	; (801031c <HAL_UARTEx_SetTxFifoThreshold+0x108>)
 8010242:	4293      	cmp	r3, r2
 8010244:	d00e      	beq.n	8010264 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	4a35      	ldr	r2, [pc, #212]	; (8010320 <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
 801024c:	4293      	cmp	r3, r2
 801024e:	d009      	beq.n	8010264 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4a33      	ldr	r2, [pc, #204]	; (8010324 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d004      	beq.n	8010264 <HAL_UARTEx_SetTxFifoThreshold+0x50>
 801025a:	f240 2162 	movw	r1, #610	; 0x262
 801025e:	4832      	ldr	r0, [pc, #200]	; (8010328 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 8010260:	f7f2 f9e6 	bl	8002630 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d018      	beq.n	801029c <HAL_UARTEx_SetTxFifoThreshold+0x88>
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010270:	d014      	beq.n	801029c <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010278:	d010      	beq.n	801029c <HAL_UARTEx_SetTxFifoThreshold+0x88>
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8010280:	d00c      	beq.n	801029c <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010288:	d008      	beq.n	801029c <HAL_UARTEx_SetTxFifoThreshold+0x88>
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8010290:	d004      	beq.n	801029c <HAL_UARTEx_SetTxFifoThreshold+0x88>
 8010292:	f240 2163 	movw	r1, #611	; 0x263
 8010296:	4824      	ldr	r0, [pc, #144]	; (8010328 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 8010298:	f7f2 f9ca 	bl	8002630 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d101      	bne.n	80102aa <HAL_UARTEx_SetTxFifoThreshold+0x96>
 80102a6:	2302      	movs	r3, #2
 80102a8:	e02d      	b.n	8010306 <HAL_UARTEx_SetTxFifoThreshold+0xf2>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2201      	movs	r2, #1
 80102ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2224      	movs	r2, #36	; 0x24
 80102b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	f022 0201 	bic.w	r2, r2, #1
 80102d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	689b      	ldr	r3, [r3, #8]
 80102d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	683a      	ldr	r2, [r7, #0]
 80102e2:	430a      	orrs	r2, r1
 80102e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 f8ac 	bl	8010444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	68fa      	ldr	r2, [r7, #12]
 80102f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2220      	movs	r2, #32
 80102f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010304:	2300      	movs	r3, #0
}
 8010306:	4618      	mov	r0, r3
 8010308:	3710      	adds	r7, #16
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}
 801030e:	bf00      	nop
 8010310:	40013800 	.word	0x40013800
 8010314:	40004400 	.word	0x40004400
 8010318:	40004800 	.word	0x40004800
 801031c:	40004c00 	.word	0x40004c00
 8010320:	40005000 	.word	0x40005000
 8010324:	40008000 	.word	0x40008000
 8010328:	0801d070 	.word	0x0801d070

0801032c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a3b      	ldr	r2, [pc, #236]	; (8010428 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d01d      	beq.n	801037c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4a39      	ldr	r2, [pc, #228]	; (801042c <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 8010346:	4293      	cmp	r3, r2
 8010348:	d018      	beq.n	801037c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4a38      	ldr	r2, [pc, #224]	; (8010430 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d013      	beq.n	801037c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4a36      	ldr	r2, [pc, #216]	; (8010434 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
 801035a:	4293      	cmp	r3, r2
 801035c:	d00e      	beq.n	801037c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4a35      	ldr	r2, [pc, #212]	; (8010438 <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d009      	beq.n	801037c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4a33      	ldr	r2, [pc, #204]	; (801043c <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d004      	beq.n	801037c <HAL_UARTEx_SetRxFifoThreshold+0x50>
 8010372:	f240 2193 	movw	r1, #659	; 0x293
 8010376:	4832      	ldr	r0, [pc, #200]	; (8010440 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8010378:	f7f2 f95a 	bl	8002630 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d018      	beq.n	80103b4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010388:	d014      	beq.n	80103b4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010390:	d010      	beq.n	80103b4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8010398:	d00c      	beq.n	80103b4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80103a0:	d008      	beq.n	80103b4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80103a8:	d004      	beq.n	80103b4 <HAL_UARTEx_SetRxFifoThreshold+0x88>
 80103aa:	f44f 7125 	mov.w	r1, #660	; 0x294
 80103ae:	4824      	ldr	r0, [pc, #144]	; (8010440 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 80103b0:	f7f2 f93e 	bl	8002630 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d101      	bne.n	80103c2 <HAL_UARTEx_SetRxFifoThreshold+0x96>
 80103be:	2302      	movs	r3, #2
 80103c0:	e02d      	b.n	801041e <HAL_UARTEx_SetRxFifoThreshold+0xf2>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2201      	movs	r2, #1
 80103c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2224      	movs	r2, #36	; 0x24
 80103ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	681a      	ldr	r2, [r3, #0]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f022 0201 	bic.w	r2, r2, #1
 80103e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	689b      	ldr	r3, [r3, #8]
 80103f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	683a      	ldr	r2, [r7, #0]
 80103fa:	430a      	orrs	r2, r1
 80103fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80103fe:	6878      	ldr	r0, [r7, #4]
 8010400:	f000 f820 	bl	8010444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	68fa      	ldr	r2, [r7, #12]
 801040a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2220      	movs	r2, #32
 8010410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801041c:	2300      	movs	r3, #0
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}
 8010426:	bf00      	nop
 8010428:	40013800 	.word	0x40013800
 801042c:	40004400 	.word	0x40004400
 8010430:	40004800 	.word	0x40004800
 8010434:	40004c00 	.word	0x40004c00
 8010438:	40005000 	.word	0x40005000
 801043c:	40008000 	.word	0x40008000
 8010440:	0801d070 	.word	0x0801d070

08010444 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010444:	b480      	push	{r7}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010450:	2b00      	cmp	r3, #0
 8010452:	d108      	bne.n	8010466 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2201      	movs	r2, #1
 8010458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2201      	movs	r2, #1
 8010460:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010464:	e031      	b.n	80104ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010466:	2308      	movs	r3, #8
 8010468:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801046a:	2308      	movs	r3, #8
 801046c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	689b      	ldr	r3, [r3, #8]
 8010474:	0e5b      	lsrs	r3, r3, #25
 8010476:	b2db      	uxtb	r3, r3
 8010478:	f003 0307 	and.w	r3, r3, #7
 801047c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	0f5b      	lsrs	r3, r3, #29
 8010486:	b2db      	uxtb	r3, r3
 8010488:	f003 0307 	and.w	r3, r3, #7
 801048c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801048e:	7bbb      	ldrb	r3, [r7, #14]
 8010490:	7b3a      	ldrb	r2, [r7, #12]
 8010492:	4911      	ldr	r1, [pc, #68]	; (80104d8 <UARTEx_SetNbDataToProcess+0x94>)
 8010494:	5c8a      	ldrb	r2, [r1, r2]
 8010496:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801049a:	7b3a      	ldrb	r2, [r7, #12]
 801049c:	490f      	ldr	r1, [pc, #60]	; (80104dc <UARTEx_SetNbDataToProcess+0x98>)
 801049e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80104a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80104ac:	7bfb      	ldrb	r3, [r7, #15]
 80104ae:	7b7a      	ldrb	r2, [r7, #13]
 80104b0:	4909      	ldr	r1, [pc, #36]	; (80104d8 <UARTEx_SetNbDataToProcess+0x94>)
 80104b2:	5c8a      	ldrb	r2, [r1, r2]
 80104b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80104b8:	7b7a      	ldrb	r2, [r7, #13]
 80104ba:	4908      	ldr	r1, [pc, #32]	; (80104dc <UARTEx_SetNbDataToProcess+0x98>)
 80104bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80104be:	fb93 f3f2 	sdiv	r3, r3, r2
 80104c2:	b29a      	uxth	r2, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80104ca:	bf00      	nop
 80104cc:	3714      	adds	r7, #20
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop
 80104d8:	0801d2a8 	.word	0x0801d2a8
 80104dc:	0801d2b0 	.word	0x0801d2b0

080104e0 <LL_EXTI_EnableIT_0_31>:
{
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80104e8:	4b05      	ldr	r3, [pc, #20]	; (8010500 <LL_EXTI_EnableIT_0_31+0x20>)
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	4904      	ldr	r1, [pc, #16]	; (8010500 <LL_EXTI_EnableIT_0_31+0x20>)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4313      	orrs	r3, r2
 80104f2:	600b      	str	r3, [r1, #0]
}
 80104f4:	bf00      	nop
 80104f6:	370c      	adds	r7, #12
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr
 8010500:	40010400 	.word	0x40010400

08010504 <LL_EXTI_EnableIT_32_63>:
{
 8010504:	b480      	push	{r7}
 8010506:	b083      	sub	sp, #12
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 801050c:	4b05      	ldr	r3, [pc, #20]	; (8010524 <LL_EXTI_EnableIT_32_63+0x20>)
 801050e:	6a1a      	ldr	r2, [r3, #32]
 8010510:	4904      	ldr	r1, [pc, #16]	; (8010524 <LL_EXTI_EnableIT_32_63+0x20>)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4313      	orrs	r3, r2
 8010516:	620b      	str	r3, [r1, #32]
}
 8010518:	bf00      	nop
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr
 8010524:	40010400 	.word	0x40010400

08010528 <LL_EXTI_DisableIT_0_31>:
{
 8010528:	b480      	push	{r7}
 801052a:	b083      	sub	sp, #12
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8010530:	4b06      	ldr	r3, [pc, #24]	; (801054c <LL_EXTI_DisableIT_0_31+0x24>)
 8010532:	681a      	ldr	r2, [r3, #0]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	43db      	mvns	r3, r3
 8010538:	4904      	ldr	r1, [pc, #16]	; (801054c <LL_EXTI_DisableIT_0_31+0x24>)
 801053a:	4013      	ands	r3, r2
 801053c:	600b      	str	r3, [r1, #0]
}
 801053e:	bf00      	nop
 8010540:	370c      	adds	r7, #12
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr
 801054a:	bf00      	nop
 801054c:	40010400 	.word	0x40010400

08010550 <LL_EXTI_DisableIT_32_63>:
{
 8010550:	b480      	push	{r7}
 8010552:	b083      	sub	sp, #12
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8010558:	4b06      	ldr	r3, [pc, #24]	; (8010574 <LL_EXTI_DisableIT_32_63+0x24>)
 801055a:	6a1a      	ldr	r2, [r3, #32]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	43db      	mvns	r3, r3
 8010560:	4904      	ldr	r1, [pc, #16]	; (8010574 <LL_EXTI_DisableIT_32_63+0x24>)
 8010562:	4013      	ands	r3, r2
 8010564:	620b      	str	r3, [r1, #32]
}
 8010566:	bf00      	nop
 8010568:	370c      	adds	r7, #12
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	40010400 	.word	0x40010400

08010578 <LL_EXTI_EnableEvent_0_31>:
{
 8010578:	b480      	push	{r7}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8010580:	4b05      	ldr	r3, [pc, #20]	; (8010598 <LL_EXTI_EnableEvent_0_31+0x20>)
 8010582:	685a      	ldr	r2, [r3, #4]
 8010584:	4904      	ldr	r1, [pc, #16]	; (8010598 <LL_EXTI_EnableEvent_0_31+0x20>)
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	4313      	orrs	r3, r2
 801058a:	604b      	str	r3, [r1, #4]
}
 801058c:	bf00      	nop
 801058e:	370c      	adds	r7, #12
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr
 8010598:	40010400 	.word	0x40010400

0801059c <LL_EXTI_EnableEvent_32_63>:
{
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80105a4:	4b05      	ldr	r3, [pc, #20]	; (80105bc <LL_EXTI_EnableEvent_32_63+0x20>)
 80105a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105a8:	4904      	ldr	r1, [pc, #16]	; (80105bc <LL_EXTI_EnableEvent_32_63+0x20>)
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	4313      	orrs	r3, r2
 80105ae:	624b      	str	r3, [r1, #36]	; 0x24
}
 80105b0:	bf00      	nop
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr
 80105bc:	40010400 	.word	0x40010400

080105c0 <LL_EXTI_DisableEvent_0_31>:
{
 80105c0:	b480      	push	{r7}
 80105c2:	b083      	sub	sp, #12
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80105c8:	4b06      	ldr	r3, [pc, #24]	; (80105e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80105ca:	685a      	ldr	r2, [r3, #4]
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	43db      	mvns	r3, r3
 80105d0:	4904      	ldr	r1, [pc, #16]	; (80105e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80105d2:	4013      	ands	r3, r2
 80105d4:	604b      	str	r3, [r1, #4]
}
 80105d6:	bf00      	nop
 80105d8:	370c      	adds	r7, #12
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	40010400 	.word	0x40010400

080105e8 <LL_EXTI_DisableEvent_32_63>:
{
 80105e8:	b480      	push	{r7}
 80105ea:	b083      	sub	sp, #12
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80105f0:	4b06      	ldr	r3, [pc, #24]	; (801060c <LL_EXTI_DisableEvent_32_63+0x24>)
 80105f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	43db      	mvns	r3, r3
 80105f8:	4904      	ldr	r1, [pc, #16]	; (801060c <LL_EXTI_DisableEvent_32_63+0x24>)
 80105fa:	4013      	ands	r3, r2
 80105fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80105fe:	bf00      	nop
 8010600:	370c      	adds	r7, #12
 8010602:	46bd      	mov	sp, r7
 8010604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010608:	4770      	bx	lr
 801060a:	bf00      	nop
 801060c:	40010400 	.word	0x40010400

08010610 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8010618:	4b05      	ldr	r3, [pc, #20]	; (8010630 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 801061a:	689a      	ldr	r2, [r3, #8]
 801061c:	4904      	ldr	r1, [pc, #16]	; (8010630 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	4313      	orrs	r3, r2
 8010622:	608b      	str	r3, [r1, #8]
}
 8010624:	bf00      	nop
 8010626:	370c      	adds	r7, #12
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr
 8010630:	40010400 	.word	0x40010400

08010634 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 801063c:	4b05      	ldr	r3, [pc, #20]	; (8010654 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801063e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010640:	4904      	ldr	r1, [pc, #16]	; (8010654 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	4313      	orrs	r3, r2
 8010646:	628b      	str	r3, [r1, #40]	; 0x28
}
 8010648:	bf00      	nop
 801064a:	370c      	adds	r7, #12
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr
 8010654:	40010400 	.word	0x40010400

08010658 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8010658:	b480      	push	{r7}
 801065a:	b083      	sub	sp, #12
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8010660:	4b06      	ldr	r3, [pc, #24]	; (801067c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8010662:	689a      	ldr	r2, [r3, #8]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	43db      	mvns	r3, r3
 8010668:	4904      	ldr	r1, [pc, #16]	; (801067c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 801066a:	4013      	ands	r3, r2
 801066c:	608b      	str	r3, [r1, #8]
}
 801066e:	bf00      	nop
 8010670:	370c      	adds	r7, #12
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	40010400 	.word	0x40010400

08010680 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8010688:	4b06      	ldr	r3, [pc, #24]	; (80106a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 801068a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	43db      	mvns	r3, r3
 8010690:	4904      	ldr	r1, [pc, #16]	; (80106a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8010692:	4013      	ands	r3, r2
 8010694:	628b      	str	r3, [r1, #40]	; 0x28
}
 8010696:	bf00      	nop
 8010698:	370c      	adds	r7, #12
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop
 80106a4:	40010400 	.word	0x40010400

080106a8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80106b0:	4b05      	ldr	r3, [pc, #20]	; (80106c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80106b2:	68da      	ldr	r2, [r3, #12]
 80106b4:	4904      	ldr	r1, [pc, #16]	; (80106c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	4313      	orrs	r3, r2
 80106ba:	60cb      	str	r3, [r1, #12]
}
 80106bc:	bf00      	nop
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr
 80106c8:	40010400 	.word	0x40010400

080106cc <LL_EXTI_EnableFallingTrig_32_63>:
{
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80106d4:	4b05      	ldr	r3, [pc, #20]	; (80106ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80106d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106d8:	4904      	ldr	r1, [pc, #16]	; (80106ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4313      	orrs	r3, r2
 80106de:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80106e0:	bf00      	nop
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr
 80106ec:	40010400 	.word	0x40010400

080106f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80106f8:	4b06      	ldr	r3, [pc, #24]	; (8010714 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80106fa:	68da      	ldr	r2, [r3, #12]
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	43db      	mvns	r3, r3
 8010700:	4904      	ldr	r1, [pc, #16]	; (8010714 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8010702:	4013      	ands	r3, r2
 8010704:	60cb      	str	r3, [r1, #12]
}
 8010706:	bf00      	nop
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr
 8010712:	bf00      	nop
 8010714:	40010400 	.word	0x40010400

08010718 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8010718:	b480      	push	{r7}
 801071a:	b083      	sub	sp, #12
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8010720:	4b06      	ldr	r3, [pc, #24]	; (801073c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8010722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	43db      	mvns	r3, r3
 8010728:	4904      	ldr	r1, [pc, #16]	; (801073c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 801072a:	4013      	ands	r3, r2
 801072c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 801072e:	bf00      	nop
 8010730:	370c      	adds	r7, #12
 8010732:	46bd      	mov	sp, r7
 8010734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop
 801073c:	40010400 	.word	0x40010400

08010740 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8010748:	2300      	movs	r3, #0
 801074a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010754:	f023 0307 	bic.w	r3, r3, #7
 8010758:	2b00      	cmp	r3, #0
 801075a:	d003      	beq.n	8010764 <LL_EXTI_Init+0x24>
 801075c:	217f      	movs	r1, #127	; 0x7f
 801075e:	4893      	ldr	r0, [pc, #588]	; (80109ac <LL_EXTI_Init+0x26c>)
 8010760:	f7f1 ff66 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	7a1b      	ldrb	r3, [r3, #8]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d007      	beq.n	801077c <LL_EXTI_Init+0x3c>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	7a1b      	ldrb	r3, [r3, #8]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d003      	beq.n	801077c <LL_EXTI_Init+0x3c>
 8010774:	2180      	movs	r1, #128	; 0x80
 8010776:	488d      	ldr	r0, [pc, #564]	; (80109ac <LL_EXTI_Init+0x26c>)
 8010778:	f7f1 ff5a 	bl	8002630 <assert_failed>
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	7a5b      	ldrb	r3, [r3, #9]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d00b      	beq.n	801079c <LL_EXTI_Init+0x5c>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	7a5b      	ldrb	r3, [r3, #9]
 8010788:	2b01      	cmp	r3, #1
 801078a:	d007      	beq.n	801079c <LL_EXTI_Init+0x5c>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	7a5b      	ldrb	r3, [r3, #9]
 8010790:	2b02      	cmp	r3, #2
 8010792:	d003      	beq.n	801079c <LL_EXTI_Init+0x5c>
 8010794:	2181      	movs	r1, #129	; 0x81
 8010796:	4885      	ldr	r0, [pc, #532]	; (80109ac <LL_EXTI_Init+0x26c>)
 8010798:	f7f1 ff4a 	bl	8002630 <assert_failed>

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	7a1b      	ldrb	r3, [r3, #8]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	f000 80e7 	beq.w	8010974 <LL_EXTI_Init+0x234>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	7a9b      	ldrb	r3, [r3, #10]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d00f      	beq.n	80107ce <LL_EXTI_Init+0x8e>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	7a9b      	ldrb	r3, [r3, #10]
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	d00b      	beq.n	80107ce <LL_EXTI_Init+0x8e>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	7a9b      	ldrb	r3, [r3, #10]
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d007      	beq.n	80107ce <LL_EXTI_Init+0x8e>
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	7a9b      	ldrb	r3, [r3, #10]
 80107c2:	2b03      	cmp	r3, #3
 80107c4:	d003      	beq.n	80107ce <LL_EXTI_Init+0x8e>
 80107c6:	2186      	movs	r1, #134	; 0x86
 80107c8:	4878      	ldr	r0, [pc, #480]	; (80109ac <LL_EXTI_Init+0x26c>)
 80107ca:	f7f1 ff31 	bl	8002630 <assert_failed>

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d063      	beq.n	801089e <LL_EXTI_Init+0x15e>
    {
      switch (EXTI_InitStruct->Mode)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	7a5b      	ldrb	r3, [r3, #9]
 80107da:	2b02      	cmp	r3, #2
 80107dc:	d01c      	beq.n	8010818 <LL_EXTI_Init+0xd8>
 80107de:	2b02      	cmp	r3, #2
 80107e0:	dc25      	bgt.n	801082e <LL_EXTI_Init+0xee>
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d002      	beq.n	80107ec <LL_EXTI_Init+0xac>
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d00b      	beq.n	8010802 <LL_EXTI_Init+0xc2>
 80107ea:	e020      	b.n	801082e <LL_EXTI_Init+0xee>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7ff fee5 	bl	80105c0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7ff fe70 	bl	80104e0 <LL_EXTI_EnableIT_0_31>
          break;
 8010800:	e018      	b.n	8010834 <LL_EXTI_Init+0xf4>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	4618      	mov	r0, r3
 8010808:	f7ff fe8e 	bl	8010528 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4618      	mov	r0, r3
 8010812:	f7ff feb1 	bl	8010578 <LL_EXTI_EnableEvent_0_31>
          break;
 8010816:	e00d      	b.n	8010834 <LL_EXTI_Init+0xf4>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	4618      	mov	r0, r3
 801081e:	f7ff fe5f 	bl	80104e0 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4618      	mov	r0, r3
 8010828:	f7ff fea6 	bl	8010578 <LL_EXTI_EnableEvent_0_31>
          break;
 801082c:	e002      	b.n	8010834 <LL_EXTI_Init+0xf4>
        default:
          status = 0x01u;
 801082e:	2301      	movs	r3, #1
 8010830:	60fb      	str	r3, [r7, #12]
          break;
 8010832:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	7a9b      	ldrb	r3, [r3, #10]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d030      	beq.n	801089e <LL_EXTI_Init+0x15e>
      {
        switch (EXTI_InitStruct->Trigger)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	7a9b      	ldrb	r3, [r3, #10]
 8010840:	2b03      	cmp	r3, #3
 8010842:	d01c      	beq.n	801087e <LL_EXTI_Init+0x13e>
 8010844:	2b03      	cmp	r3, #3
 8010846:	dc25      	bgt.n	8010894 <LL_EXTI_Init+0x154>
 8010848:	2b01      	cmp	r3, #1
 801084a:	d002      	beq.n	8010852 <LL_EXTI_Init+0x112>
 801084c:	2b02      	cmp	r3, #2
 801084e:	d00b      	beq.n	8010868 <LL_EXTI_Init+0x128>
 8010850:	e020      	b.n	8010894 <LL_EXTI_Init+0x154>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4618      	mov	r0, r3
 8010858:	f7ff ff4a 	bl	80106f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4618      	mov	r0, r3
 8010862:	f7ff fed5 	bl	8010610 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8010866:	e01b      	b.n	80108a0 <LL_EXTI_Init+0x160>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	4618      	mov	r0, r3
 801086e:	f7ff fef3 	bl	8010658 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4618      	mov	r0, r3
 8010878:	f7ff ff16 	bl	80106a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 801087c:	e010      	b.n	80108a0 <LL_EXTI_Init+0x160>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	4618      	mov	r0, r3
 8010884:	f7ff fec4 	bl	8010610 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	4618      	mov	r0, r3
 801088e:	f7ff ff0b 	bl	80106a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8010892:	e005      	b.n	80108a0 <LL_EXTI_Init+0x160>
          default:
            status |= 0x02u;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f043 0302 	orr.w	r3, r3, #2
 801089a:	60fb      	str	r3, [r7, #12]
            break;
 801089c:	e000      	b.n	80108a0 <LL_EXTI_Init+0x160>
        }
      }
 801089e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d07a      	beq.n	801099e <LL_EXTI_Init+0x25e>
    {
      switch (EXTI_InitStruct->Mode)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	7a5b      	ldrb	r3, [r3, #9]
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d01c      	beq.n	80108ea <LL_EXTI_Init+0x1aa>
 80108b0:	2b02      	cmp	r3, #2
 80108b2:	dc25      	bgt.n	8010900 <LL_EXTI_Init+0x1c0>
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d002      	beq.n	80108be <LL_EXTI_Init+0x17e>
 80108b8:	2b01      	cmp	r3, #1
 80108ba:	d00b      	beq.n	80108d4 <LL_EXTI_Init+0x194>
 80108bc:	e020      	b.n	8010900 <LL_EXTI_Init+0x1c0>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7ff fe90 	bl	80105e8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7ff fe19 	bl	8010504 <LL_EXTI_EnableIT_32_63>
          break;
 80108d2:	e01a      	b.n	801090a <LL_EXTI_Init+0x1ca>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	4618      	mov	r0, r3
 80108da:	f7ff fe39 	bl	8010550 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7ff fe5a 	bl	801059c <LL_EXTI_EnableEvent_32_63>
          break;
 80108e8:	e00f      	b.n	801090a <LL_EXTI_Init+0x1ca>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7ff fe08 	bl	8010504 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7ff fe4f 	bl	801059c <LL_EXTI_EnableEvent_32_63>
          break;
 80108fe:	e004      	b.n	801090a <LL_EXTI_Init+0x1ca>
        default:
          status |= 0x04u;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f043 0304 	orr.w	r3, r3, #4
 8010906:	60fb      	str	r3, [r7, #12]
          break;
 8010908:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	7a9b      	ldrb	r3, [r3, #10]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d045      	beq.n	801099e <LL_EXTI_Init+0x25e>
      {
        switch (EXTI_InitStruct->Trigger)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	7a9b      	ldrb	r3, [r3, #10]
 8010916:	2b03      	cmp	r3, #3
 8010918:	d01c      	beq.n	8010954 <LL_EXTI_Init+0x214>
 801091a:	2b03      	cmp	r3, #3
 801091c:	dc25      	bgt.n	801096a <LL_EXTI_Init+0x22a>
 801091e:	2b01      	cmp	r3, #1
 8010920:	d002      	beq.n	8010928 <LL_EXTI_Init+0x1e8>
 8010922:	2b02      	cmp	r3, #2
 8010924:	d00b      	beq.n	801093e <LL_EXTI_Init+0x1fe>
 8010926:	e020      	b.n	801096a <LL_EXTI_Init+0x22a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	4618      	mov	r0, r3
 801092e:	f7ff fef3 	bl	8010718 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	4618      	mov	r0, r3
 8010938:	f7ff fe7c 	bl	8010634 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 801093c:	e030      	b.n	80109a0 <LL_EXTI_Init+0x260>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	4618      	mov	r0, r3
 8010944:	f7ff fe9c 	bl	8010680 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	4618      	mov	r0, r3
 801094e:	f7ff febd 	bl	80106cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8010952:	e025      	b.n	80109a0 <LL_EXTI_Init+0x260>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	685b      	ldr	r3, [r3, #4]
 8010958:	4618      	mov	r0, r3
 801095a:	f7ff fe6b 	bl	8010634 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	4618      	mov	r0, r3
 8010964:	f7ff feb2 	bl	80106cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8010968:	e01a      	b.n	80109a0 <LL_EXTI_Init+0x260>
          default:
            status |= 0x05u;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	f043 0305 	orr.w	r3, r3, #5
 8010970:	60fb      	str	r3, [r7, #12]
            break;
 8010972:	e015      	b.n	80109a0 <LL_EXTI_Init+0x260>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4618      	mov	r0, r3
 801097a:	f7ff fdd5 	bl	8010528 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	4618      	mov	r0, r3
 8010984:	f7ff fe1c 	bl	80105c0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	685b      	ldr	r3, [r3, #4]
 801098c:	4618      	mov	r0, r3
 801098e:	f7ff fddf 	bl	8010550 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	4618      	mov	r0, r3
 8010998:	f7ff fe26 	bl	80105e8 <LL_EXTI_DisableEvent_32_63>
 801099c:	e000      	b.n	80109a0 <LL_EXTI_Init+0x260>
      }
 801099e:	bf00      	nop
  }

  return status;
 80109a0:	68fb      	ldr	r3, [r7, #12]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3710      	adds	r7, #16
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	0801d0ac 	.word	0x0801d0ac

080109b0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b086      	sub	sp, #24
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
  uint32_t flashaccess;
  uint32_t btcr_reg;
  uint32_t mask;

  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 80109c0:	d003      	beq.n	80109ca <FMC_NORSRAM_Init+0x1a>
 80109c2:	21b9      	movs	r1, #185	; 0xb9
 80109c4:	488c      	ldr	r0, [pc, #560]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 80109c6:	f7f1 fe33 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_NORSRAM_BANK(Init->NSBank));
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d00f      	beq.n	80109f2 <FMC_NORSRAM_Init+0x42>
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	2b02      	cmp	r3, #2
 80109d8:	d00b      	beq.n	80109f2 <FMC_NORSRAM_Init+0x42>
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	2b04      	cmp	r3, #4
 80109e0:	d007      	beq.n	80109f2 <FMC_NORSRAM_Init+0x42>
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2b06      	cmp	r3, #6
 80109e8:	d003      	beq.n	80109f2 <FMC_NORSRAM_Init+0x42>
 80109ea:	21ba      	movs	r1, #186	; 0xba
 80109ec:	4882      	ldr	r0, [pc, #520]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 80109ee:	f7f1 fe1f 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_MUX(Init->DataAddressMux));
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d007      	beq.n	8010a0a <FMC_NORSRAM_Init+0x5a>
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	2b02      	cmp	r3, #2
 8010a00:	d003      	beq.n	8010a0a <FMC_NORSRAM_Init+0x5a>
 8010a02:	21bb      	movs	r1, #187	; 0xbb
 8010a04:	487c      	ldr	r0, [pc, #496]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010a06:	f7f1 fe13 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_MEMORY(Init->MemoryType));
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d00b      	beq.n	8010a2a <FMC_NORSRAM_Init+0x7a>
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	689b      	ldr	r3, [r3, #8]
 8010a16:	2b04      	cmp	r3, #4
 8010a18:	d007      	beq.n	8010a2a <FMC_NORSRAM_Init+0x7a>
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	689b      	ldr	r3, [r3, #8]
 8010a1e:	2b08      	cmp	r3, #8
 8010a20:	d003      	beq.n	8010a2a <FMC_NORSRAM_Init+0x7a>
 8010a22:	21bc      	movs	r1, #188	; 0xbc
 8010a24:	4874      	ldr	r0, [pc, #464]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010a26:	f7f1 fe03 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_NORSRAM_MEMORY_WIDTH(Init->MemoryDataWidth));
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	68db      	ldr	r3, [r3, #12]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d00b      	beq.n	8010a4a <FMC_NORSRAM_Init+0x9a>
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	2b10      	cmp	r3, #16
 8010a38:	d007      	beq.n	8010a4a <FMC_NORSRAM_Init+0x9a>
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	2b20      	cmp	r3, #32
 8010a40:	d003      	beq.n	8010a4a <FMC_NORSRAM_Init+0x9a>
 8010a42:	21bd      	movs	r1, #189	; 0xbd
 8010a44:	486c      	ldr	r0, [pc, #432]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010a46:	f7f1 fdf3 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_BURSTMODE(Init->BurstAccessMode));
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	691b      	ldr	r3, [r3, #16]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d008      	beq.n	8010a64 <FMC_NORSRAM_Init+0xb4>
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	691b      	ldr	r3, [r3, #16]
 8010a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a5a:	d003      	beq.n	8010a64 <FMC_NORSRAM_Init+0xb4>
 8010a5c:	21be      	movs	r1, #190	; 0xbe
 8010a5e:	4866      	ldr	r0, [pc, #408]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010a60:	f7f1 fde6 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_WAIT_POLARITY(Init->WaitSignalPolarity));
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	695b      	ldr	r3, [r3, #20]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d008      	beq.n	8010a7e <FMC_NORSRAM_Init+0xce>
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	695b      	ldr	r3, [r3, #20]
 8010a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a74:	d003      	beq.n	8010a7e <FMC_NORSRAM_Init+0xce>
 8010a76:	21bf      	movs	r1, #191	; 0xbf
 8010a78:	485f      	ldr	r0, [pc, #380]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010a7a:	f7f1 fdd9 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_WAIT_SIGNAL_ACTIVE(Init->WaitSignalActive));
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	699b      	ldr	r3, [r3, #24]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d008      	beq.n	8010a98 <FMC_NORSRAM_Init+0xe8>
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	699b      	ldr	r3, [r3, #24]
 8010a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010a8e:	d003      	beq.n	8010a98 <FMC_NORSRAM_Init+0xe8>
 8010a90:	21c0      	movs	r1, #192	; 0xc0
 8010a92:	4859      	ldr	r0, [pc, #356]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010a94:	f7f1 fdcc 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_WRITE_OPERATION(Init->WriteOperation));
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	69db      	ldr	r3, [r3, #28]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d008      	beq.n	8010ab2 <FMC_NORSRAM_Init+0x102>
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	69db      	ldr	r3, [r3, #28]
 8010aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010aa8:	d003      	beq.n	8010ab2 <FMC_NORSRAM_Init+0x102>
 8010aaa:	21c1      	movs	r1, #193	; 0xc1
 8010aac:	4852      	ldr	r0, [pc, #328]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010aae:	f7f1 fdbf 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_WAITE_SIGNAL(Init->WaitSignal));
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	6a1b      	ldr	r3, [r3, #32]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d008      	beq.n	8010acc <FMC_NORSRAM_Init+0x11c>
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	6a1b      	ldr	r3, [r3, #32]
 8010abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ac2:	d003      	beq.n	8010acc <FMC_NORSRAM_Init+0x11c>
 8010ac4:	21c2      	movs	r1, #194	; 0xc2
 8010ac6:	484c      	ldr	r0, [pc, #304]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010ac8:	f7f1 fdb2 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_EXTENDED_MODE(Init->ExtendedMode));
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d008      	beq.n	8010ae6 <FMC_NORSRAM_Init+0x136>
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010adc:	d003      	beq.n	8010ae6 <FMC_NORSRAM_Init+0x136>
 8010ade:	21c3      	movs	r1, #195	; 0xc3
 8010ae0:	4845      	ldr	r0, [pc, #276]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010ae2:	f7f1 fda5 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_ASYNWAIT(Init->AsynchronousWait));
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d008      	beq.n	8010b00 <FMC_NORSRAM_Init+0x150>
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010af6:	d003      	beq.n	8010b00 <FMC_NORSRAM_Init+0x150>
 8010af8:	21c4      	movs	r1, #196	; 0xc4
 8010afa:	483f      	ldr	r0, [pc, #252]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010afc:	f7f1 fd98 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_WRITE_BURST(Init->WriteBurst));
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d008      	beq.n	8010b1a <FMC_NORSRAM_Init+0x16a>
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010b10:	d003      	beq.n	8010b1a <FMC_NORSRAM_Init+0x16a>
 8010b12:	21c5      	movs	r1, #197	; 0xc5
 8010b14:	4838      	ldr	r0, [pc, #224]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010b16:	f7f1 fd8b 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d008      	beq.n	8010b34 <FMC_NORSRAM_Init+0x184>
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b2a:	d003      	beq.n	8010b34 <FMC_NORSRAM_Init+0x184>
 8010b2c:	21c6      	movs	r1, #198	; 0xc6
 8010b2e:	4832      	ldr	r0, [pc, #200]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010b30:	f7f1 fd7e 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010b3c:	d007      	beq.n	8010b4e <FMC_NORSRAM_Init+0x19e>
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d003      	beq.n	8010b4e <FMC_NORSRAM_Init+0x19e>
 8010b46:	21c7      	movs	r1, #199	; 0xc7
 8010b48:	482b      	ldr	r0, [pc, #172]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010b4a:	f7f1 fd71 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d017      	beq.n	8010b86 <FMC_NORSRAM_Init+0x1d6>
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b5e:	d012      	beq.n	8010b86 <FMC_NORSRAM_Init+0x1d6>
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b68:	d00d      	beq.n	8010b86 <FMC_NORSRAM_Init+0x1d6>
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010b72:	d008      	beq.n	8010b86 <FMC_NORSRAM_Init+0x1d6>
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010b7c:	d003      	beq.n	8010b86 <FMC_NORSRAM_Init+0x1d6>
 8010b7e:	21c8      	movs	r1, #200	; 0xc8
 8010b80:	481d      	ldr	r0, [pc, #116]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010b82:	f7f1 fd55 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d012      	beq.n	8010bb4 <FMC_NORSRAM_Init+0x204>
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010b96:	d00d      	beq.n	8010bb4 <FMC_NORSRAM_Init+0x204>
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010ba0:	d008      	beq.n	8010bb4 <FMC_NORSRAM_Init+0x204>
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ba6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010baa:	d003      	beq.n	8010bb4 <FMC_NORSRAM_Init+0x204>
 8010bac:	21c9      	movs	r1, #201	; 0xc9
 8010bae:	4812      	ldr	r0, [pc, #72]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010bb0:	f7f1 fd3e 	bl	8002630 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d008      	beq.n	8010bd0 <FMC_NORSRAM_Init+0x220>
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	d003      	beq.n	8010bd0 <FMC_NORSRAM_Init+0x220>
 8010bc8:	21ca      	movs	r1, #202	; 0xca
 8010bca:	480b      	ldr	r0, [pc, #44]	; (8010bf8 <FMC_NORSRAM_Init+0x248>)
 8010bcc:	f7f1 fd30 	bl	8002630 <assert_failed>

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bda:	683a      	ldr	r2, [r7, #0]
 8010bdc:	6812      	ldr	r2, [r2, #0]
 8010bde:	f023 0101 	bic.w	r1, r3, #1
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	689b      	ldr	r3, [r3, #8]
 8010bec:	2b08      	cmp	r3, #8
 8010bee:	d105      	bne.n	8010bfc <FMC_NORSRAM_Init+0x24c>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8010bf0:	2340      	movs	r3, #64	; 0x40
 8010bf2:	617b      	str	r3, [r7, #20]
 8010bf4:	e004      	b.n	8010c00 <FMC_NORSRAM_Init+0x250>
 8010bf6:	bf00      	nop
 8010bf8:	0801d0e4 	.word	0x0801d0e4
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8010c0c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8010c12:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8010c18:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8010c1e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8010c24:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8010c2a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8010c30:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8010c36:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8010c3c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8010c42:	4313      	orrs	r3, r2
 8010c44:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c4a:	693a      	ldr	r2, [r7, #16]
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c54:	693a      	ldr	r2, [r7, #16]
 8010c56:	4313      	orrs	r3, r2
 8010c58:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c5e:	693a      	ldr	r2, [r7, #16]
 8010c60:	4313      	orrs	r3, r2
 8010c62:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c68:	693a      	ldr	r2, [r7, #16]
 8010c6a:	4313      	orrs	r3, r2
 8010c6c:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8010c6e:	4b44      	ldr	r3, [pc, #272]	; (8010d80 <FMC_NORSRAM_Init+0x3d0>)
 8010c70:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c78:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010c80:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8010c88:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8010c90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	681a      	ldr	r2, [r3, #0]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	43db      	mvns	r3, r3
 8010ca0:	ea02 0103 	and.w	r1, r2, r3
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	4319      	orrs	r1, r3
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cba:	d10c      	bne.n	8010cd6 <FMC_NORSRAM_Init+0x326>
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d008      	beq.n	8010cd6 <FMC_NORSRAM_Init+0x326>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cd0:	431a      	orrs	r2, r3
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8010cd6:	683b      	ldr	r3, [r7, #0]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d006      	beq.n	8010cec <FMC_NORSRAM_Init+0x33c>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681a      	ldr	r2, [r3, #0]
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ce6:	431a      	orrs	r2, r3
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cf2:	2b01      	cmp	r3, #1
 8010cf4:	d13d      	bne.n	8010d72 <FMC_NORSRAM_Init+0x3c2>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d004      	beq.n	8010d08 <FMC_NORSRAM_Init+0x358>
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d06:	d304      	bcc.n	8010d12 <FMC_NORSRAM_Init+0x362>
 8010d08:	f44f 7188 	mov.w	r1, #272	; 0x110
 8010d0c:	481d      	ldr	r0, [pc, #116]	; (8010d84 <FMC_NORSRAM_Init+0x3d4>)
 8010d0e:	f7f1 fc8f 	bl	8002630 <assert_failed>

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6a1b      	ldr	r3, [r3, #32]
 8010d16:	0c1b      	lsrs	r3, r3, #16
 8010d18:	041b      	lsls	r3, r3, #16
 8010d1a:	683a      	ldr	r2, [r7, #0]
 8010d1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8010d1e:	431a      	orrs	r2, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	2b04      	cmp	r3, #4
 8010d2a:	d014      	beq.n	8010d56 <FMC_NORSRAM_Init+0x3a6>
 8010d2c:	2b04      	cmp	r3, #4
 8010d2e:	d819      	bhi.n	8010d64 <FMC_NORSRAM_Init+0x3b4>
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d002      	beq.n	8010d3a <FMC_NORSRAM_Init+0x38a>
 8010d34:	2b02      	cmp	r3, #2
 8010d36:	d007      	beq.n	8010d48 <FMC_NORSRAM_Init+0x398>
 8010d38:	e014      	b.n	8010d64 <FMC_NORSRAM_Init+0x3b4>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6a1b      	ldr	r3, [r3, #32]
 8010d3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	621a      	str	r2, [r3, #32]
        break;
 8010d46:	e015      	b.n	8010d74 <FMC_NORSRAM_Init+0x3c4>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6a1b      	ldr	r3, [r3, #32]
 8010d4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	621a      	str	r2, [r3, #32]
        break;
 8010d54:	e00e      	b.n	8010d74 <FMC_NORSRAM_Init+0x3c4>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6a1b      	ldr	r3, [r3, #32]
 8010d5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	621a      	str	r2, [r3, #32]
        break;
 8010d62:	e007      	b.n	8010d74 <FMC_NORSRAM_Init+0x3c4>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	6a1b      	ldr	r3, [r3, #32]
 8010d68:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	621a      	str	r2, [r3, #32]
        break;
 8010d70:	e000      	b.n	8010d74 <FMC_NORSRAM_Init+0x3c4>
    }
  }
 8010d72:	bf00      	nop

  return HAL_OK;
 8010d74:	2300      	movs	r3, #0
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	3718      	adds	r7, #24
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	0008fb7f 	.word	0x0008fb7f
 8010d84:	0801d0e4 	.word	0x0801d0e4

08010d88 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	60b9      	str	r1, [r7, #8]
 8010d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpr;

  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8010d9a:	d004      	beq.n	8010da6 <FMC_NORSRAM_Timing_Init+0x1e>
 8010d9c:	f240 1173 	movw	r1, #371	; 0x173
 8010da0:	4862      	ldr	r0, [pc, #392]	; (8010f2c <FMC_NORSRAM_Timing_Init+0x1a4>)
 8010da2:	f7f1 fc45 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	2b0f      	cmp	r3, #15
 8010dac:	d904      	bls.n	8010db8 <FMC_NORSRAM_Timing_Init+0x30>
 8010dae:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8010db2:	485e      	ldr	r0, [pc, #376]	; (8010f2c <FMC_NORSRAM_Timing_Init+0x1a4>)
 8010db4:	f7f1 fc3c 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d003      	beq.n	8010dc8 <FMC_NORSRAM_Timing_Init+0x40>
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	2b0f      	cmp	r3, #15
 8010dc6:	d904      	bls.n	8010dd2 <FMC_NORSRAM_Timing_Init+0x4a>
 8010dc8:	f240 1175 	movw	r1, #373	; 0x175
 8010dcc:	4857      	ldr	r0, [pc, #348]	; (8010f2c <FMC_NORSRAM_Timing_Init+0x1a4>)
 8010dce:	f7f1 fc2f 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_DATAHOLD_DURATION(Timing->DataHoldTime));
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	2b03      	cmp	r3, #3
 8010dd8:	d904      	bls.n	8010de4 <FMC_NORSRAM_Timing_Init+0x5c>
 8010dda:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8010dde:	4853      	ldr	r0, [pc, #332]	; (8010f2c <FMC_NORSRAM_Timing_Init+0x1a4>)
 8010de0:	f7f1 fc26 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_DATASETUP_TIME(Timing->DataSetupTime));
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	689b      	ldr	r3, [r3, #8]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d003      	beq.n	8010df4 <FMC_NORSRAM_Timing_Init+0x6c>
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	689b      	ldr	r3, [r3, #8]
 8010df0:	2bff      	cmp	r3, #255	; 0xff
 8010df2:	d904      	bls.n	8010dfe <FMC_NORSRAM_Timing_Init+0x76>
 8010df4:	f240 1177 	movw	r1, #375	; 0x177
 8010df8:	484c      	ldr	r0, [pc, #304]	; (8010f2c <FMC_NORSRAM_Timing_Init+0x1a4>)
 8010dfa:	f7f1 fc19 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	691b      	ldr	r3, [r3, #16]
 8010e02:	2b0f      	cmp	r3, #15
 8010e04:	d904      	bls.n	8010e10 <FMC_NORSRAM_Timing_Init+0x88>
 8010e06:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8010e0a:	4848      	ldr	r0, [pc, #288]	; (8010f2c <FMC_NORSRAM_Timing_Init+0x1a4>)
 8010e0c:	f7f1 fc10 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_CLK_DIV(Timing->CLKDivision));
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	695b      	ldr	r3, [r3, #20]
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d903      	bls.n	8010e20 <FMC_NORSRAM_Timing_Init+0x98>
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	695b      	ldr	r3, [r3, #20]
 8010e1c:	2b10      	cmp	r3, #16
 8010e1e:	d904      	bls.n	8010e2a <FMC_NORSRAM_Timing_Init+0xa2>
 8010e20:	f240 1179 	movw	r1, #377	; 0x179
 8010e24:	4841      	ldr	r0, [pc, #260]	; (8010f2c <FMC_NORSRAM_Timing_Init+0x1a4>)
 8010e26:	f7f1 fc03 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	699b      	ldr	r3, [r3, #24]
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d903      	bls.n	8010e3a <FMC_NORSRAM_Timing_Init+0xb2>
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	699b      	ldr	r3, [r3, #24]
 8010e36:	2b11      	cmp	r3, #17
 8010e38:	d904      	bls.n	8010e44 <FMC_NORSRAM_Timing_Init+0xbc>
 8010e3a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8010e3e:	483b      	ldr	r0, [pc, #236]	; (8010f2c <FMC_NORSRAM_Timing_Init+0x1a4>)
 8010e40:	f7f1 fbf6 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	69db      	ldr	r3, [r3, #28]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d013      	beq.n	8010e74 <FMC_NORSRAM_Timing_Init+0xec>
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	69db      	ldr	r3, [r3, #28]
 8010e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010e54:	d00e      	beq.n	8010e74 <FMC_NORSRAM_Timing_Init+0xec>
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	69db      	ldr	r3, [r3, #28]
 8010e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010e5e:	d009      	beq.n	8010e74 <FMC_NORSRAM_Timing_Init+0xec>
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	69db      	ldr	r3, [r3, #28]
 8010e64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010e68:	d004      	beq.n	8010e74 <FMC_NORSRAM_Timing_Init+0xec>
 8010e6a:	f240 117b 	movw	r1, #379	; 0x17b
 8010e6e:	482f      	ldr	r0, [pc, #188]	; (8010f2c <FMC_NORSRAM_Timing_Init+0x1a4>)
 8010e70:	f7f1 fbde 	bl	8002630 <assert_failed>
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d00d      	beq.n	8010e96 <FMC_NORSRAM_Timing_Init+0x10e>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2b02      	cmp	r3, #2
 8010e7e:	d00a      	beq.n	8010e96 <FMC_NORSRAM_Timing_Init+0x10e>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b04      	cmp	r3, #4
 8010e84:	d007      	beq.n	8010e96 <FMC_NORSRAM_Timing_Init+0x10e>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2b06      	cmp	r3, #6
 8010e8a:	d004      	beq.n	8010e96 <FMC_NORSRAM_Timing_Init+0x10e>
 8010e8c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8010e90:	4826      	ldr	r0, [pc, #152]	; (8010f2c <FMC_NORSRAM_Timing_Init+0x1a4>)
 8010e92:	f7f1 fbcd 	bl	8002630 <assert_failed>

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	1c5a      	adds	r2, r3, #1
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	681a      	ldr	r2, [r3, #0]
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	011b      	lsls	r3, r3, #4
 8010eaa:	431a      	orrs	r2, r3
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	689b      	ldr	r3, [r3, #8]
 8010eb0:	021b      	lsls	r3, r3, #8
 8010eb2:	431a      	orrs	r2, r3
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	079b      	lsls	r3, r3, #30
 8010eba:	431a      	orrs	r2, r3
 8010ebc:	68bb      	ldr	r3, [r7, #8]
 8010ebe:	691b      	ldr	r3, [r3, #16]
 8010ec0:	041b      	lsls	r3, r3, #16
 8010ec2:	431a      	orrs	r2, r3
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	695b      	ldr	r3, [r3, #20]
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	051b      	lsls	r3, r3, #20
 8010ecc:	431a      	orrs	r2, r3
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	699b      	ldr	r3, [r3, #24]
 8010ed2:	3b02      	subs	r3, #2
 8010ed4:	061b      	lsls	r3, r3, #24
 8010ed6:	ea42 0103 	orr.w	r1, r2, r3
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	69db      	ldr	r3, [r3, #28]
 8010ede:	687a      	ldr	r2, [r7, #4]
 8010ee0:	3201      	adds	r2, #1
 8010ee2:	4319      	orrs	r1, r3
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ef6:	d113      	bne.n	8010f20 <FMC_NORSRAM_Timing_Init+0x198>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010f00:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8010f02:	68bb      	ldr	r3, [r7, #8]
 8010f04:	695b      	ldr	r3, [r3, #20]
 8010f06:	3b01      	subs	r3, #1
 8010f08:	051b      	lsls	r3, r3, #20
 8010f0a:	697a      	ldr	r2, [r7, #20]
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	431a      	orrs	r2, r3
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010f20:	2300      	movs	r3, #0
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3718      	adds	r7, #24
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	0801d0e4 	.word	0x0801d0e4

08010f30 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b084      	sub	sp, #16
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
 8010f3c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d008      	beq.n	8010f56 <FMC_NORSRAM_Extended_Timing_Init+0x26>
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f4a:	d004      	beq.n	8010f56 <FMC_NORSRAM_Extended_Timing_Init+0x26>
 8010f4c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8010f50:	484d      	ldr	r0, [pc, #308]	; (8011088 <FMC_NORSRAM_Extended_Timing_Init+0x158>)
 8010f52:	f7f1 fb6d 	bl	8002630 <assert_failed>

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f5c:	f040 8089 	bne.w	8011072 <FMC_NORSRAM_Extended_Timing_Init+0x142>
  {
    /* Check the parameters */
    assert_param(IS_FMC_NORSRAM_EXTENDED_DEVICE(Device));
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	4a4a      	ldr	r2, [pc, #296]	; (801108c <FMC_NORSRAM_Extended_Timing_Init+0x15c>)
 8010f64:	4293      	cmp	r3, r2
 8010f66:	d004      	beq.n	8010f72 <FMC_NORSRAM_Extended_Timing_Init+0x42>
 8010f68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010f6c:	4846      	ldr	r0, [pc, #280]	; (8011088 <FMC_NORSRAM_Extended_Timing_Init+0x158>)
 8010f6e:	f7f1 fb5f 	bl	8002630 <assert_failed>
    assert_param(IS_FMC_ADDRESS_SETUP_TIME(Timing->AddressSetupTime));
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	2b0f      	cmp	r3, #15
 8010f78:	d904      	bls.n	8010f84 <FMC_NORSRAM_Extended_Timing_Init+0x54>
 8010f7a:	f240 11ab 	movw	r1, #427	; 0x1ab
 8010f7e:	4842      	ldr	r0, [pc, #264]	; (8011088 <FMC_NORSRAM_Extended_Timing_Init+0x158>)
 8010f80:	f7f1 fb56 	bl	8002630 <assert_failed>
    assert_param(IS_FMC_ADDRESS_HOLD_TIME(Timing->AddressHoldTime));
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d003      	beq.n	8010f94 <FMC_NORSRAM_Extended_Timing_Init+0x64>
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	2b0f      	cmp	r3, #15
 8010f92:	d904      	bls.n	8010f9e <FMC_NORSRAM_Extended_Timing_Init+0x6e>
 8010f94:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8010f98:	483b      	ldr	r0, [pc, #236]	; (8011088 <FMC_NORSRAM_Extended_Timing_Init+0x158>)
 8010f9a:	f7f1 fb49 	bl	8002630 <assert_failed>
    assert_param(IS_FMC_DATASETUP_TIME(Timing->DataSetupTime));
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	689b      	ldr	r3, [r3, #8]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d003      	beq.n	8010fae <FMC_NORSRAM_Extended_Timing_Init+0x7e>
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	689b      	ldr	r3, [r3, #8]
 8010faa:	2bff      	cmp	r3, #255	; 0xff
 8010fac:	d904      	bls.n	8010fb8 <FMC_NORSRAM_Extended_Timing_Init+0x88>
 8010fae:	f240 11ad 	movw	r1, #429	; 0x1ad
 8010fb2:	4835      	ldr	r0, [pc, #212]	; (8011088 <FMC_NORSRAM_Extended_Timing_Init+0x158>)
 8010fb4:	f7f1 fb3c 	bl	8002630 <assert_failed>
    assert_param(IS_FMC_DATAHOLD_DURATION(Timing->DataHoldTime));
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	68db      	ldr	r3, [r3, #12]
 8010fbc:	2b03      	cmp	r3, #3
 8010fbe:	d904      	bls.n	8010fca <FMC_NORSRAM_Extended_Timing_Init+0x9a>
 8010fc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010fc4:	4830      	ldr	r0, [pc, #192]	; (8011088 <FMC_NORSRAM_Extended_Timing_Init+0x158>)
 8010fc6:	f7f1 fb33 	bl	8002630 <assert_failed>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	691b      	ldr	r3, [r3, #16]
 8010fce:	2b0f      	cmp	r3, #15
 8010fd0:	d904      	bls.n	8010fdc <FMC_NORSRAM_Extended_Timing_Init+0xac>
 8010fd2:	f240 11af 	movw	r1, #431	; 0x1af
 8010fd6:	482c      	ldr	r0, [pc, #176]	; (8011088 <FMC_NORSRAM_Extended_Timing_Init+0x158>)
 8010fd8:	f7f1 fb2a 	bl	8002630 <assert_failed>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	69db      	ldr	r3, [r3, #28]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d013      	beq.n	801100c <FMC_NORSRAM_Extended_Timing_Init+0xdc>
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	69db      	ldr	r3, [r3, #28]
 8010fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010fec:	d00e      	beq.n	801100c <FMC_NORSRAM_Extended_Timing_Init+0xdc>
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	69db      	ldr	r3, [r3, #28]
 8010ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ff6:	d009      	beq.n	801100c <FMC_NORSRAM_Extended_Timing_Init+0xdc>
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	69db      	ldr	r3, [r3, #28]
 8010ffc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011000:	d004      	beq.n	801100c <FMC_NORSRAM_Extended_Timing_Init+0xdc>
 8011002:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8011006:	4820      	ldr	r0, [pc, #128]	; (8011088 <FMC_NORSRAM_Extended_Timing_Init+0x158>)
 8011008:	f7f1 fb12 	bl	8002630 <assert_failed>
    assert_param(IS_FMC_NORSRAM_BANK(Bank));
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00d      	beq.n	801102e <FMC_NORSRAM_Extended_Timing_Init+0xfe>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2b02      	cmp	r3, #2
 8011016:	d00a      	beq.n	801102e <FMC_NORSRAM_Extended_Timing_Init+0xfe>
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2b04      	cmp	r3, #4
 801101c:	d007      	beq.n	801102e <FMC_NORSRAM_Extended_Timing_Init+0xfe>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2b06      	cmp	r3, #6
 8011022:	d004      	beq.n	801102e <FMC_NORSRAM_Extended_Timing_Init+0xfe>
 8011024:	f240 11b1 	movw	r1, #433	; 0x1b1
 8011028:	4817      	ldr	r0, [pc, #92]	; (8011088 <FMC_NORSRAM_Extended_Timing_Init+0x158>)
 801102a:	f7f1 fb01 	bl	8002630 <assert_failed>

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011036:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	6819      	ldr	r1, [r3, #0]
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	011b      	lsls	r3, r3, #4
 8011044:	4319      	orrs	r1, r3
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	689b      	ldr	r3, [r3, #8]
 801104a:	021b      	lsls	r3, r3, #8
 801104c:	4319      	orrs	r1, r3
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	68db      	ldr	r3, [r3, #12]
 8011052:	079b      	lsls	r3, r3, #30
 8011054:	4319      	orrs	r1, r3
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	69db      	ldr	r3, [r3, #28]
 801105a:	4319      	orrs	r1, r3
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	691b      	ldr	r3, [r3, #16]
 8011060:	041b      	lsls	r3, r3, #16
 8011062:	430b      	orrs	r3, r1
 8011064:	ea42 0103 	orr.w	r1, r2, r3
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	687a      	ldr	r2, [r7, #4]
 801106c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011070:	e005      	b.n	801107e <FMC_NORSRAM_Extended_Timing_Init+0x14e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	687a      	ldr	r2, [r7, #4]
 8011076:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801107a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 801107e:	2300      	movs	r3, #0
}
 8011080:	4618      	mov	r0, r3
 8011082:	3710      	adds	r7, #16
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	0801d0e4 	.word	0x0801d0e4
 801108c:	a0000104 	.word	0xa0000104

08011090 <LL_GPIO_SetPinMode>:
{
 8011090:	b480      	push	{r7}
 8011092:	b08b      	sub	sp, #44	; 0x2c
 8011094:	af00      	add	r7, sp, #0
 8011096:	60f8      	str	r0, [r7, #12]
 8011098:	60b9      	str	r1, [r7, #8]
 801109a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	fa93 f3a3 	rbit	r3, r3
 80110aa:	613b      	str	r3, [r7, #16]
  return result;
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d101      	bne.n	80110ba <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80110b6:	2320      	movs	r3, #32
 80110b8:	e003      	b.n	80110c2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	fab3 f383 	clz	r3, r3
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	005b      	lsls	r3, r3, #1
 80110c4:	2103      	movs	r1, #3
 80110c6:	fa01 f303 	lsl.w	r3, r1, r3
 80110ca:	43db      	mvns	r3, r3
 80110cc:	401a      	ands	r2, r3
 80110ce:	68bb      	ldr	r3, [r7, #8]
 80110d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80110d2:	6a3b      	ldr	r3, [r7, #32]
 80110d4:	fa93 f3a3 	rbit	r3, r3
 80110d8:	61fb      	str	r3, [r7, #28]
  return result;
 80110da:	69fb      	ldr	r3, [r7, #28]
 80110dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80110de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d101      	bne.n	80110e8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80110e4:	2320      	movs	r3, #32
 80110e6:	e003      	b.n	80110f0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80110e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ea:	fab3 f383 	clz	r3, r3
 80110ee:	b2db      	uxtb	r3, r3
 80110f0:	005b      	lsls	r3, r3, #1
 80110f2:	6879      	ldr	r1, [r7, #4]
 80110f4:	fa01 f303 	lsl.w	r3, r1, r3
 80110f8:	431a      	orrs	r2, r3
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	601a      	str	r2, [r3, #0]
}
 80110fe:	bf00      	nop
 8011100:	372c      	adds	r7, #44	; 0x2c
 8011102:	46bd      	mov	sp, r7
 8011104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011108:	4770      	bx	lr

0801110a <LL_GPIO_SetPinOutputType>:
{
 801110a:	b480      	push	{r7}
 801110c:	b085      	sub	sp, #20
 801110e:	af00      	add	r7, sp, #0
 8011110:	60f8      	str	r0, [r7, #12]
 8011112:	60b9      	str	r1, [r7, #8]
 8011114:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	685a      	ldr	r2, [r3, #4]
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	43db      	mvns	r3, r3
 801111e:	401a      	ands	r2, r3
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	6879      	ldr	r1, [r7, #4]
 8011124:	fb01 f303 	mul.w	r3, r1, r3
 8011128:	431a      	orrs	r2, r3
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	605a      	str	r2, [r3, #4]
}
 801112e:	bf00      	nop
 8011130:	3714      	adds	r7, #20
 8011132:	46bd      	mov	sp, r7
 8011134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011138:	4770      	bx	lr

0801113a <LL_GPIO_SetPinSpeed>:
{
 801113a:	b480      	push	{r7}
 801113c:	b08b      	sub	sp, #44	; 0x2c
 801113e:	af00      	add	r7, sp, #0
 8011140:	60f8      	str	r0, [r7, #12]
 8011142:	60b9      	str	r1, [r7, #8]
 8011144:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	689a      	ldr	r2, [r3, #8]
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	fa93 f3a3 	rbit	r3, r3
 8011154:	613b      	str	r3, [r7, #16]
  return result;
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801115a:	69bb      	ldr	r3, [r7, #24]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d101      	bne.n	8011164 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8011160:	2320      	movs	r3, #32
 8011162:	e003      	b.n	801116c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	fab3 f383 	clz	r3, r3
 801116a:	b2db      	uxtb	r3, r3
 801116c:	005b      	lsls	r3, r3, #1
 801116e:	2103      	movs	r1, #3
 8011170:	fa01 f303 	lsl.w	r3, r1, r3
 8011174:	43db      	mvns	r3, r3
 8011176:	401a      	ands	r2, r3
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801117c:	6a3b      	ldr	r3, [r7, #32]
 801117e:	fa93 f3a3 	rbit	r3, r3
 8011182:	61fb      	str	r3, [r7, #28]
  return result;
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8011188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118a:	2b00      	cmp	r3, #0
 801118c:	d101      	bne.n	8011192 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 801118e:	2320      	movs	r3, #32
 8011190:	e003      	b.n	801119a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8011192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011194:	fab3 f383 	clz	r3, r3
 8011198:	b2db      	uxtb	r3, r3
 801119a:	005b      	lsls	r3, r3, #1
 801119c:	6879      	ldr	r1, [r7, #4]
 801119e:	fa01 f303 	lsl.w	r3, r1, r3
 80111a2:	431a      	orrs	r2, r3
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	609a      	str	r2, [r3, #8]
}
 80111a8:	bf00      	nop
 80111aa:	372c      	adds	r7, #44	; 0x2c
 80111ac:	46bd      	mov	sp, r7
 80111ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b2:	4770      	bx	lr

080111b4 <LL_GPIO_SetPinPull>:
{
 80111b4:	b480      	push	{r7}
 80111b6:	b08b      	sub	sp, #44	; 0x2c
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	68da      	ldr	r2, [r3, #12]
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	fa93 f3a3 	rbit	r3, r3
 80111ce:	613b      	str	r3, [r7, #16]
  return result;
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80111d4:	69bb      	ldr	r3, [r7, #24]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d101      	bne.n	80111de <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80111da:	2320      	movs	r3, #32
 80111dc:	e003      	b.n	80111e6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80111de:	69bb      	ldr	r3, [r7, #24]
 80111e0:	fab3 f383 	clz	r3, r3
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	005b      	lsls	r3, r3, #1
 80111e8:	2103      	movs	r1, #3
 80111ea:	fa01 f303 	lsl.w	r3, r1, r3
 80111ee:	43db      	mvns	r3, r3
 80111f0:	401a      	ands	r2, r3
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80111f6:	6a3b      	ldr	r3, [r7, #32]
 80111f8:	fa93 f3a3 	rbit	r3, r3
 80111fc:	61fb      	str	r3, [r7, #28]
  return result;
 80111fe:	69fb      	ldr	r3, [r7, #28]
 8011200:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8011202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011204:	2b00      	cmp	r3, #0
 8011206:	d101      	bne.n	801120c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8011208:	2320      	movs	r3, #32
 801120a:	e003      	b.n	8011214 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801120c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120e:	fab3 f383 	clz	r3, r3
 8011212:	b2db      	uxtb	r3, r3
 8011214:	005b      	lsls	r3, r3, #1
 8011216:	6879      	ldr	r1, [r7, #4]
 8011218:	fa01 f303 	lsl.w	r3, r1, r3
 801121c:	431a      	orrs	r2, r3
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	60da      	str	r2, [r3, #12]
}
 8011222:	bf00      	nop
 8011224:	372c      	adds	r7, #44	; 0x2c
 8011226:	46bd      	mov	sp, r7
 8011228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122c:	4770      	bx	lr

0801122e <LL_GPIO_SetAFPin_0_7>:
{
 801122e:	b480      	push	{r7}
 8011230:	b08b      	sub	sp, #44	; 0x2c
 8011232:	af00      	add	r7, sp, #0
 8011234:	60f8      	str	r0, [r7, #12]
 8011236:	60b9      	str	r1, [r7, #8]
 8011238:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	6a1a      	ldr	r2, [r3, #32]
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	fa93 f3a3 	rbit	r3, r3
 8011248:	613b      	str	r3, [r7, #16]
  return result;
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801124e:	69bb      	ldr	r3, [r7, #24]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d101      	bne.n	8011258 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8011254:	2320      	movs	r3, #32
 8011256:	e003      	b.n	8011260 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8011258:	69bb      	ldr	r3, [r7, #24]
 801125a:	fab3 f383 	clz	r3, r3
 801125e:	b2db      	uxtb	r3, r3
 8011260:	009b      	lsls	r3, r3, #2
 8011262:	210f      	movs	r1, #15
 8011264:	fa01 f303 	lsl.w	r3, r1, r3
 8011268:	43db      	mvns	r3, r3
 801126a:	401a      	ands	r2, r3
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8011270:	6a3b      	ldr	r3, [r7, #32]
 8011272:	fa93 f3a3 	rbit	r3, r3
 8011276:	61fb      	str	r3, [r7, #28]
  return result;
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127e:	2b00      	cmp	r3, #0
 8011280:	d101      	bne.n	8011286 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8011282:	2320      	movs	r3, #32
 8011284:	e003      	b.n	801128e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8011286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011288:	fab3 f383 	clz	r3, r3
 801128c:	b2db      	uxtb	r3, r3
 801128e:	009b      	lsls	r3, r3, #2
 8011290:	6879      	ldr	r1, [r7, #4]
 8011292:	fa01 f303 	lsl.w	r3, r1, r3
 8011296:	431a      	orrs	r2, r3
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	621a      	str	r2, [r3, #32]
}
 801129c:	bf00      	nop
 801129e:	372c      	adds	r7, #44	; 0x2c
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <LL_GPIO_SetAFPin_8_15>:
{
 80112a8:	b480      	push	{r7}
 80112aa:	b08b      	sub	sp, #44	; 0x2c
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	0a1b      	lsrs	r3, r3, #8
 80112bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	fa93 f3a3 	rbit	r3, r3
 80112c4:	613b      	str	r3, [r7, #16]
  return result;
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80112ca:	69bb      	ldr	r3, [r7, #24]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d101      	bne.n	80112d4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80112d0:	2320      	movs	r3, #32
 80112d2:	e003      	b.n	80112dc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80112d4:	69bb      	ldr	r3, [r7, #24]
 80112d6:	fab3 f383 	clz	r3, r3
 80112da:	b2db      	uxtb	r3, r3
 80112dc:	009b      	lsls	r3, r3, #2
 80112de:	210f      	movs	r1, #15
 80112e0:	fa01 f303 	lsl.w	r3, r1, r3
 80112e4:	43db      	mvns	r3, r3
 80112e6:	401a      	ands	r2, r3
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	0a1b      	lsrs	r3, r3, #8
 80112ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80112ee:	6a3b      	ldr	r3, [r7, #32]
 80112f0:	fa93 f3a3 	rbit	r3, r3
 80112f4:	61fb      	str	r3, [r7, #28]
  return result;
 80112f6:	69fb      	ldr	r3, [r7, #28]
 80112f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80112fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d101      	bne.n	8011304 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8011300:	2320      	movs	r3, #32
 8011302:	e003      	b.n	801130c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	fab3 f383 	clz	r3, r3
 801130a:	b2db      	uxtb	r3, r3
 801130c:	009b      	lsls	r3, r3, #2
 801130e:	6879      	ldr	r1, [r7, #4]
 8011310:	fa01 f303 	lsl.w	r3, r1, r3
 8011314:	431a      	orrs	r2, r3
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	625a      	str	r2, [r3, #36]	; 0x24
}
 801131a:	bf00      	nop
 801131c:	372c      	adds	r7, #44	; 0x2c
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr
	...

08011328 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b088      	sub	sp, #32
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8011338:	d01b      	beq.n	8011372 <LL_GPIO_Init+0x4a>
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	4a8d      	ldr	r2, [pc, #564]	; (8011574 <LL_GPIO_Init+0x24c>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d017      	beq.n	8011372 <LL_GPIO_Init+0x4a>
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	4a8c      	ldr	r2, [pc, #560]	; (8011578 <LL_GPIO_Init+0x250>)
 8011346:	4293      	cmp	r3, r2
 8011348:	d013      	beq.n	8011372 <LL_GPIO_Init+0x4a>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	4a8b      	ldr	r2, [pc, #556]	; (801157c <LL_GPIO_Init+0x254>)
 801134e:	4293      	cmp	r3, r2
 8011350:	d00f      	beq.n	8011372 <LL_GPIO_Init+0x4a>
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	4a8a      	ldr	r2, [pc, #552]	; (8011580 <LL_GPIO_Init+0x258>)
 8011356:	4293      	cmp	r3, r2
 8011358:	d00b      	beq.n	8011372 <LL_GPIO_Init+0x4a>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4a89      	ldr	r2, [pc, #548]	; (8011584 <LL_GPIO_Init+0x25c>)
 801135e:	4293      	cmp	r3, r2
 8011360:	d007      	beq.n	8011372 <LL_GPIO_Init+0x4a>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	4a88      	ldr	r2, [pc, #544]	; (8011588 <LL_GPIO_Init+0x260>)
 8011366:	4293      	cmp	r3, r2
 8011368:	d003      	beq.n	8011372 <LL_GPIO_Init+0x4a>
 801136a:	21ae      	movs	r1, #174	; 0xae
 801136c:	4887      	ldr	r0, [pc, #540]	; (801158c <LL_GPIO_Init+0x264>)
 801136e:	f7f1 f95f 	bl	8002630 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d004      	beq.n	8011384 <LL_GPIO_Init+0x5c>
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011382:	d303      	bcc.n	801138c <LL_GPIO_Init+0x64>
 8011384:	21af      	movs	r1, #175	; 0xaf
 8011386:	4881      	ldr	r0, [pc, #516]	; (801158c <LL_GPIO_Init+0x264>)
 8011388:	f7f1 f952 	bl	8002630 <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d00f      	beq.n	80113b4 <LL_GPIO_Init+0x8c>
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	2b01      	cmp	r3, #1
 801139a:	d00b      	beq.n	80113b4 <LL_GPIO_Init+0x8c>
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	2b02      	cmp	r3, #2
 80113a2:	d007      	beq.n	80113b4 <LL_GPIO_Init+0x8c>
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	685b      	ldr	r3, [r3, #4]
 80113a8:	2b03      	cmp	r3, #3
 80113aa:	d003      	beq.n	80113b4 <LL_GPIO_Init+0x8c>
 80113ac:	21b0      	movs	r1, #176	; 0xb0
 80113ae:	4877      	ldr	r0, [pc, #476]	; (801158c <LL_GPIO_Init+0x264>)
 80113b0:	f7f1 f93e 	bl	8002630 <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	691b      	ldr	r3, [r3, #16]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d00b      	beq.n	80113d4 <LL_GPIO_Init+0xac>
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	691b      	ldr	r3, [r3, #16]
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d007      	beq.n	80113d4 <LL_GPIO_Init+0xac>
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	691b      	ldr	r3, [r3, #16]
 80113c8:	2b02      	cmp	r3, #2
 80113ca:	d003      	beq.n	80113d4 <LL_GPIO_Init+0xac>
 80113cc:	21b1      	movs	r1, #177	; 0xb1
 80113ce:	486f      	ldr	r0, [pc, #444]	; (801158c <LL_GPIO_Init+0x264>)
 80113d0:	f7f1 f92e 	bl	8002630 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	fa93 f3a3 	rbit	r3, r3
 80113e0:	60fb      	str	r3, [r7, #12]
  return result;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d101      	bne.n	80113f0 <LL_GPIO_Init+0xc8>
    return 32U;
 80113ec:	2320      	movs	r3, #32
 80113ee:	e003      	b.n	80113f8 <LL_GPIO_Init+0xd0>
  return __builtin_clz(value);
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	fab3 f383 	clz	r3, r3
 80113f6:	b2db      	uxtb	r3, r3
 80113f8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80113fa:	e0ad      	b.n	8011558 <LL_GPIO_Init+0x230>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	681a      	ldr	r2, [r3, #0]
 8011400:	2101      	movs	r1, #1
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	fa01 f303 	lsl.w	r3, r1, r3
 8011408:	4013      	ands	r3, r2
 801140a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 801140c:	69bb      	ldr	r3, [r7, #24]
 801140e:	2b00      	cmp	r3, #0
 8011410:	f000 809f 	beq.w	8011552 <LL_GPIO_Init+0x22a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	2b01      	cmp	r3, #1
 801141a:	d003      	beq.n	8011424 <LL_GPIO_Init+0xfc>
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	2b02      	cmp	r3, #2
 8011422:	d12e      	bne.n	8011482 <LL_GPIO_Init+0x15a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	689b      	ldr	r3, [r3, #8]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d00f      	beq.n	801144c <LL_GPIO_Init+0x124>
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	689b      	ldr	r3, [r3, #8]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d00b      	beq.n	801144c <LL_GPIO_Init+0x124>
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	689b      	ldr	r3, [r3, #8]
 8011438:	2b02      	cmp	r3, #2
 801143a:	d007      	beq.n	801144c <LL_GPIO_Init+0x124>
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	689b      	ldr	r3, [r3, #8]
 8011440:	2b03      	cmp	r3, #3
 8011442:	d003      	beq.n	801144c <LL_GPIO_Init+0x124>
 8011444:	21c2      	movs	r1, #194	; 0xc2
 8011446:	4851      	ldr	r0, [pc, #324]	; (801158c <LL_GPIO_Init+0x264>)
 8011448:	f7f1 f8f2 	bl	8002630 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	689b      	ldr	r3, [r3, #8]
 8011450:	461a      	mov	r2, r3
 8011452:	69b9      	ldr	r1, [r7, #24]
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7ff fe70 	bl	801113a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d007      	beq.n	8011472 <LL_GPIO_Init+0x14a>
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	2b01      	cmp	r3, #1
 8011468:	d003      	beq.n	8011472 <LL_GPIO_Init+0x14a>
 801146a:	21c8      	movs	r1, #200	; 0xc8
 801146c:	4847      	ldr	r0, [pc, #284]	; (801158c <LL_GPIO_Init+0x264>)
 801146e:	f7f1 f8df 	bl	8002630 <assert_failed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	6819      	ldr	r1, [r3, #0]
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	461a      	mov	r2, r3
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7ff fe44 	bl	801110a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	691b      	ldr	r3, [r3, #16]
 8011486:	461a      	mov	r2, r3
 8011488:	69b9      	ldr	r1, [r7, #24]
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f7ff fe92 	bl	80111b4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	2b02      	cmp	r3, #2
 8011496:	d155      	bne.n	8011544 <LL_GPIO_Init+0x21c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	695b      	ldr	r3, [r3, #20]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d03f      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	695b      	ldr	r3, [r3, #20]
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d03b      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	695b      	ldr	r3, [r3, #20]
 80114ac:	2b02      	cmp	r3, #2
 80114ae:	d037      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	695b      	ldr	r3, [r3, #20]
 80114b4:	2b03      	cmp	r3, #3
 80114b6:	d033      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	695b      	ldr	r3, [r3, #20]
 80114bc:	2b04      	cmp	r3, #4
 80114be:	d02f      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	695b      	ldr	r3, [r3, #20]
 80114c4:	2b05      	cmp	r3, #5
 80114c6:	d02b      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	695b      	ldr	r3, [r3, #20]
 80114cc:	2b06      	cmp	r3, #6
 80114ce:	d027      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	695b      	ldr	r3, [r3, #20]
 80114d4:	2b07      	cmp	r3, #7
 80114d6:	d023      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	695b      	ldr	r3, [r3, #20]
 80114dc:	2b08      	cmp	r3, #8
 80114de:	d01f      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	695b      	ldr	r3, [r3, #20]
 80114e4:	2b09      	cmp	r3, #9
 80114e6:	d01b      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	695b      	ldr	r3, [r3, #20]
 80114ec:	2b0a      	cmp	r3, #10
 80114ee:	d017      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	695b      	ldr	r3, [r3, #20]
 80114f4:	2b0b      	cmp	r3, #11
 80114f6:	d013      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	695b      	ldr	r3, [r3, #20]
 80114fc:	2b0c      	cmp	r3, #12
 80114fe:	d00f      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	695b      	ldr	r3, [r3, #20]
 8011504:	2b0d      	cmp	r3, #13
 8011506:	d00b      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	695b      	ldr	r3, [r3, #20]
 801150c:	2b0e      	cmp	r3, #14
 801150e:	d007      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	695b      	ldr	r3, [r3, #20]
 8011514:	2b0f      	cmp	r3, #15
 8011516:	d003      	beq.n	8011520 <LL_GPIO_Init+0x1f8>
 8011518:	21d4      	movs	r1, #212	; 0xd4
 801151a:	481c      	ldr	r0, [pc, #112]	; (801158c <LL_GPIO_Init+0x264>)
 801151c:	f7f1 f888 	bl	8002630 <assert_failed>

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8011520:	69bb      	ldr	r3, [r7, #24]
 8011522:	2bff      	cmp	r3, #255	; 0xff
 8011524:	d807      	bhi.n	8011536 <LL_GPIO_Init+0x20e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	695b      	ldr	r3, [r3, #20]
 801152a:	461a      	mov	r2, r3
 801152c:	69b9      	ldr	r1, [r7, #24]
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f7ff fe7d 	bl	801122e <LL_GPIO_SetAFPin_0_7>
 8011534:	e006      	b.n	8011544 <LL_GPIO_Init+0x21c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	695b      	ldr	r3, [r3, #20]
 801153a:	461a      	mov	r2, r3
 801153c:	69b9      	ldr	r1, [r7, #24]
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f7ff feb2 	bl	80112a8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	461a      	mov	r2, r3
 801154a:	69b9      	ldr	r1, [r7, #24]
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f7ff fd9f 	bl	8011090 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8011552:	69fb      	ldr	r3, [r7, #28]
 8011554:	3301      	adds	r3, #1
 8011556:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	fa22 f303 	lsr.w	r3, r2, r3
 8011562:	2b00      	cmp	r3, #0
 8011564:	f47f af4a 	bne.w	80113fc <LL_GPIO_Init+0xd4>
  }
  return (SUCCESS);
 8011568:	2300      	movs	r3, #0
}
 801156a:	4618      	mov	r0, r3
 801156c:	3720      	adds	r7, #32
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}
 8011572:	bf00      	nop
 8011574:	48000400 	.word	0x48000400
 8011578:	48000800 	.word	0x48000800
 801157c:	48000c00 	.word	0x48000c00
 8011580:	48001000 	.word	0x48001000
 8011584:	48001400 	.word	0x48001400
 8011588:	48001800 	.word	0x48001800
 801158c:	0801d11c 	.word	0x0801d11c

08011590 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8011590:	b480      	push	{r7}
 8011592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8011594:	4b07      	ldr	r3, [pc, #28]	; (80115b4 <LL_RCC_HSI_IsReady+0x24>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801159c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115a0:	d101      	bne.n	80115a6 <LL_RCC_HSI_IsReady+0x16>
 80115a2:	2301      	movs	r3, #1
 80115a4:	e000      	b.n	80115a8 <LL_RCC_HSI_IsReady+0x18>
 80115a6:	2300      	movs	r3, #0
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	46bd      	mov	sp, r7
 80115ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b0:	4770      	bx	lr
 80115b2:	bf00      	nop
 80115b4:	40021000 	.word	0x40021000

080115b8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80115b8:	b480      	push	{r7}
 80115ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80115bc:	4b07      	ldr	r3, [pc, #28]	; (80115dc <LL_RCC_LSE_IsReady+0x24>)
 80115be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80115c2:	f003 0302 	and.w	r3, r3, #2
 80115c6:	2b02      	cmp	r3, #2
 80115c8:	d101      	bne.n	80115ce <LL_RCC_LSE_IsReady+0x16>
 80115ca:	2301      	movs	r3, #1
 80115cc:	e000      	b.n	80115d0 <LL_RCC_LSE_IsReady+0x18>
 80115ce:	2300      	movs	r3, #0
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr
 80115da:	bf00      	nop
 80115dc:	40021000 	.word	0x40021000

080115e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80115e0:	b480      	push	{r7}
 80115e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80115e4:	4b04      	ldr	r3, [pc, #16]	; (80115f8 <LL_RCC_GetSysClkSource+0x18>)
 80115e6:	689b      	ldr	r3, [r3, #8]
 80115e8:	f003 030c 	and.w	r3, r3, #12
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	46bd      	mov	sp, r7
 80115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	40021000 	.word	0x40021000

080115fc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80115fc:	b480      	push	{r7}
 80115fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8011600:	4b04      	ldr	r3, [pc, #16]	; (8011614 <LL_RCC_GetAHBPrescaler+0x18>)
 8011602:	689b      	ldr	r3, [r3, #8]
 8011604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8011608:	4618      	mov	r0, r3
 801160a:	46bd      	mov	sp, r7
 801160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop
 8011614:	40021000 	.word	0x40021000

08011618 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8011618:	b480      	push	{r7}
 801161a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 801161c:	4b04      	ldr	r3, [pc, #16]	; (8011630 <LL_RCC_GetAPB1Prescaler+0x18>)
 801161e:	689b      	ldr	r3, [r3, #8]
 8011620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8011624:	4618      	mov	r0, r3
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	40021000 	.word	0x40021000

08011634 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8011634:	b480      	push	{r7}
 8011636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8011638:	4b04      	ldr	r3, [pc, #16]	; (801164c <LL_RCC_GetAPB2Prescaler+0x18>)
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8011640:	4618      	mov	r0, r3
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	40021000 	.word	0x40021000

08011650 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8011658:	4b06      	ldr	r3, [pc, #24]	; (8011674 <LL_RCC_GetUSARTClockSource+0x24>)
 801165a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	401a      	ands	r2, r3
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	041b      	lsls	r3, r3, #16
 8011666:	4313      	orrs	r3, r2
}
 8011668:	4618      	mov	r0, r3
 801166a:	370c      	adds	r7, #12
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr
 8011674:	40021000 	.word	0x40021000

08011678 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8011678:	b480      	push	{r7}
 801167a:	b083      	sub	sp, #12
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8011680:	4b06      	ldr	r3, [pc, #24]	; (801169c <LL_RCC_GetUARTClockSource+0x24>)
 8011682:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	401a      	ands	r2, r3
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	041b      	lsls	r3, r3, #16
 801168e:	4313      	orrs	r3, r2
}
 8011690:	4618      	mov	r0, r3
 8011692:	370c      	adds	r7, #12
 8011694:	46bd      	mov	sp, r7
 8011696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169a:	4770      	bx	lr
 801169c:	40021000 	.word	0x40021000

080116a0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80116a0:	b480      	push	{r7}
 80116a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80116a4:	4b04      	ldr	r3, [pc, #16]	; (80116b8 <LL_RCC_PLL_GetMainSource+0x18>)
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	f003 0303 	and.w	r3, r3, #3
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	46bd      	mov	sp, r7
 80116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b4:	4770      	bx	lr
 80116b6:	bf00      	nop
 80116b8:	40021000 	.word	0x40021000

080116bc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80116bc:	b480      	push	{r7}
 80116be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80116c0:	4b04      	ldr	r3, [pc, #16]	; (80116d4 <LL_RCC_PLL_GetN+0x18>)
 80116c2:	68db      	ldr	r3, [r3, #12]
 80116c4:	0a1b      	lsrs	r3, r3, #8
 80116c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr
 80116d4:	40021000 	.word	0x40021000

080116d8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80116d8:	b480      	push	{r7}
 80116da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80116dc:	4b04      	ldr	r3, [pc, #16]	; (80116f0 <LL_RCC_PLL_GetR+0x18>)
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop
 80116f0:	40021000 	.word	0x40021000

080116f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80116f4:	b480      	push	{r7}
 80116f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80116f8:	4b04      	ldr	r3, [pc, #16]	; (801170c <LL_RCC_PLL_GetDivider+0x18>)
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8011700:	4618      	mov	r0, r3
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr
 801170a:	bf00      	nop
 801170c:	40021000 	.word	0x40021000

08011710 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b084      	sub	sp, #16
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8011718:	2300      	movs	r3, #0
 801171a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	2b03      	cmp	r3, #3
 8011720:	d009      	beq.n	8011736 <LL_RCC_GetUSARTClockFreq+0x26>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b0c      	cmp	r3, #12
 8011726:	d006      	beq.n	8011736 <LL_RCC_GetUSARTClockFreq+0x26>
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2b30      	cmp	r3, #48	; 0x30
 801172c:	d003      	beq.n	8011736 <LL_RCC_GetUSARTClockFreq+0x26>
 801172e:	21ee      	movs	r1, #238	; 0xee
 8011730:	485a      	ldr	r0, [pc, #360]	; (801189c <LL_RCC_GetUSARTClockFreq+0x18c>)
 8011732:	f7f0 ff7d 	bl	8002630 <assert_failed>

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2b03      	cmp	r3, #3
 801173a:	d132      	bne.n	80117a2 <LL_RCC_GetUSARTClockFreq+0x92>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f7ff ff87 	bl	8011650 <LL_RCC_GetUSARTClockSource>
 8011742:	4603      	mov	r3, r0
 8011744:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8011748:	d016      	beq.n	8011778 <LL_RCC_GetUSARTClockFreq+0x68>
 801174a:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 801174e:	d81c      	bhi.n	801178a <LL_RCC_GetUSARTClockFreq+0x7a>
 8011750:	4a53      	ldr	r2, [pc, #332]	; (80118a0 <LL_RCC_GetUSARTClockFreq+0x190>)
 8011752:	4293      	cmp	r3, r2
 8011754:	d003      	beq.n	801175e <LL_RCC_GetUSARTClockFreq+0x4e>
 8011756:	4a53      	ldr	r2, [pc, #332]	; (80118a4 <LL_RCC_GetUSARTClockFreq+0x194>)
 8011758:	4293      	cmp	r3, r2
 801175a:	d004      	beq.n	8011766 <LL_RCC_GetUSARTClockFreq+0x56>
 801175c:	e015      	b.n	801178a <LL_RCC_GetUSARTClockFreq+0x7a>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 801175e:	f000 f945 	bl	80119ec <RCC_GetSystemClockFreq>
 8011762:	60f8      	str	r0, [r7, #12]
        break;
 8011764:	e094      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8011766:	f7ff ff13 	bl	8011590 <LL_RCC_HSI_IsReady>
 801176a:	4603      	mov	r3, r0
 801176c:	2b00      	cmp	r3, #0
 801176e:	f000 8082 	beq.w	8011876 <LL_RCC_GetUSARTClockFreq+0x166>
        {
          usart_frequency = HSI_VALUE;
 8011772:	4b4d      	ldr	r3, [pc, #308]	; (80118a8 <LL_RCC_GetUSARTClockFreq+0x198>)
 8011774:	60fb      	str	r3, [r7, #12]
        }
        break;
 8011776:	e07e      	b.n	8011876 <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8011778:	f7ff ff1e 	bl	80115b8 <LL_RCC_LSE_IsReady>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d07b      	beq.n	801187a <LL_RCC_GetUSARTClockFreq+0x16a>
        {
          usart_frequency = LSE_VALUE;
 8011782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011786:	60fb      	str	r3, [r7, #12]
        }
        break;
 8011788:	e077      	b.n	801187a <LL_RCC_GetUSARTClockFreq+0x16a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801178a:	f000 f92f 	bl	80119ec <RCC_GetSystemClockFreq>
 801178e:	4603      	mov	r3, r0
 8011790:	4618      	mov	r0, r3
 8011792:	f000 f951 	bl	8011a38 <RCC_GetHCLKClockFreq>
 8011796:	4603      	mov	r3, r0
 8011798:	4618      	mov	r0, r3
 801179a:	f000 f97b 	bl	8011a94 <RCC_GetPCLK2ClockFreq>
 801179e:	60f8      	str	r0, [r7, #12]
        break;
 80117a0:	e076      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2b0c      	cmp	r3, #12
 80117a6:	d131      	bne.n	801180c <LL_RCC_GetUSARTClockFreq+0xfc>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f7ff ff51 	bl	8011650 <LL_RCC_GetUSARTClockSource>
 80117ae:	4603      	mov	r3, r0
 80117b0:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80117b4:	d015      	beq.n	80117e2 <LL_RCC_GetUSARTClockFreq+0xd2>
 80117b6:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80117ba:	d81b      	bhi.n	80117f4 <LL_RCC_GetUSARTClockFreq+0xe4>
 80117bc:	4a3b      	ldr	r2, [pc, #236]	; (80118ac <LL_RCC_GetUSARTClockFreq+0x19c>)
 80117be:	4293      	cmp	r3, r2
 80117c0:	d003      	beq.n	80117ca <LL_RCC_GetUSARTClockFreq+0xba>
 80117c2:	4a3b      	ldr	r2, [pc, #236]	; (80118b0 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 80117c4:	4293      	cmp	r3, r2
 80117c6:	d004      	beq.n	80117d2 <LL_RCC_GetUSARTClockFreq+0xc2>
 80117c8:	e014      	b.n	80117f4 <LL_RCC_GetUSARTClockFreq+0xe4>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80117ca:	f000 f90f 	bl	80119ec <RCC_GetSystemClockFreq>
 80117ce:	60f8      	str	r0, [r7, #12]
        break;
 80117d0:	e05e      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80117d2:	f7ff fedd 	bl	8011590 <LL_RCC_HSI_IsReady>
 80117d6:	4603      	mov	r3, r0
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d050      	beq.n	801187e <LL_RCC_GetUSARTClockFreq+0x16e>
        {
          usart_frequency = HSI_VALUE;
 80117dc:	4b32      	ldr	r3, [pc, #200]	; (80118a8 <LL_RCC_GetUSARTClockFreq+0x198>)
 80117de:	60fb      	str	r3, [r7, #12]
        }
        break;
 80117e0:	e04d      	b.n	801187e <LL_RCC_GetUSARTClockFreq+0x16e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80117e2:	f7ff fee9 	bl	80115b8 <LL_RCC_LSE_IsReady>
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d04a      	beq.n	8011882 <LL_RCC_GetUSARTClockFreq+0x172>
        {
          usart_frequency = LSE_VALUE;
 80117ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80117f0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80117f2:	e046      	b.n	8011882 <LL_RCC_GetUSARTClockFreq+0x172>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80117f4:	f000 f8fa 	bl	80119ec <RCC_GetSystemClockFreq>
 80117f8:	4603      	mov	r3, r0
 80117fa:	4618      	mov	r0, r3
 80117fc:	f000 f91c 	bl	8011a38 <RCC_GetHCLKClockFreq>
 8011800:	4603      	mov	r3, r0
 8011802:	4618      	mov	r0, r3
 8011804:	f000 f930 	bl	8011a68 <RCC_GetPCLK1ClockFreq>
 8011808:	60f8      	str	r0, [r7, #12]
        break;
 801180a:	e041      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2b30      	cmp	r3, #48	; 0x30
 8011810:	d139      	bne.n	8011886 <LL_RCC_GetUSARTClockFreq+0x176>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f7ff ff1c 	bl	8011650 <LL_RCC_GetUSARTClockSource>
 8011818:	4603      	mov	r3, r0
 801181a:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 801181e:	d015      	beq.n	801184c <LL_RCC_GetUSARTClockFreq+0x13c>
 8011820:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8011824:	d81b      	bhi.n	801185e <LL_RCC_GetUSARTClockFreq+0x14e>
 8011826:	4a23      	ldr	r2, [pc, #140]	; (80118b4 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d003      	beq.n	8011834 <LL_RCC_GetUSARTClockFreq+0x124>
 801182c:	4a22      	ldr	r2, [pc, #136]	; (80118b8 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d004      	beq.n	801183c <LL_RCC_GetUSARTClockFreq+0x12c>
 8011832:	e014      	b.n	801185e <LL_RCC_GetUSARTClockFreq+0x14e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8011834:	f000 f8da 	bl	80119ec <RCC_GetSystemClockFreq>
 8011838:	60f8      	str	r0, [r7, #12]
          break;
 801183a:	e029      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 801183c:	f7ff fea8 	bl	8011590 <LL_RCC_HSI_IsReady>
 8011840:	4603      	mov	r3, r0
 8011842:	2b00      	cmp	r3, #0
 8011844:	d021      	beq.n	801188a <LL_RCC_GetUSARTClockFreq+0x17a>
          {
            usart_frequency = HSI_VALUE;
 8011846:	4b18      	ldr	r3, [pc, #96]	; (80118a8 <LL_RCC_GetUSARTClockFreq+0x198>)
 8011848:	60fb      	str	r3, [r7, #12]
          }
          break;
 801184a:	e01e      	b.n	801188a <LL_RCC_GetUSARTClockFreq+0x17a>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 801184c:	f7ff feb4 	bl	80115b8 <LL_RCC_LSE_IsReady>
 8011850:	4603      	mov	r3, r0
 8011852:	2b00      	cmp	r3, #0
 8011854:	d01b      	beq.n	801188e <LL_RCC_GetUSARTClockFreq+0x17e>
          {
            usart_frequency = LSE_VALUE;
 8011856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801185a:	60fb      	str	r3, [r7, #12]
          }
          break;
 801185c:	e017      	b.n	801188e <LL_RCC_GetUSARTClockFreq+0x17e>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801185e:	f000 f8c5 	bl	80119ec <RCC_GetSystemClockFreq>
 8011862:	4603      	mov	r3, r0
 8011864:	4618      	mov	r0, r3
 8011866:	f000 f8e7 	bl	8011a38 <RCC_GetHCLKClockFreq>
 801186a:	4603      	mov	r3, r0
 801186c:	4618      	mov	r0, r3
 801186e:	f000 f8fb 	bl	8011a68 <RCC_GetPCLK1ClockFreq>
 8011872:	60f8      	str	r0, [r7, #12]
          break;
 8011874:	e00c      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8011876:	bf00      	nop
 8011878:	e00a      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 801187a:	bf00      	nop
 801187c:	e008      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 801187e:	bf00      	nop
 8011880:	e006      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8011882:	bf00      	nop
 8011884:	e004      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>
      }
    }
 8011886:	bf00      	nop
 8011888:	e002      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>
          break;
 801188a:	bf00      	nop
 801188c:	e000      	b.n	8011890 <LL_RCC_GetUSARTClockFreq+0x180>
          break;
 801188e:	bf00      	nop
  }
  return usart_frequency;
 8011890:	68fb      	ldr	r3, [r7, #12]
}
 8011892:	4618      	mov	r0, r3
 8011894:	3710      	adds	r7, #16
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	0801d154 	.word	0x0801d154
 80118a0:	00030001 	.word	0x00030001
 80118a4:	00030002 	.word	0x00030002
 80118a8:	00f42400 	.word	0x00f42400
 80118ac:	000c0004 	.word	0x000c0004
 80118b0:	000c0008 	.word	0x000c0008
 80118b4:	00300010 	.word	0x00300010
 80118b8:	00300020 	.word	0x00300020

080118bc <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80118c4:	2300      	movs	r3, #0
 80118c6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2bc0      	cmp	r3, #192	; 0xc0
 80118cc:	d008      	beq.n	80118e0 <LL_RCC_GetUARTClockFreq+0x24>
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80118d4:	d004      	beq.n	80118e0 <LL_RCC_GetUARTClockFreq+0x24>
 80118d6:	f240 115d 	movw	r1, #349	; 0x15d
 80118da:	483e      	ldr	r0, [pc, #248]	; (80119d4 <LL_RCC_GetUARTClockFreq+0x118>)
 80118dc:	f7f0 fea8 	bl	8002630 <assert_failed>

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2bc0      	cmp	r3, #192	; 0xc0
 80118e4:	d131      	bne.n	801194a <LL_RCC_GetUARTClockFreq+0x8e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f7ff fec6 	bl	8011678 <LL_RCC_GetUARTClockSource>
 80118ec:	4603      	mov	r3, r0
 80118ee:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80118f2:	d015      	beq.n	8011920 <LL_RCC_GetUARTClockFreq+0x64>
 80118f4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80118f8:	d81b      	bhi.n	8011932 <LL_RCC_GetUARTClockFreq+0x76>
 80118fa:	4a37      	ldr	r2, [pc, #220]	; (80119d8 <LL_RCC_GetUARTClockFreq+0x11c>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	d003      	beq.n	8011908 <LL_RCC_GetUARTClockFreq+0x4c>
 8011900:	4a36      	ldr	r2, [pc, #216]	; (80119dc <LL_RCC_GetUARTClockFreq+0x120>)
 8011902:	4293      	cmp	r3, r2
 8011904:	d004      	beq.n	8011910 <LL_RCC_GetUARTClockFreq+0x54>
 8011906:	e014      	b.n	8011932 <LL_RCC_GetUARTClockFreq+0x76>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8011908:	f000 f870 	bl	80119ec <RCC_GetSystemClockFreq>
 801190c:	60f8      	str	r0, [r7, #12]
        break;
 801190e:	e021      	b.n	8011954 <LL_RCC_GetUARTClockFreq+0x98>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8011910:	f7ff fe3e 	bl	8011590 <LL_RCC_HSI_IsReady>
 8011914:	4603      	mov	r3, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d019      	beq.n	801194e <LL_RCC_GetUARTClockFreq+0x92>
        {
          uart_frequency = HSI_VALUE;
 801191a:	4b31      	ldr	r3, [pc, #196]	; (80119e0 <LL_RCC_GetUARTClockFreq+0x124>)
 801191c:	60fb      	str	r3, [r7, #12]
        }
        break;
 801191e:	e016      	b.n	801194e <LL_RCC_GetUARTClockFreq+0x92>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8011920:	f7ff fe4a 	bl	80115b8 <LL_RCC_LSE_IsReady>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d013      	beq.n	8011952 <LL_RCC_GetUARTClockFreq+0x96>
        {
          uart_frequency = LSE_VALUE;
 801192a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801192e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8011930:	e00f      	b.n	8011952 <LL_RCC_GetUARTClockFreq+0x96>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8011932:	f000 f85b 	bl	80119ec <RCC_GetSystemClockFreq>
 8011936:	4603      	mov	r3, r0
 8011938:	4618      	mov	r0, r3
 801193a:	f000 f87d 	bl	8011a38 <RCC_GetHCLKClockFreq>
 801193e:	4603      	mov	r3, r0
 8011940:	4618      	mov	r0, r3
 8011942:	f000 f891 	bl	8011a68 <RCC_GetPCLK1ClockFreq>
 8011946:	60f8      	str	r0, [r7, #12]
        break;
 8011948:	e004      	b.n	8011954 <LL_RCC_GetUARTClockFreq+0x98>
    }
  }
 801194a:	bf00      	nop
 801194c:	e002      	b.n	8011954 <LL_RCC_GetUARTClockFreq+0x98>
        break;
 801194e:	bf00      	nop
 8011950:	e000      	b.n	8011954 <LL_RCC_GetUARTClockFreq+0x98>
        break;
 8011952:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801195a:	d131      	bne.n	80119c0 <LL_RCC_GetUARTClockFreq+0x104>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f7ff fe8b 	bl	8011678 <LL_RCC_GetUARTClockSource>
 8011962:	4603      	mov	r3, r0
 8011964:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8011968:	d015      	beq.n	8011996 <LL_RCC_GetUARTClockFreq+0xda>
 801196a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 801196e:	d81b      	bhi.n	80119a8 <LL_RCC_GetUARTClockFreq+0xec>
 8011970:	4a1c      	ldr	r2, [pc, #112]	; (80119e4 <LL_RCC_GetUARTClockFreq+0x128>)
 8011972:	4293      	cmp	r3, r2
 8011974:	d003      	beq.n	801197e <LL_RCC_GetUARTClockFreq+0xc2>
 8011976:	4a1c      	ldr	r2, [pc, #112]	; (80119e8 <LL_RCC_GetUARTClockFreq+0x12c>)
 8011978:	4293      	cmp	r3, r2
 801197a:	d004      	beq.n	8011986 <LL_RCC_GetUARTClockFreq+0xca>
 801197c:	e014      	b.n	80119a8 <LL_RCC_GetUARTClockFreq+0xec>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 801197e:	f000 f835 	bl	80119ec <RCC_GetSystemClockFreq>
 8011982:	60f8      	str	r0, [r7, #12]
        break;
 8011984:	e021      	b.n	80119ca <LL_RCC_GetUARTClockFreq+0x10e>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8011986:	f7ff fe03 	bl	8011590 <LL_RCC_HSI_IsReady>
 801198a:	4603      	mov	r3, r0
 801198c:	2b00      	cmp	r3, #0
 801198e:	d019      	beq.n	80119c4 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = HSI_VALUE;
 8011990:	4b13      	ldr	r3, [pc, #76]	; (80119e0 <LL_RCC_GetUARTClockFreq+0x124>)
 8011992:	60fb      	str	r3, [r7, #12]
        }
        break;
 8011994:	e016      	b.n	80119c4 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8011996:	f7ff fe0f 	bl	80115b8 <LL_RCC_LSE_IsReady>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	d013      	beq.n	80119c8 <LL_RCC_GetUARTClockFreq+0x10c>
        {
          uart_frequency = LSE_VALUE;
 80119a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119a4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80119a6:	e00f      	b.n	80119c8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80119a8:	f000 f820 	bl	80119ec <RCC_GetSystemClockFreq>
 80119ac:	4603      	mov	r3, r0
 80119ae:	4618      	mov	r0, r3
 80119b0:	f000 f842 	bl	8011a38 <RCC_GetHCLKClockFreq>
 80119b4:	4603      	mov	r3, r0
 80119b6:	4618      	mov	r0, r3
 80119b8:	f000 f856 	bl	8011a68 <RCC_GetPCLK1ClockFreq>
 80119bc:	60f8      	str	r0, [r7, #12]
        break;
 80119be:	e004      	b.n	80119ca <LL_RCC_GetUARTClockFreq+0x10e>
    }
  }
 80119c0:	bf00      	nop
 80119c2:	e002      	b.n	80119ca <LL_RCC_GetUARTClockFreq+0x10e>
        break;
 80119c4:	bf00      	nop
 80119c6:	e000      	b.n	80119ca <LL_RCC_GetUARTClockFreq+0x10e>
        break;
 80119c8:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80119ca:	68fb      	ldr	r3, [r7, #12]
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	0801d154 	.word	0x0801d154
 80119d8:	00c00040 	.word	0x00c00040
 80119dc:	00c00080 	.word	0x00c00080
 80119e0:	00f42400 	.word	0x00f42400
 80119e4:	03000100 	.word	0x03000100
 80119e8:	03000200 	.word	0x03000200

080119ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80119f2:	f7ff fdf5 	bl	80115e0 <LL_RCC_GetSysClkSource>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2b0c      	cmp	r3, #12
 80119fa:	d00c      	beq.n	8011a16 <RCC_GetSystemClockFreq+0x2a>
 80119fc:	2b0c      	cmp	r3, #12
 80119fe:	d80e      	bhi.n	8011a1e <RCC_GetSystemClockFreq+0x32>
 8011a00:	2b04      	cmp	r3, #4
 8011a02:	d002      	beq.n	8011a0a <RCC_GetSystemClockFreq+0x1e>
 8011a04:	2b08      	cmp	r3, #8
 8011a06:	d003      	beq.n	8011a10 <RCC_GetSystemClockFreq+0x24>
 8011a08:	e009      	b.n	8011a1e <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8011a0a:	4b09      	ldr	r3, [pc, #36]	; (8011a30 <RCC_GetSystemClockFreq+0x44>)
 8011a0c:	607b      	str	r3, [r7, #4]
      break;
 8011a0e:	e009      	b.n	8011a24 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8011a10:	4b08      	ldr	r3, [pc, #32]	; (8011a34 <RCC_GetSystemClockFreq+0x48>)
 8011a12:	607b      	str	r3, [r7, #4]
      break;
 8011a14:	e006      	b.n	8011a24 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8011a16:	f000 f853 	bl	8011ac0 <RCC_PLL_GetFreqDomain_SYS>
 8011a1a:	6078      	str	r0, [r7, #4]
      break;
 8011a1c:	e002      	b.n	8011a24 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 8011a1e:	4b04      	ldr	r3, [pc, #16]	; (8011a30 <RCC_GetSystemClockFreq+0x44>)
 8011a20:	607b      	str	r3, [r7, #4]
      break;
 8011a22:	bf00      	nop
  }

  return frequency;
 8011a24:	687b      	ldr	r3, [r7, #4]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3708      	adds	r7, #8
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	00f42400 	.word	0x00f42400
 8011a34:	007a1200 	.word	0x007a1200

08011a38 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b082      	sub	sp, #8
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8011a40:	f7ff fddc 	bl	80115fc <LL_RCC_GetAHBPrescaler>
 8011a44:	4603      	mov	r3, r0
 8011a46:	091b      	lsrs	r3, r3, #4
 8011a48:	f003 030f 	and.w	r3, r3, #15
 8011a4c:	4a05      	ldr	r2, [pc, #20]	; (8011a64 <RCC_GetHCLKClockFreq+0x2c>)
 8011a4e:	5cd3      	ldrb	r3, [r2, r3]
 8011a50:	f003 031f 	and.w	r3, r3, #31
 8011a54:	687a      	ldr	r2, [r7, #4]
 8011a56:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3708      	adds	r7, #8
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}
 8011a62:	bf00      	nop
 8011a64:	0801d270 	.word	0x0801d270

08011a68 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8011a70:	f7ff fdd2 	bl	8011618 <LL_RCC_GetAPB1Prescaler>
 8011a74:	4603      	mov	r3, r0
 8011a76:	0a1b      	lsrs	r3, r3, #8
 8011a78:	4a05      	ldr	r2, [pc, #20]	; (8011a90 <RCC_GetPCLK1ClockFreq+0x28>)
 8011a7a:	5cd3      	ldrb	r3, [r2, r3]
 8011a7c:	f003 031f 	and.w	r3, r3, #31
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011a86:	4618      	mov	r0, r3
 8011a88:	3708      	adds	r7, #8
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
 8011a8e:	bf00      	nop
 8011a90:	0801d280 	.word	0x0801d280

08011a94 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8011a9c:	f7ff fdca 	bl	8011634 <LL_RCC_GetAPB2Prescaler>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	0adb      	lsrs	r3, r3, #11
 8011aa4:	4a05      	ldr	r2, [pc, #20]	; (8011abc <RCC_GetPCLK2ClockFreq+0x28>)
 8011aa6:	5cd3      	ldrb	r3, [r2, r3]
 8011aa8:	f003 031f 	and.w	r3, r3, #31
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3708      	adds	r7, #8
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	0801d280 	.word	0x0801d280

08011ac0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8011ac0:	b590      	push	{r4, r7, lr}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8011ac6:	f7ff fdeb 	bl	80116a0 <LL_RCC_PLL_GetMainSource>
 8011aca:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	2b02      	cmp	r3, #2
 8011ad0:	d003      	beq.n	8011ada <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	2b03      	cmp	r3, #3
 8011ad6:	d003      	beq.n	8011ae0 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8011ad8:	e005      	b.n	8011ae6 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8011ada:	4b11      	ldr	r3, [pc, #68]	; (8011b20 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8011adc:	607b      	str	r3, [r7, #4]
      break;
 8011ade:	e005      	b.n	8011aec <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8011ae0:	4b10      	ldr	r3, [pc, #64]	; (8011b24 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8011ae2:	607b      	str	r3, [r7, #4]
      break;
 8011ae4:	e002      	b.n	8011aec <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8011ae6:	4b0e      	ldr	r3, [pc, #56]	; (8011b20 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8011ae8:	607b      	str	r3, [r7, #4]
      break;
 8011aea:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8011aec:	f7ff fde6 	bl	80116bc <LL_RCC_PLL_GetN>
 8011af0:	4602      	mov	r2, r0
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	fb03 f402 	mul.w	r4, r3, r2
 8011af8:	f7ff fdfc 	bl	80116f4 <LL_RCC_PLL_GetDivider>
 8011afc:	4603      	mov	r3, r0
 8011afe:	091b      	lsrs	r3, r3, #4
 8011b00:	3301      	adds	r3, #1
 8011b02:	fbb4 f4f3 	udiv	r4, r4, r3
 8011b06:	f7ff fde7 	bl	80116d8 <LL_RCC_PLL_GetR>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	0e5b      	lsrs	r3, r3, #25
 8011b0e:	3301      	adds	r3, #1
 8011b10:	005b      	lsls	r3, r3, #1
 8011b12:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	370c      	adds	r7, #12
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd90      	pop	{r4, r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	00f42400 	.word	0x00f42400
 8011b24:	007a1200 	.word	0x007a1200

08011b28 <LL_TIM_SetPrescaler>:
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	683a      	ldr	r2, [r7, #0]
 8011b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8011b38:	bf00      	nop
 8011b3a:	370c      	adds	r7, #12
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr

08011b44 <LL_TIM_SetAutoReload>:
{
 8011b44:	b480      	push	{r7}
 8011b46:	b083      	sub	sp, #12
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	683a      	ldr	r2, [r7, #0]
 8011b52:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011b54:	bf00      	nop
 8011b56:	370c      	adds	r7, #12
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5e:	4770      	bx	lr

08011b60 <LL_TIM_SetRepetitionCounter>:
{
 8011b60:	b480      	push	{r7}
 8011b62:	b083      	sub	sp, #12
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	683a      	ldr	r2, [r7, #0]
 8011b6e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011b70:	bf00      	nop
 8011b72:	370c      	adds	r7, #12
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr

08011b7c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8011b7c:	b480      	push	{r7}
 8011b7e:	b083      	sub	sp, #12
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	695b      	ldr	r3, [r3, #20]
 8011b88:	f043 0201 	orr.w	r2, r3, #1
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	615a      	str	r2, [r3, #20]
}
 8011b90:	bf00      	nop
 8011b92:	370c      	adds	r7, #12
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr

08011b9c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	4a74      	ldr	r2, [pc, #464]	; (8011d7c <LL_TIM_Init+0x1e0>)
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d030      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011bb4:	d02c      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	4a71      	ldr	r2, [pc, #452]	; (8011d80 <LL_TIM_Init+0x1e4>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d028      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	4a70      	ldr	r2, [pc, #448]	; (8011d84 <LL_TIM_Init+0x1e8>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d024      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4a6f      	ldr	r2, [pc, #444]	; (8011d88 <LL_TIM_Init+0x1ec>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d020      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4a6e      	ldr	r2, [pc, #440]	; (8011d8c <LL_TIM_Init+0x1f0>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d01c      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	4a6d      	ldr	r2, [pc, #436]	; (8011d90 <LL_TIM_Init+0x1f4>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d018      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	4a6c      	ldr	r2, [pc, #432]	; (8011d94 <LL_TIM_Init+0x1f8>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d014      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4a6b      	ldr	r2, [pc, #428]	; (8011d98 <LL_TIM_Init+0x1fc>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d010      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4a6a      	ldr	r2, [pc, #424]	; (8011d9c <LL_TIM_Init+0x200>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d00c      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4a69      	ldr	r2, [pc, #420]	; (8011da0 <LL_TIM_Init+0x204>)
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d008      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4a68      	ldr	r2, [pc, #416]	; (8011da4 <LL_TIM_Init+0x208>)
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d004      	beq.n	8011c10 <LL_TIM_Init+0x74>
 8011c06:	f240 1153 	movw	r1, #339	; 0x153
 8011c0a:	4867      	ldr	r0, [pc, #412]	; (8011da8 <LL_TIM_Init+0x20c>)
 8011c0c:	f7f0 fd10 	bl	8002630 <assert_failed>
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	685b      	ldr	r3, [r3, #4]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d014      	beq.n	8011c42 <LL_TIM_Init+0xa6>
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	685b      	ldr	r3, [r3, #4]
 8011c1c:	2b10      	cmp	r3, #16
 8011c1e:	d010      	beq.n	8011c42 <LL_TIM_Init+0xa6>
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	2b40      	cmp	r3, #64	; 0x40
 8011c26:	d00c      	beq.n	8011c42 <LL_TIM_Init+0xa6>
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	2b20      	cmp	r3, #32
 8011c2e:	d008      	beq.n	8011c42 <LL_TIM_Init+0xa6>
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	685b      	ldr	r3, [r3, #4]
 8011c34:	2b60      	cmp	r3, #96	; 0x60
 8011c36:	d004      	beq.n	8011c42 <LL_TIM_Init+0xa6>
 8011c38:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8011c3c:	485a      	ldr	r0, [pc, #360]	; (8011da8 <LL_TIM_Init+0x20c>)
 8011c3e:	f7f0 fcf7 	bl	8002630 <assert_failed>
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	68db      	ldr	r3, [r3, #12]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d00e      	beq.n	8011c68 <LL_TIM_Init+0xcc>
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	68db      	ldr	r3, [r3, #12]
 8011c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c52:	d009      	beq.n	8011c68 <LL_TIM_Init+0xcc>
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c5c:	d004      	beq.n	8011c68 <LL_TIM_Init+0xcc>
 8011c5e:	f240 1155 	movw	r1, #341	; 0x155
 8011c62:	4851      	ldr	r0, [pc, #324]	; (8011da8 <LL_TIM_Init+0x20c>)
 8011c64:	f7f0 fce4 	bl	8002630 <assert_failed>

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	4a42      	ldr	r2, [pc, #264]	; (8011d7c <LL_TIM_Init+0x1e0>)
 8011c72:	4293      	cmp	r3, r2
 8011c74:	d017      	beq.n	8011ca6 <LL_TIM_Init+0x10a>
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c7c:	d013      	beq.n	8011ca6 <LL_TIM_Init+0x10a>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	4a3f      	ldr	r2, [pc, #252]	; (8011d80 <LL_TIM_Init+0x1e4>)
 8011c82:	4293      	cmp	r3, r2
 8011c84:	d00f      	beq.n	8011ca6 <LL_TIM_Init+0x10a>
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	4a3e      	ldr	r2, [pc, #248]	; (8011d84 <LL_TIM_Init+0x1e8>)
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d00b      	beq.n	8011ca6 <LL_TIM_Init+0x10a>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	4a3d      	ldr	r2, [pc, #244]	; (8011d88 <LL_TIM_Init+0x1ec>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d007      	beq.n	8011ca6 <LL_TIM_Init+0x10a>
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	4a3e      	ldr	r2, [pc, #248]	; (8011d94 <LL_TIM_Init+0x1f8>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d003      	beq.n	8011ca6 <LL_TIM_Init+0x10a>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	4a40      	ldr	r2, [pc, #256]	; (8011da4 <LL_TIM_Init+0x208>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d106      	bne.n	8011cb4 <LL_TIM_Init+0x118>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	4313      	orrs	r3, r2
 8011cb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	4a31      	ldr	r2, [pc, #196]	; (8011d7c <LL_TIM_Init+0x1e0>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d023      	beq.n	8011d04 <LL_TIM_Init+0x168>
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011cc2:	d01f      	beq.n	8011d04 <LL_TIM_Init+0x168>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	4a2e      	ldr	r2, [pc, #184]	; (8011d80 <LL_TIM_Init+0x1e4>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d01b      	beq.n	8011d04 <LL_TIM_Init+0x168>
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	4a2d      	ldr	r2, [pc, #180]	; (8011d84 <LL_TIM_Init+0x1e8>)
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	d017      	beq.n	8011d04 <LL_TIM_Init+0x168>
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	4a2c      	ldr	r2, [pc, #176]	; (8011d88 <LL_TIM_Init+0x1ec>)
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	d013      	beq.n	8011d04 <LL_TIM_Init+0x168>
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	4a2d      	ldr	r2, [pc, #180]	; (8011d94 <LL_TIM_Init+0x1f8>)
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	d00f      	beq.n	8011d04 <LL_TIM_Init+0x168>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	4a2c      	ldr	r2, [pc, #176]	; (8011d98 <LL_TIM_Init+0x1fc>)
 8011ce8:	4293      	cmp	r3, r2
 8011cea:	d00b      	beq.n	8011d04 <LL_TIM_Init+0x168>
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	4a2b      	ldr	r2, [pc, #172]	; (8011d9c <LL_TIM_Init+0x200>)
 8011cf0:	4293      	cmp	r3, r2
 8011cf2:	d007      	beq.n	8011d04 <LL_TIM_Init+0x168>
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	4a2a      	ldr	r2, [pc, #168]	; (8011da0 <LL_TIM_Init+0x204>)
 8011cf8:	4293      	cmp	r3, r2
 8011cfa:	d003      	beq.n	8011d04 <LL_TIM_Init+0x168>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	4a29      	ldr	r2, [pc, #164]	; (8011da4 <LL_TIM_Init+0x208>)
 8011d00:	4293      	cmp	r3, r2
 8011d02:	d106      	bne.n	8011d12 <LL_TIM_Init+0x176>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011d0a:	683b      	ldr	r3, [r7, #0]
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	4313      	orrs	r3, r2
 8011d10:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	68fa      	ldr	r2, [r7, #12]
 8011d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	689b      	ldr	r3, [r3, #8]
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f7ff ff10 	bl	8011b44 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	881b      	ldrh	r3, [r3, #0]
 8011d28:	4619      	mov	r1, r3
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f7ff fefc 	bl	8011b28 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	4a12      	ldr	r2, [pc, #72]	; (8011d7c <LL_TIM_Init+0x1e0>)
 8011d34:	4293      	cmp	r3, r2
 8011d36:	d013      	beq.n	8011d60 <LL_TIM_Init+0x1c4>
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	4a16      	ldr	r2, [pc, #88]	; (8011d94 <LL_TIM_Init+0x1f8>)
 8011d3c:	4293      	cmp	r3, r2
 8011d3e:	d00f      	beq.n	8011d60 <LL_TIM_Init+0x1c4>
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	4a15      	ldr	r2, [pc, #84]	; (8011d98 <LL_TIM_Init+0x1fc>)
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d00b      	beq.n	8011d60 <LL_TIM_Init+0x1c4>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	4a14      	ldr	r2, [pc, #80]	; (8011d9c <LL_TIM_Init+0x200>)
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	d007      	beq.n	8011d60 <LL_TIM_Init+0x1c4>
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	4a13      	ldr	r2, [pc, #76]	; (8011da0 <LL_TIM_Init+0x204>)
 8011d54:	4293      	cmp	r3, r2
 8011d56:	d003      	beq.n	8011d60 <LL_TIM_Init+0x1c4>
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	4a12      	ldr	r2, [pc, #72]	; (8011da4 <LL_TIM_Init+0x208>)
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d105      	bne.n	8011d6c <LL_TIM_Init+0x1d0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	691b      	ldr	r3, [r3, #16]
 8011d64:	4619      	mov	r1, r3
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f7ff fefa 	bl	8011b60 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f7ff ff05 	bl	8011b7c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8011d72:	2300      	movs	r3, #0
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3710      	adds	r7, #16
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}
 8011d7c:	40012c00 	.word	0x40012c00
 8011d80:	40000400 	.word	0x40000400
 8011d84:	40000800 	.word	0x40000800
 8011d88:	40000c00 	.word	0x40000c00
 8011d8c:	40001000 	.word	0x40001000
 8011d90:	40001400 	.word	0x40001400
 8011d94:	40013400 	.word	0x40013400
 8011d98:	40014000 	.word	0x40014000
 8011d9c:	40014400 	.word	0x40014400
 8011da0:	40014800 	.word	0x40014800
 8011da4:	40015000 	.word	0x40015000
 8011da8:	0801d18c 	.word	0x0801d18c

08011dac <LL_USART_IsEnabled>:
{
 8011dac:	b480      	push	{r7}
 8011dae:	b083      	sub	sp, #12
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	f003 0301 	and.w	r3, r3, #1
 8011dbc:	2b01      	cmp	r3, #1
 8011dbe:	d101      	bne.n	8011dc4 <LL_USART_IsEnabled+0x18>
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	e000      	b.n	8011dc6 <LL_USART_IsEnabled+0x1a>
 8011dc4:	2300      	movs	r3, #0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	370c      	adds	r7, #12
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr

08011dd2 <LL_USART_SetPrescaler>:
{
 8011dd2:	b480      	push	{r7}
 8011dd4:	b083      	sub	sp, #12
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
 8011dda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011de0:	f023 030f 	bic.w	r3, r3, #15
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	b292      	uxth	r2, r2
 8011de8:	431a      	orrs	r2, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011dee:	bf00      	nop
 8011df0:	370c      	adds	r7, #12
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr

08011dfa <LL_USART_SetStopBitsLength>:
{
 8011dfa:	b480      	push	{r7}
 8011dfc:	b083      	sub	sp, #12
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
 8011e02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	431a      	orrs	r2, r3
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	605a      	str	r2, [r3, #4]
}
 8011e14:	bf00      	nop
 8011e16:	370c      	adds	r7, #12
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1e:	4770      	bx	lr

08011e20 <LL_USART_SetHWFlowCtrl>:
{
 8011e20:	b480      	push	{r7}
 8011e22:	b083      	sub	sp, #12
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	689b      	ldr	r3, [r3, #8]
 8011e2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	431a      	orrs	r2, r3
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	609a      	str	r2, [r3, #8]
}
 8011e3a:	bf00      	nop
 8011e3c:	370c      	adds	r7, #12
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e44:	4770      	bx	lr
	...

08011e48 <LL_USART_SetBaudRate>:
{
 8011e48:	b480      	push	{r7}
 8011e4a:	b087      	sub	sp, #28
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	60f8      	str	r0, [r7, #12]
 8011e50:	60b9      	str	r1, [r7, #8]
 8011e52:	607a      	str	r2, [r7, #4]
 8011e54:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2b0b      	cmp	r3, #11
 8011e5a:	d83c      	bhi.n	8011ed6 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8011e5c:	6a3b      	ldr	r3, [r7, #32]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d039      	beq.n	8011ed6 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e68:	d122      	bne.n	8011eb0 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	b2db      	uxtb	r3, r3
 8011e6e:	461a      	mov	r2, r3
 8011e70:	4b1c      	ldr	r3, [pc, #112]	; (8011ee4 <LL_USART_SetBaudRate+0x9c>)
 8011e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e7c:	005a      	lsls	r2, r3, #1
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
 8011e80:	085b      	lsrs	r3, r3, #1
 8011e82:	441a      	add	r2, r3
 8011e84:	6a3b      	ldr	r3, [r7, #32]
 8011e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8011e8e:	697a      	ldr	r2, [r7, #20]
 8011e90:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8011e94:	4013      	ands	r3, r2
 8011e96:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	085b      	lsrs	r3, r3, #1
 8011e9c:	b29b      	uxth	r3, r3
 8011e9e:	f003 0307 	and.w	r3, r3, #7
 8011ea2:	693a      	ldr	r2, [r7, #16]
 8011ea4:	4313      	orrs	r3, r2
 8011ea6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	693a      	ldr	r2, [r7, #16]
 8011eac:	60da      	str	r2, [r3, #12]
}
 8011eae:	e012      	b.n	8011ed6 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	4b0b      	ldr	r3, [pc, #44]	; (8011ee4 <LL_USART_SetBaudRate+0x9c>)
 8011eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ebc:	68ba      	ldr	r2, [r7, #8]
 8011ebe:	fbb2 f2f3 	udiv	r2, r2, r3
 8011ec2:	6a3b      	ldr	r3, [r7, #32]
 8011ec4:	085b      	lsrs	r3, r3, #1
 8011ec6:	441a      	add	r2, r3
 8011ec8:	6a3b      	ldr	r3, [r7, #32]
 8011eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ece:	b29b      	uxth	r3, r3
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	60da      	str	r2, [r3, #12]
}
 8011ed6:	bf00      	nop
 8011ed8:	371c      	adds	r7, #28
 8011eda:	46bd      	mov	sp, r7
 8011edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee0:	4770      	bx	lr
 8011ee2:	bf00      	nop
 8011ee4:	0801d2b8 	.word	0x0801d2b8

08011ee8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b086      	sub	sp, #24
 8011eec:	af02      	add	r7, sp, #8
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	4a87      	ldr	r2, [pc, #540]	; (801211c <LL_USART_Init+0x234>)
 8011efe:	4293      	cmp	r3, r2
 8011f00:	d013      	beq.n	8011f2a <LL_USART_Init+0x42>
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	4a86      	ldr	r2, [pc, #536]	; (8012120 <LL_USART_Init+0x238>)
 8011f06:	4293      	cmp	r3, r2
 8011f08:	d00f      	beq.n	8011f2a <LL_USART_Init+0x42>
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	4a85      	ldr	r2, [pc, #532]	; (8012124 <LL_USART_Init+0x23c>)
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	d00b      	beq.n	8011f2a <LL_USART_Init+0x42>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	4a84      	ldr	r2, [pc, #528]	; (8012128 <LL_USART_Init+0x240>)
 8011f16:	4293      	cmp	r3, r2
 8011f18:	d007      	beq.n	8011f2a <LL_USART_Init+0x42>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	4a83      	ldr	r2, [pc, #524]	; (801212c <LL_USART_Init+0x244>)
 8011f1e:	4293      	cmp	r3, r2
 8011f20:	d003      	beq.n	8011f2a <LL_USART_Init+0x42>
 8011f22:	21cf      	movs	r1, #207	; 0xcf
 8011f24:	4882      	ldr	r0, [pc, #520]	; (8012130 <LL_USART_Init+0x248>)
 8011f26:	f7f0 fb83 	bl	8002630 <assert_failed>
  assert_param(IS_LL_USART_PRESCALER(USART_InitStruct->PrescalerValue));
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d02f      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2b01      	cmp	r3, #1
 8011f38:	d02b      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	2b02      	cmp	r3, #2
 8011f40:	d027      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2b03      	cmp	r3, #3
 8011f48:	d023      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	2b04      	cmp	r3, #4
 8011f50:	d01f      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	2b05      	cmp	r3, #5
 8011f58:	d01b      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	2b06      	cmp	r3, #6
 8011f60:	d017      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	2b07      	cmp	r3, #7
 8011f68:	d013      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	2b08      	cmp	r3, #8
 8011f70:	d00f      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	2b09      	cmp	r3, #9
 8011f78:	d00b      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	2b0a      	cmp	r3, #10
 8011f80:	d007      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b0b      	cmp	r3, #11
 8011f88:	d003      	beq.n	8011f92 <LL_USART_Init+0xaa>
 8011f8a:	21d0      	movs	r1, #208	; 0xd0
 8011f8c:	4868      	ldr	r0, [pc, #416]	; (8012130 <LL_USART_Init+0x248>)
 8011f8e:	f7f0 fb4f 	bl	8002630 <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	4a67      	ldr	r2, [pc, #412]	; (8012134 <LL_USART_Init+0x24c>)
 8011f98:	4293      	cmp	r3, r2
 8011f9a:	d903      	bls.n	8011fa4 <LL_USART_Init+0xbc>
 8011f9c:	21d1      	movs	r1, #209	; 0xd1
 8011f9e:	4864      	ldr	r0, [pc, #400]	; (8012130 <LL_USART_Init+0x248>)
 8011fa0:	f7f0 fb46 	bl	8002630 <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	689b      	ldr	r3, [r3, #8]
 8011fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011fac:	d00c      	beq.n	8011fc8 <LL_USART_Init+0xe0>
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	689b      	ldr	r3, [r3, #8]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d008      	beq.n	8011fc8 <LL_USART_Init+0xe0>
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	689b      	ldr	r3, [r3, #8]
 8011fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011fbe:	d003      	beq.n	8011fc8 <LL_USART_Init+0xe0>
 8011fc0:	21d2      	movs	r1, #210	; 0xd2
 8011fc2:	485b      	ldr	r0, [pc, #364]	; (8012130 <LL_USART_Init+0x248>)
 8011fc4:	f7f0 fb34 	bl	8002630 <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8011fc8:	683b      	ldr	r3, [r7, #0]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011fd0:	d011      	beq.n	8011ff6 <LL_USART_Init+0x10e>
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	68db      	ldr	r3, [r3, #12]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d00d      	beq.n	8011ff6 <LL_USART_Init+0x10e>
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011fe2:	d008      	beq.n	8011ff6 <LL_USART_Init+0x10e>
 8011fe4:	683b      	ldr	r3, [r7, #0]
 8011fe6:	68db      	ldr	r3, [r3, #12]
 8011fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011fec:	d003      	beq.n	8011ff6 <LL_USART_Init+0x10e>
 8011fee:	21d3      	movs	r1, #211	; 0xd3
 8011ff0:	484f      	ldr	r0, [pc, #316]	; (8012130 <LL_USART_Init+0x248>)
 8011ff2:	f7f0 fb1d 	bl	8002630 <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	691b      	ldr	r3, [r3, #16]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d00d      	beq.n	801201a <LL_USART_Init+0x132>
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	691b      	ldr	r3, [r3, #16]
 8012002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012006:	d008      	beq.n	801201a <LL_USART_Init+0x132>
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	691b      	ldr	r3, [r3, #16]
 801200c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012010:	d003      	beq.n	801201a <LL_USART_Init+0x132>
 8012012:	21d4      	movs	r1, #212	; 0xd4
 8012014:	4846      	ldr	r0, [pc, #280]	; (8012130 <LL_USART_Init+0x248>)
 8012016:	f7f0 fb0b 	bl	8002630 <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	695b      	ldr	r3, [r3, #20]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d00f      	beq.n	8012042 <LL_USART_Init+0x15a>
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	695b      	ldr	r3, [r3, #20]
 8012026:	2b04      	cmp	r3, #4
 8012028:	d00b      	beq.n	8012042 <LL_USART_Init+0x15a>
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	695b      	ldr	r3, [r3, #20]
 801202e:	2b08      	cmp	r3, #8
 8012030:	d007      	beq.n	8012042 <LL_USART_Init+0x15a>
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	695b      	ldr	r3, [r3, #20]
 8012036:	2b0c      	cmp	r3, #12
 8012038:	d003      	beq.n	8012042 <LL_USART_Init+0x15a>
 801203a:	21d5      	movs	r1, #213	; 0xd5
 801203c:	483c      	ldr	r0, [pc, #240]	; (8012130 <LL_USART_Init+0x248>)
 801203e:	f7f0 faf7 	bl	8002630 <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	699b      	ldr	r3, [r3, #24]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d012      	beq.n	8012070 <LL_USART_Init+0x188>
 801204a:	683b      	ldr	r3, [r7, #0]
 801204c:	699b      	ldr	r3, [r3, #24]
 801204e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012052:	d00d      	beq.n	8012070 <LL_USART_Init+0x188>
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	699b      	ldr	r3, [r3, #24]
 8012058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801205c:	d008      	beq.n	8012070 <LL_USART_Init+0x188>
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	699b      	ldr	r3, [r3, #24]
 8012062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012066:	d003      	beq.n	8012070 <LL_USART_Init+0x188>
 8012068:	21d6      	movs	r1, #214	; 0xd6
 801206a:	4831      	ldr	r0, [pc, #196]	; (8012130 <LL_USART_Init+0x248>)
 801206c:	f7f0 fae0 	bl	8002630 <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	69db      	ldr	r3, [r3, #28]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d008      	beq.n	801208a <LL_USART_Init+0x1a2>
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	69db      	ldr	r3, [r3, #28]
 801207c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012080:	d003      	beq.n	801208a <LL_USART_Init+0x1a2>
 8012082:	21d7      	movs	r1, #215	; 0xd7
 8012084:	482a      	ldr	r0, [pc, #168]	; (8012130 <LL_USART_Init+0x248>)
 8012086:	f7f0 fad3 	bl	8002630 <assert_failed>

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f7ff fe8e 	bl	8011dac <LL_USART_IsEnabled>
 8012090:	4603      	mov	r3, r0
 8012092:	2b00      	cmp	r3, #0
 8012094:	d17f      	bne.n	8012196 <LL_USART_Init+0x2ae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681a      	ldr	r2, [r3, #0]
 801209a:	4b27      	ldr	r3, [pc, #156]	; (8012138 <LL_USART_Init+0x250>)
 801209c:	4013      	ands	r3, r2
 801209e:	683a      	ldr	r2, [r7, #0]
 80120a0:	6891      	ldr	r1, [r2, #8]
 80120a2:	683a      	ldr	r2, [r7, #0]
 80120a4:	6912      	ldr	r2, [r2, #16]
 80120a6:	4311      	orrs	r1, r2
 80120a8:	683a      	ldr	r2, [r7, #0]
 80120aa:	6952      	ldr	r2, [r2, #20]
 80120ac:	4311      	orrs	r1, r2
 80120ae:	683a      	ldr	r2, [r7, #0]
 80120b0:	69d2      	ldr	r2, [r2, #28]
 80120b2:	430a      	orrs	r2, r1
 80120b4:	431a      	orrs	r2, r3
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	4619      	mov	r1, r3
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f7ff fe9a 	bl	8011dfa <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	699b      	ldr	r3, [r3, #24]
 80120ca:	4619      	mov	r1, r3
 80120cc:	6878      	ldr	r0, [r7, #4]
 80120ce:	f7ff fea7 	bl	8011e20 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	4a11      	ldr	r2, [pc, #68]	; (801211c <LL_USART_Init+0x234>)
 80120d6:	4293      	cmp	r3, r2
 80120d8:	d104      	bne.n	80120e4 <LL_USART_Init+0x1fc>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80120da:	2003      	movs	r0, #3
 80120dc:	f7ff fb18 	bl	8011710 <LL_RCC_GetUSARTClockFreq>
 80120e0:	60b8      	str	r0, [r7, #8]
 80120e2:	e034      	b.n	801214e <LL_USART_Init+0x266>
    }
    else if (USARTx == USART2)
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	4a0e      	ldr	r2, [pc, #56]	; (8012120 <LL_USART_Init+0x238>)
 80120e8:	4293      	cmp	r3, r2
 80120ea:	d104      	bne.n	80120f6 <LL_USART_Init+0x20e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80120ec:	200c      	movs	r0, #12
 80120ee:	f7ff fb0f 	bl	8011710 <LL_RCC_GetUSARTClockFreq>
 80120f2:	60b8      	str	r0, [r7, #8]
 80120f4:	e02b      	b.n	801214e <LL_USART_Init+0x266>
    }
    else if (USARTx == USART3)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	4a0a      	ldr	r2, [pc, #40]	; (8012124 <LL_USART_Init+0x23c>)
 80120fa:	4293      	cmp	r3, r2
 80120fc:	d104      	bne.n	8012108 <LL_USART_Init+0x220>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80120fe:	2030      	movs	r0, #48	; 0x30
 8012100:	f7ff fb06 	bl	8011710 <LL_RCC_GetUSARTClockFreq>
 8012104:	60b8      	str	r0, [r7, #8]
 8012106:	e022      	b.n	801214e <LL_USART_Init+0x266>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	4a07      	ldr	r2, [pc, #28]	; (8012128 <LL_USART_Init+0x240>)
 801210c:	4293      	cmp	r3, r2
 801210e:	d115      	bne.n	801213c <LL_USART_Init+0x254>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8012110:	20c0      	movs	r0, #192	; 0xc0
 8012112:	f7ff fbd3 	bl	80118bc <LL_RCC_GetUARTClockFreq>
 8012116:	60b8      	str	r0, [r7, #8]
 8012118:	e019      	b.n	801214e <LL_USART_Init+0x266>
 801211a:	bf00      	nop
 801211c:	40013800 	.word	0x40013800
 8012120:	40004400 	.word	0x40004400
 8012124:	40004800 	.word	0x40004800
 8012128:	40004c00 	.word	0x40004c00
 801212c:	40005000 	.word	0x40005000
 8012130:	0801d1c4 	.word	0x0801d1c4
 8012134:	011e1a30 	.word	0x011e1a30
 8012138:	efff69f3 	.word	0xefff69f3
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	4a18      	ldr	r2, [pc, #96]	; (80121a0 <LL_USART_Init+0x2b8>)
 8012140:	4293      	cmp	r3, r2
 8012142:	d104      	bne.n	801214e <LL_USART_Init+0x266>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8012144:	f44f 7040 	mov.w	r0, #768	; 0x300
 8012148:	f7ff fbb8 	bl	80118bc <LL_RCC_GetUARTClockFreq>
 801214c:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d01a      	beq.n	801218a <LL_USART_Init+0x2a2>
        && (USART_InitStruct->BaudRate != 0U))
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	685b      	ldr	r3, [r3, #4]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d016      	beq.n	801218a <LL_USART_Init+0x2a2>
    {
      status = SUCCESS;
 801215c:	2300      	movs	r3, #0
 801215e:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	69d9      	ldr	r1, [r3, #28]
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	685b      	ldr	r3, [r3, #4]
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	460b      	mov	r3, r1
 8012170:	68b9      	ldr	r1, [r7, #8]
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	f7ff fe68 	bl	8011e48 <LL_USART_SetBaudRate>
                           USART_InitStruct->PrescalerValue,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	68db      	ldr	r3, [r3, #12]
 801217c:	2b0f      	cmp	r3, #15
 801217e:	d804      	bhi.n	801218a <LL_USART_Init+0x2a2>
 8012180:	f44f 7194 	mov.w	r1, #296	; 0x128
 8012184:	4807      	ldr	r0, [pc, #28]	; (80121a4 <LL_USART_Init+0x2bc>)
 8012186:	f7f0 fa53 	bl	8002630 <assert_failed>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	4619      	mov	r1, r3
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f7ff fe1e 	bl	8011dd2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8012196:	7bfb      	ldrb	r3, [r7, #15]
}
 8012198:	4618      	mov	r0, r3
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	40005000 	.word	0x40005000
 80121a4:	0801d1c4 	.word	0x0801d1c4

080121a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80121a8:	b480      	push	{r7}
 80121aa:	b085      	sub	sp, #20
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2200      	movs	r2, #0
 80121b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80121b8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80121bc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	b29a      	uxth	r2, r3
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80121c8:	2300      	movs	r3, #0
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3714      	adds	r7, #20
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr

080121d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80121d6:	b480      	push	{r7}
 80121d8:	b085      	sub	sp, #20
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80121de:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80121e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	43db      	mvns	r3, r3
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	4013      	ands	r3, r2
 80121f6:	b29a      	uxth	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80121fe:	2300      	movs	r3, #0
}
 8012200:	4618      	mov	r0, r3
 8012202:	3714      	adds	r7, #20
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr

0801220c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801220c:	b084      	sub	sp, #16
 801220e:	b480      	push	{r7}
 8012210:	b083      	sub	sp, #12
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
 8012216:	f107 0014 	add.w	r0, r7, #20
 801221a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2201      	movs	r2, #1
 8012222:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2200      	movs	r2, #0
 801222a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	2200      	movs	r2, #0
 8012232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2200      	movs	r2, #0
 801223a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801223e:	2300      	movs	r3, #0
}
 8012240:	4618      	mov	r0, r3
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	b004      	add	sp, #16
 801224c:	4770      	bx	lr
	...

08012250 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012250:	b480      	push	{r7}
 8012252:	b09d      	sub	sp, #116	; 0x74
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801225a:	2300      	movs	r3, #0
 801225c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012260:	687a      	ldr	r2, [r7, #4]
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	009b      	lsls	r3, r3, #2
 8012268:	4413      	add	r3, r2
 801226a:	881b      	ldrh	r3, [r3, #0]
 801226c:	b29b      	uxth	r3, r3
 801226e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8012272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012276:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	78db      	ldrb	r3, [r3, #3]
 801227e:	2b03      	cmp	r3, #3
 8012280:	d81f      	bhi.n	80122c2 <USB_ActivateEndpoint+0x72>
 8012282:	a201      	add	r2, pc, #4	; (adr r2, 8012288 <USB_ActivateEndpoint+0x38>)
 8012284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012288:	08012299 	.word	0x08012299
 801228c:	080122b5 	.word	0x080122b5
 8012290:	080122cb 	.word	0x080122cb
 8012294:	080122a7 	.word	0x080122a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012298:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801229c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80122a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80122a4:	e012      	b.n	80122cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80122a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80122aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80122ae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80122b2:	e00b      	b.n	80122cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80122b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80122b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80122bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80122c0:	e004      	b.n	80122cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80122c2:	2301      	movs	r3, #1
 80122c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80122c8:	e000      	b.n	80122cc <USB_ActivateEndpoint+0x7c>
      break;
 80122ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	009b      	lsls	r3, r3, #2
 80122d4:	441a      	add	r2, r3
 80122d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80122da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80122de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80122e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80122e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	009b      	lsls	r3, r3, #2
 80122f6:	4413      	add	r3, r2
 80122f8:	881b      	ldrh	r3, [r3, #0]
 80122fa:	b29b      	uxth	r3, r3
 80122fc:	b21b      	sxth	r3, r3
 80122fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012306:	b21a      	sxth	r2, r3
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	b21b      	sxth	r3, r3
 801230e:	4313      	orrs	r3, r2
 8012310:	b21b      	sxth	r3, r3
 8012312:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	441a      	add	r2, r3
 8012320:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8012324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801232c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012334:	b29b      	uxth	r3, r3
 8012336:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8012338:	683b      	ldr	r3, [r7, #0]
 801233a:	7b1b      	ldrb	r3, [r3, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	f040 8149 	bne.w	80125d4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	785b      	ldrb	r3, [r3, #1]
 8012346:	2b00      	cmp	r3, #0
 8012348:	f000 8084 	beq.w	8012454 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	61bb      	str	r3, [r7, #24]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012356:	b29b      	uxth	r3, r3
 8012358:	461a      	mov	r2, r3
 801235a:	69bb      	ldr	r3, [r7, #24]
 801235c:	4413      	add	r3, r2
 801235e:	61bb      	str	r3, [r7, #24]
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	00da      	lsls	r2, r3, #3
 8012366:	69bb      	ldr	r3, [r7, #24]
 8012368:	4413      	add	r3, r2
 801236a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801236e:	617b      	str	r3, [r7, #20]
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	88db      	ldrh	r3, [r3, #6]
 8012374:	085b      	lsrs	r3, r3, #1
 8012376:	b29b      	uxth	r3, r3
 8012378:	005b      	lsls	r3, r3, #1
 801237a:	b29a      	uxth	r2, r3
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012380:	687a      	ldr	r2, [r7, #4]
 8012382:	683b      	ldr	r3, [r7, #0]
 8012384:	781b      	ldrb	r3, [r3, #0]
 8012386:	009b      	lsls	r3, r3, #2
 8012388:	4413      	add	r3, r2
 801238a:	881b      	ldrh	r3, [r3, #0]
 801238c:	827b      	strh	r3, [r7, #18]
 801238e:	8a7b      	ldrh	r3, [r7, #18]
 8012390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012394:	2b00      	cmp	r3, #0
 8012396:	d01b      	beq.n	80123d0 <USB_ActivateEndpoint+0x180>
 8012398:	687a      	ldr	r2, [r7, #4]
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	4413      	add	r3, r2
 80123a2:	881b      	ldrh	r3, [r3, #0]
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80123aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80123ae:	823b      	strh	r3, [r7, #16]
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	009b      	lsls	r3, r3, #2
 80123b8:	441a      	add	r2, r3
 80123ba:	8a3b      	ldrh	r3, [r7, #16]
 80123bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80123c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80123c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80123c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	78db      	ldrb	r3, [r3, #3]
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	d020      	beq.n	801241a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80123d8:	687a      	ldr	r2, [r7, #4]
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	009b      	lsls	r3, r3, #2
 80123e0:	4413      	add	r3, r2
 80123e2:	881b      	ldrh	r3, [r3, #0]
 80123e4:	b29b      	uxth	r3, r3
 80123e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80123ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80123ee:	81bb      	strh	r3, [r7, #12]
 80123f0:	89bb      	ldrh	r3, [r7, #12]
 80123f2:	f083 0320 	eor.w	r3, r3, #32
 80123f6:	81bb      	strh	r3, [r7, #12]
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	781b      	ldrb	r3, [r3, #0]
 80123fe:	009b      	lsls	r3, r3, #2
 8012400:	441a      	add	r2, r3
 8012402:	89bb      	ldrh	r3, [r7, #12]
 8012404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801240c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012414:	b29b      	uxth	r3, r3
 8012416:	8013      	strh	r3, [r2, #0]
 8012418:	e2a6      	b.n	8012968 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801241a:	687a      	ldr	r2, [r7, #4]
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	009b      	lsls	r3, r3, #2
 8012422:	4413      	add	r3, r2
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	b29b      	uxth	r3, r3
 8012428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801242c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012430:	81fb      	strh	r3, [r7, #14]
 8012432:	687a      	ldr	r2, [r7, #4]
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	009b      	lsls	r3, r3, #2
 801243a:	441a      	add	r2, r3
 801243c:	89fb      	ldrh	r3, [r7, #14]
 801243e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801244a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801244e:	b29b      	uxth	r3, r3
 8012450:	8013      	strh	r3, [r2, #0]
 8012452:	e289      	b.n	8012968 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	633b      	str	r3, [r7, #48]	; 0x30
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801245e:	b29b      	uxth	r3, r3
 8012460:	461a      	mov	r2, r3
 8012462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012464:	4413      	add	r3, r2
 8012466:	633b      	str	r3, [r7, #48]	; 0x30
 8012468:	683b      	ldr	r3, [r7, #0]
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	00da      	lsls	r2, r3, #3
 801246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012470:	4413      	add	r3, r2
 8012472:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	88db      	ldrh	r3, [r3, #6]
 801247c:	085b      	lsrs	r3, r3, #1
 801247e:	b29b      	uxth	r3, r3
 8012480:	005b      	lsls	r3, r3, #1
 8012482:	b29a      	uxth	r2, r3
 8012484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012486:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	62bb      	str	r3, [r7, #40]	; 0x28
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012492:	b29b      	uxth	r3, r3
 8012494:	461a      	mov	r2, r3
 8012496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012498:	4413      	add	r3, r2
 801249a:	62bb      	str	r3, [r7, #40]	; 0x28
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	00da      	lsls	r2, r3, #3
 80124a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a4:	4413      	add	r3, r2
 80124a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80124aa:	627b      	str	r3, [r7, #36]	; 0x24
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	691b      	ldr	r3, [r3, #16]
 80124b0:	2b3e      	cmp	r3, #62	; 0x3e
 80124b2:	d918      	bls.n	80124e6 <USB_ActivateEndpoint+0x296>
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	691b      	ldr	r3, [r3, #16]
 80124b8:	095b      	lsrs	r3, r3, #5
 80124ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	691b      	ldr	r3, [r3, #16]
 80124c0:	f003 031f 	and.w	r3, r3, #31
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d102      	bne.n	80124ce <USB_ActivateEndpoint+0x27e>
 80124c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124ca:	3b01      	subs	r3, #1
 80124cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80124ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80124d0:	b29b      	uxth	r3, r3
 80124d2:	029b      	lsls	r3, r3, #10
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124de:	b29a      	uxth	r2, r3
 80124e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e2:	801a      	strh	r2, [r3, #0]
 80124e4:	e029      	b.n	801253a <USB_ActivateEndpoint+0x2ea>
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	691b      	ldr	r3, [r3, #16]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d112      	bne.n	8012514 <USB_ActivateEndpoint+0x2c4>
 80124ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f0:	881b      	ldrh	r3, [r3, #0]
 80124f2:	b29b      	uxth	r3, r3
 80124f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fc:	801a      	strh	r2, [r3, #0]
 80124fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012500:	881b      	ldrh	r3, [r3, #0]
 8012502:	b29b      	uxth	r3, r3
 8012504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801250c:	b29a      	uxth	r2, r3
 801250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012510:	801a      	strh	r2, [r3, #0]
 8012512:	e012      	b.n	801253a <USB_ActivateEndpoint+0x2ea>
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	691b      	ldr	r3, [r3, #16]
 8012518:	085b      	lsrs	r3, r3, #1
 801251a:	66bb      	str	r3, [r7, #104]	; 0x68
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	691b      	ldr	r3, [r3, #16]
 8012520:	f003 0301 	and.w	r3, r3, #1
 8012524:	2b00      	cmp	r3, #0
 8012526:	d002      	beq.n	801252e <USB_ActivateEndpoint+0x2de>
 8012528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801252a:	3301      	adds	r3, #1
 801252c:	66bb      	str	r3, [r7, #104]	; 0x68
 801252e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012530:	b29b      	uxth	r3, r3
 8012532:	029b      	lsls	r3, r3, #10
 8012534:	b29a      	uxth	r2, r3
 8012536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012538:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	009b      	lsls	r3, r3, #2
 8012542:	4413      	add	r3, r2
 8012544:	881b      	ldrh	r3, [r3, #0]
 8012546:	847b      	strh	r3, [r7, #34]	; 0x22
 8012548:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801254a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801254e:	2b00      	cmp	r3, #0
 8012550:	d01b      	beq.n	801258a <USB_ActivateEndpoint+0x33a>
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	4413      	add	r3, r2
 801255c:	881b      	ldrh	r3, [r3, #0]
 801255e:	b29b      	uxth	r3, r3
 8012560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012568:	843b      	strh	r3, [r7, #32]
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	441a      	add	r2, r3
 8012574:	8c3b      	ldrh	r3, [r7, #32]
 8012576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801257a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801257e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012586:	b29b      	uxth	r3, r3
 8012588:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801258a:	687a      	ldr	r2, [r7, #4]
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	009b      	lsls	r3, r3, #2
 8012592:	4413      	add	r3, r2
 8012594:	881b      	ldrh	r3, [r3, #0]
 8012596:	b29b      	uxth	r3, r3
 8012598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80125a0:	83fb      	strh	r3, [r7, #30]
 80125a2:	8bfb      	ldrh	r3, [r7, #30]
 80125a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80125a8:	83fb      	strh	r3, [r7, #30]
 80125aa:	8bfb      	ldrh	r3, [r7, #30]
 80125ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80125b0:	83fb      	strh	r3, [r7, #30]
 80125b2:	687a      	ldr	r2, [r7, #4]
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	009b      	lsls	r3, r3, #2
 80125ba:	441a      	add	r2, r3
 80125bc:	8bfb      	ldrh	r3, [r7, #30]
 80125be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80125c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80125c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80125ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	8013      	strh	r3, [r2, #0]
 80125d2:	e1c9      	b.n	8012968 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	78db      	ldrb	r3, [r3, #3]
 80125d8:	2b02      	cmp	r3, #2
 80125da:	d11e      	bne.n	801261a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	009b      	lsls	r3, r3, #2
 80125e4:	4413      	add	r3, r2
 80125e6:	881b      	ldrh	r3, [r3, #0]
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80125ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80125f2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	009b      	lsls	r3, r3, #2
 80125fe:	441a      	add	r2, r3
 8012600:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801260c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8012610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012614:	b29b      	uxth	r3, r3
 8012616:	8013      	strh	r3, [r2, #0]
 8012618:	e01d      	b.n	8012656 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	781b      	ldrb	r3, [r3, #0]
 8012620:	009b      	lsls	r3, r3, #2
 8012622:	4413      	add	r3, r2
 8012624:	881b      	ldrh	r3, [r3, #0]
 8012626:	b29b      	uxth	r3, r3
 8012628:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801262c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012630:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8012634:	687a      	ldr	r2, [r7, #4]
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	781b      	ldrb	r3, [r3, #0]
 801263a:	009b      	lsls	r3, r3, #2
 801263c:	441a      	add	r2, r3
 801263e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801264a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801264e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012652:	b29b      	uxth	r3, r3
 8012654:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	65fb      	str	r3, [r7, #92]	; 0x5c
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012660:	b29b      	uxth	r3, r3
 8012662:	461a      	mov	r2, r3
 8012664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012666:	4413      	add	r3, r2
 8012668:	65fb      	str	r3, [r7, #92]	; 0x5c
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	00da      	lsls	r2, r3, #3
 8012670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012672:	4413      	add	r3, r2
 8012674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012678:	65bb      	str	r3, [r7, #88]	; 0x58
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	891b      	ldrh	r3, [r3, #8]
 801267e:	085b      	lsrs	r3, r3, #1
 8012680:	b29b      	uxth	r3, r3
 8012682:	005b      	lsls	r3, r3, #1
 8012684:	b29a      	uxth	r2, r3
 8012686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012688:	801a      	strh	r2, [r3, #0]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	657b      	str	r3, [r7, #84]	; 0x54
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012694:	b29b      	uxth	r3, r3
 8012696:	461a      	mov	r2, r3
 8012698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801269a:	4413      	add	r3, r2
 801269c:	657b      	str	r3, [r7, #84]	; 0x54
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	00da      	lsls	r2, r3, #3
 80126a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126a6:	4413      	add	r3, r2
 80126a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80126ac:	653b      	str	r3, [r7, #80]	; 0x50
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	895b      	ldrh	r3, [r3, #10]
 80126b2:	085b      	lsrs	r3, r3, #1
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	005b      	lsls	r3, r3, #1
 80126b8:	b29a      	uxth	r2, r3
 80126ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126bc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	785b      	ldrb	r3, [r3, #1]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	f040 8093 	bne.w	80127ee <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80126c8:	687a      	ldr	r2, [r7, #4]
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	009b      	lsls	r3, r3, #2
 80126d0:	4413      	add	r3, r2
 80126d2:	881b      	ldrh	r3, [r3, #0]
 80126d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80126d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80126dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d01b      	beq.n	801271c <USB_ActivateEndpoint+0x4cc>
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	4413      	add	r3, r2
 80126ee:	881b      	ldrh	r3, [r3, #0]
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80126f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80126fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80126fc:	687a      	ldr	r2, [r7, #4]
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	781b      	ldrb	r3, [r3, #0]
 8012702:	009b      	lsls	r3, r3, #2
 8012704:	441a      	add	r2, r3
 8012706:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801270c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012718:	b29b      	uxth	r3, r3
 801271a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	781b      	ldrb	r3, [r3, #0]
 8012722:	009b      	lsls	r3, r3, #2
 8012724:	4413      	add	r3, r2
 8012726:	881b      	ldrh	r3, [r3, #0]
 8012728:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801272a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012730:	2b00      	cmp	r3, #0
 8012732:	d01b      	beq.n	801276c <USB_ActivateEndpoint+0x51c>
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	4413      	add	r3, r2
 801273e:	881b      	ldrh	r3, [r3, #0]
 8012740:	b29b      	uxth	r3, r3
 8012742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801274a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801274c:	687a      	ldr	r2, [r7, #4]
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	009b      	lsls	r3, r3, #2
 8012754:	441a      	add	r2, r3
 8012756:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801275c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012764:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012768:	b29b      	uxth	r3, r3
 801276a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	4413      	add	r3, r2
 8012776:	881b      	ldrh	r3, [r3, #0]
 8012778:	b29b      	uxth	r3, r3
 801277a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801277e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012782:	873b      	strh	r3, [r7, #56]	; 0x38
 8012784:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012786:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801278a:	873b      	strh	r3, [r7, #56]	; 0x38
 801278c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801278e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012792:	873b      	strh	r3, [r7, #56]	; 0x38
 8012794:	687a      	ldr	r2, [r7, #4]
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	009b      	lsls	r3, r3, #2
 801279c:	441a      	add	r2, r3
 801279e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80127a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80127a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80127a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	4413      	add	r3, r2
 80127be:	881b      	ldrh	r3, [r3, #0]
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80127c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127ca:	86fb      	strh	r3, [r7, #54]	; 0x36
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	781b      	ldrb	r3, [r3, #0]
 80127d2:	009b      	lsls	r3, r3, #2
 80127d4:	441a      	add	r2, r3
 80127d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80127d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80127dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80127e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	8013      	strh	r3, [r2, #0]
 80127ec:	e0bc      	b.n	8012968 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80127ee:	687a      	ldr	r2, [r7, #4]
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	009b      	lsls	r3, r3, #2
 80127f6:	4413      	add	r3, r2
 80127f8:	881b      	ldrh	r3, [r3, #0]
 80127fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80127fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012806:	2b00      	cmp	r3, #0
 8012808:	d01d      	beq.n	8012846 <USB_ActivateEndpoint+0x5f6>
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	009b      	lsls	r3, r3, #2
 8012812:	4413      	add	r3, r2
 8012814:	881b      	ldrh	r3, [r3, #0]
 8012816:	b29b      	uxth	r3, r3
 8012818:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801281c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012820:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	009b      	lsls	r3, r3, #2
 801282c:	441a      	add	r2, r3
 801282e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8012832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801283a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801283e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012842:	b29b      	uxth	r3, r3
 8012844:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	781b      	ldrb	r3, [r3, #0]
 801284c:	009b      	lsls	r3, r3, #2
 801284e:	4413      	add	r3, r2
 8012850:	881b      	ldrh	r3, [r3, #0]
 8012852:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8012856:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801285a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801285e:	2b00      	cmp	r3, #0
 8012860:	d01d      	beq.n	801289e <USB_ActivateEndpoint+0x64e>
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	4413      	add	r3, r2
 801286c:	881b      	ldrh	r3, [r3, #0]
 801286e:	b29b      	uxth	r3, r3
 8012870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012878:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	781b      	ldrb	r3, [r3, #0]
 8012882:	009b      	lsls	r3, r3, #2
 8012884:	441a      	add	r2, r3
 8012886:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801288a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801288e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012896:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801289a:	b29b      	uxth	r3, r3
 801289c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	78db      	ldrb	r3, [r3, #3]
 80128a2:	2b01      	cmp	r3, #1
 80128a4:	d024      	beq.n	80128f0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80128a6:	687a      	ldr	r2, [r7, #4]
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	4413      	add	r3, r2
 80128b0:	881b      	ldrh	r3, [r3, #0]
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80128b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80128c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80128c4:	f083 0320 	eor.w	r3, r3, #32
 80128c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	441a      	add	r2, r3
 80128d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80128da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80128de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80128e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128ea:	b29b      	uxth	r3, r3
 80128ec:	8013      	strh	r3, [r2, #0]
 80128ee:	e01d      	b.n	801292c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80128f0:	687a      	ldr	r2, [r7, #4]
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	009b      	lsls	r3, r3, #2
 80128f8:	4413      	add	r3, r2
 80128fa:	881b      	ldrh	r3, [r3, #0]
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012906:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801290a:	687a      	ldr	r2, [r7, #4]
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	009b      	lsls	r3, r3, #2
 8012912:	441a      	add	r2, r3
 8012914:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801291c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012928:	b29b      	uxth	r3, r3
 801292a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801292c:	687a      	ldr	r2, [r7, #4]
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	009b      	lsls	r3, r3, #2
 8012934:	4413      	add	r3, r2
 8012936:	881b      	ldrh	r3, [r3, #0]
 8012938:	b29b      	uxth	r3, r3
 801293a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801293e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012942:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012946:	687a      	ldr	r2, [r7, #4]
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	009b      	lsls	r3, r3, #2
 801294e:	441a      	add	r2, r3
 8012950:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801295c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012964:	b29b      	uxth	r3, r3
 8012966:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8012968:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801296c:	4618      	mov	r0, r3
 801296e:	3774      	adds	r7, #116	; 0x74
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr

08012978 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012978:	b480      	push	{r7}
 801297a:	b08d      	sub	sp, #52	; 0x34
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	7b1b      	ldrb	r3, [r3, #12]
 8012986:	2b00      	cmp	r3, #0
 8012988:	f040 808e 	bne.w	8012aa8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	785b      	ldrb	r3, [r3, #1]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d044      	beq.n	8012a1e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	009b      	lsls	r3, r3, #2
 801299c:	4413      	add	r3, r2
 801299e:	881b      	ldrh	r3, [r3, #0]
 80129a0:	81bb      	strh	r3, [r7, #12]
 80129a2:	89bb      	ldrh	r3, [r7, #12]
 80129a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d01b      	beq.n	80129e4 <USB_DeactivateEndpoint+0x6c>
 80129ac:	687a      	ldr	r2, [r7, #4]
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	009b      	lsls	r3, r3, #2
 80129b4:	4413      	add	r3, r2
 80129b6:	881b      	ldrh	r3, [r3, #0]
 80129b8:	b29b      	uxth	r3, r3
 80129ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80129be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80129c2:	817b      	strh	r3, [r7, #10]
 80129c4:	687a      	ldr	r2, [r7, #4]
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	009b      	lsls	r3, r3, #2
 80129cc:	441a      	add	r2, r3
 80129ce:	897b      	ldrh	r3, [r7, #10]
 80129d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80129d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80129d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80129dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80129e4:	687a      	ldr	r2, [r7, #4]
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	4413      	add	r3, r2
 80129ee:	881b      	ldrh	r3, [r3, #0]
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80129f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80129fa:	813b      	strh	r3, [r7, #8]
 80129fc:	687a      	ldr	r2, [r7, #4]
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	009b      	lsls	r3, r3, #2
 8012a04:	441a      	add	r2, r3
 8012a06:	893b      	ldrh	r3, [r7, #8]
 8012a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	8013      	strh	r3, [r2, #0]
 8012a1c:	e192      	b.n	8012d44 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	683b      	ldr	r3, [r7, #0]
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	009b      	lsls	r3, r3, #2
 8012a26:	4413      	add	r3, r2
 8012a28:	881b      	ldrh	r3, [r3, #0]
 8012a2a:	827b      	strh	r3, [r7, #18]
 8012a2c:	8a7b      	ldrh	r3, [r7, #18]
 8012a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d01b      	beq.n	8012a6e <USB_DeactivateEndpoint+0xf6>
 8012a36:	687a      	ldr	r2, [r7, #4]
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	4413      	add	r3, r2
 8012a40:	881b      	ldrh	r3, [r3, #0]
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a4c:	823b      	strh	r3, [r7, #16]
 8012a4e:	687a      	ldr	r2, [r7, #4]
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	441a      	add	r2, r3
 8012a58:	8a3b      	ldrh	r3, [r7, #16]
 8012a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	009b      	lsls	r3, r3, #2
 8012a76:	4413      	add	r3, r2
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a84:	81fb      	strh	r3, [r7, #14]
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	683b      	ldr	r3, [r7, #0]
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	009b      	lsls	r3, r3, #2
 8012a8e:	441a      	add	r2, r3
 8012a90:	89fb      	ldrh	r3, [r7, #14]
 8012a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	8013      	strh	r3, [r2, #0]
 8012aa6:	e14d      	b.n	8012d44 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	785b      	ldrb	r3, [r3, #1]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	f040 80a5 	bne.w	8012bfc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	4413      	add	r3, r2
 8012abc:	881b      	ldrh	r3, [r3, #0]
 8012abe:	843b      	strh	r3, [r7, #32]
 8012ac0:	8c3b      	ldrh	r3, [r7, #32]
 8012ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d01b      	beq.n	8012b02 <USB_DeactivateEndpoint+0x18a>
 8012aca:	687a      	ldr	r2, [r7, #4]
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	009b      	lsls	r3, r3, #2
 8012ad2:	4413      	add	r3, r2
 8012ad4:	881b      	ldrh	r3, [r3, #0]
 8012ad6:	b29b      	uxth	r3, r3
 8012ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ae0:	83fb      	strh	r3, [r7, #30]
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	009b      	lsls	r3, r3, #2
 8012aea:	441a      	add	r2, r3
 8012aec:	8bfb      	ldrh	r3, [r7, #30]
 8012aee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012af2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012af6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012afe:	b29b      	uxth	r3, r3
 8012b00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012b02:	687a      	ldr	r2, [r7, #4]
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	009b      	lsls	r3, r3, #2
 8012b0a:	4413      	add	r3, r2
 8012b0c:	881b      	ldrh	r3, [r3, #0]
 8012b0e:	83bb      	strh	r3, [r7, #28]
 8012b10:	8bbb      	ldrh	r3, [r7, #28]
 8012b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d01b      	beq.n	8012b52 <USB_DeactivateEndpoint+0x1da>
 8012b1a:	687a      	ldr	r2, [r7, #4]
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	009b      	lsls	r3, r3, #2
 8012b22:	4413      	add	r3, r2
 8012b24:	881b      	ldrh	r3, [r3, #0]
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b30:	837b      	strh	r3, [r7, #26]
 8012b32:	687a      	ldr	r2, [r7, #4]
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	441a      	add	r2, r3
 8012b3c:	8b7b      	ldrh	r3, [r7, #26]
 8012b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012b4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012b4e:	b29b      	uxth	r3, r3
 8012b50:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8012b52:	687a      	ldr	r2, [r7, #4]
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	009b      	lsls	r3, r3, #2
 8012b5a:	4413      	add	r3, r2
 8012b5c:	881b      	ldrh	r3, [r3, #0]
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b68:	833b      	strh	r3, [r7, #24]
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	009b      	lsls	r3, r3, #2
 8012b72:	441a      	add	r2, r3
 8012b74:	8b3b      	ldrh	r3, [r7, #24]
 8012b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012b82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	009b      	lsls	r3, r3, #2
 8012b92:	4413      	add	r3, r2
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	b29b      	uxth	r3, r3
 8012b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ba0:	82fb      	strh	r3, [r7, #22]
 8012ba2:	687a      	ldr	r2, [r7, #4]
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	009b      	lsls	r3, r3, #2
 8012baa:	441a      	add	r2, r3
 8012bac:	8afb      	ldrh	r3, [r7, #22]
 8012bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bbe:	b29b      	uxth	r3, r3
 8012bc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012bc2:	687a      	ldr	r2, [r7, #4]
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	781b      	ldrb	r3, [r3, #0]
 8012bc8:	009b      	lsls	r3, r3, #2
 8012bca:	4413      	add	r3, r2
 8012bcc:	881b      	ldrh	r3, [r3, #0]
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012bd8:	82bb      	strh	r3, [r7, #20]
 8012bda:	687a      	ldr	r2, [r7, #4]
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	009b      	lsls	r3, r3, #2
 8012be2:	441a      	add	r2, r3
 8012be4:	8abb      	ldrh	r3, [r7, #20]
 8012be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	8013      	strh	r3, [r2, #0]
 8012bfa:	e0a3      	b.n	8012d44 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	4413      	add	r3, r2
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012c0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d01b      	beq.n	8012c4c <USB_DeactivateEndpoint+0x2d4>
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	009b      	lsls	r3, r3, #2
 8012c1c:	4413      	add	r3, r2
 8012c1e:	881b      	ldrh	r3, [r3, #0]
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	683b      	ldr	r3, [r7, #0]
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	441a      	add	r2, r3
 8012c36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c48:	b29b      	uxth	r3, r3
 8012c4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012c4c:	687a      	ldr	r2, [r7, #4]
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	781b      	ldrb	r3, [r3, #0]
 8012c52:	009b      	lsls	r3, r3, #2
 8012c54:	4413      	add	r3, r2
 8012c56:	881b      	ldrh	r3, [r3, #0]
 8012c58:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012c5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d01b      	beq.n	8012c9c <USB_DeactivateEndpoint+0x324>
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	781b      	ldrb	r3, [r3, #0]
 8012c6a:	009b      	lsls	r3, r3, #2
 8012c6c:	4413      	add	r3, r2
 8012c6e:	881b      	ldrh	r3, [r3, #0]
 8012c70:	b29b      	uxth	r3, r3
 8012c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c7a:	853b      	strh	r3, [r7, #40]	; 0x28
 8012c7c:	687a      	ldr	r2, [r7, #4]
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	009b      	lsls	r3, r3, #2
 8012c84:	441a      	add	r2, r3
 8012c86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8012c9c:	687a      	ldr	r2, [r7, #4]
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	4413      	add	r3, r2
 8012ca6:	881b      	ldrh	r3, [r3, #0]
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012cb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	009b      	lsls	r3, r3, #2
 8012cbc:	441a      	add	r2, r3
 8012cbe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012cc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012cc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012cc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	4413      	add	r3, r2
 8012cde:	881b      	ldrh	r3, [r3, #0]
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012cea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	009b      	lsls	r3, r3, #2
 8012cf4:	441a      	add	r2, r3
 8012cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012d0c:	687a      	ldr	r2, [r7, #4]
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	4413      	add	r3, r2
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d22:	847b      	strh	r3, [r7, #34]	; 0x22
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	009b      	lsls	r3, r3, #2
 8012d2c:	441a      	add	r2, r3
 8012d2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d40:	b29b      	uxth	r3, r3
 8012d42:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8012d44:	2300      	movs	r3, #0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3734      	adds	r7, #52	; 0x34
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d50:	4770      	bx	lr

08012d52 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012d52:	b580      	push	{r7, lr}
 8012d54:	b0c2      	sub	sp, #264	; 0x108
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012d60:	6018      	str	r0, [r3, #0]
 8012d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d6a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	785b      	ldrb	r3, [r3, #1]
 8012d78:	2b01      	cmp	r3, #1
 8012d7a:	f040 867b 	bne.w	8013a74 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8012d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	699a      	ldr	r2, [r3, #24]
 8012d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	691b      	ldr	r3, [r3, #16]
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d908      	bls.n	8012dac <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8012d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	691b      	ldr	r3, [r3, #16]
 8012da6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8012daa:	e007      	b.n	8012dbc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8012dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	699b      	ldr	r3, [r3, #24]
 8012db8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8012dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	7b1b      	ldrb	r3, [r3, #12]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d13a      	bne.n	8012e42 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8012dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	6959      	ldr	r1, [r3, #20]
 8012dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	88da      	ldrh	r2, [r3, #6]
 8012de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012de8:	b29b      	uxth	r3, r3
 8012dea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012dee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012df2:	6800      	ldr	r0, [r0, #0]
 8012df4:	f001 fc1d 	bl	8014632 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	613b      	str	r3, [r7, #16]
 8012e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	461a      	mov	r2, r3
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	4413      	add	r3, r2
 8012e1a:	613b      	str	r3, [r7, #16]
 8012e1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	781b      	ldrb	r3, [r3, #0]
 8012e28:	00da      	lsls	r2, r3, #3
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	4413      	add	r3, r2
 8012e2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012e32:	60fb      	str	r3, [r7, #12]
 8012e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e38:	b29a      	uxth	r2, r3
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	801a      	strh	r2, [r3, #0]
 8012e3e:	f000 bde3 	b.w	8013a08 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8012e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	78db      	ldrb	r3, [r3, #3]
 8012e4e:	2b02      	cmp	r3, #2
 8012e50:	f040 843a 	bne.w	80136c8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8012e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	6a1a      	ldr	r2, [r3, #32]
 8012e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	691b      	ldr	r3, [r3, #16]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	f240 83b7 	bls.w	80135e0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e7a:	681a      	ldr	r2, [r3, #0]
 8012e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	781b      	ldrb	r3, [r3, #0]
 8012e88:	009b      	lsls	r3, r3, #2
 8012e8a:	4413      	add	r3, r2
 8012e8c:	881b      	ldrh	r3, [r3, #0]
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e98:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8012e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ea0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ea4:	681a      	ldr	r2, [r3, #0]
 8012ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	441a      	add	r2, r3
 8012eb6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012ec2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8012ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8012ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	6a1a      	ldr	r2, [r3, #32]
 8012eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ede:	1ad2      	subs	r2, r2, r3
 8012ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ef0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	781b      	ldrb	r3, [r3, #0]
 8012f02:	009b      	lsls	r3, r3, #2
 8012f04:	4413      	add	r3, r2
 8012f06:	881b      	ldrh	r3, [r3, #0]
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	f000 81b3 	beq.w	801327a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8012f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	785b      	ldrb	r3, [r3, #1]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d16d      	bne.n	801300c <USB_EPStartXfer+0x2ba>
 8012f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f4a:	b29b      	uxth	r3, r3
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f50:	4413      	add	r3, r2
 8012f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	00da      	lsls	r2, r3, #3
 8012f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f64:	4413      	add	r3, r2
 8012f66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8012f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f70:	2b3e      	cmp	r3, #62	; 0x3e
 8012f72:	d91c      	bls.n	8012fae <USB_EPStartXfer+0x25c>
 8012f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f78:	095b      	lsrs	r3, r3, #5
 8012f7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f82:	f003 031f 	and.w	r3, r3, #31
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d104      	bne.n	8012f94 <USB_EPStartXfer+0x242>
 8012f8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012f8e:	3b01      	subs	r3, #1
 8012f90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012f94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	029b      	lsls	r3, r3, #10
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012fa6:	b29a      	uxth	r2, r3
 8012fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012faa:	801a      	strh	r2, [r3, #0]
 8012fac:	e053      	b.n	8013056 <USB_EPStartXfer+0x304>
 8012fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d112      	bne.n	8012fdc <USB_EPStartXfer+0x28a>
 8012fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb8:	881b      	ldrh	r3, [r3, #0]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012fc0:	b29a      	uxth	r2, r3
 8012fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc4:	801a      	strh	r2, [r3, #0]
 8012fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc8:	881b      	ldrh	r3, [r3, #0]
 8012fca:	b29b      	uxth	r3, r3
 8012fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012fd4:	b29a      	uxth	r2, r3
 8012fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd8:	801a      	strh	r2, [r3, #0]
 8012fda:	e03c      	b.n	8013056 <USB_EPStartXfer+0x304>
 8012fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fe0:	085b      	lsrs	r3, r3, #1
 8012fe2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012fea:	f003 0301 	and.w	r3, r3, #1
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d004      	beq.n	8012ffc <USB_EPStartXfer+0x2aa>
 8012ff2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012ff6:	3301      	adds	r3, #1
 8012ff8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012ffc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013000:	b29b      	uxth	r3, r3
 8013002:	029b      	lsls	r3, r3, #10
 8013004:	b29a      	uxth	r2, r3
 8013006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013008:	801a      	strh	r2, [r3, #0]
 801300a:	e024      	b.n	8013056 <USB_EPStartXfer+0x304>
 801300c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	785b      	ldrb	r3, [r3, #1]
 8013018:	2b01      	cmp	r3, #1
 801301a:	d11c      	bne.n	8013056 <USB_EPStartXfer+0x304>
 801301c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801302a:	b29b      	uxth	r3, r3
 801302c:	461a      	mov	r2, r3
 801302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013030:	4413      	add	r3, r2
 8013032:	633b      	str	r3, [r7, #48]	; 0x30
 8013034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	00da      	lsls	r2, r3, #3
 8013042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013044:	4413      	add	r3, r2
 8013046:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801304a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801304c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013050:	b29a      	uxth	r2, r3
 8013052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013054:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801305a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	895b      	ldrh	r3, [r3, #10]
 8013062:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801306a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	6959      	ldr	r1, [r3, #20]
 8013072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013076:	b29b      	uxth	r3, r3
 8013078:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801307c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8013080:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013084:	6800      	ldr	r0, [r0, #0]
 8013086:	f001 fad4 	bl	8014632 <USB_WritePMA>
            ep->xfer_buff += len;
 801308a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801308e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	695a      	ldr	r2, [r3, #20]
 8013096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801309a:	441a      	add	r2, r3
 801309c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80130a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	6a1a      	ldr	r2, [r3, #32]
 80130b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	691b      	ldr	r3, [r3, #16]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d90f      	bls.n	80130e4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80130c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	6a1a      	ldr	r2, [r3, #32]
 80130d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80130d4:	1ad2      	subs	r2, r2, r3
 80130d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	621a      	str	r2, [r3, #32]
 80130e2:	e00e      	b.n	8013102 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80130e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	6a1b      	ldr	r3, [r3, #32]
 80130f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80130f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2200      	movs	r2, #0
 8013100:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	785b      	ldrb	r3, [r3, #1]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d16d      	bne.n	80131ee <USB_EPStartXfer+0x49c>
 8013112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	61bb      	str	r3, [r7, #24]
 801311e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801312c:	b29b      	uxth	r3, r3
 801312e:	461a      	mov	r2, r3
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	4413      	add	r3, r2
 8013134:	61bb      	str	r3, [r7, #24]
 8013136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801313a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	00da      	lsls	r2, r3, #3
 8013144:	69bb      	ldr	r3, [r7, #24]
 8013146:	4413      	add	r3, r2
 8013148:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801314c:	617b      	str	r3, [r7, #20]
 801314e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013152:	2b3e      	cmp	r3, #62	; 0x3e
 8013154:	d91c      	bls.n	8013190 <USB_EPStartXfer+0x43e>
 8013156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801315a:	095b      	lsrs	r3, r3, #5
 801315c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013164:	f003 031f 	and.w	r3, r3, #31
 8013168:	2b00      	cmp	r3, #0
 801316a:	d104      	bne.n	8013176 <USB_EPStartXfer+0x424>
 801316c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013170:	3b01      	subs	r3, #1
 8013172:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801317a:	b29b      	uxth	r3, r3
 801317c:	029b      	lsls	r3, r3, #10
 801317e:	b29b      	uxth	r3, r3
 8013180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013188:	b29a      	uxth	r2, r3
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	801a      	strh	r2, [r3, #0]
 801318e:	e059      	b.n	8013244 <USB_EPStartXfer+0x4f2>
 8013190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013194:	2b00      	cmp	r3, #0
 8013196:	d112      	bne.n	80131be <USB_EPStartXfer+0x46c>
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	881b      	ldrh	r3, [r3, #0]
 801319c:	b29b      	uxth	r3, r3
 801319e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80131a2:	b29a      	uxth	r2, r3
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	801a      	strh	r2, [r3, #0]
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	881b      	ldrh	r3, [r3, #0]
 80131ac:	b29b      	uxth	r3, r3
 80131ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80131b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80131b6:	b29a      	uxth	r2, r3
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	801a      	strh	r2, [r3, #0]
 80131bc:	e042      	b.n	8013244 <USB_EPStartXfer+0x4f2>
 80131be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131c2:	085b      	lsrs	r3, r3, #1
 80131c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80131c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131cc:	f003 0301 	and.w	r3, r3, #1
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d004      	beq.n	80131de <USB_EPStartXfer+0x48c>
 80131d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80131d8:	3301      	adds	r3, #1
 80131da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80131de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	029b      	lsls	r3, r3, #10
 80131e6:	b29a      	uxth	r2, r3
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	801a      	strh	r2, [r3, #0]
 80131ec:	e02a      	b.n	8013244 <USB_EPStartXfer+0x4f2>
 80131ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	785b      	ldrb	r3, [r3, #1]
 80131fa:	2b01      	cmp	r3, #1
 80131fc:	d122      	bne.n	8013244 <USB_EPStartXfer+0x4f2>
 80131fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	623b      	str	r3, [r7, #32]
 801320a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801320e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013218:	b29b      	uxth	r3, r3
 801321a:	461a      	mov	r2, r3
 801321c:	6a3b      	ldr	r3, [r7, #32]
 801321e:	4413      	add	r3, r2
 8013220:	623b      	str	r3, [r7, #32]
 8013222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	00da      	lsls	r2, r3, #3
 8013230:	6a3b      	ldr	r3, [r7, #32]
 8013232:	4413      	add	r3, r2
 8013234:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013238:	61fb      	str	r3, [r7, #28]
 801323a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801323e:	b29a      	uxth	r2, r3
 8013240:	69fb      	ldr	r3, [r7, #28]
 8013242:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	891b      	ldrh	r3, [r3, #8]
 8013250:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	6959      	ldr	r1, [r3, #20]
 8013260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013264:	b29b      	uxth	r3, r3
 8013266:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801326a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801326e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013272:	6800      	ldr	r0, [r0, #0]
 8013274:	f001 f9dd 	bl	8014632 <USB_WritePMA>
 8013278:	e3c6      	b.n	8013a08 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801327a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801327e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	785b      	ldrb	r3, [r3, #1]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d16d      	bne.n	8013366 <USB_EPStartXfer+0x614>
 801328a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801328e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	64bb      	str	r3, [r7, #72]	; 0x48
 8013296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801329a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80132a4:	b29b      	uxth	r3, r3
 80132a6:	461a      	mov	r2, r3
 80132a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132aa:	4413      	add	r3, r2
 80132ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80132ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80132b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	00da      	lsls	r2, r3, #3
 80132bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132be:	4413      	add	r3, r2
 80132c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80132c4:	647b      	str	r3, [r7, #68]	; 0x44
 80132c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80132ca:	2b3e      	cmp	r3, #62	; 0x3e
 80132cc:	d91c      	bls.n	8013308 <USB_EPStartXfer+0x5b6>
 80132ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80132d2:	095b      	lsrs	r3, r3, #5
 80132d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80132d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80132dc:	f003 031f 	and.w	r3, r3, #31
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d104      	bne.n	80132ee <USB_EPStartXfer+0x59c>
 80132e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80132e8:	3b01      	subs	r3, #1
 80132ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80132ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80132f2:	b29b      	uxth	r3, r3
 80132f4:	029b      	lsls	r3, r3, #10
 80132f6:	b29b      	uxth	r3, r3
 80132f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80132fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013300:	b29a      	uxth	r2, r3
 8013302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013304:	801a      	strh	r2, [r3, #0]
 8013306:	e059      	b.n	80133bc <USB_EPStartXfer+0x66a>
 8013308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801330c:	2b00      	cmp	r3, #0
 801330e:	d112      	bne.n	8013336 <USB_EPStartXfer+0x5e4>
 8013310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013312:	881b      	ldrh	r3, [r3, #0]
 8013314:	b29b      	uxth	r3, r3
 8013316:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801331a:	b29a      	uxth	r2, r3
 801331c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801331e:	801a      	strh	r2, [r3, #0]
 8013320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013322:	881b      	ldrh	r3, [r3, #0]
 8013324:	b29b      	uxth	r3, r3
 8013326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801332a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801332e:	b29a      	uxth	r2, r3
 8013330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013332:	801a      	strh	r2, [r3, #0]
 8013334:	e042      	b.n	80133bc <USB_EPStartXfer+0x66a>
 8013336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801333a:	085b      	lsrs	r3, r3, #1
 801333c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013344:	f003 0301 	and.w	r3, r3, #1
 8013348:	2b00      	cmp	r3, #0
 801334a:	d004      	beq.n	8013356 <USB_EPStartXfer+0x604>
 801334c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013350:	3301      	adds	r3, #1
 8013352:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013356:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801335a:	b29b      	uxth	r3, r3
 801335c:	029b      	lsls	r3, r3, #10
 801335e:	b29a      	uxth	r2, r3
 8013360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013362:	801a      	strh	r2, [r3, #0]
 8013364:	e02a      	b.n	80133bc <USB_EPStartXfer+0x66a>
 8013366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801336a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	785b      	ldrb	r3, [r3, #1]
 8013372:	2b01      	cmp	r3, #1
 8013374:	d122      	bne.n	80133bc <USB_EPStartXfer+0x66a>
 8013376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801337a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	653b      	str	r3, [r7, #80]	; 0x50
 8013382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013390:	b29b      	uxth	r3, r3
 8013392:	461a      	mov	r2, r3
 8013394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013396:	4413      	add	r3, r2
 8013398:	653b      	str	r3, [r7, #80]	; 0x50
 801339a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801339e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	781b      	ldrb	r3, [r3, #0]
 80133a6:	00da      	lsls	r2, r3, #3
 80133a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133aa:	4413      	add	r3, r2
 80133ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80133b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80133b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80133bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	891b      	ldrh	r3, [r3, #8]
 80133c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80133cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	6959      	ldr	r1, [r3, #20]
 80133d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80133dc:	b29b      	uxth	r3, r3
 80133de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80133e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80133e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80133ea:	6800      	ldr	r0, [r0, #0]
 80133ec:	f001 f921 	bl	8014632 <USB_WritePMA>
            ep->xfer_buff += len;
 80133f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	695a      	ldr	r2, [r3, #20]
 80133fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013400:	441a      	add	r2, r3
 8013402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801340e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	6a1a      	ldr	r2, [r3, #32]
 801341a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801341e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	691b      	ldr	r3, [r3, #16]
 8013426:	429a      	cmp	r2, r3
 8013428:	d90f      	bls.n	801344a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 801342a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801342e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	6a1a      	ldr	r2, [r3, #32]
 8013436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801343a:	1ad2      	subs	r2, r2, r3
 801343c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	621a      	str	r2, [r3, #32]
 8013448:	e00e      	b.n	8013468 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 801344a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801344e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	6a1b      	ldr	r3, [r3, #32]
 8013456:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801345a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801345e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	2200      	movs	r2, #0
 8013466:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801346c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	643b      	str	r3, [r7, #64]	; 0x40
 8013474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	785b      	ldrb	r3, [r3, #1]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d16d      	bne.n	8013560 <USB_EPStartXfer+0x80e>
 8013484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013488:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801349e:	b29b      	uxth	r3, r3
 80134a0:	461a      	mov	r2, r3
 80134a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134a4:	4413      	add	r3, r2
 80134a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80134a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	00da      	lsls	r2, r3, #3
 80134b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134b8:	4413      	add	r3, r2
 80134ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80134be:	637b      	str	r3, [r7, #52]	; 0x34
 80134c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80134c4:	2b3e      	cmp	r3, #62	; 0x3e
 80134c6:	d91c      	bls.n	8013502 <USB_EPStartXfer+0x7b0>
 80134c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80134cc:	095b      	lsrs	r3, r3, #5
 80134ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80134d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80134d6:	f003 031f 	and.w	r3, r3, #31
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d104      	bne.n	80134e8 <USB_EPStartXfer+0x796>
 80134de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80134e2:	3b01      	subs	r3, #1
 80134e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80134e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80134ec:	b29b      	uxth	r3, r3
 80134ee:	029b      	lsls	r3, r3, #10
 80134f0:	b29b      	uxth	r3, r3
 80134f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80134f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80134fa:	b29a      	uxth	r2, r3
 80134fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134fe:	801a      	strh	r2, [r3, #0]
 8013500:	e053      	b.n	80135aa <USB_EPStartXfer+0x858>
 8013502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013506:	2b00      	cmp	r3, #0
 8013508:	d112      	bne.n	8013530 <USB_EPStartXfer+0x7de>
 801350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801350c:	881b      	ldrh	r3, [r3, #0]
 801350e:	b29b      	uxth	r3, r3
 8013510:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013514:	b29a      	uxth	r2, r3
 8013516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013518:	801a      	strh	r2, [r3, #0]
 801351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801351c:	881b      	ldrh	r3, [r3, #0]
 801351e:	b29b      	uxth	r3, r3
 8013520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013528:	b29a      	uxth	r2, r3
 801352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801352c:	801a      	strh	r2, [r3, #0]
 801352e:	e03c      	b.n	80135aa <USB_EPStartXfer+0x858>
 8013530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013534:	085b      	lsrs	r3, r3, #1
 8013536:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801353a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801353e:	f003 0301 	and.w	r3, r3, #1
 8013542:	2b00      	cmp	r3, #0
 8013544:	d004      	beq.n	8013550 <USB_EPStartXfer+0x7fe>
 8013546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801354a:	3301      	adds	r3, #1
 801354c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013554:	b29b      	uxth	r3, r3
 8013556:	029b      	lsls	r3, r3, #10
 8013558:	b29a      	uxth	r2, r3
 801355a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801355c:	801a      	strh	r2, [r3, #0]
 801355e:	e024      	b.n	80135aa <USB_EPStartXfer+0x858>
 8013560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	785b      	ldrb	r3, [r3, #1]
 801356c:	2b01      	cmp	r3, #1
 801356e:	d11c      	bne.n	80135aa <USB_EPStartXfer+0x858>
 8013570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801357e:	b29b      	uxth	r3, r3
 8013580:	461a      	mov	r2, r3
 8013582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013584:	4413      	add	r3, r2
 8013586:	643b      	str	r3, [r7, #64]	; 0x40
 8013588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801358c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	781b      	ldrb	r3, [r3, #0]
 8013594:	00da      	lsls	r2, r3, #3
 8013596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013598:	4413      	add	r3, r2
 801359a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801359e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80135a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80135aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	895b      	ldrh	r3, [r3, #10]
 80135b6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80135ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	6959      	ldr	r1, [r3, #20]
 80135c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80135d0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80135d4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80135d8:	6800      	ldr	r0, [r0, #0]
 80135da:	f001 f82a 	bl	8014632 <USB_WritePMA>
 80135de:	e213      	b.n	8013a08 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80135e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	6a1b      	ldr	r3, [r3, #32]
 80135ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80135f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80135f8:	681a      	ldr	r2, [r3, #0]
 80135fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80135fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	009b      	lsls	r3, r3, #2
 8013608:	4413      	add	r3, r2
 801360a:	881b      	ldrh	r3, [r3, #0]
 801360c:	b29b      	uxth	r3, r3
 801360e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8013612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013616:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801361a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801361e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013622:	681a      	ldr	r2, [r3, #0]
 8013624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	009b      	lsls	r3, r3, #2
 8013632:	441a      	add	r2, r3
 8013634:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801363c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013648:	b29b      	uxth	r3, r3
 801364a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801364c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801365c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013666:	b29b      	uxth	r3, r3
 8013668:	461a      	mov	r2, r3
 801366a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801366c:	4413      	add	r3, r2
 801366e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	00da      	lsls	r2, r3, #3
 801367e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013680:	4413      	add	r3, r2
 8013682:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013686:	65bb      	str	r3, [r7, #88]	; 0x58
 8013688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801368c:	b29a      	uxth	r2, r3
 801368e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013690:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	891b      	ldrh	r3, [r3, #8]
 801369e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80136a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	6959      	ldr	r1, [r3, #20]
 80136ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80136b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80136bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80136c0:	6800      	ldr	r0, [r0, #0]
 80136c2:	f000 ffb6 	bl	8014632 <USB_WritePMA>
 80136c6:	e19f      	b.n	8013a08 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80136c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	6a1a      	ldr	r2, [r3, #32]
 80136d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80136d8:	1ad2      	subs	r2, r2, r3
 80136da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80136e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80136ee:	681a      	ldr	r2, [r3, #0]
 80136f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80136f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	009b      	lsls	r3, r3, #2
 80136fe:	4413      	add	r3, r2
 8013700:	881b      	ldrh	r3, [r3, #0]
 8013702:	b29b      	uxth	r3, r3
 8013704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013708:	2b00      	cmp	r3, #0
 801370a:	f000 80bc 	beq.w	8013886 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801370e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013712:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	673b      	str	r3, [r7, #112]	; 0x70
 801371a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801371e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	785b      	ldrb	r3, [r3, #1]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d16d      	bne.n	8013806 <USB_EPStartXfer+0xab4>
 801372a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801372e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	66bb      	str	r3, [r7, #104]	; 0x68
 8013736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801373a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013744:	b29b      	uxth	r3, r3
 8013746:	461a      	mov	r2, r3
 8013748:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801374a:	4413      	add	r3, r2
 801374c:	66bb      	str	r3, [r7, #104]	; 0x68
 801374e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	00da      	lsls	r2, r3, #3
 801375c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801375e:	4413      	add	r3, r2
 8013760:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013764:	667b      	str	r3, [r7, #100]	; 0x64
 8013766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801376a:	2b3e      	cmp	r3, #62	; 0x3e
 801376c:	d91c      	bls.n	80137a8 <USB_EPStartXfer+0xa56>
 801376e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013772:	095b      	lsrs	r3, r3, #5
 8013774:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8013778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801377c:	f003 031f 	and.w	r3, r3, #31
 8013780:	2b00      	cmp	r3, #0
 8013782:	d104      	bne.n	801378e <USB_EPStartXfer+0xa3c>
 8013784:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013788:	3b01      	subs	r3, #1
 801378a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801378e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013792:	b29b      	uxth	r3, r3
 8013794:	029b      	lsls	r3, r3, #10
 8013796:	b29b      	uxth	r3, r3
 8013798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801379c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80137a0:	b29a      	uxth	r2, r3
 80137a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137a4:	801a      	strh	r2, [r3, #0]
 80137a6:	e053      	b.n	8013850 <USB_EPStartXfer+0xafe>
 80137a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d112      	bne.n	80137d6 <USB_EPStartXfer+0xa84>
 80137b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137b2:	881b      	ldrh	r3, [r3, #0]
 80137b4:	b29b      	uxth	r3, r3
 80137b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80137ba:	b29a      	uxth	r2, r3
 80137bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137be:	801a      	strh	r2, [r3, #0]
 80137c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137c2:	881b      	ldrh	r3, [r3, #0]
 80137c4:	b29b      	uxth	r3, r3
 80137c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80137ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80137ce:	b29a      	uxth	r2, r3
 80137d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137d2:	801a      	strh	r2, [r3, #0]
 80137d4:	e03c      	b.n	8013850 <USB_EPStartXfer+0xafe>
 80137d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80137da:	085b      	lsrs	r3, r3, #1
 80137dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80137e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80137e4:	f003 0301 	and.w	r3, r3, #1
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d004      	beq.n	80137f6 <USB_EPStartXfer+0xaa4>
 80137ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80137f0:	3301      	adds	r3, #1
 80137f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80137f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	029b      	lsls	r3, r3, #10
 80137fe:	b29a      	uxth	r2, r3
 8013800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013802:	801a      	strh	r2, [r3, #0]
 8013804:	e024      	b.n	8013850 <USB_EPStartXfer+0xafe>
 8013806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801380a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	785b      	ldrb	r3, [r3, #1]
 8013812:	2b01      	cmp	r3, #1
 8013814:	d11c      	bne.n	8013850 <USB_EPStartXfer+0xafe>
 8013816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801381a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013824:	b29b      	uxth	r3, r3
 8013826:	461a      	mov	r2, r3
 8013828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801382a:	4413      	add	r3, r2
 801382c:	673b      	str	r3, [r7, #112]	; 0x70
 801382e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	00da      	lsls	r2, r3, #3
 801383c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801383e:	4413      	add	r3, r2
 8013840:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013844:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801384a:	b29a      	uxth	r2, r3
 801384c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801384e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8013850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	895b      	ldrh	r3, [r3, #10]
 801385c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	6959      	ldr	r1, [r3, #20]
 801386c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013870:	b29b      	uxth	r3, r3
 8013872:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013876:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801387a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801387e:	6800      	ldr	r0, [r0, #0]
 8013880:	f000 fed7 	bl	8014632 <USB_WritePMA>
 8013884:	e0c0      	b.n	8013a08 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801388a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	785b      	ldrb	r3, [r3, #1]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d16d      	bne.n	8013972 <USB_EPStartXfer+0xc20>
 8013896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801389a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80138a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	461a      	mov	r2, r3
 80138b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80138b6:	4413      	add	r3, r2
 80138b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80138ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80138be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	00da      	lsls	r2, r3, #3
 80138c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80138ca:	4413      	add	r3, r2
 80138cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80138d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80138d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80138d6:	2b3e      	cmp	r3, #62	; 0x3e
 80138d8:	d91c      	bls.n	8013914 <USB_EPStartXfer+0xbc2>
 80138da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80138de:	095b      	lsrs	r3, r3, #5
 80138e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80138e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80138e8:	f003 031f 	and.w	r3, r3, #31
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d104      	bne.n	80138fa <USB_EPStartXfer+0xba8>
 80138f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80138f4:	3b01      	subs	r3, #1
 80138f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80138fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80138fe:	b29b      	uxth	r3, r3
 8013900:	029b      	lsls	r3, r3, #10
 8013902:	b29b      	uxth	r3, r3
 8013904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801390c:	b29a      	uxth	r2, r3
 801390e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013910:	801a      	strh	r2, [r3, #0]
 8013912:	e05f      	b.n	80139d4 <USB_EPStartXfer+0xc82>
 8013914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013918:	2b00      	cmp	r3, #0
 801391a:	d112      	bne.n	8013942 <USB_EPStartXfer+0xbf0>
 801391c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801391e:	881b      	ldrh	r3, [r3, #0]
 8013920:	b29b      	uxth	r3, r3
 8013922:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013926:	b29a      	uxth	r2, r3
 8013928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801392a:	801a      	strh	r2, [r3, #0]
 801392c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801392e:	881b      	ldrh	r3, [r3, #0]
 8013930:	b29b      	uxth	r3, r3
 8013932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801393a:	b29a      	uxth	r2, r3
 801393c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801393e:	801a      	strh	r2, [r3, #0]
 8013940:	e048      	b.n	80139d4 <USB_EPStartXfer+0xc82>
 8013942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013946:	085b      	lsrs	r3, r3, #1
 8013948:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013950:	f003 0301 	and.w	r3, r3, #1
 8013954:	2b00      	cmp	r3, #0
 8013956:	d004      	beq.n	8013962 <USB_EPStartXfer+0xc10>
 8013958:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801395c:	3301      	adds	r3, #1
 801395e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8013966:	b29b      	uxth	r3, r3
 8013968:	029b      	lsls	r3, r3, #10
 801396a:	b29a      	uxth	r2, r3
 801396c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801396e:	801a      	strh	r2, [r3, #0]
 8013970:	e030      	b.n	80139d4 <USB_EPStartXfer+0xc82>
 8013972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	785b      	ldrb	r3, [r3, #1]
 801397e:	2b01      	cmp	r3, #1
 8013980:	d128      	bne.n	80139d4 <USB_EPStartXfer+0xc82>
 8013982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801399e:	b29b      	uxth	r3, r3
 80139a0:	461a      	mov	r2, r3
 80139a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80139a6:	4413      	add	r3, r2
 80139a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80139ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	00da      	lsls	r2, r3, #3
 80139ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80139be:	4413      	add	r3, r2
 80139c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80139c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80139c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80139cc:	b29a      	uxth	r2, r3
 80139ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80139d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80139d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	891b      	ldrh	r3, [r3, #8]
 80139e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80139e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80139e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	6959      	ldr	r1, [r3, #20]
 80139f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80139fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80139fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8013a02:	6800      	ldr	r0, [r0, #0]
 8013a04:	f000 fe15 	bl	8014632 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8013a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013a10:	681a      	ldr	r2, [r3, #0]
 8013a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	009b      	lsls	r3, r3, #2
 8013a20:	4413      	add	r3, r2
 8013a22:	881b      	ldrh	r3, [r3, #0]
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a2e:	817b      	strh	r3, [r7, #10]
 8013a30:	897b      	ldrh	r3, [r7, #10]
 8013a32:	f083 0310 	eor.w	r3, r3, #16
 8013a36:	817b      	strh	r3, [r7, #10]
 8013a38:	897b      	ldrh	r3, [r7, #10]
 8013a3a:	f083 0320 	eor.w	r3, r3, #32
 8013a3e:	817b      	strh	r3, [r7, #10]
 8013a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	009b      	lsls	r3, r3, #2
 8013a58:	441a      	add	r2, r3
 8013a5a:	897b      	ldrh	r3, [r7, #10]
 8013a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	8013      	strh	r3, [r2, #0]
 8013a70:	f000 bc9f 	b.w	80143b2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8013a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	7b1b      	ldrb	r3, [r3, #12]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f040 80ae 	bne.w	8013be2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8013a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	699a      	ldr	r2, [r3, #24]
 8013a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	691b      	ldr	r3, [r3, #16]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d917      	bls.n	8013ad2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8013aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	691b      	ldr	r3, [r3, #16]
 8013aae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8013ab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	699a      	ldr	r2, [r3, #24]
 8013abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013ac2:	1ad2      	subs	r2, r2, r3
 8013ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	619a      	str	r2, [r3, #24]
 8013ad0:	e00e      	b.n	8013af0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8013ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	699b      	ldr	r3, [r3, #24]
 8013ade:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8013ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	2200      	movs	r2, #0
 8013aee:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8013af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013af4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013b0c:	b29b      	uxth	r3, r3
 8013b0e:	461a      	mov	r2, r3
 8013b10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b14:	4413      	add	r3, r2
 8013b16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	00da      	lsls	r2, r3, #3
 8013b28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013b2c:	4413      	add	r3, r2
 8013b2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013b32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8013b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b3a:	2b3e      	cmp	r3, #62	; 0x3e
 8013b3c:	d91d      	bls.n	8013b7a <USB_EPStartXfer+0xe28>
 8013b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b42:	095b      	lsrs	r3, r3, #5
 8013b44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b4c:	f003 031f 	and.w	r3, r3, #31
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d104      	bne.n	8013b5e <USB_EPStartXfer+0xe0c>
 8013b54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013b58:	3b01      	subs	r3, #1
 8013b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013b5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013b62:	b29b      	uxth	r3, r3
 8013b64:	029b      	lsls	r3, r3, #10
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b76:	801a      	strh	r2, [r3, #0]
 8013b78:	e3e1      	b.n	801433e <USB_EPStartXfer+0x15ec>
 8013b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d116      	bne.n	8013bb0 <USB_EPStartXfer+0xe5e>
 8013b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b86:	881b      	ldrh	r3, [r3, #0]
 8013b88:	b29b      	uxth	r3, r3
 8013b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013b8e:	b29a      	uxth	r2, r3
 8013b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b94:	801a      	strh	r2, [r3, #0]
 8013b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013b9a:	881b      	ldrh	r3, [r3, #0]
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013bac:	801a      	strh	r2, [r3, #0]
 8013bae:	e3c6      	b.n	801433e <USB_EPStartXfer+0x15ec>
 8013bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013bb4:	085b      	lsrs	r3, r3, #1
 8013bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013bbe:	f003 0301 	and.w	r3, r3, #1
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d004      	beq.n	8013bd0 <USB_EPStartXfer+0xe7e>
 8013bc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013bca:	3301      	adds	r3, #1
 8013bcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013bd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	029b      	lsls	r3, r3, #10
 8013bd8:	b29a      	uxth	r2, r3
 8013bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013bde:	801a      	strh	r2, [r3, #0]
 8013be0:	e3ad      	b.n	801433e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8013be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	78db      	ldrb	r3, [r3, #3]
 8013bee:	2b02      	cmp	r3, #2
 8013bf0:	f040 8200 	bne.w	8013ff4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8013bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	785b      	ldrb	r3, [r3, #1]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	f040 8091 	bne.w	8013d28 <USB_EPStartXfer+0xfd6>
 8013c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013c22:	b29b      	uxth	r3, r3
 8013c24:	461a      	mov	r2, r3
 8013c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013c2a:	4413      	add	r3, r2
 8013c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	00da      	lsls	r2, r3, #3
 8013c3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013c42:	4413      	add	r3, r2
 8013c44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013c48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	691b      	ldr	r3, [r3, #16]
 8013c58:	2b3e      	cmp	r3, #62	; 0x3e
 8013c5a:	d925      	bls.n	8013ca8 <USB_EPStartXfer+0xf56>
 8013c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	691b      	ldr	r3, [r3, #16]
 8013c68:	095b      	lsrs	r3, r3, #5
 8013c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013c6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013c72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	691b      	ldr	r3, [r3, #16]
 8013c7a:	f003 031f 	and.w	r3, r3, #31
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d104      	bne.n	8013c8c <USB_EPStartXfer+0xf3a>
 8013c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c86:	3b01      	subs	r3, #1
 8013c88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	029b      	lsls	r3, r3, #10
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013c9e:	b29a      	uxth	r2, r3
 8013ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013ca4:	801a      	strh	r2, [r3, #0]
 8013ca6:	e074      	b.n	8013d92 <USB_EPStartXfer+0x1040>
 8013ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	691b      	ldr	r3, [r3, #16]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d116      	bne.n	8013ce6 <USB_EPStartXfer+0xf94>
 8013cb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013cbc:	881b      	ldrh	r3, [r3, #0]
 8013cbe:	b29b      	uxth	r3, r3
 8013cc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013cca:	801a      	strh	r2, [r3, #0]
 8013ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013cd0:	881b      	ldrh	r3, [r3, #0]
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013cdc:	b29a      	uxth	r2, r3
 8013cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013ce2:	801a      	strh	r2, [r3, #0]
 8013ce4:	e055      	b.n	8013d92 <USB_EPStartXfer+0x1040>
 8013ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	691b      	ldr	r3, [r3, #16]
 8013cf2:	085b      	lsrs	r3, r3, #1
 8013cf4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	691b      	ldr	r3, [r3, #16]
 8013d04:	f003 0301 	and.w	r3, r3, #1
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d004      	beq.n	8013d16 <USB_EPStartXfer+0xfc4>
 8013d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d10:	3301      	adds	r3, #1
 8013d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	029b      	lsls	r3, r3, #10
 8013d1e:	b29a      	uxth	r2, r3
 8013d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8013d24:	801a      	strh	r2, [r3, #0]
 8013d26:	e034      	b.n	8013d92 <USB_EPStartXfer+0x1040>
 8013d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	785b      	ldrb	r3, [r3, #1]
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d12c      	bne.n	8013d92 <USB_EPStartXfer+0x1040>
 8013d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013d54:	b29b      	uxth	r3, r3
 8013d56:	461a      	mov	r2, r3
 8013d58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013d5c:	4413      	add	r3, r2
 8013d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	00da      	lsls	r2, r3, #3
 8013d70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8013d74:	4413      	add	r3, r2
 8013d76:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	691b      	ldr	r3, [r3, #16]
 8013d8a:	b29a      	uxth	r2, r3
 8013d8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013d90:	801a      	strh	r2, [r3, #0]
 8013d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	785b      	ldrb	r3, [r3, #1]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	f040 8091 	bne.w	8013ed4 <USB_EPStartXfer+0x1182>
 8013db2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013db6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013dc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013dd6:	4413      	add	r3, r2
 8013dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	781b      	ldrb	r3, [r3, #0]
 8013de8:	00da      	lsls	r2, r3, #3
 8013dea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013dee:	4413      	add	r3, r2
 8013df0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	691b      	ldr	r3, [r3, #16]
 8013e04:	2b3e      	cmp	r3, #62	; 0x3e
 8013e06:	d925      	bls.n	8013e54 <USB_EPStartXfer+0x1102>
 8013e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	691b      	ldr	r3, [r3, #16]
 8013e14:	095b      	lsrs	r3, r3, #5
 8013e16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	691b      	ldr	r3, [r3, #16]
 8013e26:	f003 031f 	and.w	r3, r3, #31
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d104      	bne.n	8013e38 <USB_EPStartXfer+0x10e6>
 8013e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013e32:	3b01      	subs	r3, #1
 8013e34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	029b      	lsls	r3, r3, #10
 8013e40:	b29b      	uxth	r3, r3
 8013e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013e4a:	b29a      	uxth	r2, r3
 8013e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e50:	801a      	strh	r2, [r3, #0]
 8013e52:	e06d      	b.n	8013f30 <USB_EPStartXfer+0x11de>
 8013e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	691b      	ldr	r3, [r3, #16]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d116      	bne.n	8013e92 <USB_EPStartXfer+0x1140>
 8013e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e68:	881b      	ldrh	r3, [r3, #0]
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013e70:	b29a      	uxth	r2, r3
 8013e72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e76:	801a      	strh	r2, [r3, #0]
 8013e78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e7c:	881b      	ldrh	r3, [r3, #0]
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e8e:	801a      	strh	r2, [r3, #0]
 8013e90:	e04e      	b.n	8013f30 <USB_EPStartXfer+0x11de>
 8013e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	691b      	ldr	r3, [r3, #16]
 8013e9e:	085b      	lsrs	r3, r3, #1
 8013ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ea8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	691b      	ldr	r3, [r3, #16]
 8013eb0:	f003 0301 	and.w	r3, r3, #1
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d004      	beq.n	8013ec2 <USB_EPStartXfer+0x1170>
 8013eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013ebc:	3301      	adds	r3, #1
 8013ebe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	029b      	lsls	r3, r3, #10
 8013eca:	b29a      	uxth	r2, r3
 8013ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013ed0:	801a      	strh	r2, [r3, #0]
 8013ed2:	e02d      	b.n	8013f30 <USB_EPStartXfer+0x11de>
 8013ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	785b      	ldrb	r3, [r3, #1]
 8013ee0:	2b01      	cmp	r3, #1
 8013ee2:	d125      	bne.n	8013f30 <USB_EPStartXfer+0x11de>
 8013ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013efa:	4413      	add	r3, r2
 8013efc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	00da      	lsls	r2, r3, #3
 8013f0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013f12:	4413      	add	r3, r2
 8013f14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013f18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	691b      	ldr	r3, [r3, #16]
 8013f28:	b29a      	uxth	r2, r3
 8013f2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013f2e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8013f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	69db      	ldr	r3, [r3, #28]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	f000 81fe 	beq.w	801433e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8013f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013f4a:	681a      	ldr	r2, [r3, #0]
 8013f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	781b      	ldrb	r3, [r3, #0]
 8013f58:	009b      	lsls	r3, r3, #2
 8013f5a:	4413      	add	r3, r2
 8013f5c:	881b      	ldrh	r3, [r3, #0]
 8013f5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013f62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8013f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d005      	beq.n	8013f7a <USB_EPStartXfer+0x1228>
 8013f6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8013f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d10d      	bne.n	8013f96 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013f7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8013f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	f040 81db 	bne.w	801433e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013f88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8013f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	f040 81d4 	bne.w	801433e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8013f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013f9e:	681a      	ldr	r2, [r3, #0]
 8013fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	009b      	lsls	r3, r3, #2
 8013fae:	4413      	add	r3, r2
 8013fb0:	881b      	ldrh	r3, [r3, #0]
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013fbc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8013fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013fc8:	681a      	ldr	r2, [r3, #0]
 8013fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	781b      	ldrb	r3, [r3, #0]
 8013fd6:	009b      	lsls	r3, r3, #2
 8013fd8:	441a      	add	r2, r3
 8013fda:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8013fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013fea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013fee:	b29b      	uxth	r3, r3
 8013ff0:	8013      	strh	r3, [r2, #0]
 8013ff2:	e1a4      	b.n	801433e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8013ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	78db      	ldrb	r3, [r3, #3]
 8014000:	2b01      	cmp	r3, #1
 8014002:	f040 819a 	bne.w	801433a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801400a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	699a      	ldr	r2, [r3, #24]
 8014012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	691b      	ldr	r3, [r3, #16]
 801401e:	429a      	cmp	r2, r3
 8014020:	d917      	bls.n	8014052 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8014022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	691b      	ldr	r3, [r3, #16]
 801402e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8014032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	699a      	ldr	r2, [r3, #24]
 801403e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014042:	1ad2      	subs	r2, r2, r3
 8014044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	619a      	str	r2, [r3, #24]
 8014050:	e00e      	b.n	8014070 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8014052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	699b      	ldr	r3, [r3, #24]
 801405e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8014062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	2200      	movs	r2, #0
 801406e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	785b      	ldrb	r3, [r3, #1]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d178      	bne.n	8014172 <USB_EPStartXfer+0x1420>
 8014080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801408e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801409c:	b29b      	uxth	r3, r3
 801409e:	461a      	mov	r2, r3
 80140a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80140a4:	4413      	add	r3, r2
 80140a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80140aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80140ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	781b      	ldrb	r3, [r3, #0]
 80140b6:	00da      	lsls	r2, r3, #3
 80140b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80140bc:	4413      	add	r3, r2
 80140be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80140c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80140c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80140ca:	2b3e      	cmp	r3, #62	; 0x3e
 80140cc:	d91d      	bls.n	801410a <USB_EPStartXfer+0x13b8>
 80140ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80140d2:	095b      	lsrs	r3, r3, #5
 80140d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80140d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80140dc:	f003 031f 	and.w	r3, r3, #31
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d104      	bne.n	80140ee <USB_EPStartXfer+0x139c>
 80140e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80140e8:	3b01      	subs	r3, #1
 80140ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80140ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	029b      	lsls	r3, r3, #10
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80140fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014100:	b29a      	uxth	r2, r3
 8014102:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014106:	801a      	strh	r2, [r3, #0]
 8014108:	e064      	b.n	80141d4 <USB_EPStartXfer+0x1482>
 801410a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801410e:	2b00      	cmp	r3, #0
 8014110:	d116      	bne.n	8014140 <USB_EPStartXfer+0x13ee>
 8014112:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014116:	881b      	ldrh	r3, [r3, #0]
 8014118:	b29b      	uxth	r3, r3
 801411a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801411e:	b29a      	uxth	r2, r3
 8014120:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014124:	801a      	strh	r2, [r3, #0]
 8014126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801412a:	881b      	ldrh	r3, [r3, #0]
 801412c:	b29b      	uxth	r3, r3
 801412e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014136:	b29a      	uxth	r2, r3
 8014138:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801413c:	801a      	strh	r2, [r3, #0]
 801413e:	e049      	b.n	80141d4 <USB_EPStartXfer+0x1482>
 8014140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014144:	085b      	lsrs	r3, r3, #1
 8014146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801414a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801414e:	f003 0301 	and.w	r3, r3, #1
 8014152:	2b00      	cmp	r3, #0
 8014154:	d004      	beq.n	8014160 <USB_EPStartXfer+0x140e>
 8014156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801415a:	3301      	adds	r3, #1
 801415c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014164:	b29b      	uxth	r3, r3
 8014166:	029b      	lsls	r3, r3, #10
 8014168:	b29a      	uxth	r2, r3
 801416a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801416e:	801a      	strh	r2, [r3, #0]
 8014170:	e030      	b.n	80141d4 <USB_EPStartXfer+0x1482>
 8014172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014176:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	785b      	ldrb	r3, [r3, #1]
 801417e:	2b01      	cmp	r3, #1
 8014180:	d128      	bne.n	80141d4 <USB_EPStartXfer+0x1482>
 8014182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014186:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801419e:	b29b      	uxth	r3, r3
 80141a0:	461a      	mov	r2, r3
 80141a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80141a6:	4413      	add	r3, r2
 80141a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80141ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	00da      	lsls	r2, r3, #3
 80141ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80141be:	4413      	add	r3, r2
 80141c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80141c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80141c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80141cc:	b29a      	uxth	r2, r3
 80141ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80141d2:	801a      	strh	r2, [r3, #0]
 80141d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80141e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	785b      	ldrb	r3, [r3, #1]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d178      	bne.n	80142e4 <USB_EPStartXfer+0x1592>
 80141f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80141f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801420e:	b29b      	uxth	r3, r3
 8014210:	461a      	mov	r2, r3
 8014212:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014216:	4413      	add	r3, r2
 8014218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801421c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	00da      	lsls	r2, r3, #3
 801422a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801422e:	4413      	add	r3, r2
 8014230:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014234:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801423c:	2b3e      	cmp	r3, #62	; 0x3e
 801423e:	d91d      	bls.n	801427c <USB_EPStartXfer+0x152a>
 8014240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014244:	095b      	lsrs	r3, r3, #5
 8014246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801424a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801424e:	f003 031f 	and.w	r3, r3, #31
 8014252:	2b00      	cmp	r3, #0
 8014254:	d104      	bne.n	8014260 <USB_EPStartXfer+0x150e>
 8014256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801425a:	3b01      	subs	r3, #1
 801425c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014264:	b29b      	uxth	r3, r3
 8014266:	029b      	lsls	r3, r3, #10
 8014268:	b29b      	uxth	r3, r3
 801426a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801426e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014272:	b29a      	uxth	r2, r3
 8014274:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014278:	801a      	strh	r2, [r3, #0]
 801427a:	e060      	b.n	801433e <USB_EPStartXfer+0x15ec>
 801427c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014280:	2b00      	cmp	r3, #0
 8014282:	d116      	bne.n	80142b2 <USB_EPStartXfer+0x1560>
 8014284:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014288:	881b      	ldrh	r3, [r3, #0]
 801428a:	b29b      	uxth	r3, r3
 801428c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8014290:	b29a      	uxth	r2, r3
 8014292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014296:	801a      	strh	r2, [r3, #0]
 8014298:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801429c:	881b      	ldrh	r3, [r3, #0]
 801429e:	b29b      	uxth	r3, r3
 80142a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80142a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80142ae:	801a      	strh	r2, [r3, #0]
 80142b0:	e045      	b.n	801433e <USB_EPStartXfer+0x15ec>
 80142b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80142b6:	085b      	lsrs	r3, r3, #1
 80142b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80142bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80142c0:	f003 0301 	and.w	r3, r3, #1
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d004      	beq.n	80142d2 <USB_EPStartXfer+0x1580>
 80142c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80142cc:	3301      	adds	r3, #1
 80142ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80142d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	029b      	lsls	r3, r3, #10
 80142da:	b29a      	uxth	r2, r3
 80142dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80142e0:	801a      	strh	r2, [r3, #0]
 80142e2:	e02c      	b.n	801433e <USB_EPStartXfer+0x15ec>
 80142e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	785b      	ldrb	r3, [r3, #1]
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	d124      	bne.n	801433e <USB_EPStartXfer+0x15ec>
 80142f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80142f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014302:	b29b      	uxth	r3, r3
 8014304:	461a      	mov	r2, r3
 8014306:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801430a:	4413      	add	r3, r2
 801430c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	00da      	lsls	r2, r3, #3
 801431e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014322:	4413      	add	r3, r2
 8014324:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014328:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801432c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014330:	b29a      	uxth	r2, r3
 8014332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014336:	801a      	strh	r2, [r3, #0]
 8014338:	e001      	b.n	801433e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 801433a:	2301      	movs	r3, #1
 801433c:	e03a      	b.n	80143b4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801433e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014346:	681a      	ldr	r2, [r3, #0]
 8014348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801434c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	009b      	lsls	r3, r3, #2
 8014356:	4413      	add	r3, r2
 8014358:	881b      	ldrh	r3, [r3, #0]
 801435a:	b29b      	uxth	r3, r3
 801435c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014364:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014368:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801436c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014370:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014374:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014378:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801437c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8014388:	681a      	ldr	r2, [r3, #0]
 801438a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801438e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	009b      	lsls	r3, r3, #2
 8014398:	441a      	add	r2, r3
 801439a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801439e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80143a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80143a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80143aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143ae:	b29b      	uxth	r3, r3
 80143b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80143b2:	2300      	movs	r3, #0
}
 80143b4:	4618      	mov	r0, r3
 80143b6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}

080143be <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80143be:	b480      	push	{r7}
 80143c0:	b085      	sub	sp, #20
 80143c2:	af00      	add	r7, sp, #0
 80143c4:	6078      	str	r0, [r7, #4]
 80143c6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	785b      	ldrb	r3, [r3, #1]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d020      	beq.n	8014412 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	009b      	lsls	r3, r3, #2
 80143d8:	4413      	add	r3, r2
 80143da:	881b      	ldrh	r3, [r3, #0]
 80143dc:	b29b      	uxth	r3, r3
 80143de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80143e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80143e6:	81bb      	strh	r3, [r7, #12]
 80143e8:	89bb      	ldrh	r3, [r7, #12]
 80143ea:	f083 0310 	eor.w	r3, r3, #16
 80143ee:	81bb      	strh	r3, [r7, #12]
 80143f0:	687a      	ldr	r2, [r7, #4]
 80143f2:	683b      	ldr	r3, [r7, #0]
 80143f4:	781b      	ldrb	r3, [r3, #0]
 80143f6:	009b      	lsls	r3, r3, #2
 80143f8:	441a      	add	r2, r3
 80143fa:	89bb      	ldrh	r3, [r7, #12]
 80143fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801440c:	b29b      	uxth	r3, r3
 801440e:	8013      	strh	r3, [r2, #0]
 8014410:	e01f      	b.n	8014452 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	781b      	ldrb	r3, [r3, #0]
 8014418:	009b      	lsls	r3, r3, #2
 801441a:	4413      	add	r3, r2
 801441c:	881b      	ldrh	r3, [r3, #0]
 801441e:	b29b      	uxth	r3, r3
 8014420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014428:	81fb      	strh	r3, [r7, #14]
 801442a:	89fb      	ldrh	r3, [r7, #14]
 801442c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014430:	81fb      	strh	r3, [r7, #14]
 8014432:	687a      	ldr	r2, [r7, #4]
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	441a      	add	r2, r3
 801443c:	89fb      	ldrh	r3, [r7, #14]
 801443e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801444a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801444e:	b29b      	uxth	r3, r3
 8014450:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8014452:	2300      	movs	r3, #0
}
 8014454:	4618      	mov	r0, r3
 8014456:	3714      	adds	r7, #20
 8014458:	46bd      	mov	sp, r7
 801445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445e:	4770      	bx	lr

08014460 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014460:	b480      	push	{r7}
 8014462:	b087      	sub	sp, #28
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
 8014468:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801446a:	683b      	ldr	r3, [r7, #0]
 801446c:	7b1b      	ldrb	r3, [r3, #12]
 801446e:	2b00      	cmp	r3, #0
 8014470:	f040 809d 	bne.w	80145ae <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	785b      	ldrb	r3, [r3, #1]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d04c      	beq.n	8014516 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801447c:	687a      	ldr	r2, [r7, #4]
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	781b      	ldrb	r3, [r3, #0]
 8014482:	009b      	lsls	r3, r3, #2
 8014484:	4413      	add	r3, r2
 8014486:	881b      	ldrh	r3, [r3, #0]
 8014488:	823b      	strh	r3, [r7, #16]
 801448a:	8a3b      	ldrh	r3, [r7, #16]
 801448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014490:	2b00      	cmp	r3, #0
 8014492:	d01b      	beq.n	80144cc <USB_EPClearStall+0x6c>
 8014494:	687a      	ldr	r2, [r7, #4]
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	009b      	lsls	r3, r3, #2
 801449c:	4413      	add	r3, r2
 801449e:	881b      	ldrh	r3, [r3, #0]
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80144a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80144aa:	81fb      	strh	r3, [r7, #14]
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	441a      	add	r2, r3
 80144b6:	89fb      	ldrh	r3, [r7, #14]
 80144b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80144bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80144c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80144c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80144c8:	b29b      	uxth	r3, r3
 80144ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	78db      	ldrb	r3, [r3, #3]
 80144d0:	2b01      	cmp	r3, #1
 80144d2:	d06c      	beq.n	80145ae <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80144d4:	687a      	ldr	r2, [r7, #4]
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	781b      	ldrb	r3, [r3, #0]
 80144da:	009b      	lsls	r3, r3, #2
 80144dc:	4413      	add	r3, r2
 80144de:	881b      	ldrh	r3, [r3, #0]
 80144e0:	b29b      	uxth	r3, r3
 80144e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80144e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80144ea:	81bb      	strh	r3, [r7, #12]
 80144ec:	89bb      	ldrh	r3, [r7, #12]
 80144ee:	f083 0320 	eor.w	r3, r3, #32
 80144f2:	81bb      	strh	r3, [r7, #12]
 80144f4:	687a      	ldr	r2, [r7, #4]
 80144f6:	683b      	ldr	r3, [r7, #0]
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	009b      	lsls	r3, r3, #2
 80144fc:	441a      	add	r2, r3
 80144fe:	89bb      	ldrh	r3, [r7, #12]
 8014500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801450c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014510:	b29b      	uxth	r3, r3
 8014512:	8013      	strh	r3, [r2, #0]
 8014514:	e04b      	b.n	80145ae <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014516:	687a      	ldr	r2, [r7, #4]
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	4413      	add	r3, r2
 8014520:	881b      	ldrh	r3, [r3, #0]
 8014522:	82fb      	strh	r3, [r7, #22]
 8014524:	8afb      	ldrh	r3, [r7, #22]
 8014526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801452a:	2b00      	cmp	r3, #0
 801452c:	d01b      	beq.n	8014566 <USB_EPClearStall+0x106>
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	009b      	lsls	r3, r3, #2
 8014536:	4413      	add	r3, r2
 8014538:	881b      	ldrh	r3, [r3, #0]
 801453a:	b29b      	uxth	r3, r3
 801453c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014544:	82bb      	strh	r3, [r7, #20]
 8014546:	687a      	ldr	r2, [r7, #4]
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	441a      	add	r2, r3
 8014550:	8abb      	ldrh	r3, [r7, #20]
 8014552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801455a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801455e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014562:	b29b      	uxth	r3, r3
 8014564:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014566:	687a      	ldr	r2, [r7, #4]
 8014568:	683b      	ldr	r3, [r7, #0]
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	009b      	lsls	r3, r3, #2
 801456e:	4413      	add	r3, r2
 8014570:	881b      	ldrh	r3, [r3, #0]
 8014572:	b29b      	uxth	r3, r3
 8014574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801457c:	827b      	strh	r3, [r7, #18]
 801457e:	8a7b      	ldrh	r3, [r7, #18]
 8014580:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014584:	827b      	strh	r3, [r7, #18]
 8014586:	8a7b      	ldrh	r3, [r7, #18]
 8014588:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801458c:	827b      	strh	r3, [r7, #18]
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	009b      	lsls	r3, r3, #2
 8014596:	441a      	add	r2, r3
 8014598:	8a7b      	ldrh	r3, [r7, #18]
 801459a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801459e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80145a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80145a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80145ae:	2300      	movs	r3, #0
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	371c      	adds	r7, #28
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr

080145bc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80145bc:	b480      	push	{r7}
 80145be:	b083      	sub	sp, #12
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	460b      	mov	r3, r1
 80145c6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80145c8:	78fb      	ldrb	r3, [r7, #3]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d103      	bne.n	80145d6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2280      	movs	r2, #128	; 0x80
 80145d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80145d6:	2300      	movs	r3, #0
}
 80145d8:	4618      	mov	r0, r3
 80145da:	370c      	adds	r7, #12
 80145dc:	46bd      	mov	sp, r7
 80145de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e2:	4770      	bx	lr

080145e4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80145e4:	b480      	push	{r7}
 80145e6:	b083      	sub	sp, #12
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80145f2:	b29b      	uxth	r3, r3
 80145f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80145f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80145fc:	b29a      	uxth	r2, r3
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8014604:	2300      	movs	r3, #0
}
 8014606:	4618      	mov	r0, r3
 8014608:	370c      	adds	r7, #12
 801460a:	46bd      	mov	sp, r7
 801460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014610:	4770      	bx	lr

08014612 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8014612:	b480      	push	{r7}
 8014614:	b085      	sub	sp, #20
 8014616:	af00      	add	r7, sp, #0
 8014618:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8014620:	b29b      	uxth	r3, r3
 8014622:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8014624:	68fb      	ldr	r3, [r7, #12]
}
 8014626:	4618      	mov	r0, r3
 8014628:	3714      	adds	r7, #20
 801462a:	46bd      	mov	sp, r7
 801462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014630:	4770      	bx	lr

08014632 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014632:	b480      	push	{r7}
 8014634:	b08d      	sub	sp, #52	; 0x34
 8014636:	af00      	add	r7, sp, #0
 8014638:	60f8      	str	r0, [r7, #12]
 801463a:	60b9      	str	r1, [r7, #8]
 801463c:	4611      	mov	r1, r2
 801463e:	461a      	mov	r2, r3
 8014640:	460b      	mov	r3, r1
 8014642:	80fb      	strh	r3, [r7, #6]
 8014644:	4613      	mov	r3, r2
 8014646:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8014648:	88bb      	ldrh	r3, [r7, #4]
 801464a:	3301      	adds	r3, #1
 801464c:	085b      	lsrs	r3, r3, #1
 801464e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014658:	88fa      	ldrh	r2, [r7, #6]
 801465a:	69fb      	ldr	r3, [r7, #28]
 801465c:	4413      	add	r3, r2
 801465e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014662:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8014664:	6a3b      	ldr	r3, [r7, #32]
 8014666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014668:	e01b      	b.n	80146a2 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 801466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8014670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014672:	3301      	adds	r3, #1
 8014674:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8014676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	b29b      	uxth	r3, r3
 801467c:	021b      	lsls	r3, r3, #8
 801467e:	b29b      	uxth	r3, r3
 8014680:	461a      	mov	r2, r3
 8014682:	69bb      	ldr	r3, [r7, #24]
 8014684:	4313      	orrs	r3, r2
 8014686:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	b29a      	uxth	r2, r3
 801468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801468e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8014690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014692:	3302      	adds	r3, #2
 8014694:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8014696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014698:	3301      	adds	r3, #1
 801469a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 801469c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801469e:	3b01      	subs	r3, #1
 80146a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80146a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d1e0      	bne.n	801466a <USB_WritePMA+0x38>
  }
}
 80146a8:	bf00      	nop
 80146aa:	bf00      	nop
 80146ac:	3734      	adds	r7, #52	; 0x34
 80146ae:	46bd      	mov	sp, r7
 80146b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b4:	4770      	bx	lr

080146b6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80146b6:	b480      	push	{r7}
 80146b8:	b08b      	sub	sp, #44	; 0x2c
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	60f8      	str	r0, [r7, #12]
 80146be:	60b9      	str	r1, [r7, #8]
 80146c0:	4611      	mov	r1, r2
 80146c2:	461a      	mov	r2, r3
 80146c4:	460b      	mov	r3, r1
 80146c6:	80fb      	strh	r3, [r7, #6]
 80146c8:	4613      	mov	r3, r2
 80146ca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80146cc:	88bb      	ldrh	r3, [r7, #4]
 80146ce:	085b      	lsrs	r3, r3, #1
 80146d0:	b29b      	uxth	r3, r3
 80146d2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80146dc:	88fa      	ldrh	r2, [r7, #6]
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	4413      	add	r3, r2
 80146e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80146e6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80146e8:	69bb      	ldr	r3, [r7, #24]
 80146ea:	627b      	str	r3, [r7, #36]	; 0x24
 80146ec:	e018      	b.n	8014720 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80146ee:	6a3b      	ldr	r3, [r7, #32]
 80146f0:	881b      	ldrh	r3, [r3, #0]
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80146f6:	6a3b      	ldr	r3, [r7, #32]
 80146f8:	3302      	adds	r3, #2
 80146fa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80146fc:	693b      	ldr	r3, [r7, #16]
 80146fe:	b2da      	uxtb	r2, r3
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014704:	69fb      	ldr	r3, [r7, #28]
 8014706:	3301      	adds	r3, #1
 8014708:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	0a1b      	lsrs	r3, r3, #8
 801470e:	b2da      	uxtb	r2, r3
 8014710:	69fb      	ldr	r3, [r7, #28]
 8014712:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014714:	69fb      	ldr	r3, [r7, #28]
 8014716:	3301      	adds	r3, #1
 8014718:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 801471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471c:	3b01      	subs	r3, #1
 801471e:	627b      	str	r3, [r7, #36]	; 0x24
 8014720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014722:	2b00      	cmp	r3, #0
 8014724:	d1e3      	bne.n	80146ee <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8014726:	88bb      	ldrh	r3, [r7, #4]
 8014728:	f003 0301 	and.w	r3, r3, #1
 801472c:	b29b      	uxth	r3, r3
 801472e:	2b00      	cmp	r3, #0
 8014730:	d007      	beq.n	8014742 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8014732:	6a3b      	ldr	r3, [r7, #32]
 8014734:	881b      	ldrh	r3, [r3, #0]
 8014736:	b29b      	uxth	r3, r3
 8014738:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	b2da      	uxtb	r2, r3
 801473e:	69fb      	ldr	r3, [r7, #28]
 8014740:	701a      	strb	r2, [r3, #0]
  }
}
 8014742:	bf00      	nop
 8014744:	372c      	adds	r7, #44	; 0x2c
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr
	...

08014750 <XPT2046_TouchSelect>:
#define READ_Y 0x90

#endif

static void XPT2046_TouchSelect()
{
 8014750:	b480      	push	{r7}
 8014752:	af00      	add	r7, sp, #0
	WRITE_REG(XPT2046_CS_GPIO_Port->BRR, XPT2046_CS_Pin);
 8014754:	4b03      	ldr	r3, [pc, #12]	; (8014764 <XPT2046_TouchSelect+0x14>)
 8014756:	2202      	movs	r2, #2
 8014758:	629a      	str	r2, [r3, #40]	; 0x28
}
 801475a:	bf00      	nop
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr
 8014764:	48001000 	.word	0x48001000

08014768 <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 8014768:	b480      	push	{r7}
 801476a:	af00      	add	r7, sp, #0
	WRITE_REG(XPT2046_CS_GPIO_Port->BSRR, XPT2046_CS_Pin);
 801476c:	4b03      	ldr	r3, [pc, #12]	; (801477c <XPT2046_TouchUnselect+0x14>)
 801476e:	2202      	movs	r2, #2
 8014770:	619a      	str	r2, [r3, #24]
}
 8014772:	bf00      	nop
 8014774:	46bd      	mov	sp, r7
 8014776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477a:	4770      	bx	lr
 801477c:	48001000 	.word	0x48001000

08014780 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed()
{
 8014780:	b480      	push	{r7}
 8014782:	af00      	add	r7, sp, #0
    return READ_BIT(XPT2046_IRQ_GPIO_Port->IDR, XPT2046_IRQ_Pin) == 0;
 8014784:	4b06      	ldr	r3, [pc, #24]	; (80147a0 <XPT2046_TouchPressed+0x20>)
 8014786:	691b      	ldr	r3, [r3, #16]
 8014788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801478c:	2b00      	cmp	r3, #0
 801478e:	bf0c      	ite	eq
 8014790:	2301      	moveq	r3, #1
 8014792:	2300      	movne	r3, #0
 8014794:	b2db      	uxtb	r3, r3
}
 8014796:	4618      	mov	r0, r3
 8014798:	46bd      	mov	sp, r7
 801479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479e:	4770      	bx	lr
 80147a0:	48000c00 	.word	0x48000c00

080147a4 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y, uint8_t raw)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b08e      	sub	sp, #56	; 0x38
 80147a8:	af02      	add	r7, sp, #8
 80147aa:	60f8      	str	r0, [r7, #12]
 80147ac:	60b9      	str	r1, [r7, #8]
 80147ae:	4613      	mov	r3, r2
 80147b0:	71fb      	strb	r3, [r7, #7]
    static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    XPT2046_TouchSelect();
 80147b2:	f7ff ffcd 	bl	8014750 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 80147b6:	2300      	movs	r3, #0
 80147b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t avg_y = 0;
 80147ba:	2300      	movs	r3, #0
 80147bc:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t nsamples = 0;
 80147be:	2300      	movs	r3, #0
 80147c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    for(uint8_t i = 0; i < XPT2046_average; i++)
 80147c4:	2300      	movs	r3, #0
 80147c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80147ca:	e03b      	b.n	8014844 <XPT2046_TouchGetCoordinates+0xa0>
    {
       // if(!XPT2046_TouchPressed())
       // break;

        nsamples++;
 80147cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147d0:	3301      	adds	r3, #1
 80147d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 80147d6:	f04f 33ff 	mov.w	r3, #4294967295
 80147da:	2201      	movs	r2, #1
 80147dc:	494e      	ldr	r1, [pc, #312]	; (8014918 <XPT2046_TouchGetCoordinates+0x174>)
 80147de:	484f      	ldr	r0, [pc, #316]	; (801491c <XPT2046_TouchGetCoordinates+0x178>)
 80147e0:	f7f7 fd36 	bl	800c250 <HAL_SPI_Transmit>
        uint8_t y_raw[2];

        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 80147e4:	f107 0218 	add.w	r2, r7, #24
 80147e8:	f04f 33ff 	mov.w	r3, #4294967295
 80147ec:	9300      	str	r3, [sp, #0]
 80147ee:	2302      	movs	r3, #2
 80147f0:	494b      	ldr	r1, [pc, #300]	; (8014920 <XPT2046_TouchGetCoordinates+0x17c>)
 80147f2:	484a      	ldr	r0, [pc, #296]	; (801491c <XPT2046_TouchGetCoordinates+0x178>)
 80147f4:	f7f7 feaa 	bl	800c54c <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 80147f8:	f04f 33ff 	mov.w	r3, #4294967295
 80147fc:	2201      	movs	r2, #1
 80147fe:	4949      	ldr	r1, [pc, #292]	; (8014924 <XPT2046_TouchGetCoordinates+0x180>)
 8014800:	4846      	ldr	r0, [pc, #280]	; (801491c <XPT2046_TouchGetCoordinates+0x178>)
 8014802:	f7f7 fd25 	bl	800c250 <HAL_SPI_Transmit>
        uint8_t x_raw[2];

        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8014806:	f107 0214 	add.w	r2, r7, #20
 801480a:	f04f 33ff 	mov.w	r3, #4294967295
 801480e:	9300      	str	r3, [sp, #0]
 8014810:	2302      	movs	r3, #2
 8014812:	4943      	ldr	r1, [pc, #268]	; (8014920 <XPT2046_TouchGetCoordinates+0x17c>)
 8014814:	4841      	ldr	r0, [pc, #260]	; (801491c <XPT2046_TouchGetCoordinates+0x178>)
 8014816:	f7f7 fe99 	bl	800c54c <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 801481a:	7d3b      	ldrb	r3, [r7, #20]
 801481c:	021b      	lsls	r3, r3, #8
 801481e:	7d7a      	ldrb	r2, [r7, #21]
 8014820:	4313      	orrs	r3, r2
 8014822:	461a      	mov	r2, r3
 8014824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014826:	4413      	add	r3, r2
 8014828:	62fb      	str	r3, [r7, #44]	; 0x2c
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 801482a:	7e3b      	ldrb	r3, [r7, #24]
 801482c:	021b      	lsls	r3, r3, #8
 801482e:	7e7a      	ldrb	r2, [r7, #25]
 8014830:	4313      	orrs	r3, r2
 8014832:	461a      	mov	r2, r3
 8014834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014836:	4413      	add	r3, r2
 8014838:	62bb      	str	r3, [r7, #40]	; 0x28
    for(uint8_t i = 0; i < XPT2046_average; i++)
 801483a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801483e:	3301      	adds	r3, #1
 8014840:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014844:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014848:	2b1f      	cmp	r3, #31
 801484a:	d9bf      	bls.n	80147cc <XPT2046_TouchGetCoordinates+0x28>
    }

    XPT2046_TouchUnselect();
 801484c:	f7ff ff8c 	bl	8014768 <XPT2046_TouchUnselect>

    if(nsamples < XPT2046_average)
 8014850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014854:	2b1f      	cmp	r3, #31
 8014856:	d801      	bhi.n	801485c <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8014858:	2300      	movs	r3, #0
 801485a:	e059      	b.n	8014910 <XPT2046_TouchGetCoordinates+0x16c>
    uint32_t raw_x = (avg_x / XPT2046_average);
 801485c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801485e:	095b      	lsrs	r3, r3, #5
 8014860:	623b      	str	r3, [r7, #32]
    uint32_t raw_y = (avg_y / XPT2046_average);
 8014862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014864:	095b      	lsrs	r3, r3, #5
 8014866:	61fb      	str	r3, [r7, #28]

	#ifdef XPT2046_ORIENTATION_LANDSCAPE_ROT180
		raw_y=32768-raw_y;
 8014868:	69fb      	ldr	r3, [r7, #28]
 801486a:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
 801486e:	61fb      	str	r3, [r7, #28]

	#ifdef XPT2046_ORIENTATION_PORTRATE_ROT180
		raw_x=32768-raw_x;
	#endif

    if (raw)
 8014870:	79fb      	ldrb	r3, [r7, #7]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d008      	beq.n	8014888 <XPT2046_TouchGetCoordinates+0xe4>
    {
    	*x = (uint16_t) raw_x;
 8014876:	6a3b      	ldr	r3, [r7, #32]
 8014878:	b29a      	uxth	r2, r3
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	801a      	strh	r2, [r3, #0]
		*y = (uint16_t) raw_y;
 801487e:	69fb      	ldr	r3, [r7, #28]
 8014880:	b29a      	uxth	r2, r3
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	801a      	strh	r2, [r3, #0]
 8014886:	e042      	b.n	801490e <XPT2046_TouchGetCoordinates+0x16a>
    }
    else
    {
    	if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8014888:	6a3b      	ldr	r3, [r7, #32]
 801488a:	f240 62db 	movw	r2, #1755	; 0x6db
 801488e:	4293      	cmp	r3, r2
 8014890:	d802      	bhi.n	8014898 <XPT2046_TouchGetCoordinates+0xf4>
 8014892:	f240 63dc 	movw	r3, #1756	; 0x6dc
 8014896:	623b      	str	r3, [r7, #32]
   	    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8014898:	6a3b      	ldr	r3, [r7, #32]
 801489a:	f247 02e3 	movw	r2, #28899	; 0x70e3
 801489e:	4293      	cmp	r3, r2
 80148a0:	d902      	bls.n	80148a8 <XPT2046_TouchGetCoordinates+0x104>
 80148a2:	f247 03e3 	movw	r3, #28899	; 0x70e3
 80148a6:	623b      	str	r3, [r7, #32]

   	    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80148a8:	69fb      	ldr	r3, [r7, #28]
 80148aa:	f640 42fe 	movw	r2, #3326	; 0xcfe
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d802      	bhi.n	80148b8 <XPT2046_TouchGetCoordinates+0x114>
 80148b2:	f640 43ff 	movw	r3, #3327	; 0xcff
 80148b6:	61fb      	str	r3, [r7, #28]
   	    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80148b8:	69fb      	ldr	r3, [r7, #28]
 80148ba:	f247 52f6 	movw	r2, #30198	; 0x75f6
 80148be:	4293      	cmp	r3, r2
 80148c0:	d902      	bls.n	80148c8 <XPT2046_TouchGetCoordinates+0x124>
 80148c2:	f247 53f6 	movw	r3, #30198	; 0x75f6
 80148c6:	61fb      	str	r3, [r7, #28]

   	    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80148c8:	6a3a      	ldr	r2, [r7, #32]
 80148ca:	4613      	mov	r3, r2
 80148cc:	009b      	lsls	r3, r3, #2
 80148ce:	4413      	add	r3, r2
 80148d0:	019b      	lsls	r3, r3, #6
 80148d2:	f5a3 2309 	sub.w	r3, r3, #561152	; 0x89000
 80148d6:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 80148da:	4a13      	ldr	r2, [pc, #76]	; (8014928 <XPT2046_TouchGetCoordinates+0x184>)
 80148dc:	fba2 1203 	umull	r1, r2, r2, r3
 80148e0:	1a9b      	subs	r3, r3, r2
 80148e2:	085b      	lsrs	r3, r3, #1
 80148e4:	4413      	add	r3, r2
 80148e6:	0b9b      	lsrs	r3, r3, #14
 80148e8:	b29a      	uxth	r2, r3
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	801a      	strh	r2, [r3, #0]
  	    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 80148ee:	69fa      	ldr	r2, [r7, #28]
 80148f0:	4613      	mov	r3, r2
 80148f2:	011b      	lsls	r3, r3, #4
 80148f4:	1a9b      	subs	r3, r3, r2
 80148f6:	011b      	lsls	r3, r3, #4
 80148f8:	f5a3 2342 	sub.w	r3, r3, #794624	; 0xc2000
 80148fc:	f5a3 6371 	sub.w	r3, r3, #3856	; 0xf10
 8014900:	4a0a      	ldr	r2, [pc, #40]	; (801492c <XPT2046_TouchGetCoordinates+0x188>)
 8014902:	fba2 2303 	umull	r2, r3, r2, r3
 8014906:	0b5b      	lsrs	r3, r3, #13
 8014908:	b29a      	uxth	r2, r3
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	801a      	strh	r2, [r3, #0]
    }

    return true;
 801490e:	2301      	movs	r3, #1
}
 8014910:	4618      	mov	r0, r3
 8014912:	3730      	adds	r7, #48	; 0x30
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}
 8014918:	0801d2e8 	.word	0x0801d2e8
 801491c:	20000c3c 	.word	0x20000c3c
 8014920:	0801d2ec 	.word	0x0801d2ec
 8014924:	0801d2f0 	.word	0x0801d2f0
 8014928:	350d66f7 	.word	0x350d66f7
 801492c:	4e0b90d7 	.word	0x4e0b90d7

08014930 <FMC_BANK1_SetAddress>:
 * @brief Nastavi spominski naslov enote FSMC
 * @param address želen naslov
 * @internal
 */
static inline void FMC_BANK1_SetAddress (LCD_IO_Data_t address)
{
 8014930:	b480      	push	{r7}
 8014932:	b083      	sub	sp, #12
 8014934:	af00      	add	r7, sp, #0
 8014936:	4603      	mov	r3, r0
 8014938:	80fb      	strh	r3, [r7, #6]
	*(LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 801493a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 801493e:	88fb      	ldrh	r3, [r7, #6]
 8014940:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8014942:	f3bf 8f4f 	dsb	sy
}
 8014946:	bf00      	nop

	// Počakaj na sinhronizacijo pomnilnika
	__DSB();
}
 8014948:	bf00      	nop
 801494a:	370c      	adds	r7, #12
 801494c:	46bd      	mov	sp, r7
 801494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014952:	4770      	bx	lr

08014954 <FMC_BANK1_WriteData>:
 * @brief Piši v register enote FSMC
 * @param data želen podatek
 * @internal
 */
static inline void FMC_BANK1_WriteData(LCD_IO_Data_t data)
{
 8014954:	b480      	push	{r7}
 8014956:	b083      	sub	sp, #12
 8014958:	af00      	add	r7, sp, #0
 801495a:	4603      	mov	r3, r0
 801495c:	80fb      	strh	r3, [r7, #6]
	*(LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 801495e:	4a06      	ldr	r2, [pc, #24]	; (8014978 <FMC_BANK1_WriteData+0x24>)
 8014960:	88fb      	ldrh	r3, [r7, #6]
 8014962:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8014964:	f3bf 8f4f 	dsb	sy
}
 8014968:	bf00      	nop

	// Počakaj na sinhronizacijo pomnilnika
	__DSB();
}
 801496a:	bf00      	nop
 801496c:	370c      	adds	r7, #12
 801496e:	46bd      	mov	sp, r7
 8014970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014974:	4770      	bx	lr
 8014976:	bf00      	nop
 8014978:	60010000 	.word	0x60010000

0801497c <ILI9341_SetAddress>:
/*!
 * @brief Podaj spominski naslov LCD krmilniku
 * @param *address *naslov* spremenljivke, v kateri je zapisan ukaz (register)
 */
void ILI9341_SetAddress(LCD_IO_Data_t *address)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b082      	sub	sp, #8
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
	// Ukazni register je le eden, zato podajanje dolžine podatka ni potrebno
	FMC_BANK1_SetAddress(*address);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	881b      	ldrh	r3, [r3, #0]
 8014988:	4618      	mov	r0, r3
 801498a:	f7ff ffd1 	bl	8014930 <FMC_BANK1_SetAddress>
}
 801498e:	bf00      	nop
 8014990:	3708      	adds	r7, #8
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}

08014996 <ILI9341_SendData>:
 * @brief Piši tabelo v grafični pomnilnik (GRAM) LCD krmilnika
 * @param *data  *naslov* tabele, v kateri so zapisani podatki
 * @param length dolžina tabele podatkov
 */
void ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
 8014996:	b580      	push	{r7, lr}
 8014998:	b084      	sub	sp, #16
 801499a:	af00      	add	r7, sp, #0
 801499c:	6078      	str	r0, [r7, #4]
 801499e:	6039      	str	r1, [r7, #0]
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;
 80149a0:	2301      	movs	r3, #1
 80149a2:	72fb      	strb	r3, [r7, #11]

	for (uint32_t i = 0; i < (length/increment); i += increment)
 80149a4:	2300      	movs	r3, #0
 80149a6:	60fb      	str	r3, [r7, #12]
 80149a8:	e00b      	b.n	80149c2 <ILI9341_SendData+0x2c>
		FMC_BANK1_WriteData(data[i]);
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	005b      	lsls	r3, r3, #1
 80149ae:	687a      	ldr	r2, [r7, #4]
 80149b0:	4413      	add	r3, r2
 80149b2:	881b      	ldrh	r3, [r3, #0]
 80149b4:	4618      	mov	r0, r3
 80149b6:	f7ff ffcd 	bl	8014954 <FMC_BANK1_WriteData>
	for (uint32_t i = 0; i < (length/increment); i += increment)
 80149ba:	7afb      	ldrb	r3, [r7, #11]
 80149bc:	68fa      	ldr	r2, [r7, #12]
 80149be:	4413      	add	r3, r2
 80149c0:	60fb      	str	r3, [r7, #12]
 80149c2:	7afb      	ldrb	r3, [r7, #11]
 80149c4:	683a      	ldr	r2, [r7, #0]
 80149c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80149ca:	68fa      	ldr	r2, [r7, #12]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d3ec      	bcc.n	80149aa <ILI9341_SendData+0x14>
}
 80149d0:	bf00      	nop
 80149d2:	bf00      	nop
 80149d4:	3710      	adds	r7, #16
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}

080149da <ILI9341_SendRepeatedData>:
 * @brief Večkrat zapiši isti podatek v grafični pomnilnik (GRAM) LCD krmilnika
 * @param data spremenljivka s podatkom
 * @param num_copies število kopij, ki se pošljejo
 */
void ILI9341_SendRepeatedData(LCD_IO_Data_t data, uint32_t num_copies)
{
 80149da:	b580      	push	{r7, lr}
 80149dc:	b084      	sub	sp, #16
 80149de:	af00      	add	r7, sp, #0
 80149e0:	4603      	mov	r3, r0
 80149e2:	6039      	str	r1, [r7, #0]
 80149e4:	80fb      	strh	r3, [r7, #6]
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;
 80149e6:	2301      	movs	r3, #1
 80149e8:	72fb      	strb	r3, [r7, #11]

	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 80149ea:	2300      	movs	r3, #0
 80149ec:	60fb      	str	r3, [r7, #12]
 80149ee:	e007      	b.n	8014a00 <ILI9341_SendRepeatedData+0x26>
		FMC_BANK1_WriteData(data);
 80149f0:	88fb      	ldrh	r3, [r7, #6]
 80149f2:	4618      	mov	r0, r3
 80149f4:	f7ff ffae 	bl	8014954 <FMC_BANK1_WriteData>
	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 80149f8:	7afb      	ldrb	r3, [r7, #11]
 80149fa:	68fa      	ldr	r2, [r7, #12]
 80149fc:	4413      	add	r3, r2
 80149fe:	60fb      	str	r3, [r7, #12]
 8014a00:	7afb      	ldrb	r3, [r7, #11]
 8014a02:	683a      	ldr	r2, [r7, #0]
 8014a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a08:	68fa      	ldr	r2, [r7, #12]
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d3f0      	bcc.n	80149f0 <ILI9341_SendRepeatedData+0x16>
}
 8014a0e:	bf00      	nop
 8014a10:	bf00      	nop
 8014a12:	3710      	adds	r7, #16
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <ILI9341_SetOrientation>:
/*!
  * @brief  Nastavi orientacijo zaslona.
  * @param  orientation zasuk zaslona, podan v obliki ILI9341_MISKO_ROTATE_{0,90,180,270}
  */
void ILI9341_SetOrientation(uint32_t orientation)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b084      	sub	sp, #16
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 8014a20:	2336      	movs	r3, #54	; 0x36
 8014a22:	81fb      	strh	r3, [r7, #14]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 8014a24:	4a16      	ldr	r2, [pc, #88]	; (8014a80 <ILI9341_SetOrientation+0x68>)
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a2c:	b29b      	uxth	r3, r3
 8014a2e:	81bb      	strh	r3, [r7, #12]

	ILI9341_SetAddress(&command);
 8014a30:	f107 030e 	add.w	r3, r7, #14
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7ff ffa1 	bl	801497c <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 8014a3a:	f107 030c 	add.w	r3, r7, #12
 8014a3e:	2101      	movs	r1, #1
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7ff ffa8 	bl	8014996 <ILI9341_SendData>

	switch (orientation) {
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d002      	beq.n	8014a52 <ILI9341_SetOrientation+0x3a>
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	2b03      	cmp	r3, #3
 8014a50:	d107      	bne.n	8014a62 <ILI9341_SetOrientation+0x4a>
	case ILI9341_MISKO_ROTATE_0:
	case ILI9341_MISKO_ROTATE_270:
		LCD.width  = ILI9341_HEIGHT;
 8014a52:	4b0c      	ldr	r3, [pc, #48]	; (8014a84 <ILI9341_SetOrientation+0x6c>)
 8014a54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8014a58:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 8014a5a:	4b0a      	ldr	r3, [pc, #40]	; (8014a84 <ILI9341_SetOrientation+0x6c>)
 8014a5c:	22f0      	movs	r2, #240	; 0xf0
 8014a5e:	605a      	str	r2, [r3, #4]
		break;
 8014a60:	e007      	b.n	8014a72 <ILI9341_SetOrientation+0x5a>
	default:
	case ILI9341_MISKO_ROTATE_90:
	case ILI9341_MISKO_ROTATE_180:
		LCD.width  = ILI9341_WIDTH;
 8014a62:	4b08      	ldr	r3, [pc, #32]	; (8014a84 <ILI9341_SetOrientation+0x6c>)
 8014a64:	22f0      	movs	r2, #240	; 0xf0
 8014a66:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 8014a68:	4b06      	ldr	r3, [pc, #24]	; (8014a84 <ILI9341_SetOrientation+0x6c>)
 8014a6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8014a6e:	605a      	str	r2, [r3, #4]
		break;
 8014a70:	bf00      	nop
	}
	LCD.orientation = orientation;
 8014a72:	4a04      	ldr	r2, [pc, #16]	; (8014a84 <ILI9341_SetOrientation+0x6c>)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	6093      	str	r3, [r2, #8]
}
 8014a78:	bf00      	nop
 8014a7a:	3710      	adds	r7, #16
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	2000000c 	.word	0x2000000c
 8014a84:	20001018 	.word	0x20001018

08014a88 <ILI9341_SetDisplayWindow>:
  * @param  Ypos   y koordinata izhodišča
  * @param  Height višina okna
  * @param  Width  širina okna
  */
void ILI9341_SetDisplayWindow(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b088      	sub	sp, #32
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	60b9      	str	r1, [r7, #8]
 8014a92:	607a      	str	r2, [r7, #4]
 8014a94:	603b      	str	r3, [r7, #0]
	ILI9341_Data_t command;
	ILI9341_Data_t parameter[4];

	/* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
	command = ILI9341_CASET;
 8014a96:	232a      	movs	r3, #42	; 0x2a
 8014a98:	83fb      	strh	r3, [r7, #30]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	0a1b      	lsrs	r3, r3, #8
 8014a9e:	b29b      	uxth	r3, r3
 8014aa0:	82bb      	strh	r3, [r7, #20]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	b2db      	uxtb	r3, r3
 8014aa8:	b29b      	uxth	r3, r3
 8014aaa:	82fb      	strh	r3, [r7, #22]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 8014aac:	68fa      	ldr	r2, [r7, #12]
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	4413      	add	r3, r2
 8014ab2:	3b01      	subs	r3, #1
 8014ab4:	0a1b      	lsrs	r3, r3, #8
 8014ab6:	b29b      	uxth	r3, r3
 8014ab8:	833b      	strh	r3, [r7, #24]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	b29a      	uxth	r2, r3
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	b29b      	uxth	r3, r3
 8014ac2:	4413      	add	r3, r2
 8014ac4:	b29b      	uxth	r3, r3
 8014ac6:	3b01      	subs	r3, #1
 8014ac8:	b29b      	uxth	r3, r3
 8014aca:	b2db      	uxtb	r3, r3
 8014acc:	b29b      	uxth	r3, r3
 8014ace:	837b      	strh	r3, [r7, #26]
	ILI9341_SetAddress(&command);
 8014ad0:	f107 031e 	add.w	r3, r7, #30
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	f7ff ff51 	bl	801497c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 8014ada:	f107 0314 	add.w	r3, r7, #20
 8014ade:	2104      	movs	r1, #4
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7ff ff58 	bl	8014996 <ILI9341_SendData>

	/* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
	command = ILI9341_RASET;
 8014ae6:	232b      	movs	r3, #43	; 0x2b
 8014ae8:	83fb      	strh	r3, [r7, #30]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	0a1b      	lsrs	r3, r3, #8
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	82bb      	strh	r3, [r7, #20]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	b2db      	uxtb	r3, r3
 8014af8:	b29b      	uxth	r3, r3
 8014afa:	82fb      	strh	r3, [r7, #22]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 8014afc:	68ba      	ldr	r2, [r7, #8]
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	4413      	add	r3, r2
 8014b02:	3b01      	subs	r3, #1
 8014b04:	0a1b      	lsrs	r3, r3, #8
 8014b06:	b29b      	uxth	r3, r3
 8014b08:	833b      	strh	r3, [r7, #24]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	b29a      	uxth	r2, r3
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	b29b      	uxth	r3, r3
 8014b12:	4413      	add	r3, r2
 8014b14:	b29b      	uxth	r3, r3
 8014b16:	3b01      	subs	r3, #1
 8014b18:	b29b      	uxth	r3, r3
 8014b1a:	b2db      	uxtb	r3, r3
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	837b      	strh	r3, [r7, #26]
	ILI9341_SetAddress(&command);
 8014b20:	f107 031e 	add.w	r3, r7, #30
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7ff ff29 	bl	801497c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 8014b2a:	f107 0314 	add.w	r3, r7, #20
 8014b2e:	2104      	movs	r1, #4
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7ff ff30 	bl	8014996 <ILI9341_SendData>

	// Zapusti nastavitev okna v načinu za vpis barve v GRAM
	command = ILI9341_GRAM;
 8014b36:	232c      	movs	r3, #44	; 0x2c
 8014b38:	83fb      	strh	r3, [r7, #30]
	ILI9341_SetAddress(&command);
 8014b3a:	f107 031e 	add.w	r3, r7, #30
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7ff ff1c 	bl	801497c <ILI9341_SetAddress>
}
 8014b44:	bf00      	nop
 8014b46:	3720      	adds	r7, #32
 8014b48:	46bd      	mov	sp, r7
 8014b4a:	bd80      	pop	{r7, pc}

08014b4c <ILI9341_Init>:
  * @param  color_space želen barvni prostor (ILI9341_COLORSPACE_RBG{565,666})
  * @param  orientation orientacija zaslona
  * @internal
  */
void ILI9341_Init(uint32_t color_space, uint32_t orientation)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b086      	sub	sp, #24
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	6039      	str	r1, [r7, #0]
	ILI9341_Data_t command;
	ILI9341_Data_t parameter[5];

	ILI9341_SetOrientation(orientation);
 8014b56:	6838      	ldr	r0, [r7, #0]
 8014b58:	f7ff ff5e 	bl	8014a18 <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 8014b5c:	4b35      	ldr	r3, [pc, #212]	; (8014c34 <ILI9341_Init+0xe8>)
 8014b5e:	681a      	ldr	r2, [r3, #0]
 8014b60:	4b34      	ldr	r3, [pc, #208]	; (8014c34 <ILI9341_Init+0xe8>)
 8014b62:	685b      	ldr	r3, [r3, #4]
 8014b64:	2100      	movs	r1, #0
 8014b66:	2000      	movs	r0, #0
 8014b68:	f7ff ff8e 	bl	8014a88 <ILI9341_SetDisplayWindow>

	// Sleep out
	command = ILI9341_SLEEP_OUT;
 8014b6c:	2311      	movs	r3, #17
 8014b6e:	82fb      	strh	r3, [r7, #22]
	ILI9341_SetAddress(&command);
 8014b70:	f107 0316 	add.w	r3, r7, #22
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7ff ff01 	bl	801497c <ILI9341_SetAddress>
	HAL_Delay(200);
 8014b7a:	20c8      	movs	r0, #200	; 0xc8
 8014b7c:	f7ef fb62 	bl	8004244 <HAL_Delay>

	// Display Normal mode
	command = ILI9341_NORMAL_MODE_ON;
 8014b80:	2313      	movs	r3, #19
 8014b82:	82fb      	strh	r3, [r7, #22]
	ILI9341_SetAddress(&command);
 8014b84:	f107 0316 	add.w	r3, r7, #22
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7ff fef7 	bl	801497c <ILI9341_SetAddress>
	HAL_Delay(100);
 8014b8e:	2064      	movs	r0, #100	; 0x64
 8014b90:	f7ef fb58 	bl	8004244 <HAL_Delay>

	// Pixel Format
	command = ILI9341_PIXEL_FORMAT;
 8014b94:	233a      	movs	r3, #58	; 0x3a
 8014b96:	82fb      	strh	r3, [r7, #22]
	parameter[0] = color_space;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	b29b      	uxth	r3, r3
 8014b9c:	81bb      	strh	r3, [r7, #12]
	ILI9341_SetAddress(&command);
 8014b9e:	f107 0316 	add.w	r3, r7, #22
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7ff feea 	bl	801497c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 8014ba8:	f107 030c 	add.w	r3, r7, #12
 8014bac:	2101      	movs	r1, #1
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7ff fef1 	bl	8014996 <ILI9341_SendData>
	HAL_Delay(100);
 8014bb4:	2064      	movs	r0, #100	; 0x64
 8014bb6:	f7ef fb45 	bl	8004244 <HAL_Delay>

	// Update Interface control
	command = ILI9341_INTERFACE;
 8014bba:	23f6      	movs	r3, #246	; 0xf6
 8014bbc:	82fb      	strh	r3, [r7, #22]
	parameter[0] = 0x49;
 8014bbe:	2349      	movs	r3, #73	; 0x49
 8014bc0:	81bb      	strh	r3, [r7, #12]
	parameter[1] = 0;
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	81fb      	strh	r3, [r7, #14]
	parameter[2] = 0x20;
 8014bc6:	2320      	movs	r3, #32
 8014bc8:	823b      	strh	r3, [r7, #16]
	ILI9341_SetAddress(&command);
 8014bca:	f107 0316 	add.w	r3, r7, #22
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7ff fed4 	bl	801497c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 8014bd4:	f107 030c 	add.w	r3, r7, #12
 8014bd8:	2103      	movs	r1, #3
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7ff fedb 	bl	8014996 <ILI9341_SendData>

	// Enable TE
	command = ILI9341_TEON;
 8014be0:	2335      	movs	r3, #53	; 0x35
 8014be2:	82fb      	strh	r3, [r7, #22]
	parameter[0] = 1; /* VSYNC + HSYNC */
 8014be4:	2301      	movs	r3, #1
 8014be6:	81bb      	strh	r3, [r7, #12]
	ILI9341_SetAddress(&command);
 8014be8:	f107 0316 	add.w	r3, r7, #22
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7ff fec5 	bl	801497c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 8014bf2:	f107 030c 	add.w	r3, r7, #12
 8014bf6:	2101      	movs	r1, #1
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7ff fecc 	bl	8014996 <ILI9341_SendData>
	HAL_Delay(100);
 8014bfe:	2064      	movs	r0, #100	; 0x64
 8014c00:	f7ef fb20 	bl	8004244 <HAL_Delay>

	// Enable TE scan line
	command = ILI9341_SET_TEAR_SCANLINE;
 8014c04:	2344      	movs	r3, #68	; 0x44
 8014c06:	82fb      	strh	r3, [r7, #22]
	parameter[0] = 0;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	81bb      	strh	r3, [r7, #12]
	parameter[1] = 0;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	81fb      	strh	r3, [r7, #14]
	ILI9341_SetAddress(&command);
 8014c10:	f107 0316 	add.w	r3, r7, #22
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7ff feb1 	bl	801497c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 2);
 8014c1a:	f107 030c 	add.w	r3, r7, #12
 8014c1e:	2102      	movs	r1, #2
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7ff feb8 	bl	8014996 <ILI9341_SendData>
	HAL_Delay(100);
 8014c26:	2064      	movs	r0, #100	; 0x64
 8014c28:	f7ef fb0c 	bl	8004244 <HAL_Delay>
}
 8014c2c:	bf00      	nop
 8014c2e:	3718      	adds	r7, #24
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	20001018 	.word	0x20001018

08014c38 <ILI9341_WaitTransfer>:

//! @brief Počakaj na prenos podatka FSMC->Ili9341. Možne dodelave.
void ILI9341_WaitTransfer()
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	af00      	add	r7, sp, #0
	// AddresSetupTime + 1 + DataSetupTime + 1. Glej `fmc.c'.
	// načeloma 6 + 1 + 5 + 1 ms (13 ms), vendar ni zadosti
	HAL_Delay(50);
 8014c3c:	2032      	movs	r0, #50	; 0x32
 8014c3e:	f7ef fb01 	bl	8004244 <HAL_Delay>
}
 8014c42:	bf00      	nop
 8014c44:	bd80      	pop	{r7, pc}

08014c46 <ILI9341_DisplayOn>:

//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
 8014c46:	b580      	push	{r7, lr}
 8014c48:	b082      	sub	sp, #8
 8014c4a:	af00      	add	r7, sp, #0
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 8014c4c:	2329      	movs	r3, #41	; 0x29
 8014c4e:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(&command);
 8014c50:	1dbb      	adds	r3, r7, #6
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7ff fe92 	bl	801497c <ILI9341_SetAddress>
}
 8014c58:	bf00      	nop
 8014c5a:	3708      	adds	r7, #8
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	bd80      	pop	{r7, pc}

08014c60 <ILI9341_GetParam>:
 *
 * Možne opcije: LCD_WIDTH, LCD_HEIGHT, LCD_AREA, LCD_ORIENTATION.
 * @warning Zaslon mora biti predhodno inicializiran s funkcijo `LCD_Init()'!
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
 8014c60:	b480      	push	{r7}
 8014c62:	b085      	sub	sp, #20
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	4603      	mov	r3, r0
 8014c68:	71fb      	strb	r3, [r7, #7]
	uint32_t value = 0;
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	60fb      	str	r3, [r7, #12]

	switch (param) {
 8014c6e:	79fb      	ldrb	r3, [r7, #7]
 8014c70:	2b03      	cmp	r3, #3
 8014c72:	d81b      	bhi.n	8014cac <ILI9341_GetParam+0x4c>
 8014c74:	a201      	add	r2, pc, #4	; (adr r2, 8014c7c <ILI9341_GetParam+0x1c>)
 8014c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c7a:	bf00      	nop
 8014c7c:	08014c8d 	.word	0x08014c8d
 8014c80:	08014c95 	.word	0x08014c95
 8014c84:	08014c9d 	.word	0x08014c9d
 8014c88:	08014ca5 	.word	0x08014ca5
	case LCD_WIDTH:
		value = LCD.width;
 8014c8c:	4b0b      	ldr	r3, [pc, #44]	; (8014cbc <ILI9341_GetParam+0x5c>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	60fb      	str	r3, [r7, #12]
		break;
 8014c92:	e00c      	b.n	8014cae <ILI9341_GetParam+0x4e>
	case LCD_HEIGHT:
		value = LCD.height;
 8014c94:	4b09      	ldr	r3, [pc, #36]	; (8014cbc <ILI9341_GetParam+0x5c>)
 8014c96:	685b      	ldr	r3, [r3, #4]
 8014c98:	60fb      	str	r3, [r7, #12]
		break;
 8014c9a:	e008      	b.n	8014cae <ILI9341_GetParam+0x4e>
	case LCD_AREA:
		value = ILI9341_AREA;
 8014c9c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8014ca0:	60fb      	str	r3, [r7, #12]
		break;
 8014ca2:	e004      	b.n	8014cae <ILI9341_GetParam+0x4e>
	case LCD_ORIENTATION:
		value = LCD.orientation;
 8014ca4:	4b05      	ldr	r3, [pc, #20]	; (8014cbc <ILI9341_GetParam+0x5c>)
 8014ca6:	689b      	ldr	r3, [r3, #8]
 8014ca8:	60fb      	str	r3, [r7, #12]
		break;
 8014caa:	e000      	b.n	8014cae <ILI9341_GetParam+0x4e>
	default:
		break;
 8014cac:	bf00      	nop
	}

	return value;
 8014cae:	68fb      	ldr	r3, [r7, #12]
}
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3714      	adds	r7, #20
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cba:	4770      	bx	lr
 8014cbc:	20001018 	.word	0x20001018

08014cc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b084      	sub	sp, #16
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
 8014cc8:	460b      	mov	r3, r1
 8014cca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014ccc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014cd0:	f004 fd0a 	bl	80196e8 <USBD_static_malloc>
 8014cd4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d105      	bne.n	8014ce8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	2200      	movs	r2, #0
 8014ce0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014ce4:	2302      	movs	r3, #2
 8014ce6:	e066      	b.n	8014db6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	68fa      	ldr	r2, [r7, #12]
 8014cec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	7c1b      	ldrb	r3, [r3, #16]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d119      	bne.n	8014d2c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014cfc:	2202      	movs	r2, #2
 8014cfe:	2181      	movs	r1, #129	; 0x81
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f004 fb96 	bl	8019432 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	2201      	movs	r2, #1
 8014d0a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d10:	2202      	movs	r2, #2
 8014d12:	2101      	movs	r1, #1
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f004 fb8c 	bl	8019432 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2210      	movs	r2, #16
 8014d26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8014d2a:	e016      	b.n	8014d5a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014d2c:	2340      	movs	r3, #64	; 0x40
 8014d2e:	2202      	movs	r2, #2
 8014d30:	2181      	movs	r1, #129	; 0x81
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f004 fb7d 	bl	8019432 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014d3e:	2340      	movs	r3, #64	; 0x40
 8014d40:	2202      	movs	r2, #2
 8014d42:	2101      	movs	r1, #1
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f004 fb74 	bl	8019432 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	2201      	movs	r2, #1
 8014d4e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2210      	movs	r2, #16
 8014d56:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014d5a:	2308      	movs	r3, #8
 8014d5c:	2203      	movs	r2, #3
 8014d5e:	2182      	movs	r1, #130	; 0x82
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f004 fb66 	bl	8019432 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2201      	movs	r2, #1
 8014d6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	2200      	movs	r2, #0
 8014d84:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	7c1b      	ldrb	r3, [r3, #16]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d109      	bne.n	8014da4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d9a:	2101      	movs	r1, #1
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f004 fc38 	bl	8019612 <USBD_LL_PrepareReceive>
 8014da2:	e007      	b.n	8014db4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014daa:	2340      	movs	r3, #64	; 0x40
 8014dac:	2101      	movs	r1, #1
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f004 fc2f 	bl	8019612 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014db4:	2300      	movs	r3, #0
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	3710      	adds	r7, #16
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}

08014dbe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014dbe:	b580      	push	{r7, lr}
 8014dc0:	b082      	sub	sp, #8
 8014dc2:	af00      	add	r7, sp, #0
 8014dc4:	6078      	str	r0, [r7, #4]
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014dca:	2181      	movs	r1, #129	; 0x81
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f004 fb56 	bl	801947e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014dd8:	2101      	movs	r1, #1
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f004 fb4f 	bl	801947e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	2200      	movs	r2, #0
 8014de4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014de8:	2182      	movs	r1, #130	; 0x82
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f004 fb47 	bl	801947e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2200      	movs	r2, #0
 8014df4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d00e      	beq.n	8014e28 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f004 fc72 	bl	8019704 <USBD_static_free>
    pdev->pClassData = NULL;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2200      	movs	r2, #0
 8014e24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014e28:	2300      	movs	r3, #0
}
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	3708      	adds	r7, #8
 8014e2e:	46bd      	mov	sp, r7
 8014e30:	bd80      	pop	{r7, pc}
	...

08014e34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b086      	sub	sp, #24
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014e46:	2300      	movs	r3, #0
 8014e48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014e52:	693b      	ldr	r3, [r7, #16]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d101      	bne.n	8014e5c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8014e58:	2303      	movs	r3, #3
 8014e5a:	e0af      	b.n	8014fbc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d03f      	beq.n	8014ee8 <USBD_CDC_Setup+0xb4>
 8014e68:	2b20      	cmp	r3, #32
 8014e6a:	f040 809f 	bne.w	8014fac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	88db      	ldrh	r3, [r3, #6]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d02e      	beq.n	8014ed4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	781b      	ldrb	r3, [r3, #0]
 8014e7a:	b25b      	sxtb	r3, r3
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	da16      	bge.n	8014eae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e86:	689b      	ldr	r3, [r3, #8]
 8014e88:	683a      	ldr	r2, [r7, #0]
 8014e8a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8014e8c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014e8e:	683a      	ldr	r2, [r7, #0]
 8014e90:	88d2      	ldrh	r2, [r2, #6]
 8014e92:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	88db      	ldrh	r3, [r3, #6]
 8014e98:	2b07      	cmp	r3, #7
 8014e9a:	bf28      	it	cs
 8014e9c:	2307      	movcs	r3, #7
 8014e9e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	89fa      	ldrh	r2, [r7, #14]
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	6878      	ldr	r0, [r7, #4]
 8014ea8:	f001 facf 	bl	801644a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8014eac:	e085      	b.n	8014fba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	785a      	ldrb	r2, [r3, #1]
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	88db      	ldrh	r3, [r3, #6]
 8014ebc:	b2da      	uxtb	r2, r3
 8014ebe:	693b      	ldr	r3, [r7, #16]
 8014ec0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014ec4:	6939      	ldr	r1, [r7, #16]
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	88db      	ldrh	r3, [r3, #6]
 8014eca:	461a      	mov	r2, r3
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f001 fae8 	bl	80164a2 <USBD_CtlPrepareRx>
      break;
 8014ed2:	e072      	b.n	8014fba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014eda:	689b      	ldr	r3, [r3, #8]
 8014edc:	683a      	ldr	r2, [r7, #0]
 8014ede:	7850      	ldrb	r0, [r2, #1]
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	6839      	ldr	r1, [r7, #0]
 8014ee4:	4798      	blx	r3
      break;
 8014ee6:	e068      	b.n	8014fba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	785b      	ldrb	r3, [r3, #1]
 8014eec:	2b0b      	cmp	r3, #11
 8014eee:	d852      	bhi.n	8014f96 <USBD_CDC_Setup+0x162>
 8014ef0:	a201      	add	r2, pc, #4	; (adr r2, 8014ef8 <USBD_CDC_Setup+0xc4>)
 8014ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ef6:	bf00      	nop
 8014ef8:	08014f29 	.word	0x08014f29
 8014efc:	08014fa5 	.word	0x08014fa5
 8014f00:	08014f97 	.word	0x08014f97
 8014f04:	08014f97 	.word	0x08014f97
 8014f08:	08014f97 	.word	0x08014f97
 8014f0c:	08014f97 	.word	0x08014f97
 8014f10:	08014f97 	.word	0x08014f97
 8014f14:	08014f97 	.word	0x08014f97
 8014f18:	08014f97 	.word	0x08014f97
 8014f1c:	08014f97 	.word	0x08014f97
 8014f20:	08014f53 	.word	0x08014f53
 8014f24:	08014f7d 	.word	0x08014f7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f2e:	b2db      	uxtb	r3, r3
 8014f30:	2b03      	cmp	r3, #3
 8014f32:	d107      	bne.n	8014f44 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014f34:	f107 030a 	add.w	r3, r7, #10
 8014f38:	2202      	movs	r2, #2
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	6878      	ldr	r0, [r7, #4]
 8014f3e:	f001 fa84 	bl	801644a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f42:	e032      	b.n	8014faa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014f44:	6839      	ldr	r1, [r7, #0]
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f001 fa0e 	bl	8016368 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f4c:	2303      	movs	r3, #3
 8014f4e:	75fb      	strb	r3, [r7, #23]
          break;
 8014f50:	e02b      	b.n	8014faa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f58:	b2db      	uxtb	r3, r3
 8014f5a:	2b03      	cmp	r3, #3
 8014f5c:	d107      	bne.n	8014f6e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014f5e:	f107 030d 	add.w	r3, r7, #13
 8014f62:	2201      	movs	r2, #1
 8014f64:	4619      	mov	r1, r3
 8014f66:	6878      	ldr	r0, [r7, #4]
 8014f68:	f001 fa6f 	bl	801644a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f6c:	e01d      	b.n	8014faa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8014f6e:	6839      	ldr	r1, [r7, #0]
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	f001 f9f9 	bl	8016368 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f76:	2303      	movs	r3, #3
 8014f78:	75fb      	strb	r3, [r7, #23]
          break;
 8014f7a:	e016      	b.n	8014faa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f82:	b2db      	uxtb	r3, r3
 8014f84:	2b03      	cmp	r3, #3
 8014f86:	d00f      	beq.n	8014fa8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8014f88:	6839      	ldr	r1, [r7, #0]
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f001 f9ec 	bl	8016368 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f90:	2303      	movs	r3, #3
 8014f92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014f94:	e008      	b.n	8014fa8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014f96:	6839      	ldr	r1, [r7, #0]
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f001 f9e5 	bl	8016368 <USBD_CtlError>
          ret = USBD_FAIL;
 8014f9e:	2303      	movs	r3, #3
 8014fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8014fa2:	e002      	b.n	8014faa <USBD_CDC_Setup+0x176>
          break;
 8014fa4:	bf00      	nop
 8014fa6:	e008      	b.n	8014fba <USBD_CDC_Setup+0x186>
          break;
 8014fa8:	bf00      	nop
      }
      break;
 8014faa:	e006      	b.n	8014fba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014fac:	6839      	ldr	r1, [r7, #0]
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f001 f9da 	bl	8016368 <USBD_CtlError>
      ret = USBD_FAIL;
 8014fb4:	2303      	movs	r3, #3
 8014fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8014fb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8014fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3718      	adds	r7, #24
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	bd80      	pop	{r7, pc}

08014fc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	460b      	mov	r3, r1
 8014fce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014fd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d101      	bne.n	8014fe6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014fe2:	2303      	movs	r3, #3
 8014fe4:	e04f      	b.n	8015086 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014fee:	78fa      	ldrb	r2, [r7, #3]
 8014ff0:	6879      	ldr	r1, [r7, #4]
 8014ff2:	4613      	mov	r3, r2
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	4413      	add	r3, r2
 8014ff8:	009b      	lsls	r3, r3, #2
 8014ffa:	440b      	add	r3, r1
 8014ffc:	3318      	adds	r3, #24
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d029      	beq.n	8015058 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8015004:	78fa      	ldrb	r2, [r7, #3]
 8015006:	6879      	ldr	r1, [r7, #4]
 8015008:	4613      	mov	r3, r2
 801500a:	009b      	lsls	r3, r3, #2
 801500c:	4413      	add	r3, r2
 801500e:	009b      	lsls	r3, r3, #2
 8015010:	440b      	add	r3, r1
 8015012:	3318      	adds	r3, #24
 8015014:	681a      	ldr	r2, [r3, #0]
 8015016:	78f9      	ldrb	r1, [r7, #3]
 8015018:	68f8      	ldr	r0, [r7, #12]
 801501a:	460b      	mov	r3, r1
 801501c:	009b      	lsls	r3, r3, #2
 801501e:	440b      	add	r3, r1
 8015020:	00db      	lsls	r3, r3, #3
 8015022:	4403      	add	r3, r0
 8015024:	3338      	adds	r3, #56	; 0x38
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	fbb2 f1f3 	udiv	r1, r2, r3
 801502c:	fb01 f303 	mul.w	r3, r1, r3
 8015030:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8015032:	2b00      	cmp	r3, #0
 8015034:	d110      	bne.n	8015058 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8015036:	78fa      	ldrb	r2, [r7, #3]
 8015038:	6879      	ldr	r1, [r7, #4]
 801503a:	4613      	mov	r3, r2
 801503c:	009b      	lsls	r3, r3, #2
 801503e:	4413      	add	r3, r2
 8015040:	009b      	lsls	r3, r3, #2
 8015042:	440b      	add	r3, r1
 8015044:	3318      	adds	r3, #24
 8015046:	2200      	movs	r2, #0
 8015048:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801504a:	78f9      	ldrb	r1, [r7, #3]
 801504c:	2300      	movs	r3, #0
 801504e:	2200      	movs	r2, #0
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f004 fabd 	bl	80195d0 <USBD_LL_Transmit>
 8015056:	e015      	b.n	8015084 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	2200      	movs	r2, #0
 801505c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015066:	691b      	ldr	r3, [r3, #16]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d00b      	beq.n	8015084 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015072:	691b      	ldr	r3, [r3, #16]
 8015074:	68ba      	ldr	r2, [r7, #8]
 8015076:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801507a:	68ba      	ldr	r2, [r7, #8]
 801507c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015080:	78fa      	ldrb	r2, [r7, #3]
 8015082:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015084:	2300      	movs	r3, #0
}
 8015086:	4618      	mov	r0, r3
 8015088:	3710      	adds	r7, #16
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}

0801508e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801508e:	b580      	push	{r7, lr}
 8015090:	b084      	sub	sp, #16
 8015092:	af00      	add	r7, sp, #0
 8015094:	6078      	str	r0, [r7, #4]
 8015096:	460b      	mov	r3, r1
 8015098:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d101      	bne.n	80150b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80150ac:	2303      	movs	r3, #3
 80150ae:	e015      	b.n	80150dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80150b0:	78fb      	ldrb	r3, [r7, #3]
 80150b2:	4619      	mov	r1, r3
 80150b4:	6878      	ldr	r0, [r7, #4]
 80150b6:	f004 facd 	bl	8019654 <USBD_LL_GetRxDataSize>
 80150ba:	4602      	mov	r2, r0
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80150c8:	68db      	ldr	r3, [r3, #12]
 80150ca:	68fa      	ldr	r2, [r7, #12]
 80150cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80150d0:	68fa      	ldr	r2, [r7, #12]
 80150d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80150d6:	4611      	mov	r1, r2
 80150d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80150da:	2300      	movs	r3, #0
}
 80150dc:	4618      	mov	r0, r3
 80150de:	3710      	adds	r7, #16
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}

080150e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d101      	bne.n	80150fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80150fa:	2303      	movs	r3, #3
 80150fc:	e01b      	b.n	8015136 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015104:	2b00      	cmp	r3, #0
 8015106:	d015      	beq.n	8015134 <USBD_CDC_EP0_RxReady+0x50>
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801510e:	2bff      	cmp	r3, #255	; 0xff
 8015110:	d010      	beq.n	8015134 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015118:	689b      	ldr	r3, [r3, #8]
 801511a:	68fa      	ldr	r2, [r7, #12]
 801511c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8015120:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8015122:	68fa      	ldr	r2, [r7, #12]
 8015124:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8015128:	b292      	uxth	r2, r2
 801512a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	22ff      	movs	r2, #255	; 0xff
 8015130:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015134:	2300      	movs	r3, #0
}
 8015136:	4618      	mov	r0, r3
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
	...

08015140 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015140:	b480      	push	{r7}
 8015142:	b083      	sub	sp, #12
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	2243      	movs	r2, #67	; 0x43
 801514c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801514e:	4b03      	ldr	r3, [pc, #12]	; (801515c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8015150:	4618      	mov	r0, r3
 8015152:	370c      	adds	r7, #12
 8015154:	46bd      	mov	sp, r7
 8015156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801515a:	4770      	bx	lr
 801515c:	200000a4 	.word	0x200000a4

08015160 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015160:	b480      	push	{r7}
 8015162:	b083      	sub	sp, #12
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2243      	movs	r2, #67	; 0x43
 801516c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801516e:	4b03      	ldr	r3, [pc, #12]	; (801517c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8015170:	4618      	mov	r0, r3
 8015172:	370c      	adds	r7, #12
 8015174:	46bd      	mov	sp, r7
 8015176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517a:	4770      	bx	lr
 801517c:	20000060 	.word	0x20000060

08015180 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015180:	b480      	push	{r7}
 8015182:	b083      	sub	sp, #12
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2243      	movs	r2, #67	; 0x43
 801518c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801518e:	4b03      	ldr	r3, [pc, #12]	; (801519c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8015190:	4618      	mov	r0, r3
 8015192:	370c      	adds	r7, #12
 8015194:	46bd      	mov	sp, r7
 8015196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519a:	4770      	bx	lr
 801519c:	200000e8 	.word	0x200000e8

080151a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80151a0:	b480      	push	{r7}
 80151a2:	b083      	sub	sp, #12
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	220a      	movs	r2, #10
 80151ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80151ae:	4b03      	ldr	r3, [pc, #12]	; (80151bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80151b0:	4618      	mov	r0, r3
 80151b2:	370c      	adds	r7, #12
 80151b4:	46bd      	mov	sp, r7
 80151b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ba:	4770      	bx	lr
 80151bc:	2000001c 	.word	0x2000001c

080151c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80151c0:	b480      	push	{r7}
 80151c2:	b083      	sub	sp, #12
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d101      	bne.n	80151d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80151d0:	2303      	movs	r3, #3
 80151d2:	e004      	b.n	80151de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	683a      	ldr	r2, [r7, #0]
 80151d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80151dc:	2300      	movs	r3, #0
}
 80151de:	4618      	mov	r0, r3
 80151e0:	370c      	adds	r7, #12
 80151e2:	46bd      	mov	sp, r7
 80151e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e8:	4770      	bx	lr

080151ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80151ea:	b480      	push	{r7}
 80151ec:	b087      	sub	sp, #28
 80151ee:	af00      	add	r7, sp, #0
 80151f0:	60f8      	str	r0, [r7, #12]
 80151f2:	60b9      	str	r1, [r7, #8]
 80151f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80151fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d101      	bne.n	8015208 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8015204:	2303      	movs	r3, #3
 8015206:	e008      	b.n	801521a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	68ba      	ldr	r2, [r7, #8]
 801520c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015210:	697b      	ldr	r3, [r7, #20]
 8015212:	687a      	ldr	r2, [r7, #4]
 8015214:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015218:	2300      	movs	r3, #0
}
 801521a:	4618      	mov	r0, r3
 801521c:	371c      	adds	r7, #28
 801521e:	46bd      	mov	sp, r7
 8015220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015224:	4770      	bx	lr

08015226 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015226:	b480      	push	{r7}
 8015228:	b085      	sub	sp, #20
 801522a:	af00      	add	r7, sp, #0
 801522c:	6078      	str	r0, [r7, #4]
 801522e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015236:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d101      	bne.n	8015242 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801523e:	2303      	movs	r3, #3
 8015240:	e004      	b.n	801524c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	683a      	ldr	r2, [r7, #0]
 8015246:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801524a:	2300      	movs	r3, #0
}
 801524c:	4618      	mov	r0, r3
 801524e:	3714      	adds	r7, #20
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr

08015258 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b084      	sub	sp, #16
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015266:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8015268:	2301      	movs	r3, #1
 801526a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015272:	2b00      	cmp	r3, #0
 8015274:	d101      	bne.n	801527a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015276:	2303      	movs	r3, #3
 8015278:	e01a      	b.n	80152b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015280:	2b00      	cmp	r3, #0
 8015282:	d114      	bne.n	80152ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	2201      	movs	r2, #1
 8015288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8015296:	68bb      	ldr	r3, [r7, #8]
 8015298:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80152a2:	2181      	movs	r1, #129	; 0x81
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f004 f993 	bl	80195d0 <USBD_LL_Transmit>

    ret = USBD_OK;
 80152aa:	2300      	movs	r3, #0
 80152ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80152ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80152b0:	4618      	mov	r0, r3
 80152b2:	3710      	adds	r7, #16
 80152b4:	46bd      	mov	sp, r7
 80152b6:	bd80      	pop	{r7, pc}

080152b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b084      	sub	sp, #16
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80152c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d101      	bne.n	80152d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80152d2:	2303      	movs	r3, #3
 80152d4:	e016      	b.n	8015304 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	7c1b      	ldrb	r3, [r3, #16]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d109      	bne.n	80152f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80152e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80152e8:	2101      	movs	r1, #1
 80152ea:	6878      	ldr	r0, [r7, #4]
 80152ec:	f004 f991 	bl	8019612 <USBD_LL_PrepareReceive>
 80152f0:	e007      	b.n	8015302 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80152f8:	2340      	movs	r3, #64	; 0x40
 80152fa:	2101      	movs	r1, #1
 80152fc:	6878      	ldr	r0, [r7, #4]
 80152fe:	f004 f988 	bl	8019612 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015302:	2300      	movs	r3, #0
}
 8015304:	4618      	mov	r0, r3
 8015306:	3710      	adds	r7, #16
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}

0801530c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	b086      	sub	sp, #24
 8015310:	af00      	add	r7, sp, #0
 8015312:	60f8      	str	r0, [r7, #12]
 8015314:	60b9      	str	r1, [r7, #8]
 8015316:	4613      	mov	r3, r2
 8015318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d101      	bne.n	8015324 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015320:	2303      	movs	r3, #3
 8015322:	e01f      	b.n	8015364 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	2200      	movs	r2, #0
 8015328:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	2200      	movs	r2, #0
 8015330:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	2200      	movs	r2, #0
 8015338:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d003      	beq.n	801534a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	68ba      	ldr	r2, [r7, #8]
 8015346:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	2201      	movs	r2, #1
 801534e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	79fa      	ldrb	r2, [r7, #7]
 8015356:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015358:	68f8      	ldr	r0, [r7, #12]
 801535a:	f003 ffef 	bl	801933c <USBD_LL_Init>
 801535e:	4603      	mov	r3, r0
 8015360:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015362:	7dfb      	ldrb	r3, [r7, #23]
}
 8015364:	4618      	mov	r0, r3
 8015366:	3718      	adds	r7, #24
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b084      	sub	sp, #16
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015376:	2300      	movs	r3, #0
 8015378:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801537a:	683b      	ldr	r3, [r7, #0]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d101      	bne.n	8015384 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8015380:	2303      	movs	r3, #3
 8015382:	e016      	b.n	80153b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	683a      	ldr	r2, [r7, #0]
 8015388:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015394:	2b00      	cmp	r3, #0
 8015396:	d00b      	beq.n	80153b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153a0:	f107 020e 	add.w	r2, r7, #14
 80153a4:	4610      	mov	r0, r2
 80153a6:	4798      	blx	r3
 80153a8:	4602      	mov	r2, r0
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80153b0:	2300      	movs	r3, #0
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	3710      	adds	r7, #16
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}

080153ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80153ba:	b580      	push	{r7, lr}
 80153bc:	b082      	sub	sp, #8
 80153be:	af00      	add	r7, sp, #0
 80153c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f004 f81a 	bl	80193fc <USBD_LL_Start>
 80153c8:	4603      	mov	r3, r0
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	3708      	adds	r7, #8
 80153ce:	46bd      	mov	sp, r7
 80153d0:	bd80      	pop	{r7, pc}

080153d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80153d2:	b480      	push	{r7}
 80153d4:	b083      	sub	sp, #12
 80153d6:	af00      	add	r7, sp, #0
 80153d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80153da:	2300      	movs	r3, #0
}
 80153dc:	4618      	mov	r0, r3
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr

080153e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b084      	sub	sp, #16
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	460b      	mov	r3, r1
 80153f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80153f4:	2303      	movs	r3, #3
 80153f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d009      	beq.n	8015416 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	78fa      	ldrb	r2, [r7, #3]
 801540c:	4611      	mov	r1, r2
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	4798      	blx	r3
 8015412:	4603      	mov	r3, r0
 8015414:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015416:	7bfb      	ldrb	r3, [r7, #15]
}
 8015418:	4618      	mov	r0, r3
 801541a:	3710      	adds	r7, #16
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}

08015420 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	460b      	mov	r3, r1
 801542a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015432:	2b00      	cmp	r3, #0
 8015434:	d007      	beq.n	8015446 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	78fa      	ldrb	r2, [r7, #3]
 8015440:	4611      	mov	r1, r2
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	4798      	blx	r3
  }

  return USBD_OK;
 8015446:	2300      	movs	r3, #0
}
 8015448:	4618      	mov	r0, r3
 801544a:	3708      	adds	r7, #8
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}

08015450 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b084      	sub	sp, #16
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015460:	6839      	ldr	r1, [r7, #0]
 8015462:	4618      	mov	r0, r3
 8015464:	f000 ff46 	bl	80162f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2201      	movs	r2, #1
 801546c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015476:	461a      	mov	r2, r3
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015484:	f003 031f 	and.w	r3, r3, #31
 8015488:	2b02      	cmp	r3, #2
 801548a:	d01a      	beq.n	80154c2 <USBD_LL_SetupStage+0x72>
 801548c:	2b02      	cmp	r3, #2
 801548e:	d822      	bhi.n	80154d6 <USBD_LL_SetupStage+0x86>
 8015490:	2b00      	cmp	r3, #0
 8015492:	d002      	beq.n	801549a <USBD_LL_SetupStage+0x4a>
 8015494:	2b01      	cmp	r3, #1
 8015496:	d00a      	beq.n	80154ae <USBD_LL_SetupStage+0x5e>
 8015498:	e01d      	b.n	80154d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154a0:	4619      	mov	r1, r3
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f000 f9ee 	bl	8015884 <USBD_StdDevReq>
 80154a8:	4603      	mov	r3, r0
 80154aa:	73fb      	strb	r3, [r7, #15]
      break;
 80154ac:	e020      	b.n	80154f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154b4:	4619      	mov	r1, r3
 80154b6:	6878      	ldr	r0, [r7, #4]
 80154b8:	f000 fa52 	bl	8015960 <USBD_StdItfReq>
 80154bc:	4603      	mov	r3, r0
 80154be:	73fb      	strb	r3, [r7, #15]
      break;
 80154c0:	e016      	b.n	80154f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80154c8:	4619      	mov	r1, r3
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f000 fa91 	bl	80159f2 <USBD_StdEPReq>
 80154d0:	4603      	mov	r3, r0
 80154d2:	73fb      	strb	r3, [r7, #15]
      break;
 80154d4:	e00c      	b.n	80154f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80154dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80154e0:	b2db      	uxtb	r3, r3
 80154e2:	4619      	mov	r1, r3
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	f003 ffe9 	bl	80194bc <USBD_LL_StallEP>
 80154ea:	4603      	mov	r3, r0
 80154ec:	73fb      	strb	r3, [r7, #15]
      break;
 80154ee:	bf00      	nop
  }

  return ret;
 80154f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3710      	adds	r7, #16
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}

080154fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80154fa:	b580      	push	{r7, lr}
 80154fc:	b086      	sub	sp, #24
 80154fe:	af00      	add	r7, sp, #0
 8015500:	60f8      	str	r0, [r7, #12]
 8015502:	460b      	mov	r3, r1
 8015504:	607a      	str	r2, [r7, #4]
 8015506:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015508:	7afb      	ldrb	r3, [r7, #11]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d138      	bne.n	8015580 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015514:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801551c:	2b03      	cmp	r3, #3
 801551e:	d14a      	bne.n	80155b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	689a      	ldr	r2, [r3, #8]
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	429a      	cmp	r2, r3
 801552a:	d913      	bls.n	8015554 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	689a      	ldr	r2, [r3, #8]
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	68db      	ldr	r3, [r3, #12]
 8015534:	1ad2      	subs	r2, r2, r3
 8015536:	693b      	ldr	r3, [r7, #16]
 8015538:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	68da      	ldr	r2, [r3, #12]
 801553e:	693b      	ldr	r3, [r7, #16]
 8015540:	689b      	ldr	r3, [r3, #8]
 8015542:	4293      	cmp	r3, r2
 8015544:	bf28      	it	cs
 8015546:	4613      	movcs	r3, r2
 8015548:	461a      	mov	r2, r3
 801554a:	6879      	ldr	r1, [r7, #4]
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f000 ffc5 	bl	80164dc <USBD_CtlContinueRx>
 8015552:	e030      	b.n	80155b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801555a:	b2db      	uxtb	r3, r3
 801555c:	2b03      	cmp	r3, #3
 801555e:	d10b      	bne.n	8015578 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015566:	691b      	ldr	r3, [r3, #16]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d005      	beq.n	8015578 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015572:	691b      	ldr	r3, [r3, #16]
 8015574:	68f8      	ldr	r0, [r7, #12]
 8015576:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015578:	68f8      	ldr	r0, [r7, #12]
 801557a:	f000 ffc0 	bl	80164fe <USBD_CtlSendStatus>
 801557e:	e01a      	b.n	80155b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015586:	b2db      	uxtb	r3, r3
 8015588:	2b03      	cmp	r3, #3
 801558a:	d114      	bne.n	80155b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015592:	699b      	ldr	r3, [r3, #24]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d00e      	beq.n	80155b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801559e:	699b      	ldr	r3, [r3, #24]
 80155a0:	7afa      	ldrb	r2, [r7, #11]
 80155a2:	4611      	mov	r1, r2
 80155a4:	68f8      	ldr	r0, [r7, #12]
 80155a6:	4798      	blx	r3
 80155a8:	4603      	mov	r3, r0
 80155aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80155ac:	7dfb      	ldrb	r3, [r7, #23]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d001      	beq.n	80155b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80155b2:	7dfb      	ldrb	r3, [r7, #23]
 80155b4:	e000      	b.n	80155b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80155b6:	2300      	movs	r3, #0
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3718      	adds	r7, #24
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b086      	sub	sp, #24
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	60f8      	str	r0, [r7, #12]
 80155c8:	460b      	mov	r3, r1
 80155ca:	607a      	str	r2, [r7, #4]
 80155cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80155ce:	7afb      	ldrb	r3, [r7, #11]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d16b      	bne.n	80156ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	3314      	adds	r3, #20
 80155d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80155e0:	2b02      	cmp	r3, #2
 80155e2:	d156      	bne.n	8015692 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	689a      	ldr	r2, [r3, #8]
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d914      	bls.n	801561a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80155f0:	693b      	ldr	r3, [r7, #16]
 80155f2:	689a      	ldr	r2, [r3, #8]
 80155f4:	693b      	ldr	r3, [r7, #16]
 80155f6:	68db      	ldr	r3, [r3, #12]
 80155f8:	1ad2      	subs	r2, r2, r3
 80155fa:	693b      	ldr	r3, [r7, #16]
 80155fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80155fe:	693b      	ldr	r3, [r7, #16]
 8015600:	689b      	ldr	r3, [r3, #8]
 8015602:	461a      	mov	r2, r3
 8015604:	6879      	ldr	r1, [r7, #4]
 8015606:	68f8      	ldr	r0, [r7, #12]
 8015608:	f000 ff3a 	bl	8016480 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801560c:	2300      	movs	r3, #0
 801560e:	2200      	movs	r2, #0
 8015610:	2100      	movs	r1, #0
 8015612:	68f8      	ldr	r0, [r7, #12]
 8015614:	f003 fffd 	bl	8019612 <USBD_LL_PrepareReceive>
 8015618:	e03b      	b.n	8015692 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801561a:	693b      	ldr	r3, [r7, #16]
 801561c:	68da      	ldr	r2, [r3, #12]
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	689b      	ldr	r3, [r3, #8]
 8015622:	429a      	cmp	r2, r3
 8015624:	d11c      	bne.n	8015660 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015626:	693b      	ldr	r3, [r7, #16]
 8015628:	685a      	ldr	r2, [r3, #4]
 801562a:	693b      	ldr	r3, [r7, #16]
 801562c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801562e:	429a      	cmp	r2, r3
 8015630:	d316      	bcc.n	8015660 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015632:	693b      	ldr	r3, [r7, #16]
 8015634:	685a      	ldr	r2, [r3, #4]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801563c:	429a      	cmp	r2, r3
 801563e:	d20f      	bcs.n	8015660 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015640:	2200      	movs	r2, #0
 8015642:	2100      	movs	r1, #0
 8015644:	68f8      	ldr	r0, [r7, #12]
 8015646:	f000 ff1b 	bl	8016480 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	2200      	movs	r2, #0
 801564e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015652:	2300      	movs	r3, #0
 8015654:	2200      	movs	r2, #0
 8015656:	2100      	movs	r1, #0
 8015658:	68f8      	ldr	r0, [r7, #12]
 801565a:	f003 ffda 	bl	8019612 <USBD_LL_PrepareReceive>
 801565e:	e018      	b.n	8015692 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015666:	b2db      	uxtb	r3, r3
 8015668:	2b03      	cmp	r3, #3
 801566a:	d10b      	bne.n	8015684 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015672:	68db      	ldr	r3, [r3, #12]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d005      	beq.n	8015684 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801567e:	68db      	ldr	r3, [r3, #12]
 8015680:	68f8      	ldr	r0, [r7, #12]
 8015682:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015684:	2180      	movs	r1, #128	; 0x80
 8015686:	68f8      	ldr	r0, [r7, #12]
 8015688:	f003 ff18 	bl	80194bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801568c:	68f8      	ldr	r0, [r7, #12]
 801568e:	f000 ff49 	bl	8016524 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015698:	2b01      	cmp	r3, #1
 801569a:	d122      	bne.n	80156e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801569c:	68f8      	ldr	r0, [r7, #12]
 801569e:	f7ff fe98 	bl	80153d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	2200      	movs	r2, #0
 80156a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80156aa:	e01a      	b.n	80156e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156b2:	b2db      	uxtb	r3, r3
 80156b4:	2b03      	cmp	r3, #3
 80156b6:	d114      	bne.n	80156e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156be:	695b      	ldr	r3, [r3, #20]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d00e      	beq.n	80156e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156ca:	695b      	ldr	r3, [r3, #20]
 80156cc:	7afa      	ldrb	r2, [r7, #11]
 80156ce:	4611      	mov	r1, r2
 80156d0:	68f8      	ldr	r0, [r7, #12]
 80156d2:	4798      	blx	r3
 80156d4:	4603      	mov	r3, r0
 80156d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80156d8:	7dfb      	ldrb	r3, [r7, #23]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d001      	beq.n	80156e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80156de:	7dfb      	ldrb	r3, [r7, #23]
 80156e0:	e000      	b.n	80156e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80156e2:	2300      	movs	r3, #0
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	3718      	adds	r7, #24
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}

080156ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2201      	movs	r2, #1
 80156f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2200      	movs	r2, #0
 8015700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	2200      	movs	r2, #0
 8015708:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2200      	movs	r2, #0
 801570e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015718:	2b00      	cmp	r3, #0
 801571a:	d101      	bne.n	8015720 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801571c:	2303      	movs	r3, #3
 801571e:	e02f      	b.n	8015780 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015726:	2b00      	cmp	r3, #0
 8015728:	d00f      	beq.n	801574a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015730:	685b      	ldr	r3, [r3, #4]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d009      	beq.n	801574a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801573c:	685b      	ldr	r3, [r3, #4]
 801573e:	687a      	ldr	r2, [r7, #4]
 8015740:	6852      	ldr	r2, [r2, #4]
 8015742:	b2d2      	uxtb	r2, r2
 8015744:	4611      	mov	r1, r2
 8015746:	6878      	ldr	r0, [r7, #4]
 8015748:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801574a:	2340      	movs	r3, #64	; 0x40
 801574c:	2200      	movs	r2, #0
 801574e:	2100      	movs	r1, #0
 8015750:	6878      	ldr	r0, [r7, #4]
 8015752:	f003 fe6e 	bl	8019432 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2201      	movs	r2, #1
 801575a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	2240      	movs	r2, #64	; 0x40
 8015762:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015766:	2340      	movs	r3, #64	; 0x40
 8015768:	2200      	movs	r2, #0
 801576a:	2180      	movs	r1, #128	; 0x80
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f003 fe60 	bl	8019432 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2201      	movs	r2, #1
 8015776:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2240      	movs	r2, #64	; 0x40
 801577c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801577e:	2300      	movs	r3, #0
}
 8015780:	4618      	mov	r0, r3
 8015782:	3708      	adds	r7, #8
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}

08015788 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015788:	b480      	push	{r7}
 801578a:	b083      	sub	sp, #12
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	460b      	mov	r3, r1
 8015792:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	78fa      	ldrb	r2, [r7, #3]
 8015798:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801579a:	2300      	movs	r3, #0
}
 801579c:	4618      	mov	r0, r3
 801579e:	370c      	adds	r7, #12
 80157a0:	46bd      	mov	sp, r7
 80157a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a6:	4770      	bx	lr

080157a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80157a8:	b480      	push	{r7}
 80157aa:	b083      	sub	sp, #12
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157b6:	b2da      	uxtb	r2, r3
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	2204      	movs	r2, #4
 80157c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80157c6:	2300      	movs	r3, #0
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	370c      	adds	r7, #12
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr

080157d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80157d4:	b480      	push	{r7}
 80157d6:	b083      	sub	sp, #12
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157e2:	b2db      	uxtb	r3, r3
 80157e4:	2b04      	cmp	r3, #4
 80157e6:	d106      	bne.n	80157f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80157ee:	b2da      	uxtb	r2, r3
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80157f6:	2300      	movs	r3, #0
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	370c      	adds	r7, #12
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr

08015804 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b082      	sub	sp, #8
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015812:	2b00      	cmp	r3, #0
 8015814:	d101      	bne.n	801581a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8015816:	2303      	movs	r3, #3
 8015818:	e012      	b.n	8015840 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015820:	b2db      	uxtb	r3, r3
 8015822:	2b03      	cmp	r3, #3
 8015824:	d10b      	bne.n	801583e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801582c:	69db      	ldr	r3, [r3, #28]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d005      	beq.n	801583e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015838:	69db      	ldr	r3, [r3, #28]
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801583e:	2300      	movs	r3, #0
}
 8015840:	4618      	mov	r0, r3
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015848:	b480      	push	{r7}
 801584a:	b087      	sub	sp, #28
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	781b      	ldrb	r3, [r3, #0]
 8015858:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	3301      	adds	r3, #1
 801585e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015866:	8a3b      	ldrh	r3, [r7, #16]
 8015868:	021b      	lsls	r3, r3, #8
 801586a:	b21a      	sxth	r2, r3
 801586c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015870:	4313      	orrs	r3, r2
 8015872:	b21b      	sxth	r3, r3
 8015874:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015876:	89fb      	ldrh	r3, [r7, #14]
}
 8015878:	4618      	mov	r0, r3
 801587a:	371c      	adds	r7, #28
 801587c:	46bd      	mov	sp, r7
 801587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015882:	4770      	bx	lr

08015884 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b084      	sub	sp, #16
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801588e:	2300      	movs	r3, #0
 8015890:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801589a:	2b40      	cmp	r3, #64	; 0x40
 801589c:	d005      	beq.n	80158aa <USBD_StdDevReq+0x26>
 801589e:	2b40      	cmp	r3, #64	; 0x40
 80158a0:	d853      	bhi.n	801594a <USBD_StdDevReq+0xc6>
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d00b      	beq.n	80158be <USBD_StdDevReq+0x3a>
 80158a6:	2b20      	cmp	r3, #32
 80158a8:	d14f      	bne.n	801594a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158b0:	689b      	ldr	r3, [r3, #8]
 80158b2:	6839      	ldr	r1, [r7, #0]
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	4798      	blx	r3
 80158b8:	4603      	mov	r3, r0
 80158ba:	73fb      	strb	r3, [r7, #15]
      break;
 80158bc:	e04a      	b.n	8015954 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	785b      	ldrb	r3, [r3, #1]
 80158c2:	2b09      	cmp	r3, #9
 80158c4:	d83b      	bhi.n	801593e <USBD_StdDevReq+0xba>
 80158c6:	a201      	add	r2, pc, #4	; (adr r2, 80158cc <USBD_StdDevReq+0x48>)
 80158c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158cc:	08015921 	.word	0x08015921
 80158d0:	08015935 	.word	0x08015935
 80158d4:	0801593f 	.word	0x0801593f
 80158d8:	0801592b 	.word	0x0801592b
 80158dc:	0801593f 	.word	0x0801593f
 80158e0:	080158ff 	.word	0x080158ff
 80158e4:	080158f5 	.word	0x080158f5
 80158e8:	0801593f 	.word	0x0801593f
 80158ec:	08015917 	.word	0x08015917
 80158f0:	08015909 	.word	0x08015909
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80158f4:	6839      	ldr	r1, [r7, #0]
 80158f6:	6878      	ldr	r0, [r7, #4]
 80158f8:	f000 f9de 	bl	8015cb8 <USBD_GetDescriptor>
          break;
 80158fc:	e024      	b.n	8015948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80158fe:	6839      	ldr	r1, [r7, #0]
 8015900:	6878      	ldr	r0, [r7, #4]
 8015902:	f000 fb6d 	bl	8015fe0 <USBD_SetAddress>
          break;
 8015906:	e01f      	b.n	8015948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015908:	6839      	ldr	r1, [r7, #0]
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f000 fbac 	bl	8016068 <USBD_SetConfig>
 8015910:	4603      	mov	r3, r0
 8015912:	73fb      	strb	r3, [r7, #15]
          break;
 8015914:	e018      	b.n	8015948 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015916:	6839      	ldr	r1, [r7, #0]
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f000 fc4b 	bl	80161b4 <USBD_GetConfig>
          break;
 801591e:	e013      	b.n	8015948 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015920:	6839      	ldr	r1, [r7, #0]
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f000 fc7c 	bl	8016220 <USBD_GetStatus>
          break;
 8015928:	e00e      	b.n	8015948 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801592a:	6839      	ldr	r1, [r7, #0]
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f000 fcab 	bl	8016288 <USBD_SetFeature>
          break;
 8015932:	e009      	b.n	8015948 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015934:	6839      	ldr	r1, [r7, #0]
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f000 fcba 	bl	80162b0 <USBD_ClrFeature>
          break;
 801593c:	e004      	b.n	8015948 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801593e:	6839      	ldr	r1, [r7, #0]
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f000 fd11 	bl	8016368 <USBD_CtlError>
          break;
 8015946:	bf00      	nop
      }
      break;
 8015948:	e004      	b.n	8015954 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801594a:	6839      	ldr	r1, [r7, #0]
 801594c:	6878      	ldr	r0, [r7, #4]
 801594e:	f000 fd0b 	bl	8016368 <USBD_CtlError>
      break;
 8015952:	bf00      	nop
  }

  return ret;
 8015954:	7bfb      	ldrb	r3, [r7, #15]
}
 8015956:	4618      	mov	r0, r3
 8015958:	3710      	adds	r7, #16
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
 801595e:	bf00      	nop

08015960 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801596a:	2300      	movs	r3, #0
 801596c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	781b      	ldrb	r3, [r3, #0]
 8015972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015976:	2b40      	cmp	r3, #64	; 0x40
 8015978:	d005      	beq.n	8015986 <USBD_StdItfReq+0x26>
 801597a:	2b40      	cmp	r3, #64	; 0x40
 801597c:	d82f      	bhi.n	80159de <USBD_StdItfReq+0x7e>
 801597e:	2b00      	cmp	r3, #0
 8015980:	d001      	beq.n	8015986 <USBD_StdItfReq+0x26>
 8015982:	2b20      	cmp	r3, #32
 8015984:	d12b      	bne.n	80159de <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801598c:	b2db      	uxtb	r3, r3
 801598e:	3b01      	subs	r3, #1
 8015990:	2b02      	cmp	r3, #2
 8015992:	d81d      	bhi.n	80159d0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	889b      	ldrh	r3, [r3, #4]
 8015998:	b2db      	uxtb	r3, r3
 801599a:	2b01      	cmp	r3, #1
 801599c:	d813      	bhi.n	80159c6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159a4:	689b      	ldr	r3, [r3, #8]
 80159a6:	6839      	ldr	r1, [r7, #0]
 80159a8:	6878      	ldr	r0, [r7, #4]
 80159aa:	4798      	blx	r3
 80159ac:	4603      	mov	r3, r0
 80159ae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	88db      	ldrh	r3, [r3, #6]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d110      	bne.n	80159da <USBD_StdItfReq+0x7a>
 80159b8:	7bfb      	ldrb	r3, [r7, #15]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d10d      	bne.n	80159da <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f000 fd9d 	bl	80164fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80159c4:	e009      	b.n	80159da <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80159c6:	6839      	ldr	r1, [r7, #0]
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f000 fccd 	bl	8016368 <USBD_CtlError>
          break;
 80159ce:	e004      	b.n	80159da <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80159d0:	6839      	ldr	r1, [r7, #0]
 80159d2:	6878      	ldr	r0, [r7, #4]
 80159d4:	f000 fcc8 	bl	8016368 <USBD_CtlError>
          break;
 80159d8:	e000      	b.n	80159dc <USBD_StdItfReq+0x7c>
          break;
 80159da:	bf00      	nop
      }
      break;
 80159dc:	e004      	b.n	80159e8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80159de:	6839      	ldr	r1, [r7, #0]
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f000 fcc1 	bl	8016368 <USBD_CtlError>
      break;
 80159e6:	bf00      	nop
  }

  return ret;
 80159e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80159ea:	4618      	mov	r0, r3
 80159ec:	3710      	adds	r7, #16
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}

080159f2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159f2:	b580      	push	{r7, lr}
 80159f4:	b084      	sub	sp, #16
 80159f6:	af00      	add	r7, sp, #0
 80159f8:	6078      	str	r0, [r7, #4]
 80159fa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80159fc:	2300      	movs	r3, #0
 80159fe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	889b      	ldrh	r3, [r3, #4]
 8015a04:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	781b      	ldrb	r3, [r3, #0]
 8015a0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015a0e:	2b40      	cmp	r3, #64	; 0x40
 8015a10:	d007      	beq.n	8015a22 <USBD_StdEPReq+0x30>
 8015a12:	2b40      	cmp	r3, #64	; 0x40
 8015a14:	f200 8145 	bhi.w	8015ca2 <USBD_StdEPReq+0x2b0>
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d00c      	beq.n	8015a36 <USBD_StdEPReq+0x44>
 8015a1c:	2b20      	cmp	r3, #32
 8015a1e:	f040 8140 	bne.w	8015ca2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a28:	689b      	ldr	r3, [r3, #8]
 8015a2a:	6839      	ldr	r1, [r7, #0]
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	4798      	blx	r3
 8015a30:	4603      	mov	r3, r0
 8015a32:	73fb      	strb	r3, [r7, #15]
      break;
 8015a34:	e13a      	b.n	8015cac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a36:	683b      	ldr	r3, [r7, #0]
 8015a38:	785b      	ldrb	r3, [r3, #1]
 8015a3a:	2b03      	cmp	r3, #3
 8015a3c:	d007      	beq.n	8015a4e <USBD_StdEPReq+0x5c>
 8015a3e:	2b03      	cmp	r3, #3
 8015a40:	f300 8129 	bgt.w	8015c96 <USBD_StdEPReq+0x2a4>
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d07f      	beq.n	8015b48 <USBD_StdEPReq+0x156>
 8015a48:	2b01      	cmp	r3, #1
 8015a4a:	d03c      	beq.n	8015ac6 <USBD_StdEPReq+0xd4>
 8015a4c:	e123      	b.n	8015c96 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a54:	b2db      	uxtb	r3, r3
 8015a56:	2b02      	cmp	r3, #2
 8015a58:	d002      	beq.n	8015a60 <USBD_StdEPReq+0x6e>
 8015a5a:	2b03      	cmp	r3, #3
 8015a5c:	d016      	beq.n	8015a8c <USBD_StdEPReq+0x9a>
 8015a5e:	e02c      	b.n	8015aba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a60:	7bbb      	ldrb	r3, [r7, #14]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d00d      	beq.n	8015a82 <USBD_StdEPReq+0x90>
 8015a66:	7bbb      	ldrb	r3, [r7, #14]
 8015a68:	2b80      	cmp	r3, #128	; 0x80
 8015a6a:	d00a      	beq.n	8015a82 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a6c:	7bbb      	ldrb	r3, [r7, #14]
 8015a6e:	4619      	mov	r1, r3
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f003 fd23 	bl	80194bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a76:	2180      	movs	r1, #128	; 0x80
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f003 fd1f 	bl	80194bc <USBD_LL_StallEP>
 8015a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a80:	e020      	b.n	8015ac4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8015a82:	6839      	ldr	r1, [r7, #0]
 8015a84:	6878      	ldr	r0, [r7, #4]
 8015a86:	f000 fc6f 	bl	8016368 <USBD_CtlError>
              break;
 8015a8a:	e01b      	b.n	8015ac4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	885b      	ldrh	r3, [r3, #2]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d10e      	bne.n	8015ab2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015a94:	7bbb      	ldrb	r3, [r7, #14]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d00b      	beq.n	8015ab2 <USBD_StdEPReq+0xc0>
 8015a9a:	7bbb      	ldrb	r3, [r7, #14]
 8015a9c:	2b80      	cmp	r3, #128	; 0x80
 8015a9e:	d008      	beq.n	8015ab2 <USBD_StdEPReq+0xc0>
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	88db      	ldrh	r3, [r3, #6]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d104      	bne.n	8015ab2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015aa8:	7bbb      	ldrb	r3, [r7, #14]
 8015aaa:	4619      	mov	r1, r3
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f003 fd05 	bl	80194bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f000 fd23 	bl	80164fe <USBD_CtlSendStatus>

              break;
 8015ab8:	e004      	b.n	8015ac4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8015aba:	6839      	ldr	r1, [r7, #0]
 8015abc:	6878      	ldr	r0, [r7, #4]
 8015abe:	f000 fc53 	bl	8016368 <USBD_CtlError>
              break;
 8015ac2:	bf00      	nop
          }
          break;
 8015ac4:	e0ec      	b.n	8015ca0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015acc:	b2db      	uxtb	r3, r3
 8015ace:	2b02      	cmp	r3, #2
 8015ad0:	d002      	beq.n	8015ad8 <USBD_StdEPReq+0xe6>
 8015ad2:	2b03      	cmp	r3, #3
 8015ad4:	d016      	beq.n	8015b04 <USBD_StdEPReq+0x112>
 8015ad6:	e030      	b.n	8015b3a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ad8:	7bbb      	ldrb	r3, [r7, #14]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d00d      	beq.n	8015afa <USBD_StdEPReq+0x108>
 8015ade:	7bbb      	ldrb	r3, [r7, #14]
 8015ae0:	2b80      	cmp	r3, #128	; 0x80
 8015ae2:	d00a      	beq.n	8015afa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ae4:	7bbb      	ldrb	r3, [r7, #14]
 8015ae6:	4619      	mov	r1, r3
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	f003 fce7 	bl	80194bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015aee:	2180      	movs	r1, #128	; 0x80
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f003 fce3 	bl	80194bc <USBD_LL_StallEP>
 8015af6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015af8:	e025      	b.n	8015b46 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8015afa:	6839      	ldr	r1, [r7, #0]
 8015afc:	6878      	ldr	r0, [r7, #4]
 8015afe:	f000 fc33 	bl	8016368 <USBD_CtlError>
              break;
 8015b02:	e020      	b.n	8015b46 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	885b      	ldrh	r3, [r3, #2]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d11b      	bne.n	8015b44 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015b0c:	7bbb      	ldrb	r3, [r7, #14]
 8015b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d004      	beq.n	8015b20 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b16:	7bbb      	ldrb	r3, [r7, #14]
 8015b18:	4619      	mov	r1, r3
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f003 fced 	bl	80194fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015b20:	6878      	ldr	r0, [r7, #4]
 8015b22:	f000 fcec 	bl	80164fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b2c:	689b      	ldr	r3, [r3, #8]
 8015b2e:	6839      	ldr	r1, [r7, #0]
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	4798      	blx	r3
 8015b34:	4603      	mov	r3, r0
 8015b36:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8015b38:	e004      	b.n	8015b44 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8015b3a:	6839      	ldr	r1, [r7, #0]
 8015b3c:	6878      	ldr	r0, [r7, #4]
 8015b3e:	f000 fc13 	bl	8016368 <USBD_CtlError>
              break;
 8015b42:	e000      	b.n	8015b46 <USBD_StdEPReq+0x154>
              break;
 8015b44:	bf00      	nop
          }
          break;
 8015b46:	e0ab      	b.n	8015ca0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	2b02      	cmp	r3, #2
 8015b52:	d002      	beq.n	8015b5a <USBD_StdEPReq+0x168>
 8015b54:	2b03      	cmp	r3, #3
 8015b56:	d032      	beq.n	8015bbe <USBD_StdEPReq+0x1cc>
 8015b58:	e097      	b.n	8015c8a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b5a:	7bbb      	ldrb	r3, [r7, #14]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d007      	beq.n	8015b70 <USBD_StdEPReq+0x17e>
 8015b60:	7bbb      	ldrb	r3, [r7, #14]
 8015b62:	2b80      	cmp	r3, #128	; 0x80
 8015b64:	d004      	beq.n	8015b70 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8015b66:	6839      	ldr	r1, [r7, #0]
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f000 fbfd 	bl	8016368 <USBD_CtlError>
                break;
 8015b6e:	e091      	b.n	8015c94 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	da0b      	bge.n	8015b90 <USBD_StdEPReq+0x19e>
 8015b78:	7bbb      	ldrb	r3, [r7, #14]
 8015b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b7e:	4613      	mov	r3, r2
 8015b80:	009b      	lsls	r3, r3, #2
 8015b82:	4413      	add	r3, r2
 8015b84:	009b      	lsls	r3, r3, #2
 8015b86:	3310      	adds	r3, #16
 8015b88:	687a      	ldr	r2, [r7, #4]
 8015b8a:	4413      	add	r3, r2
 8015b8c:	3304      	adds	r3, #4
 8015b8e:	e00b      	b.n	8015ba8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015b90:	7bbb      	ldrb	r3, [r7, #14]
 8015b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b96:	4613      	mov	r3, r2
 8015b98:	009b      	lsls	r3, r3, #2
 8015b9a:	4413      	add	r3, r2
 8015b9c:	009b      	lsls	r3, r3, #2
 8015b9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ba2:	687a      	ldr	r2, [r7, #4]
 8015ba4:	4413      	add	r3, r2
 8015ba6:	3304      	adds	r3, #4
 8015ba8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	2200      	movs	r2, #0
 8015bae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015bb0:	68bb      	ldr	r3, [r7, #8]
 8015bb2:	2202      	movs	r2, #2
 8015bb4:	4619      	mov	r1, r3
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	f000 fc47 	bl	801644a <USBD_CtlSendData>
              break;
 8015bbc:	e06a      	b.n	8015c94 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	da11      	bge.n	8015bea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015bc6:	7bbb      	ldrb	r3, [r7, #14]
 8015bc8:	f003 020f 	and.w	r2, r3, #15
 8015bcc:	6879      	ldr	r1, [r7, #4]
 8015bce:	4613      	mov	r3, r2
 8015bd0:	009b      	lsls	r3, r3, #2
 8015bd2:	4413      	add	r3, r2
 8015bd4:	009b      	lsls	r3, r3, #2
 8015bd6:	440b      	add	r3, r1
 8015bd8:	3324      	adds	r3, #36	; 0x24
 8015bda:	881b      	ldrh	r3, [r3, #0]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d117      	bne.n	8015c10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015be0:	6839      	ldr	r1, [r7, #0]
 8015be2:	6878      	ldr	r0, [r7, #4]
 8015be4:	f000 fbc0 	bl	8016368 <USBD_CtlError>
                  break;
 8015be8:	e054      	b.n	8015c94 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015bea:	7bbb      	ldrb	r3, [r7, #14]
 8015bec:	f003 020f 	and.w	r2, r3, #15
 8015bf0:	6879      	ldr	r1, [r7, #4]
 8015bf2:	4613      	mov	r3, r2
 8015bf4:	009b      	lsls	r3, r3, #2
 8015bf6:	4413      	add	r3, r2
 8015bf8:	009b      	lsls	r3, r3, #2
 8015bfa:	440b      	add	r3, r1
 8015bfc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c00:	881b      	ldrh	r3, [r3, #0]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d104      	bne.n	8015c10 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015c06:	6839      	ldr	r1, [r7, #0]
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f000 fbad 	bl	8016368 <USBD_CtlError>
                  break;
 8015c0e:	e041      	b.n	8015c94 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	da0b      	bge.n	8015c30 <USBD_StdEPReq+0x23e>
 8015c18:	7bbb      	ldrb	r3, [r7, #14]
 8015c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c1e:	4613      	mov	r3, r2
 8015c20:	009b      	lsls	r3, r3, #2
 8015c22:	4413      	add	r3, r2
 8015c24:	009b      	lsls	r3, r3, #2
 8015c26:	3310      	adds	r3, #16
 8015c28:	687a      	ldr	r2, [r7, #4]
 8015c2a:	4413      	add	r3, r2
 8015c2c:	3304      	adds	r3, #4
 8015c2e:	e00b      	b.n	8015c48 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c30:	7bbb      	ldrb	r3, [r7, #14]
 8015c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c36:	4613      	mov	r3, r2
 8015c38:	009b      	lsls	r3, r3, #2
 8015c3a:	4413      	add	r3, r2
 8015c3c:	009b      	lsls	r3, r3, #2
 8015c3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	4413      	add	r3, r2
 8015c46:	3304      	adds	r3, #4
 8015c48:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015c4a:	7bbb      	ldrb	r3, [r7, #14]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d002      	beq.n	8015c56 <USBD_StdEPReq+0x264>
 8015c50:	7bbb      	ldrb	r3, [r7, #14]
 8015c52:	2b80      	cmp	r3, #128	; 0x80
 8015c54:	d103      	bne.n	8015c5e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	2200      	movs	r2, #0
 8015c5a:	601a      	str	r2, [r3, #0]
 8015c5c:	e00e      	b.n	8015c7c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015c5e:	7bbb      	ldrb	r3, [r7, #14]
 8015c60:	4619      	mov	r1, r3
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f003 fc68 	bl	8019538 <USBD_LL_IsStallEP>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d003      	beq.n	8015c76 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8015c6e:	68bb      	ldr	r3, [r7, #8]
 8015c70:	2201      	movs	r2, #1
 8015c72:	601a      	str	r2, [r3, #0]
 8015c74:	e002      	b.n	8015c7c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8015c76:	68bb      	ldr	r3, [r7, #8]
 8015c78:	2200      	movs	r2, #0
 8015c7a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	2202      	movs	r2, #2
 8015c80:	4619      	mov	r1, r3
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f000 fbe1 	bl	801644a <USBD_CtlSendData>
              break;
 8015c88:	e004      	b.n	8015c94 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8015c8a:	6839      	ldr	r1, [r7, #0]
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	f000 fb6b 	bl	8016368 <USBD_CtlError>
              break;
 8015c92:	bf00      	nop
          }
          break;
 8015c94:	e004      	b.n	8015ca0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8015c96:	6839      	ldr	r1, [r7, #0]
 8015c98:	6878      	ldr	r0, [r7, #4]
 8015c9a:	f000 fb65 	bl	8016368 <USBD_CtlError>
          break;
 8015c9e:	bf00      	nop
      }
      break;
 8015ca0:	e004      	b.n	8015cac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8015ca2:	6839      	ldr	r1, [r7, #0]
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f000 fb5f 	bl	8016368 <USBD_CtlError>
      break;
 8015caa:	bf00      	nop
  }

  return ret;
 8015cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
	...

08015cb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b084      	sub	sp, #16
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015cca:	2300      	movs	r3, #0
 8015ccc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	885b      	ldrh	r3, [r3, #2]
 8015cd2:	0a1b      	lsrs	r3, r3, #8
 8015cd4:	b29b      	uxth	r3, r3
 8015cd6:	3b01      	subs	r3, #1
 8015cd8:	2b0e      	cmp	r3, #14
 8015cda:	f200 8152 	bhi.w	8015f82 <USBD_GetDescriptor+0x2ca>
 8015cde:	a201      	add	r2, pc, #4	; (adr r2, 8015ce4 <USBD_GetDescriptor+0x2c>)
 8015ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ce4:	08015d55 	.word	0x08015d55
 8015ce8:	08015d6d 	.word	0x08015d6d
 8015cec:	08015dad 	.word	0x08015dad
 8015cf0:	08015f83 	.word	0x08015f83
 8015cf4:	08015f83 	.word	0x08015f83
 8015cf8:	08015f23 	.word	0x08015f23
 8015cfc:	08015f4f 	.word	0x08015f4f
 8015d00:	08015f83 	.word	0x08015f83
 8015d04:	08015f83 	.word	0x08015f83
 8015d08:	08015f83 	.word	0x08015f83
 8015d0c:	08015f83 	.word	0x08015f83
 8015d10:	08015f83 	.word	0x08015f83
 8015d14:	08015f83 	.word	0x08015f83
 8015d18:	08015f83 	.word	0x08015f83
 8015d1c:	08015d21 	.word	0x08015d21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d26:	69db      	ldr	r3, [r3, #28]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d00b      	beq.n	8015d44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d32:	69db      	ldr	r3, [r3, #28]
 8015d34:	687a      	ldr	r2, [r7, #4]
 8015d36:	7c12      	ldrb	r2, [r2, #16]
 8015d38:	f107 0108 	add.w	r1, r7, #8
 8015d3c:	4610      	mov	r0, r2
 8015d3e:	4798      	blx	r3
 8015d40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d42:	e126      	b.n	8015f92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015d44:	6839      	ldr	r1, [r7, #0]
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f000 fb0e 	bl	8016368 <USBD_CtlError>
        err++;
 8015d4c:	7afb      	ldrb	r3, [r7, #11]
 8015d4e:	3301      	adds	r3, #1
 8015d50:	72fb      	strb	r3, [r7, #11]
      break;
 8015d52:	e11e      	b.n	8015f92 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	687a      	ldr	r2, [r7, #4]
 8015d5e:	7c12      	ldrb	r2, [r2, #16]
 8015d60:	f107 0108 	add.w	r1, r7, #8
 8015d64:	4610      	mov	r0, r2
 8015d66:	4798      	blx	r3
 8015d68:	60f8      	str	r0, [r7, #12]
      break;
 8015d6a:	e112      	b.n	8015f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	7c1b      	ldrb	r3, [r3, #16]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d10d      	bne.n	8015d90 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d7c:	f107 0208 	add.w	r2, r7, #8
 8015d80:	4610      	mov	r0, r2
 8015d82:	4798      	blx	r3
 8015d84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	3301      	adds	r3, #1
 8015d8a:	2202      	movs	r2, #2
 8015d8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015d8e:	e100      	b.n	8015f92 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d98:	f107 0208 	add.w	r2, r7, #8
 8015d9c:	4610      	mov	r0, r2
 8015d9e:	4798      	blx	r3
 8015da0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	3301      	adds	r3, #1
 8015da6:	2202      	movs	r2, #2
 8015da8:	701a      	strb	r2, [r3, #0]
      break;
 8015daa:	e0f2      	b.n	8015f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	885b      	ldrh	r3, [r3, #2]
 8015db0:	b2db      	uxtb	r3, r3
 8015db2:	2b05      	cmp	r3, #5
 8015db4:	f200 80ac 	bhi.w	8015f10 <USBD_GetDescriptor+0x258>
 8015db8:	a201      	add	r2, pc, #4	; (adr r2, 8015dc0 <USBD_GetDescriptor+0x108>)
 8015dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dbe:	bf00      	nop
 8015dc0:	08015dd9 	.word	0x08015dd9
 8015dc4:	08015e0d 	.word	0x08015e0d
 8015dc8:	08015e41 	.word	0x08015e41
 8015dcc:	08015e75 	.word	0x08015e75
 8015dd0:	08015ea9 	.word	0x08015ea9
 8015dd4:	08015edd 	.word	0x08015edd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dde:	685b      	ldr	r3, [r3, #4]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d00b      	beq.n	8015dfc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dea:	685b      	ldr	r3, [r3, #4]
 8015dec:	687a      	ldr	r2, [r7, #4]
 8015dee:	7c12      	ldrb	r2, [r2, #16]
 8015df0:	f107 0108 	add.w	r1, r7, #8
 8015df4:	4610      	mov	r0, r2
 8015df6:	4798      	blx	r3
 8015df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dfa:	e091      	b.n	8015f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015dfc:	6839      	ldr	r1, [r7, #0]
 8015dfe:	6878      	ldr	r0, [r7, #4]
 8015e00:	f000 fab2 	bl	8016368 <USBD_CtlError>
            err++;
 8015e04:	7afb      	ldrb	r3, [r7, #11]
 8015e06:	3301      	adds	r3, #1
 8015e08:	72fb      	strb	r3, [r7, #11]
          break;
 8015e0a:	e089      	b.n	8015f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e12:	689b      	ldr	r3, [r3, #8]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d00b      	beq.n	8015e30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e1e:	689b      	ldr	r3, [r3, #8]
 8015e20:	687a      	ldr	r2, [r7, #4]
 8015e22:	7c12      	ldrb	r2, [r2, #16]
 8015e24:	f107 0108 	add.w	r1, r7, #8
 8015e28:	4610      	mov	r0, r2
 8015e2a:	4798      	blx	r3
 8015e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e2e:	e077      	b.n	8015f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015e30:	6839      	ldr	r1, [r7, #0]
 8015e32:	6878      	ldr	r0, [r7, #4]
 8015e34:	f000 fa98 	bl	8016368 <USBD_CtlError>
            err++;
 8015e38:	7afb      	ldrb	r3, [r7, #11]
 8015e3a:	3301      	adds	r3, #1
 8015e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8015e3e:	e06f      	b.n	8015f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e46:	68db      	ldr	r3, [r3, #12]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d00b      	beq.n	8015e64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e52:	68db      	ldr	r3, [r3, #12]
 8015e54:	687a      	ldr	r2, [r7, #4]
 8015e56:	7c12      	ldrb	r2, [r2, #16]
 8015e58:	f107 0108 	add.w	r1, r7, #8
 8015e5c:	4610      	mov	r0, r2
 8015e5e:	4798      	blx	r3
 8015e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e62:	e05d      	b.n	8015f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015e64:	6839      	ldr	r1, [r7, #0]
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f000 fa7e 	bl	8016368 <USBD_CtlError>
            err++;
 8015e6c:	7afb      	ldrb	r3, [r7, #11]
 8015e6e:	3301      	adds	r3, #1
 8015e70:	72fb      	strb	r3, [r7, #11]
          break;
 8015e72:	e055      	b.n	8015f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e7a:	691b      	ldr	r3, [r3, #16]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d00b      	beq.n	8015e98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e86:	691b      	ldr	r3, [r3, #16]
 8015e88:	687a      	ldr	r2, [r7, #4]
 8015e8a:	7c12      	ldrb	r2, [r2, #16]
 8015e8c:	f107 0108 	add.w	r1, r7, #8
 8015e90:	4610      	mov	r0, r2
 8015e92:	4798      	blx	r3
 8015e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e96:	e043      	b.n	8015f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015e98:	6839      	ldr	r1, [r7, #0]
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f000 fa64 	bl	8016368 <USBD_CtlError>
            err++;
 8015ea0:	7afb      	ldrb	r3, [r7, #11]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8015ea6:	e03b      	b.n	8015f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eae:	695b      	ldr	r3, [r3, #20]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d00b      	beq.n	8015ecc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eba:	695b      	ldr	r3, [r3, #20]
 8015ebc:	687a      	ldr	r2, [r7, #4]
 8015ebe:	7c12      	ldrb	r2, [r2, #16]
 8015ec0:	f107 0108 	add.w	r1, r7, #8
 8015ec4:	4610      	mov	r0, r2
 8015ec6:	4798      	blx	r3
 8015ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015eca:	e029      	b.n	8015f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015ecc:	6839      	ldr	r1, [r7, #0]
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f000 fa4a 	bl	8016368 <USBD_CtlError>
            err++;
 8015ed4:	7afb      	ldrb	r3, [r7, #11]
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8015eda:	e021      	b.n	8015f20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ee2:	699b      	ldr	r3, [r3, #24]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d00b      	beq.n	8015f00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eee:	699b      	ldr	r3, [r3, #24]
 8015ef0:	687a      	ldr	r2, [r7, #4]
 8015ef2:	7c12      	ldrb	r2, [r2, #16]
 8015ef4:	f107 0108 	add.w	r1, r7, #8
 8015ef8:	4610      	mov	r0, r2
 8015efa:	4798      	blx	r3
 8015efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015efe:	e00f      	b.n	8015f20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 fa30 	bl	8016368 <USBD_CtlError>
            err++;
 8015f08:	7afb      	ldrb	r3, [r7, #11]
 8015f0a:	3301      	adds	r3, #1
 8015f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8015f0e:	e007      	b.n	8015f20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015f10:	6839      	ldr	r1, [r7, #0]
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f000 fa28 	bl	8016368 <USBD_CtlError>
          err++;
 8015f18:	7afb      	ldrb	r3, [r7, #11]
 8015f1a:	3301      	adds	r3, #1
 8015f1c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8015f1e:	bf00      	nop
      }
      break;
 8015f20:	e037      	b.n	8015f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	7c1b      	ldrb	r3, [r3, #16]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d109      	bne.n	8015f3e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f32:	f107 0208 	add.w	r2, r7, #8
 8015f36:	4610      	mov	r0, r2
 8015f38:	4798      	blx	r3
 8015f3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f3c:	e029      	b.n	8015f92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015f3e:	6839      	ldr	r1, [r7, #0]
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	f000 fa11 	bl	8016368 <USBD_CtlError>
        err++;
 8015f46:	7afb      	ldrb	r3, [r7, #11]
 8015f48:	3301      	adds	r3, #1
 8015f4a:	72fb      	strb	r3, [r7, #11]
      break;
 8015f4c:	e021      	b.n	8015f92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	7c1b      	ldrb	r3, [r3, #16]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d10d      	bne.n	8015f72 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f5e:	f107 0208 	add.w	r2, r7, #8
 8015f62:	4610      	mov	r0, r2
 8015f64:	4798      	blx	r3
 8015f66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	3301      	adds	r3, #1
 8015f6c:	2207      	movs	r2, #7
 8015f6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f70:	e00f      	b.n	8015f92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8015f72:	6839      	ldr	r1, [r7, #0]
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f000 f9f7 	bl	8016368 <USBD_CtlError>
        err++;
 8015f7a:	7afb      	ldrb	r3, [r7, #11]
 8015f7c:	3301      	adds	r3, #1
 8015f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8015f80:	e007      	b.n	8015f92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8015f82:	6839      	ldr	r1, [r7, #0]
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f000 f9ef 	bl	8016368 <USBD_CtlError>
      err++;
 8015f8a:	7afb      	ldrb	r3, [r7, #11]
 8015f8c:	3301      	adds	r3, #1
 8015f8e:	72fb      	strb	r3, [r7, #11]
      break;
 8015f90:	bf00      	nop
  }

  if (err != 0U)
 8015f92:	7afb      	ldrb	r3, [r7, #11]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d11e      	bne.n	8015fd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	88db      	ldrh	r3, [r3, #6]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d016      	beq.n	8015fce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8015fa0:	893b      	ldrh	r3, [r7, #8]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d00e      	beq.n	8015fc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	88da      	ldrh	r2, [r3, #6]
 8015faa:	893b      	ldrh	r3, [r7, #8]
 8015fac:	4293      	cmp	r3, r2
 8015fae:	bf28      	it	cs
 8015fb0:	4613      	movcs	r3, r2
 8015fb2:	b29b      	uxth	r3, r3
 8015fb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015fb6:	893b      	ldrh	r3, [r7, #8]
 8015fb8:	461a      	mov	r2, r3
 8015fba:	68f9      	ldr	r1, [r7, #12]
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	f000 fa44 	bl	801644a <USBD_CtlSendData>
 8015fc2:	e009      	b.n	8015fd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015fc4:	6839      	ldr	r1, [r7, #0]
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f000 f9ce 	bl	8016368 <USBD_CtlError>
 8015fcc:	e004      	b.n	8015fd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015fce:	6878      	ldr	r0, [r7, #4]
 8015fd0:	f000 fa95 	bl	80164fe <USBD_CtlSendStatus>
 8015fd4:	e000      	b.n	8015fd8 <USBD_GetDescriptor+0x320>
    return;
 8015fd6:	bf00      	nop
  }
}
 8015fd8:	3710      	adds	r7, #16
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
 8015fde:	bf00      	nop

08015fe0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b084      	sub	sp, #16
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	889b      	ldrh	r3, [r3, #4]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d131      	bne.n	8016056 <USBD_SetAddress+0x76>
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	88db      	ldrh	r3, [r3, #6]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d12d      	bne.n	8016056 <USBD_SetAddress+0x76>
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	885b      	ldrh	r3, [r3, #2]
 8015ffe:	2b7f      	cmp	r3, #127	; 0x7f
 8016000:	d829      	bhi.n	8016056 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	885b      	ldrh	r3, [r3, #2]
 8016006:	b2db      	uxtb	r3, r3
 8016008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801600c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016014:	b2db      	uxtb	r3, r3
 8016016:	2b03      	cmp	r3, #3
 8016018:	d104      	bne.n	8016024 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801601a:	6839      	ldr	r1, [r7, #0]
 801601c:	6878      	ldr	r0, [r7, #4]
 801601e:	f000 f9a3 	bl	8016368 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016022:	e01d      	b.n	8016060 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	7bfa      	ldrb	r2, [r7, #15]
 8016028:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801602c:	7bfb      	ldrb	r3, [r7, #15]
 801602e:	4619      	mov	r1, r3
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f003 faae 	bl	8019592 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f000 fa61 	bl	80164fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801603c:	7bfb      	ldrb	r3, [r7, #15]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d004      	beq.n	801604c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	2202      	movs	r2, #2
 8016046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801604a:	e009      	b.n	8016060 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2201      	movs	r2, #1
 8016050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016054:	e004      	b.n	8016060 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016056:	6839      	ldr	r1, [r7, #0]
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f000 f985 	bl	8016368 <USBD_CtlError>
  }
}
 801605e:	bf00      	nop
 8016060:	bf00      	nop
 8016062:	3710      	adds	r7, #16
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}

08016068 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
 8016070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016072:	2300      	movs	r3, #0
 8016074:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016076:	683b      	ldr	r3, [r7, #0]
 8016078:	885b      	ldrh	r3, [r3, #2]
 801607a:	b2da      	uxtb	r2, r3
 801607c:	4b4c      	ldr	r3, [pc, #304]	; (80161b0 <USBD_SetConfig+0x148>)
 801607e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016080:	4b4b      	ldr	r3, [pc, #300]	; (80161b0 <USBD_SetConfig+0x148>)
 8016082:	781b      	ldrb	r3, [r3, #0]
 8016084:	2b01      	cmp	r3, #1
 8016086:	d905      	bls.n	8016094 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016088:	6839      	ldr	r1, [r7, #0]
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f000 f96c 	bl	8016368 <USBD_CtlError>
    return USBD_FAIL;
 8016090:	2303      	movs	r3, #3
 8016092:	e088      	b.n	80161a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801609a:	b2db      	uxtb	r3, r3
 801609c:	2b02      	cmp	r3, #2
 801609e:	d002      	beq.n	80160a6 <USBD_SetConfig+0x3e>
 80160a0:	2b03      	cmp	r3, #3
 80160a2:	d025      	beq.n	80160f0 <USBD_SetConfig+0x88>
 80160a4:	e071      	b.n	801618a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80160a6:	4b42      	ldr	r3, [pc, #264]	; (80161b0 <USBD_SetConfig+0x148>)
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d01c      	beq.n	80160e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80160ae:	4b40      	ldr	r3, [pc, #256]	; (80161b0 <USBD_SetConfig+0x148>)
 80160b0:	781b      	ldrb	r3, [r3, #0]
 80160b2:	461a      	mov	r2, r3
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80160b8:	4b3d      	ldr	r3, [pc, #244]	; (80161b0 <USBD_SetConfig+0x148>)
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	4619      	mov	r1, r3
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f7ff f992 	bl	80153e8 <USBD_SetClassConfig>
 80160c4:	4603      	mov	r3, r0
 80160c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80160c8:	7bfb      	ldrb	r3, [r7, #15]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d004      	beq.n	80160d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80160ce:	6839      	ldr	r1, [r7, #0]
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f000 f949 	bl	8016368 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160d6:	e065      	b.n	80161a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f000 fa10 	bl	80164fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	2203      	movs	r2, #3
 80160e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80160e6:	e05d      	b.n	80161a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f000 fa08 	bl	80164fe <USBD_CtlSendStatus>
      break;
 80160ee:	e059      	b.n	80161a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80160f0:	4b2f      	ldr	r3, [pc, #188]	; (80161b0 <USBD_SetConfig+0x148>)
 80160f2:	781b      	ldrb	r3, [r3, #0]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d112      	bne.n	801611e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2202      	movs	r2, #2
 80160fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016100:	4b2b      	ldr	r3, [pc, #172]	; (80161b0 <USBD_SetConfig+0x148>)
 8016102:	781b      	ldrb	r3, [r3, #0]
 8016104:	461a      	mov	r2, r3
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801610a:	4b29      	ldr	r3, [pc, #164]	; (80161b0 <USBD_SetConfig+0x148>)
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	4619      	mov	r1, r3
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f7ff f985 	bl	8015420 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f000 f9f1 	bl	80164fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801611c:	e042      	b.n	80161a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801611e:	4b24      	ldr	r3, [pc, #144]	; (80161b0 <USBD_SetConfig+0x148>)
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	461a      	mov	r2, r3
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	429a      	cmp	r2, r3
 801612a:	d02a      	beq.n	8016182 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	b2db      	uxtb	r3, r3
 8016132:	4619      	mov	r1, r3
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	f7ff f973 	bl	8015420 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801613a:	4b1d      	ldr	r3, [pc, #116]	; (80161b0 <USBD_SetConfig+0x148>)
 801613c:	781b      	ldrb	r3, [r3, #0]
 801613e:	461a      	mov	r2, r3
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016144:	4b1a      	ldr	r3, [pc, #104]	; (80161b0 <USBD_SetConfig+0x148>)
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	4619      	mov	r1, r3
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f7ff f94c 	bl	80153e8 <USBD_SetClassConfig>
 8016150:	4603      	mov	r3, r0
 8016152:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016154:	7bfb      	ldrb	r3, [r7, #15]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d00f      	beq.n	801617a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801615a:	6839      	ldr	r1, [r7, #0]
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f000 f903 	bl	8016368 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	685b      	ldr	r3, [r3, #4]
 8016166:	b2db      	uxtb	r3, r3
 8016168:	4619      	mov	r1, r3
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f7ff f958 	bl	8015420 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2202      	movs	r2, #2
 8016174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016178:	e014      	b.n	80161a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f000 f9bf 	bl	80164fe <USBD_CtlSendStatus>
      break;
 8016180:	e010      	b.n	80161a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	f000 f9bb 	bl	80164fe <USBD_CtlSendStatus>
      break;
 8016188:	e00c      	b.n	80161a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801618a:	6839      	ldr	r1, [r7, #0]
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f000 f8eb 	bl	8016368 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016192:	4b07      	ldr	r3, [pc, #28]	; (80161b0 <USBD_SetConfig+0x148>)
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	4619      	mov	r1, r3
 8016198:	6878      	ldr	r0, [r7, #4]
 801619a:	f7ff f941 	bl	8015420 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801619e:	2303      	movs	r3, #3
 80161a0:	73fb      	strb	r3, [r7, #15]
      break;
 80161a2:	bf00      	nop
  }

  return ret;
 80161a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3710      	adds	r7, #16
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	bf00      	nop
 80161b0:	20001024 	.word	0x20001024

080161b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b082      	sub	sp, #8
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	6078      	str	r0, [r7, #4]
 80161bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80161be:	683b      	ldr	r3, [r7, #0]
 80161c0:	88db      	ldrh	r3, [r3, #6]
 80161c2:	2b01      	cmp	r3, #1
 80161c4:	d004      	beq.n	80161d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80161c6:	6839      	ldr	r1, [r7, #0]
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f000 f8cd 	bl	8016368 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80161ce:	e023      	b.n	8016218 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161d6:	b2db      	uxtb	r3, r3
 80161d8:	2b02      	cmp	r3, #2
 80161da:	dc02      	bgt.n	80161e2 <USBD_GetConfig+0x2e>
 80161dc:	2b00      	cmp	r3, #0
 80161de:	dc03      	bgt.n	80161e8 <USBD_GetConfig+0x34>
 80161e0:	e015      	b.n	801620e <USBD_GetConfig+0x5a>
 80161e2:	2b03      	cmp	r3, #3
 80161e4:	d00b      	beq.n	80161fe <USBD_GetConfig+0x4a>
 80161e6:	e012      	b.n	801620e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2200      	movs	r2, #0
 80161ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	3308      	adds	r3, #8
 80161f2:	2201      	movs	r2, #1
 80161f4:	4619      	mov	r1, r3
 80161f6:	6878      	ldr	r0, [r7, #4]
 80161f8:	f000 f927 	bl	801644a <USBD_CtlSendData>
        break;
 80161fc:	e00c      	b.n	8016218 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	3304      	adds	r3, #4
 8016202:	2201      	movs	r2, #1
 8016204:	4619      	mov	r1, r3
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 f91f 	bl	801644a <USBD_CtlSendData>
        break;
 801620c:	e004      	b.n	8016218 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801620e:	6839      	ldr	r1, [r7, #0]
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f000 f8a9 	bl	8016368 <USBD_CtlError>
        break;
 8016216:	bf00      	nop
}
 8016218:	bf00      	nop
 801621a:	3708      	adds	r7, #8
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b082      	sub	sp, #8
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016230:	b2db      	uxtb	r3, r3
 8016232:	3b01      	subs	r3, #1
 8016234:	2b02      	cmp	r3, #2
 8016236:	d81e      	bhi.n	8016276 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	88db      	ldrh	r3, [r3, #6]
 801623c:	2b02      	cmp	r3, #2
 801623e:	d004      	beq.n	801624a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016240:	6839      	ldr	r1, [r7, #0]
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f000 f890 	bl	8016368 <USBD_CtlError>
        break;
 8016248:	e01a      	b.n	8016280 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2201      	movs	r2, #1
 801624e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016256:	2b00      	cmp	r3, #0
 8016258:	d005      	beq.n	8016266 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	68db      	ldr	r3, [r3, #12]
 801625e:	f043 0202 	orr.w	r2, r3, #2
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	330c      	adds	r3, #12
 801626a:	2202      	movs	r2, #2
 801626c:	4619      	mov	r1, r3
 801626e:	6878      	ldr	r0, [r7, #4]
 8016270:	f000 f8eb 	bl	801644a <USBD_CtlSendData>
      break;
 8016274:	e004      	b.n	8016280 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016276:	6839      	ldr	r1, [r7, #0]
 8016278:	6878      	ldr	r0, [r7, #4]
 801627a:	f000 f875 	bl	8016368 <USBD_CtlError>
      break;
 801627e:	bf00      	nop
  }
}
 8016280:	bf00      	nop
 8016282:	3708      	adds	r7, #8
 8016284:	46bd      	mov	sp, r7
 8016286:	bd80      	pop	{r7, pc}

08016288 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b082      	sub	sp, #8
 801628c:	af00      	add	r7, sp, #0
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016292:	683b      	ldr	r3, [r7, #0]
 8016294:	885b      	ldrh	r3, [r3, #2]
 8016296:	2b01      	cmp	r3, #1
 8016298:	d106      	bne.n	80162a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	2201      	movs	r2, #1
 801629e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80162a2:	6878      	ldr	r0, [r7, #4]
 80162a4:	f000 f92b 	bl	80164fe <USBD_CtlSendStatus>
  }
}
 80162a8:	bf00      	nop
 80162aa:	3708      	adds	r7, #8
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}

080162b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b082      	sub	sp, #8
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	3b01      	subs	r3, #1
 80162c4:	2b02      	cmp	r3, #2
 80162c6:	d80b      	bhi.n	80162e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162c8:	683b      	ldr	r3, [r7, #0]
 80162ca:	885b      	ldrh	r3, [r3, #2]
 80162cc:	2b01      	cmp	r3, #1
 80162ce:	d10c      	bne.n	80162ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	2200      	movs	r2, #0
 80162d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80162d8:	6878      	ldr	r0, [r7, #4]
 80162da:	f000 f910 	bl	80164fe <USBD_CtlSendStatus>
      }
      break;
 80162de:	e004      	b.n	80162ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80162e0:	6839      	ldr	r1, [r7, #0]
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f000 f840 	bl	8016368 <USBD_CtlError>
      break;
 80162e8:	e000      	b.n	80162ec <USBD_ClrFeature+0x3c>
      break;
 80162ea:	bf00      	nop
  }
}
 80162ec:	bf00      	nop
 80162ee:	3708      	adds	r7, #8
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}

080162f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b084      	sub	sp, #16
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
 80162fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	781a      	ldrb	r2, [r3, #0]
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	3301      	adds	r3, #1
 801630e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	781a      	ldrb	r2, [r3, #0]
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	3301      	adds	r3, #1
 801631c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801631e:	68f8      	ldr	r0, [r7, #12]
 8016320:	f7ff fa92 	bl	8015848 <SWAPBYTE>
 8016324:	4603      	mov	r3, r0
 8016326:	461a      	mov	r2, r3
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	3301      	adds	r3, #1
 8016330:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	3301      	adds	r3, #1
 8016336:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016338:	68f8      	ldr	r0, [r7, #12]
 801633a:	f7ff fa85 	bl	8015848 <SWAPBYTE>
 801633e:	4603      	mov	r3, r0
 8016340:	461a      	mov	r2, r3
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	3301      	adds	r3, #1
 801634a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	3301      	adds	r3, #1
 8016350:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016352:	68f8      	ldr	r0, [r7, #12]
 8016354:	f7ff fa78 	bl	8015848 <SWAPBYTE>
 8016358:	4603      	mov	r3, r0
 801635a:	461a      	mov	r2, r3
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	80da      	strh	r2, [r3, #6]
}
 8016360:	bf00      	nop
 8016362:	3710      	adds	r7, #16
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}

08016368 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016372:	2180      	movs	r1, #128	; 0x80
 8016374:	6878      	ldr	r0, [r7, #4]
 8016376:	f003 f8a1 	bl	80194bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801637a:	2100      	movs	r1, #0
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f003 f89d 	bl	80194bc <USBD_LL_StallEP>
}
 8016382:	bf00      	nop
 8016384:	3708      	adds	r7, #8
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}

0801638a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801638a:	b580      	push	{r7, lr}
 801638c:	b086      	sub	sp, #24
 801638e:	af00      	add	r7, sp, #0
 8016390:	60f8      	str	r0, [r7, #12]
 8016392:	60b9      	str	r1, [r7, #8]
 8016394:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016396:	2300      	movs	r3, #0
 8016398:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d036      	beq.n	801640e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80163a4:	6938      	ldr	r0, [r7, #16]
 80163a6:	f000 f836 	bl	8016416 <USBD_GetLen>
 80163aa:	4603      	mov	r3, r0
 80163ac:	3301      	adds	r3, #1
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	005b      	lsls	r3, r3, #1
 80163b2:	b29a      	uxth	r2, r3
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80163b8:	7dfb      	ldrb	r3, [r7, #23]
 80163ba:	68ba      	ldr	r2, [r7, #8]
 80163bc:	4413      	add	r3, r2
 80163be:	687a      	ldr	r2, [r7, #4]
 80163c0:	7812      	ldrb	r2, [r2, #0]
 80163c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80163c4:	7dfb      	ldrb	r3, [r7, #23]
 80163c6:	3301      	adds	r3, #1
 80163c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80163ca:	7dfb      	ldrb	r3, [r7, #23]
 80163cc:	68ba      	ldr	r2, [r7, #8]
 80163ce:	4413      	add	r3, r2
 80163d0:	2203      	movs	r2, #3
 80163d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80163d4:	7dfb      	ldrb	r3, [r7, #23]
 80163d6:	3301      	adds	r3, #1
 80163d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80163da:	e013      	b.n	8016404 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80163dc:	7dfb      	ldrb	r3, [r7, #23]
 80163de:	68ba      	ldr	r2, [r7, #8]
 80163e0:	4413      	add	r3, r2
 80163e2:	693a      	ldr	r2, [r7, #16]
 80163e4:	7812      	ldrb	r2, [r2, #0]
 80163e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80163e8:	693b      	ldr	r3, [r7, #16]
 80163ea:	3301      	adds	r3, #1
 80163ec:	613b      	str	r3, [r7, #16]
    idx++;
 80163ee:	7dfb      	ldrb	r3, [r7, #23]
 80163f0:	3301      	adds	r3, #1
 80163f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80163f4:	7dfb      	ldrb	r3, [r7, #23]
 80163f6:	68ba      	ldr	r2, [r7, #8]
 80163f8:	4413      	add	r3, r2
 80163fa:	2200      	movs	r2, #0
 80163fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80163fe:	7dfb      	ldrb	r3, [r7, #23]
 8016400:	3301      	adds	r3, #1
 8016402:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016404:	693b      	ldr	r3, [r7, #16]
 8016406:	781b      	ldrb	r3, [r3, #0]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d1e7      	bne.n	80163dc <USBD_GetString+0x52>
 801640c:	e000      	b.n	8016410 <USBD_GetString+0x86>
    return;
 801640e:	bf00      	nop
  }
}
 8016410:	3718      	adds	r7, #24
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}

08016416 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016416:	b480      	push	{r7}
 8016418:	b085      	sub	sp, #20
 801641a:	af00      	add	r7, sp, #0
 801641c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801641e:	2300      	movs	r3, #0
 8016420:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016426:	e005      	b.n	8016434 <USBD_GetLen+0x1e>
  {
    len++;
 8016428:	7bfb      	ldrb	r3, [r7, #15]
 801642a:	3301      	adds	r3, #1
 801642c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801642e:	68bb      	ldr	r3, [r7, #8]
 8016430:	3301      	adds	r3, #1
 8016432:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	781b      	ldrb	r3, [r3, #0]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d1f5      	bne.n	8016428 <USBD_GetLen+0x12>
  }

  return len;
 801643c:	7bfb      	ldrb	r3, [r7, #15]
}
 801643e:	4618      	mov	r0, r3
 8016440:	3714      	adds	r7, #20
 8016442:	46bd      	mov	sp, r7
 8016444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016448:	4770      	bx	lr

0801644a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801644a:	b580      	push	{r7, lr}
 801644c:	b084      	sub	sp, #16
 801644e:	af00      	add	r7, sp, #0
 8016450:	60f8      	str	r0, [r7, #12]
 8016452:	60b9      	str	r1, [r7, #8]
 8016454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	2202      	movs	r2, #2
 801645a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	687a      	ldr	r2, [r7, #4]
 8016462:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	687a      	ldr	r2, [r7, #4]
 8016468:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	68ba      	ldr	r2, [r7, #8]
 801646e:	2100      	movs	r1, #0
 8016470:	68f8      	ldr	r0, [r7, #12]
 8016472:	f003 f8ad 	bl	80195d0 <USBD_LL_Transmit>

  return USBD_OK;
 8016476:	2300      	movs	r3, #0
}
 8016478:	4618      	mov	r0, r3
 801647a:	3710      	adds	r7, #16
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}

08016480 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b084      	sub	sp, #16
 8016484:	af00      	add	r7, sp, #0
 8016486:	60f8      	str	r0, [r7, #12]
 8016488:	60b9      	str	r1, [r7, #8]
 801648a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	68ba      	ldr	r2, [r7, #8]
 8016490:	2100      	movs	r1, #0
 8016492:	68f8      	ldr	r0, [r7, #12]
 8016494:	f003 f89c 	bl	80195d0 <USBD_LL_Transmit>

  return USBD_OK;
 8016498:	2300      	movs	r3, #0
}
 801649a:	4618      	mov	r0, r3
 801649c:	3710      	adds	r7, #16
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}

080164a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80164a2:	b580      	push	{r7, lr}
 80164a4:	b084      	sub	sp, #16
 80164a6:	af00      	add	r7, sp, #0
 80164a8:	60f8      	str	r0, [r7, #12]
 80164aa:	60b9      	str	r1, [r7, #8]
 80164ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	2203      	movs	r2, #3
 80164b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	687a      	ldr	r2, [r7, #4]
 80164ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	687a      	ldr	r2, [r7, #4]
 80164c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	68ba      	ldr	r2, [r7, #8]
 80164ca:	2100      	movs	r1, #0
 80164cc:	68f8      	ldr	r0, [r7, #12]
 80164ce:	f003 f8a0 	bl	8019612 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164d2:	2300      	movs	r3, #0
}
 80164d4:	4618      	mov	r0, r3
 80164d6:	3710      	adds	r7, #16
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}

080164dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b084      	sub	sp, #16
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	60f8      	str	r0, [r7, #12]
 80164e4:	60b9      	str	r1, [r7, #8]
 80164e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	68ba      	ldr	r2, [r7, #8]
 80164ec:	2100      	movs	r1, #0
 80164ee:	68f8      	ldr	r0, [r7, #12]
 80164f0:	f003 f88f 	bl	8019612 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3710      	adds	r7, #16
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}

080164fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80164fe:	b580      	push	{r7, lr}
 8016500:	b082      	sub	sp, #8
 8016502:	af00      	add	r7, sp, #0
 8016504:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	2204      	movs	r2, #4
 801650a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801650e:	2300      	movs	r3, #0
 8016510:	2200      	movs	r2, #0
 8016512:	2100      	movs	r1, #0
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f003 f85b 	bl	80195d0 <USBD_LL_Transmit>

  return USBD_OK;
 801651a:	2300      	movs	r3, #0
}
 801651c:	4618      	mov	r0, r3
 801651e:	3708      	adds	r7, #8
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}

08016524 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016524:	b580      	push	{r7, lr}
 8016526:	b082      	sub	sp, #8
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	2205      	movs	r2, #5
 8016530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016534:	2300      	movs	r3, #0
 8016536:	2200      	movs	r2, #0
 8016538:	2100      	movs	r1, #0
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f003 f869 	bl	8019612 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016540:	2300      	movs	r3, #0
}
 8016542:	4618      	mov	r0, r3
 8016544:	3708      	adds	r7, #8
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}

0801654a <rgb_888_to_565>:

#include "BMSPA_font.h"
#include "util.h"
#include "draw.h"

u16 rgb_888_to_565(u32 rgb) {
 801654a:	b480      	push	{r7}
 801654c:	b085      	sub	sp, #20
 801654e:	af00      	add	r7, sp, #0
 8016550:	6078      	str	r0, [r7, #4]
	u16 r = (u16)(rgb >> 16) & 0x00F8;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	0c1b      	lsrs	r3, r3, #16
 8016556:	b29b      	uxth	r3, r3
 8016558:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801655c:	81fb      	strh	r3, [r7, #14]
	u16 g = (u16)(rgb >>  8) & 0x00FC;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	0a1b      	lsrs	r3, r3, #8
 8016562:	b29b      	uxth	r3, r3
 8016564:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8016568:	81bb      	strh	r3, [r7, #12]
	u16 b = (u16)(rgb >>  0) & 0x00F8;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	b29b      	uxth	r3, r3
 801656e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8016572:	817b      	strh	r3, [r7, #10]
	u16 result = (r << 8) | (g << 3) | (b >> 3);
 8016574:	89fb      	ldrh	r3, [r7, #14]
 8016576:	021b      	lsls	r3, r3, #8
 8016578:	b21a      	sxth	r2, r3
 801657a:	89bb      	ldrh	r3, [r7, #12]
 801657c:	00db      	lsls	r3, r3, #3
 801657e:	b21b      	sxth	r3, r3
 8016580:	4313      	orrs	r3, r2
 8016582:	b21a      	sxth	r2, r3
 8016584:	897b      	ldrh	r3, [r7, #10]
 8016586:	08db      	lsrs	r3, r3, #3
 8016588:	b29b      	uxth	r3, r3
 801658a:	b21b      	sxth	r3, r3
 801658c:	4313      	orrs	r3, r2
 801658e:	b21b      	sxth	r3, r3
 8016590:	813b      	strh	r3, [r7, #8]
	return result;
 8016592:	893b      	ldrh	r3, [r7, #8]
}
 8016594:	4618      	mov	r0, r3
 8016596:	3714      	adds	r7, #20
 8016598:	46bd      	mov	sp, r7
 801659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659e:	4770      	bx	lr

080165a0 <xy_to_index>:
	return (r << 16) | (g << 8) | b;
}

DrawState drawState;

i32 xy_to_index(i32 x, i32 y) {
 80165a0:	b480      	push	{r7}
 80165a2:	b083      	sub	sp, #12
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	6039      	str	r1, [r7, #0]
	if(x < 0 || x >= SCREEN_WIDTH || y < 0 || y >= SCREEN_HEIGHT) {
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	db09      	blt.n	80165c4 <xy_to_index+0x24>
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80165b6:	da05      	bge.n	80165c4 <xy_to_index+0x24>
 80165b8:	683b      	ldr	r3, [r7, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	db02      	blt.n	80165c4 <xy_to_index+0x24>
 80165be:	683b      	ldr	r3, [r7, #0]
 80165c0:	2bef      	cmp	r3, #239	; 0xef
 80165c2:	dd02      	ble.n	80165ca <xy_to_index+0x2a>
		return -1;
 80165c4:	f04f 33ff 	mov.w	r3, #4294967295
 80165c8:	e00a      	b.n	80165e0 <xy_to_index+0x40>
	}

	return y * (SCREEN_WIDTH / PIXELS_PER_BYTE) + (x / PIXELS_PER_BYTE);
 80165ca:	683a      	ldr	r2, [r7, #0]
 80165cc:	4613      	mov	r3, r2
 80165ce:	009b      	lsls	r3, r3, #2
 80165d0:	4413      	add	r3, r2
 80165d2:	015b      	lsls	r3, r3, #5
 80165d4:	4619      	mov	r1, r3
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	0fda      	lsrs	r2, r3, #31
 80165da:	4413      	add	r3, r2
 80165dc:	105b      	asrs	r3, r3, #1
 80165de:	440b      	add	r3, r1
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	370c      	adds	r7, #12
 80165e4:	46bd      	mov	sp, r7
 80165e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ea:	4770      	bx	lr

080165ec <get_pixel_color>:

u8 get_pixel_color(u8 pixel, i32 x) {
 80165ec:	b480      	push	{r7}
 80165ee:	b085      	sub	sp, #20
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	4603      	mov	r3, r0
 80165f4:	6039      	str	r1, [r7, #0]
 80165f6:	71fb      	strb	r3, [r7, #7]
	u8 offset = (u8)(x % PIXELS_PER_BYTE) * BITS_PER_PALETTE;
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	f003 0301 	and.w	r3, r3, #1
 8016600:	bfb8      	it	lt
 8016602:	425b      	neglt	r3, r3
 8016604:	b2db      	uxtb	r3, r3
 8016606:	009b      	lsls	r3, r3, #2
 8016608:	73fb      	strb	r3, [r7, #15]
	u8 mask = BITS_PER_PALETTE_MASK << offset;
 801660a:	7bfb      	ldrb	r3, [r7, #15]
 801660c:	220f      	movs	r2, #15
 801660e:	fa02 f303 	lsl.w	r3, r2, r3
 8016612:	73bb      	strb	r3, [r7, #14]
	return (pixel & mask) >> offset;
 8016614:	79fa      	ldrb	r2, [r7, #7]
 8016616:	7bbb      	ldrb	r3, [r7, #14]
 8016618:	4013      	ands	r3, r2
 801661a:	b2db      	uxtb	r3, r3
 801661c:	461a      	mov	r2, r3
 801661e:	7bfb      	ldrb	r3, [r7, #15]
 8016620:	fa42 f303 	asr.w	r3, r2, r3
 8016624:	b2db      	uxtb	r3, r3
}
 8016626:	4618      	mov	r0, r3
 8016628:	3714      	adds	r7, #20
 801662a:	46bd      	mov	sp, r7
 801662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016630:	4770      	bx	lr

08016632 <set_pixel_color>:

u8 set_pixel_color(u8 pixel, i32 x, i32 color) {
 8016632:	b480      	push	{r7}
 8016634:	b087      	sub	sp, #28
 8016636:	af00      	add	r7, sp, #0
 8016638:	4603      	mov	r3, r0
 801663a:	60b9      	str	r1, [r7, #8]
 801663c:	607a      	str	r2, [r7, #4]
 801663e:	73fb      	strb	r3, [r7, #15]
	u8 offset = (u8)(x % PIXELS_PER_BYTE) * BITS_PER_PALETTE;
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	2b00      	cmp	r3, #0
 8016644:	f003 0301 	and.w	r3, r3, #1
 8016648:	bfb8      	it	lt
 801664a:	425b      	neglt	r3, r3
 801664c:	b2db      	uxtb	r3, r3
 801664e:	009b      	lsls	r3, r3, #2
 8016650:	75fb      	strb	r3, [r7, #23]
	u8 mask = ~(BITS_PER_PALETTE_MASK << offset);
 8016652:	7dfb      	ldrb	r3, [r7, #23]
 8016654:	220f      	movs	r2, #15
 8016656:	fa02 f303 	lsl.w	r3, r2, r3
 801665a:	b2db      	uxtb	r3, r3
 801665c:	43db      	mvns	r3, r3
 801665e:	75bb      	strb	r3, [r7, #22]
	return (pixel & mask) | (color << offset);
 8016660:	7bfa      	ldrb	r2, [r7, #15]
 8016662:	7dbb      	ldrb	r3, [r7, #22]
 8016664:	4013      	ands	r3, r2
 8016666:	b2db      	uxtb	r3, r3
 8016668:	b25a      	sxtb	r2, r3
 801666a:	7dfb      	ldrb	r3, [r7, #23]
 801666c:	6879      	ldr	r1, [r7, #4]
 801666e:	fa01 f303 	lsl.w	r3, r1, r3
 8016672:	b25b      	sxtb	r3, r3
 8016674:	4313      	orrs	r3, r2
 8016676:	b25b      	sxtb	r3, r3
 8016678:	b2db      	uxtb	r3, r3
}
 801667a:	4618      	mov	r0, r3
 801667c:	371c      	adds	r7, #28
 801667e:	46bd      	mov	sp, r7
 8016680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016684:	4770      	bx	lr
	...

08016688 <set_palette_color>:

void set_palette_color(i32 index, u32 color) {
 8016688:	b580      	push	{r7, lr}
 801668a:	b084      	sub	sp, #16
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
 8016690:	6039      	str	r1, [r7, #0]
	if(index < 0 || index >= PALETTE_SIZE) {
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2b00      	cmp	r3, #0
 8016696:	db0e      	blt.n	80166b6 <set_palette_color+0x2e>
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2b0f      	cmp	r3, #15
 801669c:	dc0b      	bgt.n	80166b6 <set_palette_color+0x2e>
		return;
	}

	u16 color16 = rgb_888_to_565(color);
 801669e:	6838      	ldr	r0, [r7, #0]
 80166a0:	f7ff ff53 	bl	801654a <rgb_888_to_565>
 80166a4:	4603      	mov	r3, r0
 80166a6:	81fb      	strh	r3, [r7, #14]
	drawState.palette[index] = color16;
 80166a8:	4a05      	ldr	r2, [pc, #20]	; (80166c0 <set_palette_color+0x38>)
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	005b      	lsls	r3, r3, #1
 80166ae:	4413      	add	r3, r2
 80166b0:	89fa      	ldrh	r2, [r7, #14]
 80166b2:	809a      	strh	r2, [r3, #4]
 80166b4:	e000      	b.n	80166b8 <set_palette_color+0x30>
		return;
 80166b6:	bf00      	nop
}
 80166b8:	3710      	adds	r7, #16
 80166ba:	46bd      	mov	sp, r7
 80166bc:	bd80      	pop	{r7, pc}
 80166be:	bf00      	nop
 80166c0:	20001028 	.word	0x20001028

080166c4 <draw_line>:
	if(index > -1) {
		drawState.buffer[index] = set_pixel_color(drawState.buffer[index], x, color);
	}
}

void draw_line(i32 x0, i32 y0, i32 x1, i32 y1, i32 color) {
 80166c4:	b590      	push	{r4, r7, lr}
 80166c6:	b08d      	sub	sp, #52	; 0x34
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	60f8      	str	r0, [r7, #12]
 80166cc:	60b9      	str	r1, [r7, #8]
 80166ce:	607a      	str	r2, [r7, #4]
 80166d0:	603b      	str	r3, [r7, #0]
	if(color < 0 || color >= PALETTE_SIZE) {
 80166d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	db6a      	blt.n	80167ae <draw_line+0xea>
 80166d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80166da:	2b0f      	cmp	r3, #15
 80166dc:	dc67      	bgt.n	80167ae <draw_line+0xea>
		return;
	}

	i32 dx = abs(x1 - x0);
 80166de:	687a      	ldr	r2, [r7, #4]
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	1ad3      	subs	r3, r2, r3
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	bfb8      	it	lt
 80166e8:	425b      	neglt	r3, r3
 80166ea:	62bb      	str	r3, [r7, #40]	; 0x28
	i32 sx = x0 < x1 ? 1 : -1;
 80166ec:	68fa      	ldr	r2, [r7, #12]
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	429a      	cmp	r2, r3
 80166f2:	da01      	bge.n	80166f8 <draw_line+0x34>
 80166f4:	2301      	movs	r3, #1
 80166f6:	e001      	b.n	80166fc <draw_line+0x38>
 80166f8:	f04f 33ff 	mov.w	r3, #4294967295
 80166fc:	627b      	str	r3, [r7, #36]	; 0x24
	i32 dy = -abs(y1 - y0);
 80166fe:	683a      	ldr	r2, [r7, #0]
 8016700:	68bb      	ldr	r3, [r7, #8]
 8016702:	1ad3      	subs	r3, r2, r3
 8016704:	2b00      	cmp	r3, #0
 8016706:	bfb8      	it	lt
 8016708:	425b      	neglt	r3, r3
 801670a:	425b      	negs	r3, r3
 801670c:	623b      	str	r3, [r7, #32]
	i32 sy = y0 < y1 ? 1 : -1;
 801670e:	68ba      	ldr	r2, [r7, #8]
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	429a      	cmp	r2, r3
 8016714:	da01      	bge.n	801671a <draw_line+0x56>
 8016716:	2301      	movs	r3, #1
 8016718:	e001      	b.n	801671e <draw_line+0x5a>
 801671a:	f04f 33ff 	mov.w	r3, #4294967295
 801671e:	61fb      	str	r3, [r7, #28]
	i32 error = dx + dy;
 8016720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016722:	6a3b      	ldr	r3, [r7, #32]
 8016724:	4413      	add	r3, r2
 8016726:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(true) {
		i32 index = xy_to_index(x0, y0);
 8016728:	68b9      	ldr	r1, [r7, #8]
 801672a:	68f8      	ldr	r0, [r7, #12]
 801672c:	f7ff ff38 	bl	80165a0 <xy_to_index>
 8016730:	61b8      	str	r0, [r7, #24]
		if(index > -1) {
 8016732:	69bb      	ldr	r3, [r7, #24]
 8016734:	2b00      	cmp	r3, #0
 8016736:	db0e      	blt.n	8016756 <draw_line+0x92>
			drawState.buffer[index] = set_pixel_color(drawState.buffer[index], x0, color);
 8016738:	4b22      	ldr	r3, [pc, #136]	; (80167c4 <draw_line+0x100>)
 801673a:	681a      	ldr	r2, [r3, #0]
 801673c:	69bb      	ldr	r3, [r7, #24]
 801673e:	4413      	add	r3, r2
 8016740:	7818      	ldrb	r0, [r3, #0]
 8016742:	4b20      	ldr	r3, [pc, #128]	; (80167c4 <draw_line+0x100>)
 8016744:	681a      	ldr	r2, [r3, #0]
 8016746:	69bb      	ldr	r3, [r7, #24]
 8016748:	18d4      	adds	r4, r2, r3
 801674a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801674c:	68f9      	ldr	r1, [r7, #12]
 801674e:	f7ff ff70 	bl	8016632 <set_pixel_color>
 8016752:	4603      	mov	r3, r0
 8016754:	7023      	strb	r3, [r4, #0]
		}

		if(x0 == x1 && y0 == y1) {
 8016756:	68fa      	ldr	r2, [r7, #12]
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	429a      	cmp	r2, r3
 801675c:	d103      	bne.n	8016766 <draw_line+0xa2>
 801675e:	68ba      	ldr	r2, [r7, #8]
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	429a      	cmp	r2, r3
 8016764:	d025      	beq.n	80167b2 <draw_line+0xee>
			break;
		}
		i32 e2 = 2 * error;
 8016766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016768:	005b      	lsls	r3, r3, #1
 801676a:	617b      	str	r3, [r7, #20]
		if(e2 >= dy) {
 801676c:	697a      	ldr	r2, [r7, #20]
 801676e:	6a3b      	ldr	r3, [r7, #32]
 8016770:	429a      	cmp	r2, r3
 8016772:	db0b      	blt.n	801678c <draw_line+0xc8>
			if(x0 == x1) {
 8016774:	68fa      	ldr	r2, [r7, #12]
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	429a      	cmp	r2, r3
 801677a:	d01c      	beq.n	80167b6 <draw_line+0xf2>
				break;
			}
			error = error + dy;
 801677c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801677e:	6a3b      	ldr	r3, [r7, #32]
 8016780:	4413      	add	r3, r2
 8016782:	62fb      	str	r3, [r7, #44]	; 0x2c
			x0 = x0 + sx;
 8016784:	68fa      	ldr	r2, [r7, #12]
 8016786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016788:	4413      	add	r3, r2
 801678a:	60fb      	str	r3, [r7, #12]
	}
		if(e2 <= dx) {
 801678c:	697a      	ldr	r2, [r7, #20]
 801678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016790:	429a      	cmp	r2, r3
 8016792:	dcc9      	bgt.n	8016728 <draw_line+0x64>
			if(y0 == y1) {
 8016794:	68ba      	ldr	r2, [r7, #8]
 8016796:	683b      	ldr	r3, [r7, #0]
 8016798:	429a      	cmp	r2, r3
 801679a:	d00e      	beq.n	80167ba <draw_line+0xf6>
				break;
			}
			error = error + dx;
 801679c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a0:	4413      	add	r3, r2
 80167a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			y0 = y0 + sy;
 80167a4:	68ba      	ldr	r2, [r7, #8]
 80167a6:	69fb      	ldr	r3, [r7, #28]
 80167a8:	4413      	add	r3, r2
 80167aa:	60bb      	str	r3, [r7, #8]
	while(true) {
 80167ac:	e7bc      	b.n	8016728 <draw_line+0x64>
		return;
 80167ae:	bf00      	nop
 80167b0:	e004      	b.n	80167bc <draw_line+0xf8>
			break;
 80167b2:	bf00      	nop
 80167b4:	e002      	b.n	80167bc <draw_line+0xf8>
				break;
 80167b6:	bf00      	nop
 80167b8:	e000      	b.n	80167bc <draw_line+0xf8>
				break;
 80167ba:	bf00      	nop
		}
	}
}
 80167bc:	3734      	adds	r7, #52	; 0x34
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd90      	pop	{r4, r7, pc}
 80167c2:	bf00      	nop
 80167c4:	20001028 	.word	0x20001028

080167c8 <draw_rect>:

void draw_rect(i32 x, i32 y, i32 w, i32 h, i32 color) {
 80167c8:	b590      	push	{r4, r7, lr}
 80167ca:	b089      	sub	sp, #36	; 0x24
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	60f8      	str	r0, [r7, #12]
 80167d0:	60b9      	str	r1, [r7, #8]
 80167d2:	607a      	str	r2, [r7, #4]
 80167d4:	603b      	str	r3, [r7, #0]
	i32 index;
	for(i32 dx = x; dx < x + w; dx++) {
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	61fb      	str	r3, [r7, #28]
 80167da:	e034      	b.n	8016846 <draw_rect+0x7e>
		index = xy_to_index(dx, y);
 80167dc:	68b9      	ldr	r1, [r7, #8]
 80167de:	69f8      	ldr	r0, [r7, #28]
 80167e0:	f7ff fede 	bl	80165a0 <xy_to_index>
 80167e4:	6178      	str	r0, [r7, #20]
		if(index > -1) {
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	db0e      	blt.n	801680a <draw_rect+0x42>
			drawState.buffer[index] = set_pixel_color(drawState.buffer[index], dx, color);
 80167ec:	4b3c      	ldr	r3, [pc, #240]	; (80168e0 <draw_rect+0x118>)
 80167ee:	681a      	ldr	r2, [r3, #0]
 80167f0:	697b      	ldr	r3, [r7, #20]
 80167f2:	4413      	add	r3, r2
 80167f4:	7818      	ldrb	r0, [r3, #0]
 80167f6:	4b3a      	ldr	r3, [pc, #232]	; (80168e0 <draw_rect+0x118>)
 80167f8:	681a      	ldr	r2, [r3, #0]
 80167fa:	697b      	ldr	r3, [r7, #20]
 80167fc:	18d4      	adds	r4, r2, r3
 80167fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016800:	69f9      	ldr	r1, [r7, #28]
 8016802:	f7ff ff16 	bl	8016632 <set_pixel_color>
 8016806:	4603      	mov	r3, r0
 8016808:	7023      	strb	r3, [r4, #0]
		}

		index = xy_to_index(dx, y + h - 1);
 801680a:	68ba      	ldr	r2, [r7, #8]
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	4413      	add	r3, r2
 8016810:	3b01      	subs	r3, #1
 8016812:	4619      	mov	r1, r3
 8016814:	69f8      	ldr	r0, [r7, #28]
 8016816:	f7ff fec3 	bl	80165a0 <xy_to_index>
 801681a:	6178      	str	r0, [r7, #20]
		if(index > -1) {
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	2b00      	cmp	r3, #0
 8016820:	db0e      	blt.n	8016840 <draw_rect+0x78>
			drawState.buffer[index] = set_pixel_color(drawState.buffer[index], dx, color);
 8016822:	4b2f      	ldr	r3, [pc, #188]	; (80168e0 <draw_rect+0x118>)
 8016824:	681a      	ldr	r2, [r3, #0]
 8016826:	697b      	ldr	r3, [r7, #20]
 8016828:	4413      	add	r3, r2
 801682a:	7818      	ldrb	r0, [r3, #0]
 801682c:	4b2c      	ldr	r3, [pc, #176]	; (80168e0 <draw_rect+0x118>)
 801682e:	681a      	ldr	r2, [r3, #0]
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	18d4      	adds	r4, r2, r3
 8016834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016836:	69f9      	ldr	r1, [r7, #28]
 8016838:	f7ff fefb 	bl	8016632 <set_pixel_color>
 801683c:	4603      	mov	r3, r0
 801683e:	7023      	strb	r3, [r4, #0]
	for(i32 dx = x; dx < x + w; dx++) {
 8016840:	69fb      	ldr	r3, [r7, #28]
 8016842:	3301      	adds	r3, #1
 8016844:	61fb      	str	r3, [r7, #28]
 8016846:	68fa      	ldr	r2, [r7, #12]
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	4413      	add	r3, r2
 801684c:	69fa      	ldr	r2, [r7, #28]
 801684e:	429a      	cmp	r2, r3
 8016850:	dbc4      	blt.n	80167dc <draw_rect+0x14>
		}
	}

	for(i32 dy = y; dy < y + h; dy++) {
 8016852:	68bb      	ldr	r3, [r7, #8]
 8016854:	61bb      	str	r3, [r7, #24]
 8016856:	e037      	b.n	80168c8 <draw_rect+0x100>
		index = xy_to_index(x, dy);
 8016858:	69b9      	ldr	r1, [r7, #24]
 801685a:	68f8      	ldr	r0, [r7, #12]
 801685c:	f7ff fea0 	bl	80165a0 <xy_to_index>
 8016860:	6178      	str	r0, [r7, #20]
		if(index > -1) {
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	2b00      	cmp	r3, #0
 8016866:	db0e      	blt.n	8016886 <draw_rect+0xbe>
			drawState.buffer[index] = set_pixel_color(drawState.buffer[index], x, color);
 8016868:	4b1d      	ldr	r3, [pc, #116]	; (80168e0 <draw_rect+0x118>)
 801686a:	681a      	ldr	r2, [r3, #0]
 801686c:	697b      	ldr	r3, [r7, #20]
 801686e:	4413      	add	r3, r2
 8016870:	7818      	ldrb	r0, [r3, #0]
 8016872:	4b1b      	ldr	r3, [pc, #108]	; (80168e0 <draw_rect+0x118>)
 8016874:	681a      	ldr	r2, [r3, #0]
 8016876:	697b      	ldr	r3, [r7, #20]
 8016878:	18d4      	adds	r4, r2, r3
 801687a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801687c:	68f9      	ldr	r1, [r7, #12]
 801687e:	f7ff fed8 	bl	8016632 <set_pixel_color>
 8016882:	4603      	mov	r3, r0
 8016884:	7023      	strb	r3, [r4, #0]
		}

		index = xy_to_index(x + w - 1, dy);
 8016886:	68fa      	ldr	r2, [r7, #12]
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	4413      	add	r3, r2
 801688c:	3b01      	subs	r3, #1
 801688e:	69b9      	ldr	r1, [r7, #24]
 8016890:	4618      	mov	r0, r3
 8016892:	f7ff fe85 	bl	80165a0 <xy_to_index>
 8016896:	6178      	str	r0, [r7, #20]
		if(index > -1) {
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	2b00      	cmp	r3, #0
 801689c:	db11      	blt.n	80168c2 <draw_rect+0xfa>
			drawState.buffer[index] = set_pixel_color(drawState.buffer[index], x + w - 1, color);
 801689e:	4b10      	ldr	r3, [pc, #64]	; (80168e0 <draw_rect+0x118>)
 80168a0:	681a      	ldr	r2, [r3, #0]
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	4413      	add	r3, r2
 80168a6:	7818      	ldrb	r0, [r3, #0]
 80168a8:	68fa      	ldr	r2, [r7, #12]
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	4413      	add	r3, r2
 80168ae:	1e59      	subs	r1, r3, #1
 80168b0:	4b0b      	ldr	r3, [pc, #44]	; (80168e0 <draw_rect+0x118>)
 80168b2:	681a      	ldr	r2, [r3, #0]
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	18d4      	adds	r4, r2, r3
 80168b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168ba:	f7ff feba 	bl	8016632 <set_pixel_color>
 80168be:	4603      	mov	r3, r0
 80168c0:	7023      	strb	r3, [r4, #0]
	for(i32 dy = y; dy < y + h; dy++) {
 80168c2:	69bb      	ldr	r3, [r7, #24]
 80168c4:	3301      	adds	r3, #1
 80168c6:	61bb      	str	r3, [r7, #24]
 80168c8:	68ba      	ldr	r2, [r7, #8]
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	4413      	add	r3, r2
 80168ce:	69ba      	ldr	r2, [r7, #24]
 80168d0:	429a      	cmp	r2, r3
 80168d2:	dbc1      	blt.n	8016858 <draw_rect+0x90>
		}
	}
}
 80168d4:	bf00      	nop
 80168d6:	bf00      	nop
 80168d8:	3724      	adds	r7, #36	; 0x24
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd90      	pop	{r4, r7, pc}
 80168de:	bf00      	nop
 80168e0:	20001028 	.word	0x20001028

080168e4 <fill_rect>:

void fill_rect(i32 x, i32 y, i32 w, i32 h, i32 color) {
 80168e4:	b590      	push	{r4, r7, lr}
 80168e6:	b089      	sub	sp, #36	; 0x24
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	60f8      	str	r0, [r7, #12]
 80168ec:	60b9      	str	r1, [r7, #8]
 80168ee:	607a      	str	r2, [r7, #4]
 80168f0:	603b      	str	r3, [r7, #0]
	if(color < 0 || color >= PALETTE_SIZE) {
 80168f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	db62      	blt.n	80169be <fill_rect+0xda>
 80168f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fa:	2b0f      	cmp	r3, #15
 80168fc:	dc5f      	bgt.n	80169be <fill_rect+0xda>
		return;
	}

	if (x >= SCREEN_WIDTH || x + w < 0 || y >= SCREEN_HEIGHT || y + h < 0) {
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8016904:	da5d      	bge.n	80169c2 <fill_rect+0xde>
 8016906:	68fa      	ldr	r2, [r7, #12]
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	4413      	add	r3, r2
 801690c:	2b00      	cmp	r3, #0
 801690e:	db58      	blt.n	80169c2 <fill_rect+0xde>
 8016910:	68bb      	ldr	r3, [r7, #8]
 8016912:	2bef      	cmp	r3, #239	; 0xef
 8016914:	dc55      	bgt.n	80169c2 <fill_rect+0xde>
 8016916:	68ba      	ldr	r2, [r7, #8]
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	4413      	add	r3, r2
 801691c:	2b00      	cmp	r3, #0
 801691e:	db50      	blt.n	80169c2 <fill_rect+0xde>
		return;
	}

	x = x > 0 ? x : 0;
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016926:	60fb      	str	r3, [r7, #12]
	y = y > 0 ? y : 0;
 8016928:	68bb      	ldr	r3, [r7, #8]
 801692a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801692e:	60bb      	str	r3, [r7, #8]

	w = x + w <= SCREEN_WIDTH  ? w : SCREEN_WIDTH  - x;
 8016930:	68fa      	ldr	r2, [r7, #12]
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	4413      	add	r3, r2
 8016936:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 801693a:	dd03      	ble.n	8016944 <fill_rect+0x60>
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8016942:	e000      	b.n	8016946 <fill_rect+0x62>
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	607b      	str	r3, [r7, #4]
	h = y + h <= SCREEN_HEIGHT ? h : SCREEN_HEIGHT - y;
 8016948:	68ba      	ldr	r2, [r7, #8]
 801694a:	683b      	ldr	r3, [r7, #0]
 801694c:	4413      	add	r3, r2
 801694e:	2bf0      	cmp	r3, #240	; 0xf0
 8016950:	dd03      	ble.n	801695a <fill_rect+0x76>
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8016958:	e000      	b.n	801695c <fill_rect+0x78>
 801695a:	683b      	ldr	r3, [r7, #0]
 801695c:	603b      	str	r3, [r7, #0]

	for(i32 dy = y; dy < y + h; dy++) {
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	61fb      	str	r3, [r7, #28]
 8016962:	e025      	b.n	80169b0 <fill_rect+0xcc>
		for(i32 dx = x; dx < x + w; dx++) {
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	61bb      	str	r3, [r7, #24]
 8016968:	e019      	b.n	801699e <fill_rect+0xba>
			i32 index = xy_to_index(dx, dy);
 801696a:	69f9      	ldr	r1, [r7, #28]
 801696c:	69b8      	ldr	r0, [r7, #24]
 801696e:	f7ff fe17 	bl	80165a0 <xy_to_index>
 8016972:	6178      	str	r0, [r7, #20]
			if(index > -1) {
 8016974:	697b      	ldr	r3, [r7, #20]
 8016976:	2b00      	cmp	r3, #0
 8016978:	db0e      	blt.n	8016998 <fill_rect+0xb4>
				drawState.buffer[index] = set_pixel_color(drawState.buffer[index], dx, color);
 801697a:	4b14      	ldr	r3, [pc, #80]	; (80169cc <fill_rect+0xe8>)
 801697c:	681a      	ldr	r2, [r3, #0]
 801697e:	697b      	ldr	r3, [r7, #20]
 8016980:	4413      	add	r3, r2
 8016982:	7818      	ldrb	r0, [r3, #0]
 8016984:	4b11      	ldr	r3, [pc, #68]	; (80169cc <fill_rect+0xe8>)
 8016986:	681a      	ldr	r2, [r3, #0]
 8016988:	697b      	ldr	r3, [r7, #20]
 801698a:	18d4      	adds	r4, r2, r3
 801698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801698e:	69b9      	ldr	r1, [r7, #24]
 8016990:	f7ff fe4f 	bl	8016632 <set_pixel_color>
 8016994:	4603      	mov	r3, r0
 8016996:	7023      	strb	r3, [r4, #0]
		for(i32 dx = x; dx < x + w; dx++) {
 8016998:	69bb      	ldr	r3, [r7, #24]
 801699a:	3301      	adds	r3, #1
 801699c:	61bb      	str	r3, [r7, #24]
 801699e:	68fa      	ldr	r2, [r7, #12]
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	4413      	add	r3, r2
 80169a4:	69ba      	ldr	r2, [r7, #24]
 80169a6:	429a      	cmp	r2, r3
 80169a8:	dbdf      	blt.n	801696a <fill_rect+0x86>
	for(i32 dy = y; dy < y + h; dy++) {
 80169aa:	69fb      	ldr	r3, [r7, #28]
 80169ac:	3301      	adds	r3, #1
 80169ae:	61fb      	str	r3, [r7, #28]
 80169b0:	68ba      	ldr	r2, [r7, #8]
 80169b2:	683b      	ldr	r3, [r7, #0]
 80169b4:	4413      	add	r3, r2
 80169b6:	69fa      	ldr	r2, [r7, #28]
 80169b8:	429a      	cmp	r2, r3
 80169ba:	dbd3      	blt.n	8016964 <fill_rect+0x80>
 80169bc:	e002      	b.n	80169c4 <fill_rect+0xe0>
		return;
 80169be:	bf00      	nop
 80169c0:	e000      	b.n	80169c4 <fill_rect+0xe0>
		return;
 80169c2:	bf00      	nop
			}
		}
	}
}
 80169c4:	3724      	adds	r7, #36	; 0x24
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd90      	pop	{r4, r7, pc}
 80169ca:	bf00      	nop
 80169cc:	20001028 	.word	0x20001028

080169d0 <draw_char>:

void draw_char(char character, i32 x, i32 y, i32 color) {
 80169d0:	b590      	push	{r4, r7, lr}
 80169d2:	b089      	sub	sp, #36	; 0x24
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	60b9      	str	r1, [r7, #8]
 80169d8:	607a      	str	r2, [r7, #4]
 80169da:	603b      	str	r3, [r7, #0]
 80169dc:	4603      	mov	r3, r0
 80169de:	73fb      	strb	r3, [r7, #15]
	if(color < 0 || color >= PALETTE_SIZE) {
 80169e0:	683b      	ldr	r3, [r7, #0]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	db51      	blt.n	8016a8a <draw_char+0xba>
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	2b0f      	cmp	r3, #15
 80169ea:	dc4e      	bgt.n	8016a8a <draw_char+0xba>
		return;
	}

	character &= 0x7F;
 80169ec:	7bfb      	ldrb	r3, [r7, #15]
 80169ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80169f2:	73fb      	strb	r3, [r7, #15]
	if(character < ' ') {
 80169f4:	7bfb      	ldrb	r3, [r7, #15]
 80169f6:	2b1f      	cmp	r3, #31
 80169f8:	d802      	bhi.n	8016a00 <draw_char+0x30>
		character = 0;
 80169fa:	2300      	movs	r3, #0
 80169fc:	73fb      	strb	r3, [r7, #15]
 80169fe:	e002      	b.n	8016a06 <draw_char+0x36>
	} else {
		character -= ' ';
 8016a00:	7bfb      	ldrb	r3, [r7, #15]
 8016a02:	3b20      	subs	r3, #32
 8016a04:	73fb      	strb	r3, [r7, #15]
	}

	u8 *c = (u8*)font[character];
 8016a06:	7bfb      	ldrb	r3, [r7, #15]
 8016a08:	00db      	lsls	r3, r3, #3
 8016a0a:	4a22      	ldr	r2, [pc, #136]	; (8016a94 <draw_char+0xc4>)
 8016a0c:	4413      	add	r3, r2
 8016a0e:	617b      	str	r3, [r7, #20]
	for(i32 dx = 0; dx < CHAR_WIDTH; dx++) {
 8016a10:	2300      	movs	r3, #0
 8016a12:	61fb      	str	r3, [r7, #28]
 8016a14:	e035      	b.n	8016a82 <draw_char+0xb2>
		for(i32 dy = 0; dy < CHAR_HEIGHT; dy++) {
 8016a16:	2300      	movs	r3, #0
 8016a18:	61bb      	str	r3, [r7, #24]
 8016a1a:	e02c      	b.n	8016a76 <draw_char+0xa6>
			if(c[dx] & (1 << dy)) {
 8016a1c:	69fb      	ldr	r3, [r7, #28]
 8016a1e:	697a      	ldr	r2, [r7, #20]
 8016a20:	4413      	add	r3, r2
 8016a22:	781b      	ldrb	r3, [r3, #0]
 8016a24:	461a      	mov	r2, r3
 8016a26:	69bb      	ldr	r3, [r7, #24]
 8016a28:	fa42 f303 	asr.w	r3, r2, r3
 8016a2c:	f003 0301 	and.w	r3, r3, #1
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d01d      	beq.n	8016a70 <draw_char+0xa0>
				i32 index = xy_to_index(x + dx, y + dy);
 8016a34:	68ba      	ldr	r2, [r7, #8]
 8016a36:	69fb      	ldr	r3, [r7, #28]
 8016a38:	18d0      	adds	r0, r2, r3
 8016a3a:	687a      	ldr	r2, [r7, #4]
 8016a3c:	69bb      	ldr	r3, [r7, #24]
 8016a3e:	4413      	add	r3, r2
 8016a40:	4619      	mov	r1, r3
 8016a42:	f7ff fdad 	bl	80165a0 <xy_to_index>
 8016a46:	6138      	str	r0, [r7, #16]
				if(index > -1) {
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	db10      	blt.n	8016a70 <draw_char+0xa0>
					drawState.buffer[index] = set_pixel_color(drawState.buffer[index], x + dx, color);
 8016a4e:	4b12      	ldr	r3, [pc, #72]	; (8016a98 <draw_char+0xc8>)
 8016a50:	681a      	ldr	r2, [r3, #0]
 8016a52:	693b      	ldr	r3, [r7, #16]
 8016a54:	4413      	add	r3, r2
 8016a56:	7818      	ldrb	r0, [r3, #0]
 8016a58:	68ba      	ldr	r2, [r7, #8]
 8016a5a:	69fb      	ldr	r3, [r7, #28]
 8016a5c:	18d1      	adds	r1, r2, r3
 8016a5e:	4b0e      	ldr	r3, [pc, #56]	; (8016a98 <draw_char+0xc8>)
 8016a60:	681a      	ldr	r2, [r3, #0]
 8016a62:	693b      	ldr	r3, [r7, #16]
 8016a64:	18d4      	adds	r4, r2, r3
 8016a66:	683a      	ldr	r2, [r7, #0]
 8016a68:	f7ff fde3 	bl	8016632 <set_pixel_color>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	7023      	strb	r3, [r4, #0]
		for(i32 dy = 0; dy < CHAR_HEIGHT; dy++) {
 8016a70:	69bb      	ldr	r3, [r7, #24]
 8016a72:	3301      	adds	r3, #1
 8016a74:	61bb      	str	r3, [r7, #24]
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	2b07      	cmp	r3, #7
 8016a7a:	ddcf      	ble.n	8016a1c <draw_char+0x4c>
	for(i32 dx = 0; dx < CHAR_WIDTH; dx++) {
 8016a7c:	69fb      	ldr	r3, [r7, #28]
 8016a7e:	3301      	adds	r3, #1
 8016a80:	61fb      	str	r3, [r7, #28]
 8016a82:	69fb      	ldr	r3, [r7, #28]
 8016a84:	2b07      	cmp	r3, #7
 8016a86:	ddc6      	ble.n	8016a16 <draw_char+0x46>
 8016a88:	e000      	b.n	8016a8c <draw_char+0xbc>
		return;
 8016a8a:	bf00      	nop
				}
			}
		}
	}
}
 8016a8c:	3724      	adds	r7, #36	; 0x24
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd90      	pop	{r4, r7, pc}
 8016a92:	bf00      	nop
 8016a94:	0801d2f4 	.word	0x0801d2f4
 8016a98:	20001028 	.word	0x20001028

08016a9c <draw_string>:

void draw_string(char *string, i32 x, i32 y, i32 color) {
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b086      	sub	sp, #24
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	60f8      	str	r0, [r7, #12]
 8016aa4:	60b9      	str	r1, [r7, #8]
 8016aa6:	607a      	str	r2, [r7, #4]
 8016aa8:	603b      	str	r3, [r7, #0]
	for(i32 index = 0; string[index] != '\0'; index++) {
 8016aaa:	2300      	movs	r3, #0
 8016aac:	617b      	str	r3, [r7, #20]
 8016aae:	e00e      	b.n	8016ace <draw_string+0x32>
		draw_char(string[index], x, y, color);
 8016ab0:	697b      	ldr	r3, [r7, #20]
 8016ab2:	68fa      	ldr	r2, [r7, #12]
 8016ab4:	4413      	add	r3, r2
 8016ab6:	7818      	ldrb	r0, [r3, #0]
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	687a      	ldr	r2, [r7, #4]
 8016abc:	68b9      	ldr	r1, [r7, #8]
 8016abe:	f7ff ff87 	bl	80169d0 <draw_char>
		x += CHAR_WIDTH;
 8016ac2:	68bb      	ldr	r3, [r7, #8]
 8016ac4:	3308      	adds	r3, #8
 8016ac6:	60bb      	str	r3, [r7, #8]
	for(i32 index = 0; string[index] != '\0'; index++) {
 8016ac8:	697b      	ldr	r3, [r7, #20]
 8016aca:	3301      	adds	r3, #1
 8016acc:	617b      	str	r3, [r7, #20]
 8016ace:	697b      	ldr	r3, [r7, #20]
 8016ad0:	68fa      	ldr	r2, [r7, #12]
 8016ad2:	4413      	add	r3, r2
 8016ad4:	781b      	ldrb	r3, [r3, #0]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d1ea      	bne.n	8016ab0 <draw_string+0x14>
	}
}
 8016ada:	bf00      	nop
 8016adc:	bf00      	nop
 8016ade:	3718      	adds	r7, #24
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}

08016ae4 <draw_shape>:

void draw_shape(Transform transfrom, Line *lines, i32 color) {
 8016ae4:	b084      	sub	sp, #16
 8016ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ae8:	b08b      	sub	sp, #44	; 0x2c
 8016aea:	af04      	add	r7, sp, #16
 8016aec:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8016af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(i32 i = 0; i < SHAPE_SIZE; i++) {
 8016af4:	2300      	movs	r3, #0
 8016af6:	617b      	str	r3, [r7, #20]
 8016af8:	e158      	b.n	8016dac <draw_shape+0x2c8>
		if(lines[i].x0 != lines[i].x1 || lines[i].y0 != lines[i].y1) {
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	011b      	lsls	r3, r3, #4
 8016afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016b00:	4413      	add	r3, r2
 8016b02:	681a      	ldr	r2, [r3, #0]
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	011b      	lsls	r3, r3, #4
 8016b08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016b0a:	440b      	add	r3, r1
 8016b0c:	689b      	ldr	r3, [r3, #8]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d10c      	bne.n	8016b2c <draw_shape+0x48>
 8016b12:	697b      	ldr	r3, [r7, #20]
 8016b14:	011b      	lsls	r3, r3, #4
 8016b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016b18:	4413      	add	r3, r2
 8016b1a:	685a      	ldr	r2, [r3, #4]
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	011b      	lsls	r3, r3, #4
 8016b20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016b22:	440b      	add	r3, r1
 8016b24:	68db      	ldr	r3, [r3, #12]
 8016b26:	429a      	cmp	r2, r3
 8016b28:	f000 813d 	beq.w	8016da6 <draw_shape+0x2c2>
			f32 x0 = lines[i].x0;
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	011b      	lsls	r3, r3, #4
 8016b30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016b32:	4413      	add	r3, r2
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	ee07 3a90 	vmov	s15, r3
 8016b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b3e:	edc7 7a04 	vstr	s15, [r7, #16]
			f32 y0 = lines[i].y0;
 8016b42:	697b      	ldr	r3, [r7, #20]
 8016b44:	011b      	lsls	r3, r3, #4
 8016b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016b48:	4413      	add	r3, r2
 8016b4a:	685b      	ldr	r3, [r3, #4]
 8016b4c:	ee07 3a90 	vmov	s15, r3
 8016b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b54:	edc7 7a03 	vstr	s15, [r7, #12]
			point_transform(&x0, &y0, transfrom);
 8016b58:	f107 060c 	add.w	r6, r7, #12
 8016b5c:	f107 0510 	add.w	r5, r7, #16
 8016b60:	466c      	mov	r4, sp
 8016b62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016b66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016b6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016b72:	cb0c      	ldmia	r3, {r2, r3}
 8016b74:	4631      	mov	r1, r6
 8016b76:	4628      	mov	r0, r5
 8016b78:	f001 fe3c 	bl	80187f4 <point_transform>

			f32 x1 = lines[i].x1;
 8016b7c:	697b      	ldr	r3, [r7, #20]
 8016b7e:	011b      	lsls	r3, r3, #4
 8016b80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016b82:	4413      	add	r3, r2
 8016b84:	689b      	ldr	r3, [r3, #8]
 8016b86:	ee07 3a90 	vmov	s15, r3
 8016b8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b8e:	edc7 7a02 	vstr	s15, [r7, #8]
			f32 y1 = lines[i].y1;
 8016b92:	697b      	ldr	r3, [r7, #20]
 8016b94:	011b      	lsls	r3, r3, #4
 8016b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016b98:	4413      	add	r3, r2
 8016b9a:	68db      	ldr	r3, [r3, #12]
 8016b9c:	ee07 3a90 	vmov	s15, r3
 8016ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ba4:	edc7 7a01 	vstr	s15, [r7, #4]
			point_transform(&x1, &y1, transfrom);
 8016ba8:	1d3e      	adds	r6, r7, #4
 8016baa:	f107 0508 	add.w	r5, r7, #8
 8016bae:	466c      	mov	r4, sp
 8016bb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016bb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016bbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016bc0:	cb0c      	ldmia	r3, {r2, r3}
 8016bc2:	4631      	mov	r1, r6
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	f001 fe15 	bl	80187f4 <point_transform>

			//draw_line(x0, (SCREEN_HEIGHT - 1) - y0, x1, (SCREEN_HEIGHT - 1) - y1, color);
			draw_line(x0, y0, x1, y1, color);
 8016bca:	edd7 7a04 	vldr	s15, [r7, #16]
 8016bce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016bd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8016bd6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8016bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8016bde:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8016be2:	edd7 7a01 	vldr	s15, [r7, #4]
 8016be6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016bec:	9300      	str	r3, [sp, #0]
 8016bee:	ee17 3a90 	vmov	r3, s15
 8016bf2:	ee16 2a10 	vmov	r2, s12
 8016bf6:	ee16 1a90 	vmov	r1, s13
 8016bfa:	ee17 0a10 	vmov	r0, s14
 8016bfe:	f7ff fd61 	bl	80166c4 <draw_line>

			if(x0 < 0 || x1 < 0) {
 8016c02:	edd7 7a04 	vldr	s15, [r7, #16]
 8016c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c0e:	d406      	bmi.n	8016c1e <draw_shape+0x13a>
 8016c10:	edd7 7a02 	vldr	s15, [r7, #8]
 8016c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c1c:	d524      	bpl.n	8016c68 <draw_shape+0x184>
				draw_line(x0 + SCREEN_WIDTH, y0, x1 + SCREEN_WIDTH, y1, color);
 8016c1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8016c22:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8016dc4 <draw_shape+0x2e0>
 8016c26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016c2a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8016c2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8016c32:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8016c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8016c3a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8016dc4 <draw_shape+0x2e0>
 8016c3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016c42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016c46:	edd7 7a01 	vldr	s15, [r7, #4]
 8016c4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c50:	9300      	str	r3, [sp, #0]
 8016c52:	ee17 3a90 	vmov	r3, s15
 8016c56:	ee17 2a10 	vmov	r2, s14
 8016c5a:	ee16 1a10 	vmov	r1, s12
 8016c5e:	ee16 0a90 	vmov	r0, s13
 8016c62:	f7ff fd2f 	bl	80166c4 <draw_line>
 8016c66:	e035      	b.n	8016cd4 <draw_shape+0x1f0>
			} else if(x0 >= SCREEN_WIDTH || x1 >= SCREEN_WIDTH){
 8016c68:	edd7 7a04 	vldr	s15, [r7, #16]
 8016c6c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8016dc4 <draw_shape+0x2e0>
 8016c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c78:	da08      	bge.n	8016c8c <draw_shape+0x1a8>
 8016c7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8016c7e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8016dc4 <draw_shape+0x2e0>
 8016c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c8a:	db23      	blt.n	8016cd4 <draw_shape+0x1f0>
				draw_line(x0 - SCREEN_WIDTH, y0, x1 - SCREEN_WIDTH, y1, color);
 8016c8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8016c90:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8016dc4 <draw_shape+0x2e0>
 8016c94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016c98:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8016c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8016ca0:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8016ca4:	edd7 7a02 	vldr	s15, [r7, #8]
 8016ca8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8016dc4 <draw_shape+0x2e0>
 8016cac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016cb0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016cb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8016cb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016cbe:	9300      	str	r3, [sp, #0]
 8016cc0:	ee17 3a90 	vmov	r3, s15
 8016cc4:	ee17 2a10 	vmov	r2, s14
 8016cc8:	ee16 1a10 	vmov	r1, s12
 8016ccc:	ee16 0a90 	vmov	r0, s13
 8016cd0:	f7ff fcf8 	bl	80166c4 <draw_line>
			}

			if(y0 < 0 || y1 < 0) {
 8016cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8016cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce0:	d406      	bmi.n	8016cf0 <draw_shape+0x20c>
 8016ce2:	edd7 7a01 	vldr	s15, [r7, #4]
 8016ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cee:	d524      	bpl.n	8016d3a <draw_shape+0x256>
				draw_line(x0, y0 + SCREEN_HEIGHT, x1, y1 + SCREEN_HEIGHT, color);
 8016cf0:	edd7 7a04 	vldr	s15, [r7, #16]
 8016cf4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8016cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8016cfc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8016dc8 <draw_shape+0x2e4>
 8016d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016d04:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8016d08:	edd7 7a02 	vldr	s15, [r7, #8]
 8016d0c:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8016d10:	edd7 7a01 	vldr	s15, [r7, #4]
 8016d14:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8016dc8 <draw_shape+0x2e4>
 8016d18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016d22:	9300      	str	r3, [sp, #0]
 8016d24:	ee17 3a90 	vmov	r3, s15
 8016d28:	ee15 2a90 	vmov	r2, s11
 8016d2c:	ee16 1a10 	vmov	r1, s12
 8016d30:	ee16 0a90 	vmov	r0, s13
 8016d34:	f7ff fcc6 	bl	80166c4 <draw_line>
 8016d38:	e035      	b.n	8016da6 <draw_shape+0x2c2>
			} else if(y0 >= SCREEN_HEIGHT || y1 >= SCREEN_HEIGHT){
 8016d3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8016d3e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8016dc8 <draw_shape+0x2e4>
 8016d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d4a:	da08      	bge.n	8016d5e <draw_shape+0x27a>
 8016d4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8016d50:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8016dc8 <draw_shape+0x2e4>
 8016d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d5c:	db23      	blt.n	8016da6 <draw_shape+0x2c2>
				draw_line(x0, y0 - SCREEN_HEIGHT, x1, y1 - SCREEN_HEIGHT, color);
 8016d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8016d62:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8016d66:	edd7 7a03 	vldr	s15, [r7, #12]
 8016d6a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8016dc8 <draw_shape+0x2e4>
 8016d6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d72:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8016d76:	edd7 7a02 	vldr	s15, [r7, #8]
 8016d7a:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 8016d7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8016d82:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8016dc8 <draw_shape+0x2e4>
 8016d86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016d90:	9300      	str	r3, [sp, #0]
 8016d92:	ee17 3a90 	vmov	r3, s15
 8016d96:	ee15 2a90 	vmov	r2, s11
 8016d9a:	ee16 1a10 	vmov	r1, s12
 8016d9e:	ee16 0a90 	vmov	r0, s13
 8016da2:	f7ff fc8f 	bl	80166c4 <draw_line>
	for(i32 i = 0; i < SHAPE_SIZE; i++) {
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	3301      	adds	r3, #1
 8016daa:	617b      	str	r3, [r7, #20]
 8016dac:	697b      	ldr	r3, [r7, #20]
 8016dae:	2b0c      	cmp	r3, #12
 8016db0:	f77f aea3 	ble.w	8016afa <draw_shape+0x16>
			}
		}
	}
}
 8016db4:	bf00      	nop
 8016db6:	bf00      	nop
 8016db8:	371c      	adds	r7, #28
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016dc0:	b004      	add	sp, #16
 8016dc2:	4770      	bx	lr
 8016dc4:	43a00000 	.word	0x43a00000
 8016dc8:	43700000 	.word	0x43700000

08016dcc <clear_screen>:

void clear_screen(i32 color) {
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b084      	sub	sp, #16
 8016dd0:	af02      	add	r7, sp, #8
 8016dd2:	6078      	str	r0, [r7, #4]
	fill_rect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, color);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	9300      	str	r3, [sp, #0]
 8016dd8:	23f0      	movs	r3, #240	; 0xf0
 8016dda:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8016dde:	2100      	movs	r1, #0
 8016de0:	2000      	movs	r0, #0
 8016de2:	f7ff fd7f 	bl	80168e4 <fill_rect>
}
 8016de6:	bf00      	nop
 8016de8:	3708      	adds	r7, #8
 8016dea:	46bd      	mov	sp, r7
 8016dec:	bd80      	pop	{r7, pc}
	...

08016df0 <draw_init>:

void draw_init() {
 8016df0:	b580      	push	{r7, lr}
 8016df2:	af00      	add	r7, sp, #0
	lcd_init();
 8016df4:	f001 facf 	bl	8018396 <lcd_init>

	drawState.buffer = (u8*)malloc((SCREEN_WIDTH / PIXELS_PER_BYTE) * SCREEN_HEIGHT);
 8016df8:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 8016dfc:	f004 fca0 	bl	801b740 <malloc>
 8016e00:	4603      	mov	r3, r0
 8016e02:	461a      	mov	r2, r3
 8016e04:	4b07      	ldr	r3, [pc, #28]	; (8016e24 <draw_init+0x34>)
 8016e06:	601a      	str	r2, [r3, #0]
	drawState.tempBuffer = (u16*)malloc(SCREEN_WIDTH * SCREEN_CHUNK_HEIGHT * sizeof(u16));
 8016e08:	f44f 40c8 	mov.w	r0, #25600	; 0x6400
 8016e0c:	f004 fc98 	bl	801b740 <malloc>
 8016e10:	4603      	mov	r3, r0
 8016e12:	461a      	mov	r2, r3
 8016e14:	4b03      	ldr	r3, [pc, #12]	; (8016e24 <draw_init+0x34>)
 8016e16:	625a      	str	r2, [r3, #36]	; 0x24

	clear_screen(0);
 8016e18:	2000      	movs	r0, #0
 8016e1a:	f7ff ffd7 	bl	8016dcc <clear_screen>
}
 8016e1e:	bf00      	nop
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop
 8016e24:	20001028 	.word	0x20001028

08016e28 <draw_push>:

void draw_push() {
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b08a      	sub	sp, #40	; 0x28
 8016e2c:	af02      	add	r7, sp, #8
	i32 yOffset = 0;
 8016e2e:	2300      	movs	r3, #0
 8016e30:	61fb      	str	r3, [r7, #28]
	for(i32 chunk = 0; chunk < SCREEN_CHUNKS; chunk++) {
 8016e32:	2300      	movs	r3, #0
 8016e34:	61bb      	str	r3, [r7, #24]
 8016e36:	e04a      	b.n	8016ece <draw_push+0xa6>
		for(i32 y = 0; y < SCREEN_CHUNK_HEIGHT; y++) {
 8016e38:	2300      	movs	r3, #0
 8016e3a:	617b      	str	r3, [r7, #20]
 8016e3c:	e034      	b.n	8016ea8 <draw_push+0x80>
			for(i32 x = 0; x < SCREEN_WIDTH; x++) {
 8016e3e:	2300      	movs	r3, #0
 8016e40:	613b      	str	r3, [r7, #16]
 8016e42:	e02a      	b.n	8016e9a <draw_push+0x72>
				i32 index = xy_to_index(x, y + yOffset);
 8016e44:	697a      	ldr	r2, [r7, #20]
 8016e46:	69fb      	ldr	r3, [r7, #28]
 8016e48:	4413      	add	r3, r2
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	6938      	ldr	r0, [r7, #16]
 8016e4e:	f7ff fba7 	bl	80165a0 <xy_to_index>
 8016e52:	60f8      	str	r0, [r7, #12]
				i32 colorIndex = get_pixel_color(drawState.buffer[index], x);
 8016e54:	4b22      	ldr	r3, [pc, #136]	; (8016ee0 <draw_push+0xb8>)
 8016e56:	681a      	ldr	r2, [r3, #0]
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	4413      	add	r3, r2
 8016e5c:	781b      	ldrb	r3, [r3, #0]
 8016e5e:	6939      	ldr	r1, [r7, #16]
 8016e60:	4618      	mov	r0, r3
 8016e62:	f7ff fbc3 	bl	80165ec <get_pixel_color>
 8016e66:	4603      	mov	r3, r0
 8016e68:	60bb      	str	r3, [r7, #8]
				i32 color = drawState.palette[colorIndex];
 8016e6a:	4a1d      	ldr	r2, [pc, #116]	; (8016ee0 <draw_push+0xb8>)
 8016e6c:	68bb      	ldr	r3, [r7, #8]
 8016e6e:	005b      	lsls	r3, r3, #1
 8016e70:	4413      	add	r3, r2
 8016e72:	889b      	ldrh	r3, [r3, #4]
 8016e74:	607b      	str	r3, [r7, #4]
				drawState.tempBuffer[y * SCREEN_WIDTH + x] = color;
 8016e76:	4b1a      	ldr	r3, [pc, #104]	; (8016ee0 <draw_push+0xb8>)
 8016e78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016e7a:	697a      	ldr	r2, [r7, #20]
 8016e7c:	4613      	mov	r3, r2
 8016e7e:	009b      	lsls	r3, r3, #2
 8016e80:	4413      	add	r3, r2
 8016e82:	019b      	lsls	r3, r3, #6
 8016e84:	461a      	mov	r2, r3
 8016e86:	693b      	ldr	r3, [r7, #16]
 8016e88:	4413      	add	r3, r2
 8016e8a:	005b      	lsls	r3, r3, #1
 8016e8c:	440b      	add	r3, r1
 8016e8e:	687a      	ldr	r2, [r7, #4]
 8016e90:	b292      	uxth	r2, r2
 8016e92:	801a      	strh	r2, [r3, #0]
			for(i32 x = 0; x < SCREEN_WIDTH; x++) {
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	3301      	adds	r3, #1
 8016e98:	613b      	str	r3, [r7, #16]
 8016e9a:	693b      	ldr	r3, [r7, #16]
 8016e9c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8016ea0:	dbd0      	blt.n	8016e44 <draw_push+0x1c>
		for(i32 y = 0; y < SCREEN_CHUNK_HEIGHT; y++) {
 8016ea2:	697b      	ldr	r3, [r7, #20]
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	617b      	str	r3, [r7, #20]
 8016ea8:	697b      	ldr	r3, [r7, #20]
 8016eaa:	2b27      	cmp	r3, #39	; 0x27
 8016eac:	ddc7      	ble.n	8016e3e <draw_push+0x16>
				//lcd_set_pixel(x, y + yOffset, color);
			}
		}

		lcd_fill(0, yOffset, SCREEN_WIDTH, SCREEN_CHUNK_HEIGHT, drawState.tempBuffer);
 8016eae:	69f9      	ldr	r1, [r7, #28]
 8016eb0:	4b0b      	ldr	r3, [pc, #44]	; (8016ee0 <draw_push+0xb8>)
 8016eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eb4:	9300      	str	r3, [sp, #0]
 8016eb6:	2328      	movs	r3, #40	; 0x28
 8016eb8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8016ebc:	2000      	movs	r0, #0
 8016ebe:	f001 fa3b 	bl	8018338 <lcd_fill>

		yOffset += SCREEN_CHUNK_HEIGHT;
 8016ec2:	69fb      	ldr	r3, [r7, #28]
 8016ec4:	3328      	adds	r3, #40	; 0x28
 8016ec6:	61fb      	str	r3, [r7, #28]
	for(i32 chunk = 0; chunk < SCREEN_CHUNKS; chunk++) {
 8016ec8:	69bb      	ldr	r3, [r7, #24]
 8016eca:	3301      	adds	r3, #1
 8016ecc:	61bb      	str	r3, [r7, #24]
 8016ece:	69bb      	ldr	r3, [r7, #24]
 8016ed0:	2b05      	cmp	r3, #5
 8016ed2:	ddb1      	ble.n	8016e38 <draw_push+0x10>
	}
}
 8016ed4:	bf00      	nop
 8016ed6:	bf00      	nop
 8016ed8:	3720      	adds	r7, #32
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
 8016ede:	bf00      	nop
 8016ee0:	20001028 	.word	0x20001028

08016ee4 <menu_init>:

GameState gameState;

void swap_scene(GameScene scene);

void menu_init() {
 8016ee4:	b480      	push	{r7}
 8016ee6:	af00      	add	r7, sp, #0

}
 8016ee8:	bf00      	nop
 8016eea:	46bd      	mov	sp, r7
 8016eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef0:	4770      	bx	lr
	...

08016ef4 <menu_tick>:

void menu_tick() {
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b08a      	sub	sp, #40	; 0x28
 8016ef8:	af02      	add	r7, sp, #8
	//TODO: String size (multiplier like 2x the size)
	//TODO: The font is bad (the letter i is broken)
	//char *title = "Asteroids";
	char *title = "ASTEROIDS";
 8016efa:	4b1d      	ldr	r3, [pc, #116]	; (8016f70 <menu_tick+0x7c>)
 8016efc:	61fb      	str	r3, [r7, #28]
	i32 titleLength = strlen(title);
 8016efe:	69f8      	ldr	r0, [r7, #28]
 8016f00:	f7e9 f98e 	bl	8000220 <strlen>
 8016f04:	4603      	mov	r3, r0
 8016f06:	61bb      	str	r3, [r7, #24]
	i32 titleX = (SCREEN_WIDTH  / 2) - (titleLength * (CHAR_WIDTH /2));
 8016f08:	69bb      	ldr	r3, [r7, #24]
 8016f0a:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8016f0e:	009b      	lsls	r3, r3, #2
 8016f10:	617b      	str	r3, [r7, #20]
	i32 titleY = (SCREEN_HEIGHT / 4) - (CHAR_HEIGHT / 2);
 8016f12:	2338      	movs	r3, #56	; 0x38
 8016f14:	613b      	str	r3, [r7, #16]
	draw_string(title, titleX, titleY, 15);
 8016f16:	230f      	movs	r3, #15
 8016f18:	693a      	ldr	r2, [r7, #16]
 8016f1a:	6979      	ldr	r1, [r7, #20]
 8016f1c:	69f8      	ldr	r0, [r7, #28]
 8016f1e:	f7ff fdbd 	bl	8016a9c <draw_string>

	i32 buttonW = 120;
 8016f22:	2378      	movs	r3, #120	; 0x78
 8016f24:	60fb      	str	r3, [r7, #12]
	i32 buttonH = 40;
 8016f26:	2328      	movs	r3, #40	; 0x28
 8016f28:	60bb      	str	r3, [r7, #8]

	i32 buttonX = (SCREEN_WIDTH  / 2) - (buttonW / 2);
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	0fda      	lsrs	r2, r3, #31
 8016f2e:	4413      	add	r3, r2
 8016f30:	105b      	asrs	r3, r3, #1
 8016f32:	425b      	negs	r3, r3
 8016f34:	33a0      	adds	r3, #160	; 0xa0
 8016f36:	607b      	str	r3, [r7, #4]
	i32 buttonY = (SCREEN_HEIGHT / 2) - (buttonH / 2);
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	0fda      	lsrs	r2, r3, #31
 8016f3c:	4413      	add	r3, r2
 8016f3e:	105b      	asrs	r3, r3, #1
 8016f40:	425b      	negs	r3, r3
 8016f42:	3378      	adds	r3, #120	; 0x78
 8016f44:	603b      	str	r3, [r7, #0]

	if(ui_button(1, buttonX, buttonY, buttonW, buttonH, "Play")) {
 8016f46:	4b0b      	ldr	r3, [pc, #44]	; (8016f74 <menu_tick+0x80>)
 8016f48:	9301      	str	r3, [sp, #4]
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	9300      	str	r3, [sp, #0]
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	683a      	ldr	r2, [r7, #0]
 8016f52:	6879      	ldr	r1, [r7, #4]
 8016f54:	2001      	movs	r0, #1
 8016f56:	f001 fa91 	bl	801847c <ui_button>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d002      	beq.n	8016f66 <menu_tick+0x72>
		swap_scene(GAME_SCENE_LEVEL);
 8016f60:	2001      	movs	r0, #1
 8016f62:	f000 fe1d 	bl	8017ba0 <swap_scene>
	}
}
 8016f66:	bf00      	nop
 8016f68:	3720      	adds	r7, #32
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}
 8016f6e:	bf00      	nop
 8016f70:	0801d200 	.word	0x0801d200
 8016f74:	0801d20c 	.word	0x0801d20c

08016f78 <spawn_ship>:

void spawn_ship() {
 8016f78:	b5b0      	push	{r4, r5, r7, lr}
 8016f7a:	b086      	sub	sp, #24
 8016f7c:	af00      	add	r7, sp, #0
	gameState.ship.transform = transform_make(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 0, 1, 1);
 8016f7e:	4c14      	ldr	r4, [pc, #80]	; (8016fd0 <spawn_ship+0x58>)
 8016f80:	463b      	mov	r3, r7
 8016f82:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8016f86:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8016f8a:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8016fd4 <spawn_ship+0x5c>
 8016f8e:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016fd8 <spawn_ship+0x60>
 8016f92:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8016fdc <spawn_ship+0x64>
 8016f96:	4618      	mov	r0, r3
 8016f98:	f001 fb84 	bl	80186a4 <transform_make>
 8016f9c:	3438      	adds	r4, #56	; 0x38
 8016f9e:	463d      	mov	r5, r7
 8016fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016fa4:	682b      	ldr	r3, [r5, #0]
 8016fa6:	6023      	str	r3, [r4, #0]
	gameState.ship.thrust = false;
 8016fa8:	4b09      	ldr	r3, [pc, #36]	; (8016fd0 <spawn_ship+0x58>)
 8016faa:	2200      	movs	r2, #0
 8016fac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	gameState.ship.thrustCooldown = 0.0f;
 8016fb0:	4b07      	ldr	r3, [pc, #28]	; (8016fd0 <spawn_ship+0x58>)
 8016fb2:	f04f 0200 	mov.w	r2, #0
 8016fb6:	651a      	str	r2, [r3, #80]	; 0x50
	gameState.ship.velocityX = 0.0f;
 8016fb8:	4b05      	ldr	r3, [pc, #20]	; (8016fd0 <spawn_ship+0x58>)
 8016fba:	f04f 0200 	mov.w	r2, #0
 8016fbe:	655a      	str	r2, [r3, #84]	; 0x54
	gameState.ship.velocityY = 0.0f;
 8016fc0:	4b03      	ldr	r3, [pc, #12]	; (8016fd0 <spawn_ship+0x58>)
 8016fc2:	f04f 0200 	mov.w	r2, #0
 8016fc6:	659a      	str	r2, [r3, #88]	; 0x58
}
 8016fc8:	bf00      	nop
 8016fca:	3718      	adds	r7, #24
 8016fcc:	46bd      	mov	sp, r7
 8016fce:	bdb0      	pop	{r4, r5, r7, pc}
 8016fd0:	20001050 	.word	0x20001050
 8016fd4:	00000000 	.word	0x00000000
 8016fd8:	42f00000 	.word	0x42f00000
 8016fdc:	43200000 	.word	0x43200000

08016fe0 <spawn_asteroid>:

void spawn_asteroid(f32 px, f32 py, i32 size) {
 8016fe0:	b5b0      	push	{r4, r5, r7, lr}
 8016fe2:	b08e      	sub	sp, #56	; 0x38
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8016fea:	edc7 0a08 	vstr	s1, [r7, #32]
 8016fee:	61f8      	str	r0, [r7, #28]
	for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8016ff4:	e0b4      	b.n	8017160 <spawn_asteroid+0x180>
		if(!gameState.asteroids[i].alive) {
 8016ff6:	4a5e      	ldr	r2, [pc, #376]	; (8017170 <spawn_asteroid+0x190>)
 8016ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ffa:	212c      	movs	r1, #44	; 0x2c
 8016ffc:	fb01 f303 	mul.w	r3, r1, r3
 8017000:	4413      	add	r3, r2
 8017002:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017006:	781b      	ldrb	r3, [r3, #0]
 8017008:	f083 0301 	eor.w	r3, r3, #1
 801700c:	b2db      	uxtb	r3, r3
 801700e:	2b00      	cmp	r3, #0
 8017010:	f000 80a3 	beq.w	801715a <spawn_asteroid+0x17a>
			gameState.asteroids[i].alive = true;
 8017014:	4a56      	ldr	r2, [pc, #344]	; (8017170 <spawn_asteroid+0x190>)
 8017016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017018:	212c      	movs	r1, #44	; 0x2c
 801701a:	fb01 f303 	mul.w	r3, r1, r3
 801701e:	4413      	add	r3, r2
 8017020:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017024:	2201      	movs	r2, #1
 8017026:	701a      	strb	r2, [r3, #0]
			gameState.asteroids[i].shape = SHAPE_ASTEROIDS_0 + rand() % 4;
 8017028:	f004 fc7a 	bl	801b920 <rand>
 801702c:	4603      	mov	r3, r0
 801702e:	425a      	negs	r2, r3
 8017030:	f003 0303 	and.w	r3, r3, #3
 8017034:	f002 0203 	and.w	r2, r2, #3
 8017038:	bf58      	it	pl
 801703a:	4253      	negpl	r3, r2
 801703c:	b2db      	uxtb	r3, r3
 801703e:	3303      	adds	r3, #3
 8017040:	b2d8      	uxtb	r0, r3
 8017042:	4a4b      	ldr	r2, [pc, #300]	; (8017170 <spawn_asteroid+0x190>)
 8017044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017046:	212c      	movs	r1, #44	; 0x2c
 8017048:	fb01 f303 	mul.w	r3, r1, r3
 801704c:	4413      	add	r3, r2
 801704e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8017052:	4602      	mov	r2, r0
 8017054:	701a      	strb	r2, [r3, #0]
			f32 scale = size == 3 ? 2.0f : (size == 2 ? 1.0f : 0.5f);
 8017056:	69fb      	ldr	r3, [r7, #28]
 8017058:	2b03      	cmp	r3, #3
 801705a:	d008      	beq.n	801706e <spawn_asteroid+0x8e>
 801705c:	69fb      	ldr	r3, [r7, #28]
 801705e:	2b02      	cmp	r3, #2
 8017060:	d102      	bne.n	8017068 <spawn_asteroid+0x88>
 8017062:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8017066:	e004      	b.n	8017072 <spawn_asteroid+0x92>
 8017068:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 801706c:	e001      	b.n	8017072 <spawn_asteroid+0x92>
 801706e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017072:	633b      	str	r3, [r7, #48]	; 0x30
			gameState.asteroids[i].transform = transform_make(px, py, 0, scale, scale);
 8017074:	4a3e      	ldr	r2, [pc, #248]	; (8017170 <spawn_asteroid+0x190>)
 8017076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017078:	212c      	movs	r1, #44	; 0x2c
 801707a:	fb01 f303 	mul.w	r3, r1, r3
 801707e:	4413      	add	r3, r2
 8017080:	f503 74c4 	add.w	r4, r3, #392	; 0x188
 8017084:	463b      	mov	r3, r7
 8017086:	ed97 2a0c 	vldr	s4, [r7, #48]	; 0x30
 801708a:	edd7 1a0c 	vldr	s3, [r7, #48]	; 0x30
 801708e:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8017174 <spawn_asteroid+0x194>
 8017092:	edd7 0a08 	vldr	s1, [r7, #32]
 8017096:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 801709a:	4618      	mov	r0, r3
 801709c:	f001 fb02 	bl	80186a4 <transform_make>
 80170a0:	3404      	adds	r4, #4
 80170a2:	463d      	mov	r5, r7
 80170a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80170a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170a8:	682b      	ldr	r3, [r5, #0]
 80170aa:	6023      	str	r3, [r4, #0]
			gameState.asteroids[i].size = size;
 80170ac:	4a30      	ldr	r2, [pc, #192]	; (8017170 <spawn_asteroid+0x190>)
 80170ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80170b0:	212c      	movs	r1, #44	; 0x2c
 80170b2:	fb01 f303 	mul.w	r3, r1, r3
 80170b6:	4413      	add	r3, r2
 80170b8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80170bc:	69fa      	ldr	r2, [r7, #28]
 80170be:	601a      	str	r2, [r3, #0]

			f32 angle = (f32)rand()/(f32)(RAND_MAX/(2 * M_PI));
 80170c0:	f004 fc2e 	bl	801b920 <rand>
 80170c4:	ee07 0a90 	vmov	s15, r0
 80170c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80170cc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8017178 <spawn_asteroid+0x198>
 80170d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80170d4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			gameState.asteroids[i].velocityX = cos(angle) * 100;
 80170d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80170da:	f7e9 fb87 	bl	80007ec <__aeabi_f2d>
 80170de:	4602      	mov	r2, r0
 80170e0:	460b      	mov	r3, r1
 80170e2:	ec43 2b10 	vmov	d0, r2, r3
 80170e6:	f002 fb4b 	bl	8019780 <cos>
 80170ea:	ec51 0b10 	vmov	r0, r1, d0
 80170ee:	f04f 0200 	mov.w	r2, #0
 80170f2:	4b22      	ldr	r3, [pc, #136]	; (801717c <spawn_asteroid+0x19c>)
 80170f4:	f7e9 f8ec 	bl	80002d0 <__aeabi_dmul>
 80170f8:	4602      	mov	r2, r0
 80170fa:	460b      	mov	r3, r1
 80170fc:	4610      	mov	r0, r2
 80170fe:	4619      	mov	r1, r3
 8017100:	f7e9 fc7c 	bl	80009fc <__aeabi_d2f>
 8017104:	4602      	mov	r2, r0
 8017106:	491a      	ldr	r1, [pc, #104]	; (8017170 <spawn_asteroid+0x190>)
 8017108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801710a:	202c      	movs	r0, #44	; 0x2c
 801710c:	fb00 f303 	mul.w	r3, r0, r3
 8017110:	440b      	add	r3, r1
 8017112:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8017116:	601a      	str	r2, [r3, #0]
			gameState.asteroids[i].velocityY = sin(angle) * 100;
 8017118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801711a:	f7e9 fb67 	bl	80007ec <__aeabi_f2d>
 801711e:	4602      	mov	r2, r0
 8017120:	460b      	mov	r3, r1
 8017122:	ec43 2b10 	vmov	d0, r2, r3
 8017126:	f002 fb7f 	bl	8019828 <sin>
 801712a:	ec51 0b10 	vmov	r0, r1, d0
 801712e:	f04f 0200 	mov.w	r2, #0
 8017132:	4b12      	ldr	r3, [pc, #72]	; (801717c <spawn_asteroid+0x19c>)
 8017134:	f7e9 f8cc 	bl	80002d0 <__aeabi_dmul>
 8017138:	4602      	mov	r2, r0
 801713a:	460b      	mov	r3, r1
 801713c:	4610      	mov	r0, r2
 801713e:	4619      	mov	r1, r3
 8017140:	f7e9 fc5c 	bl	80009fc <__aeabi_d2f>
 8017144:	4602      	mov	r2, r0
 8017146:	490a      	ldr	r1, [pc, #40]	; (8017170 <spawn_asteroid+0x190>)
 8017148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801714a:	202c      	movs	r0, #44	; 0x2c
 801714c:	fb00 f303 	mul.w	r3, r0, r3
 8017150:	440b      	add	r3, r1
 8017152:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8017156:	601a      	str	r2, [r3, #0]
			return;
 8017158:	e006      	b.n	8017168 <spawn_asteroid+0x188>
	for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 801715a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801715c:	3301      	adds	r3, #1
 801715e:	637b      	str	r3, [r7, #52]	; 0x34
 8017160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017162:	2bff      	cmp	r3, #255	; 0xff
 8017164:	f77f af47 	ble.w	8016ff6 <spawn_asteroid+0x16>
		}
	}
}
 8017168:	3738      	adds	r7, #56	; 0x38
 801716a:	46bd      	mov	sp, r7
 801716c:	bdb0      	pop	{r4, r5, r7, pc}
 801716e:	bf00      	nop
 8017170:	20001050 	.word	0x20001050
 8017174:	00000000 	.word	0x00000000
 8017178:	4da2f983 	.word	0x4da2f983
 801717c:	40590000 	.word	0x40590000

08017180 <level_setup>:

void level_setup() {
 8017180:	b580      	push	{r7, lr}
 8017182:	b084      	sub	sp, #16
 8017184:	af00      	add	r7, sp, #0
	spawn_ship();
 8017186:	f7ff fef7 	bl	8016f78 <spawn_ship>

	for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 801718a:	2300      	movs	r3, #0
 801718c:	60fb      	str	r3, [r7, #12]
 801718e:	e00c      	b.n	80171aa <level_setup+0x2a>
		gameState.asteroids[i].alive = false;
 8017190:	4a3f      	ldr	r2, [pc, #252]	; (8017290 <level_setup+0x110>)
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	212c      	movs	r1, #44	; 0x2c
 8017196:	fb01 f303 	mul.w	r3, r1, r3
 801719a:	4413      	add	r3, r2
 801719c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80171a0:	2200      	movs	r2, #0
 80171a2:	701a      	strb	r2, [r3, #0]
	for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	3301      	adds	r3, #1
 80171a8:	60fb      	str	r3, [r7, #12]
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	2bff      	cmp	r3, #255	; 0xff
 80171ae:	ddef      	ble.n	8017190 <level_setup+0x10>
	}

	gameState.level++;
 80171b0:	4b37      	ldr	r3, [pc, #220]	; (8017290 <level_setup+0x110>)
 80171b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171b4:	3301      	adds	r3, #1
 80171b6:	4a36      	ldr	r2, [pc, #216]	; (8017290 <level_setup+0x110>)
 80171b8:	6313      	str	r3, [r2, #48]	; 0x30

	for(i32 i = 0; i < gameState.level + ASTEROID_START_COUNT - 3; i++) {
 80171ba:	2300      	movs	r3, #0
 80171bc:	60bb      	str	r3, [r7, #8]
 80171be:	e05d      	b.n	801727c <level_setup+0xfc>
		f32 x = 0.0f;
 80171c0:	f04f 0300 	mov.w	r3, #0
 80171c4:	607b      	str	r3, [r7, #4]
		f32 y = 0.0f;
 80171c6:	f04f 0300 	mov.w	r3, #0
 80171ca:	603b      	str	r3, [r7, #0]
		while(true) {
			//TODO: Check if the asteroid is generated near the ship and try again
			x = rand() % SCREEN_WIDTH;
 80171cc:	f004 fba8 	bl	801b920 <rand>
 80171d0:	4602      	mov	r2, r0
 80171d2:	4b30      	ldr	r3, [pc, #192]	; (8017294 <level_setup+0x114>)
 80171d4:	fb83 1302 	smull	r1, r3, r3, r2
 80171d8:	11d9      	asrs	r1, r3, #7
 80171da:	17d3      	asrs	r3, r2, #31
 80171dc:	1ac9      	subs	r1, r1, r3
 80171de:	460b      	mov	r3, r1
 80171e0:	009b      	lsls	r3, r3, #2
 80171e2:	440b      	add	r3, r1
 80171e4:	019b      	lsls	r3, r3, #6
 80171e6:	1ad1      	subs	r1, r2, r3
 80171e8:	ee07 1a90 	vmov	s15, r1
 80171ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171f0:	edc7 7a01 	vstr	s15, [r7, #4]
			y = rand() % SCREEN_HEIGHT;
 80171f4:	f004 fb94 	bl	801b920 <rand>
 80171f8:	4602      	mov	r2, r0
 80171fa:	4b27      	ldr	r3, [pc, #156]	; (8017298 <level_setup+0x118>)
 80171fc:	fb83 1302 	smull	r1, r3, r3, r2
 8017200:	4413      	add	r3, r2
 8017202:	11d9      	asrs	r1, r3, #7
 8017204:	17d3      	asrs	r3, r2, #31
 8017206:	1ac9      	subs	r1, r1, r3
 8017208:	460b      	mov	r3, r1
 801720a:	011b      	lsls	r3, r3, #4
 801720c:	1a5b      	subs	r3, r3, r1
 801720e:	011b      	lsls	r3, r3, #4
 8017210:	1ad1      	subs	r1, r2, r3
 8017212:	ee07 1a90 	vmov	s15, r1
 8017216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801721a:	edc7 7a00 	vstr	s15, [r7]
			if((x < (SCREEN_WIDTH / 2) - 20 || x > (SCREEN_WIDTH / 2) + 20) && (y < (SCREEN_HEIGHT / 2) - 20 || y > (SCREEN_HEIGHT / 2) + 20)) {
 801721e:	edd7 7a01 	vldr	s15, [r7, #4]
 8017222:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 801729c <level_setup+0x11c>
 8017226:	eef4 7ac7 	vcmpe.f32	s15, s14
 801722a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801722e:	d408      	bmi.n	8017242 <level_setup+0xc2>
 8017230:	edd7 7a01 	vldr	s15, [r7, #4]
 8017234:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80172a0 <level_setup+0x120>
 8017238:	eef4 7ac7 	vcmpe.f32	s15, s14
 801723c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017240:	dd11      	ble.n	8017266 <level_setup+0xe6>
 8017242:	edd7 7a00 	vldr	s15, [r7]
 8017246:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80172a4 <level_setup+0x124>
 801724a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801724e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017252:	d409      	bmi.n	8017268 <level_setup+0xe8>
 8017254:	edd7 7a00 	vldr	s15, [r7]
 8017258:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801729c <level_setup+0x11c>
 801725c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017264:	dc00      	bgt.n	8017268 <level_setup+0xe8>
			x = rand() % SCREEN_WIDTH;
 8017266:	e7b1      	b.n	80171cc <level_setup+0x4c>
				break;
			}
		}
		spawn_asteroid(x, y, 3);
 8017268:	2003      	movs	r0, #3
 801726a:	edd7 0a00 	vldr	s1, [r7]
 801726e:	ed97 0a01 	vldr	s0, [r7, #4]
 8017272:	f7ff feb5 	bl	8016fe0 <spawn_asteroid>
	for(i32 i = 0; i < gameState.level + ASTEROID_START_COUNT - 3; i++) {
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	3301      	adds	r3, #1
 801727a:	60bb      	str	r3, [r7, #8]
 801727c:	4b04      	ldr	r3, [pc, #16]	; (8017290 <level_setup+0x110>)
 801727e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017280:	68ba      	ldr	r2, [r7, #8]
 8017282:	429a      	cmp	r2, r3
 8017284:	db9c      	blt.n	80171c0 <level_setup+0x40>
	}
}
 8017286:	bf00      	nop
 8017288:	bf00      	nop
 801728a:	3710      	adds	r7, #16
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}
 8017290:	20001050 	.word	0x20001050
 8017294:	66666667 	.word	0x66666667
 8017298:	88888889 	.word	0x88888889
 801729c:	430c0000 	.word	0x430c0000
 80172a0:	43340000 	.word	0x43340000
 80172a4:	42c80000 	.word	0x42c80000

080172a8 <level_init>:

void level_init() {
 80172a8:	b580      	push	{r7, lr}
 80172aa:	af00      	add	r7, sp, #0
	//Level info
	gameState.score = 0;
 80172ac:	4b06      	ldr	r3, [pc, #24]	; (80172c8 <level_init+0x20>)
 80172ae:	2200      	movs	r2, #0
 80172b0:	62da      	str	r2, [r3, #44]	; 0x2c
	gameState.level = 1;
 80172b2:	4b05      	ldr	r3, [pc, #20]	; (80172c8 <level_init+0x20>)
 80172b4:	2201      	movs	r2, #1
 80172b6:	631a      	str	r2, [r3, #48]	; 0x30
	gameState.lives = 3;
 80172b8:	4b03      	ldr	r3, [pc, #12]	; (80172c8 <level_init+0x20>)
 80172ba:	2203      	movs	r2, #3
 80172bc:	635a      	str	r2, [r3, #52]	; 0x34

	level_setup();
 80172be:	f7ff ff5f 	bl	8017180 <level_setup>
}
 80172c2:	bf00      	nop
 80172c4:	bd80      	pop	{r7, pc}
 80172c6:	bf00      	nop
 80172c8:	20001050 	.word	0x20001050
 80172cc:	00000000 	.word	0x00000000

080172d0 <level_tick>:

void level_tick() {
 80172d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172d2:	b0a7      	sub	sp, #156	; 0x9c
 80172d4:	af08      	add	r7, sp, #32
	if(get_button(BUTTON_ESCAPE).down) {
 80172d6:	2005      	movs	r0, #5
 80172d8:	f000 ffae 	bl	8018238 <get_button>
 80172dc:	4603      	mov	r3, r0
 80172de:	627b      	str	r3, [r7, #36]	; 0x24
 80172e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d002      	beq.n	80172ee <level_tick+0x1e>
		swap_scene(GAME_SCENE_MENU);
 80172e8:	2000      	movs	r0, #0
 80172ea:	f000 fc59 	bl	8017ba0 <swap_scene>
	}

	bool shoot = get_button(BUTTON_DOWN).pressed;
 80172ee:	2001      	movs	r0, #1
 80172f0:	f000 ffa2 	bl	8018238 <get_button>
 80172f4:	4603      	mov	r3, r0
 80172f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80172f8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80172fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	i32 numberOfUpdates = 4;
 8017300:	2304      	movs	r3, #4
 8017302:	647b      	str	r3, [r7, #68]	; 0x44
	f32 deltaTime = gameState.deltaTime / numberOfUpdates;
 8017304:	4bc0      	ldr	r3, [pc, #768]	; (8017608 <level_tick+0x338>)
 8017306:	edd3 6a03 	vldr	s13, [r3, #12]
 801730a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801730c:	ee07 3a90 	vmov	s15, r3
 8017310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017318:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	for(i32 i = 0; i < numberOfUpdates; i++) {
 801731c:	2300      	movs	r3, #0
 801731e:	673b      	str	r3, [r7, #112]	; 0x70
 8017320:	e3b0      	b.n	8017a84 <level_tick+0x7b4>
		//Ship(Player)
		f32 accelerationX = 0.0f;
 8017322:	f04f 0300 	mov.w	r3, #0
 8017326:	66fb      	str	r3, [r7, #108]	; 0x6c
		f32 accelerationY = 0.0f;
 8017328:	f04f 0300 	mov.w	r3, #0
 801732c:	66bb      	str	r3, [r7, #104]	; 0x68

		Thumb thumb = get_thumb();
 801732e:	f000 ffa3 	bl	8018278 <get_thumb>
 8017332:	eeb0 7a40 	vmov.f32	s14, s0
 8017336:	eef0 7a60 	vmov.f32	s15, s1
 801733a:	ed87 7a07 	vstr	s14, [r7, #28]
 801733e:	edc7 7a08 	vstr	s15, [r7, #32]
		if(thumb.x != 0 || thumb.y != 0) {
 8017342:	edd7 7a07 	vldr	s15, [r7, #28]
 8017346:	eef5 7a40 	vcmp.f32	s15, #0.0
 801734a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801734e:	d106      	bne.n	801735e <level_tick+0x8e>
 8017350:	edd7 7a08 	vldr	s15, [r7, #32]
 8017354:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801735c:	d074      	beq.n	8017448 <level_tick+0x178>
			gameState.ship.transform.angle = atan2f(thumb.y * -1, thumb.x);
 801735e:	edd7 7a08 	vldr	s15, [r7, #32]
 8017362:	eef1 7a67 	vneg.f32	s15, s15
 8017366:	ed97 7a07 	vldr	s14, [r7, #28]
 801736a:	eef0 0a47 	vmov.f32	s1, s14
 801736e:	eeb0 0a67 	vmov.f32	s0, s15
 8017372:	f002 fb3b 	bl	80199ec <atan2f>
 8017376:	eef0 7a40 	vmov.f32	s15, s0
 801737a:	4ba3      	ldr	r3, [pc, #652]	; (8017608 <level_tick+0x338>)
 801737c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			accelerationX = cos(gameState.ship.transform.angle) * SHIP_ACCELERATION;
 8017380:	4ba1      	ldr	r3, [pc, #644]	; (8017608 <level_tick+0x338>)
 8017382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017384:	4618      	mov	r0, r3
 8017386:	f7e9 fa31 	bl	80007ec <__aeabi_f2d>
 801738a:	4602      	mov	r2, r0
 801738c:	460b      	mov	r3, r1
 801738e:	ec43 2b10 	vmov	d0, r2, r3
 8017392:	f002 f9f5 	bl	8019780 <cos>
 8017396:	ec51 0b10 	vmov	r0, r1, d0
 801739a:	f04f 0200 	mov.w	r2, #0
 801739e:	4b9b      	ldr	r3, [pc, #620]	; (801760c <level_tick+0x33c>)
 80173a0:	f7e8 ff96 	bl	80002d0 <__aeabi_dmul>
 80173a4:	4602      	mov	r2, r0
 80173a6:	460b      	mov	r3, r1
 80173a8:	4610      	mov	r0, r2
 80173aa:	4619      	mov	r1, r3
 80173ac:	f7e9 fb26 	bl	80009fc <__aeabi_d2f>
 80173b0:	4603      	mov	r3, r0
 80173b2:	66fb      	str	r3, [r7, #108]	; 0x6c
			accelerationY = sin(gameState.ship.transform.angle) * SHIP_ACCELERATION;
 80173b4:	4b94      	ldr	r3, [pc, #592]	; (8017608 <level_tick+0x338>)
 80173b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173b8:	4618      	mov	r0, r3
 80173ba:	f7e9 fa17 	bl	80007ec <__aeabi_f2d>
 80173be:	4602      	mov	r2, r0
 80173c0:	460b      	mov	r3, r1
 80173c2:	ec43 2b10 	vmov	d0, r2, r3
 80173c6:	f002 fa2f 	bl	8019828 <sin>
 80173ca:	ec51 0b10 	vmov	r0, r1, d0
 80173ce:	f04f 0200 	mov.w	r2, #0
 80173d2:	4b8e      	ldr	r3, [pc, #568]	; (801760c <level_tick+0x33c>)
 80173d4:	f7e8 ff7c 	bl	80002d0 <__aeabi_dmul>
 80173d8:	4602      	mov	r2, r0
 80173da:	460b      	mov	r3, r1
 80173dc:	4610      	mov	r0, r2
 80173de:	4619      	mov	r1, r3
 80173e0:	f7e9 fb0c 	bl	80009fc <__aeabi_d2f>
 80173e4:	4603      	mov	r3, r0
 80173e6:	66bb      	str	r3, [r7, #104]	; 0x68

			gameState.ship.thrustCooldown += deltaTime;
 80173e8:	4b87      	ldr	r3, [pc, #540]	; (8017608 <level_tick+0x338>)
 80173ea:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80173ee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80173f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80173f6:	4b84      	ldr	r3, [pc, #528]	; (8017608 <level_tick+0x338>)
 80173f8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			if(gameState.ship.thrustCooldown > SHIP_THRUST_COOLDOWN) {
 80173fc:	4b82      	ldr	r3, [pc, #520]	; (8017608 <level_tick+0x338>)
 80173fe:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8017402:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8017610 <level_tick+0x340>
 8017406:	eef4 7ac7 	vcmpe.f32	s15, s14
 801740a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801740e:	dd1f      	ble.n	8017450 <level_tick+0x180>
				gameState.ship.thrust = !gameState.ship.thrust;
 8017410:	4b7d      	ldr	r3, [pc, #500]	; (8017608 <level_tick+0x338>)
 8017412:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017416:	2b00      	cmp	r3, #0
 8017418:	bf14      	ite	ne
 801741a:	2301      	movne	r3, #1
 801741c:	2300      	moveq	r3, #0
 801741e:	b2db      	uxtb	r3, r3
 8017420:	f083 0301 	eor.w	r3, r3, #1
 8017424:	b2db      	uxtb	r3, r3
 8017426:	f003 0301 	and.w	r3, r3, #1
 801742a:	b2da      	uxtb	r2, r3
 801742c:	4b76      	ldr	r3, [pc, #472]	; (8017608 <level_tick+0x338>)
 801742e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				gameState.ship.thrustCooldown -= SHIP_THRUST_COOLDOWN;
 8017432:	4b75      	ldr	r3, [pc, #468]	; (8017608 <level_tick+0x338>)
 8017434:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8017438:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8017610 <level_tick+0x340>
 801743c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017440:	4b71      	ldr	r3, [pc, #452]	; (8017608 <level_tick+0x338>)
 8017442:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			if(gameState.ship.thrustCooldown > SHIP_THRUST_COOLDOWN) {
 8017446:	e003      	b.n	8017450 <level_tick+0x180>
			}
		} else {
			gameState.ship.thrust = false;
 8017448:	4b6f      	ldr	r3, [pc, #444]	; (8017608 <level_tick+0x338>)
 801744a:	2200      	movs	r2, #0
 801744c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		}

		accelerationX += gameState.ship.velocityX * -SHIP_FRICTION;
 8017450:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017452:	f7e9 f9cb 	bl	80007ec <__aeabi_f2d>
 8017456:	4604      	mov	r4, r0
 8017458:	460d      	mov	r5, r1
 801745a:	4b6b      	ldr	r3, [pc, #428]	; (8017608 <level_tick+0x338>)
 801745c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801745e:	4618      	mov	r0, r3
 8017460:	f7e9 f9c4 	bl	80007ec <__aeabi_f2d>
 8017464:	a366      	add	r3, pc, #408	; (adr r3, 8017600 <level_tick+0x330>)
 8017466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801746a:	f7e8 ff31 	bl	80002d0 <__aeabi_dmul>
 801746e:	4602      	mov	r2, r0
 8017470:	460b      	mov	r3, r1
 8017472:	4620      	mov	r0, r4
 8017474:	4629      	mov	r1, r5
 8017476:	f7e9 f85b 	bl	8000530 <__adddf3>
 801747a:	4602      	mov	r2, r0
 801747c:	460b      	mov	r3, r1
 801747e:	4610      	mov	r0, r2
 8017480:	4619      	mov	r1, r3
 8017482:	f7e9 fabb 	bl	80009fc <__aeabi_d2f>
 8017486:	4603      	mov	r3, r0
 8017488:	66fb      	str	r3, [r7, #108]	; 0x6c
		accelerationY += gameState.ship.velocityY * -SHIP_FRICTION;
 801748a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801748c:	f7e9 f9ae 	bl	80007ec <__aeabi_f2d>
 8017490:	4604      	mov	r4, r0
 8017492:	460d      	mov	r5, r1
 8017494:	4b5c      	ldr	r3, [pc, #368]	; (8017608 <level_tick+0x338>)
 8017496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017498:	4618      	mov	r0, r3
 801749a:	f7e9 f9a7 	bl	80007ec <__aeabi_f2d>
 801749e:	a358      	add	r3, pc, #352	; (adr r3, 8017600 <level_tick+0x330>)
 80174a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a4:	f7e8 ff14 	bl	80002d0 <__aeabi_dmul>
 80174a8:	4602      	mov	r2, r0
 80174aa:	460b      	mov	r3, r1
 80174ac:	4620      	mov	r0, r4
 80174ae:	4629      	mov	r1, r5
 80174b0:	f7e9 f83e 	bl	8000530 <__adddf3>
 80174b4:	4602      	mov	r2, r0
 80174b6:	460b      	mov	r3, r1
 80174b8:	4610      	mov	r0, r2
 80174ba:	4619      	mov	r1, r3
 80174bc:	f7e9 fa9e 	bl	80009fc <__aeabi_d2f>
 80174c0:	4603      	mov	r3, r0
 80174c2:	66bb      	str	r3, [r7, #104]	; 0x68

		gameState.ship.velocityX = CLAMP(gameState.ship.velocityX + accelerationX * deltaTime, -SHIP_MAX_VELOCITY, SHIP_MAX_VELOCITY);
 80174c4:	4b50      	ldr	r3, [pc, #320]	; (8017608 <level_tick+0x338>)
 80174c6:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80174ca:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80174ce:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80174d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80174d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80174da:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8017614 <level_tick+0x344>
 80174de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80174e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174e6:	d515      	bpl.n	8017514 <level_tick+0x244>
 80174e8:	4b47      	ldr	r3, [pc, #284]	; (8017608 <level_tick+0x338>)
 80174ea:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80174ee:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80174f2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80174f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80174fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80174fe:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8017618 <level_tick+0x348>
 8017502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801750a:	bfcc      	ite	gt
 801750c:	2301      	movgt	r3, #1
 801750e:	2300      	movle	r3, #0
 8017510:	b2db      	uxtb	r3, r3
 8017512:	e000      	b.n	8017516 <level_tick+0x246>
 8017514:	2301      	movs	r3, #1
 8017516:	2b00      	cmp	r3, #0
 8017518:	d020      	beq.n	801755c <level_tick+0x28c>
 801751a:	4b3b      	ldr	r3, [pc, #236]	; (8017608 <level_tick+0x338>)
 801751c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8017520:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8017524:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801752c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017530:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8017614 <level_tick+0x344>
 8017534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801753c:	d50b      	bpl.n	8017556 <level_tick+0x286>
 801753e:	4b32      	ldr	r3, [pc, #200]	; (8017608 <level_tick+0x338>)
 8017540:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8017544:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8017548:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801754c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017554:	e004      	b.n	8017560 <level_tick+0x290>
 8017556:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8017614 <level_tick+0x344>
 801755a:	e001      	b.n	8017560 <level_tick+0x290>
 801755c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8017618 <level_tick+0x348>
 8017560:	4b29      	ldr	r3, [pc, #164]	; (8017608 <level_tick+0x338>)
 8017562:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		gameState.ship.velocityY = CLAMP(gameState.ship.velocityY + accelerationY * deltaTime, -SHIP_MAX_VELOCITY, SHIP_MAX_VELOCITY);
 8017566:	4b28      	ldr	r3, [pc, #160]	; (8017608 <level_tick+0x338>)
 8017568:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 801756c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8017570:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017578:	ee77 7a27 	vadd.f32	s15, s14, s15
 801757c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8017614 <level_tick+0x344>
 8017580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017588:	d515      	bpl.n	80175b6 <level_tick+0x2e6>
 801758a:	4b1f      	ldr	r3, [pc, #124]	; (8017608 <level_tick+0x338>)
 801758c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8017590:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8017594:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801759c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175a0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8017618 <level_tick+0x348>
 80175a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80175a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ac:	bfcc      	ite	gt
 80175ae:	2301      	movgt	r3, #1
 80175b0:	2300      	movle	r3, #0
 80175b2:	b2db      	uxtb	r3, r3
 80175b4:	e000      	b.n	80175b8 <level_tick+0x2e8>
 80175b6:	2301      	movs	r3, #1
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d02f      	beq.n	801761c <level_tick+0x34c>
 80175bc:	4b12      	ldr	r3, [pc, #72]	; (8017608 <level_tick+0x338>)
 80175be:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80175c2:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80175c6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80175ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80175ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017614 <level_tick+0x344>
 80175d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80175da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175de:	d50b      	bpl.n	80175f8 <level_tick+0x328>
 80175e0:	4b09      	ldr	r3, [pc, #36]	; (8017608 <level_tick+0x338>)
 80175e2:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80175e6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80175ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80175ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80175f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80175f6:	e013      	b.n	8017620 <level_tick+0x350>
 80175f8:	eddf 7a06 	vldr	s15, [pc, #24]	; 8017614 <level_tick+0x344>
 80175fc:	e010      	b.n	8017620 <level_tick+0x350>
 80175fe:	bf00      	nop
 8017600:	66666666 	.word	0x66666666
 8017604:	bfe66666 	.word	0xbfe66666
 8017608:	20001050 	.word	0x20001050
 801760c:	40690000 	.word	0x40690000
 8017610:	3d4ccccd 	.word	0x3d4ccccd
 8017614:	43480000 	.word	0x43480000
 8017618:	c3480000 	.word	0xc3480000
 801761c:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 8017618 <level_tick+0x348>
 8017620:	4b61      	ldr	r3, [pc, #388]	; (80177a8 <level_tick+0x4d8>)
 8017622:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

		move_transform(&gameState.ship.transform, gameState.ship.velocityX * deltaTime, gameState.ship.velocityY * deltaTime);
 8017626:	4b60      	ldr	r3, [pc, #384]	; (80177a8 <level_tick+0x4d8>)
 8017628:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 801762c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017630:	ee67 6a27 	vmul.f32	s13, s14, s15
 8017634:	4b5c      	ldr	r3, [pc, #368]	; (80177a8 <level_tick+0x4d8>)
 8017636:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 801763a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 801763e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017642:	eef0 0a67 	vmov.f32	s1, s15
 8017646:	eeb0 0a66 	vmov.f32	s0, s13
 801764a:	4858      	ldr	r0, [pc, #352]	; (80177ac <level_tick+0x4dc>)
 801764c:	f001 f850 	bl	80186f0 <move_transform>
	//	char velString[64];
	//	sprintf(velString, "Vel X:%5d, Y:%5d\r\n", (i32)(gameState.ship.velocityX * 1000), (i32)(gameState.ship.velocityY * 1000));
	//	usb_log(velString, strlen(velString));

		//Bullets
		for(i32 i = 0; i < BULLET_COUNT; i++) {
 8017650:	2300      	movs	r3, #0
 8017652:	667b      	str	r3, [r7, #100]	; 0x64
 8017654:	e09b      	b.n	801778e <level_tick+0x4be>
			Bullet *bullet = gameState.bullets + i;
 8017656:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017658:	4613      	mov	r3, r2
 801765a:	00db      	lsls	r3, r3, #3
 801765c:	4413      	add	r3, r2
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	461a      	mov	r2, r3
 8017662:	4b53      	ldr	r3, [pc, #332]	; (80177b0 <level_tick+0x4e0>)
 8017664:	4413      	add	r3, r2
 8017666:	637b      	str	r3, [r7, #52]	; 0x34
			if(bullet->alive) {
 8017668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801766a:	781b      	ldrb	r3, [r3, #0]
 801766c:	2b00      	cmp	r3, #0
 801766e:	f000 808b 	beq.w	8017788 <level_tick+0x4b8>
				for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 8017672:	2300      	movs	r3, #0
 8017674:	663b      	str	r3, [r7, #96]	; 0x60
 8017676:	e054      	b.n	8017722 <level_tick+0x452>
					Asteroid *asteroid = gameState.asteroids + i;
 8017678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801767a:	222c      	movs	r2, #44	; 0x2c
 801767c:	fb02 f303 	mul.w	r3, r2, r3
 8017680:	4a4c      	ldr	r2, [pc, #304]	; (80177b4 <level_tick+0x4e4>)
 8017682:	4413      	add	r3, r2
 8017684:	633b      	str	r3, [r7, #48]	; 0x30
					if(asteroid->alive && shape_intersect(bullet->transform, shapes[SHAPE_BULLET], asteroid->transform, shapes[asteroid->shape])) {
 8017686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017688:	781b      	ldrb	r3, [r3, #0]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d046      	beq.n	801771c <level_tick+0x44c>
 801768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017690:	7a1b      	ldrb	r3, [r3, #8]
 8017692:	461a      	mov	r2, r3
 8017694:	23d0      	movs	r3, #208	; 0xd0
 8017696:	fb02 f303 	mul.w	r3, r2, r3
 801769a:	4a47      	ldr	r2, [pc, #284]	; (80177b8 <level_tick+0x4e8>)
 801769c:	4413      	add	r3, r2
 801769e:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 80176a0:	9307      	str	r3, [sp, #28]
 80176a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176a4:	ad02      	add	r5, sp, #8
 80176a6:	f103 0410 	add.w	r4, r3, #16
 80176aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80176ae:	6823      	ldr	r3, [r4, #0]
 80176b0:	602b      	str	r3, [r5, #0]
 80176b2:	4b42      	ldr	r3, [pc, #264]	; (80177bc <level_tick+0x4ec>)
 80176b4:	9301      	str	r3, [sp, #4]
 80176b6:	69b3      	ldr	r3, [r6, #24]
 80176b8:	9300      	str	r3, [sp, #0]
 80176ba:	f106 0308 	add.w	r3, r6, #8
 80176be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80176c0:	f001 fa29 	bl	8018b16 <shape_intersect>
 80176c4:	4603      	mov	r3, r0
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d028      	beq.n	801771c <level_tick+0x44c>
						asteroid->alive = false;
 80176ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176cc:	2200      	movs	r2, #0
 80176ce:	701a      	strb	r2, [r3, #0]
						if(asteroid->size > 1) {
 80176d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d2:	685b      	ldr	r3, [r3, #4]
 80176d4:	2b01      	cmp	r3, #1
 80176d6:	dd1d      	ble.n	8017714 <level_tick+0x444>
							i32 size = asteroid->size - 1;
 80176d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176da:	685b      	ldr	r3, [r3, #4]
 80176dc:	3b01      	subs	r3, #1
 80176de:	62fb      	str	r3, [r7, #44]	; 0x2c
							spawn_asteroid(asteroid->transform.tx, asteroid->transform.ty, size);
 80176e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80176e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176e8:	ed93 7a05 	vldr	s14, [r3, #20]
 80176ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80176ee:	eef0 0a47 	vmov.f32	s1, s14
 80176f2:	eeb0 0a67 	vmov.f32	s0, s15
 80176f6:	f7ff fc73 	bl	8016fe0 <spawn_asteroid>
							spawn_asteroid(asteroid->transform.tx, asteroid->transform.ty, size);
 80176fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8017700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017702:	ed93 7a05 	vldr	s14, [r3, #20]
 8017706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017708:	eef0 0a47 	vmov.f32	s1, s14
 801770c:	eeb0 0a67 	vmov.f32	s0, s15
 8017710:	f7ff fc66 	bl	8016fe0 <spawn_asteroid>
						}
						bullet->alive = false;
 8017714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017716:	2200      	movs	r2, #0
 8017718:	701a      	strb	r2, [r3, #0]
						break;
 801771a:	e005      	b.n	8017728 <level_tick+0x458>
				for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 801771c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801771e:	3301      	adds	r3, #1
 8017720:	663b      	str	r3, [r7, #96]	; 0x60
 8017722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017724:	2bff      	cmp	r3, #255	; 0xff
 8017726:	dda7      	ble.n	8017678 <level_tick+0x3a8>
					}
				}

				bullet->time += deltaTime;
 8017728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801772a:	ed93 7a01 	vldr	s14, [r3, #4]
 801772e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017738:	edc3 7a01 	vstr	s15, [r3, #4]
				if(bullet->time > BULLET_ALIVE_TIME) {
 801773c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801773e:	edd3 7a01 	vldr	s15, [r3, #4]
 8017742:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8017746:	eef4 7ac7 	vcmpe.f32	s15, s14
 801774a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801774e:	dd03      	ble.n	8017758 <level_tick+0x488>
					bullet->alive = false;
 8017750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017752:	2200      	movs	r2, #0
 8017754:	701a      	strb	r2, [r3, #0]
					continue;
 8017756:	e017      	b.n	8017788 <level_tick+0x4b8>
				}

				move_transform(&bullet->transform, bullet->velocityX * deltaTime, bullet->velocityY * deltaTime);
 8017758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801775a:	f103 0208 	add.w	r2, r3, #8
 801775e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017760:	ed93 7a07 	vldr	s14, [r3, #28]
 8017764:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017768:	ee67 6a27 	vmul.f32	s13, s14, s15
 801776c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801776e:	ed93 7a08 	vldr	s14, [r3, #32]
 8017772:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017776:	ee67 7a27 	vmul.f32	s15, s14, s15
 801777a:	eef0 0a67 	vmov.f32	s1, s15
 801777e:	eeb0 0a66 	vmov.f32	s0, s13
 8017782:	4610      	mov	r0, r2
 8017784:	f000 ffb4 	bl	80186f0 <move_transform>
		for(i32 i = 0; i < BULLET_COUNT; i++) {
 8017788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801778a:	3301      	adds	r3, #1
 801778c:	667b      	str	r3, [r7, #100]	; 0x64
 801778e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017790:	2b07      	cmp	r3, #7
 8017792:	f77f af60 	ble.w	8017656 <level_tick+0x386>
			}
		}

		if(shoot) {
 8017796:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801779a:	2b00      	cmp	r3, #0
 801779c:	f000 810c 	beq.w	80179b8 <level_tick+0x6e8>
			for(i32 i = 0; i < BULLET_COUNT; i++) {
 80177a0:	2300      	movs	r3, #0
 80177a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80177a4:	e104      	b.n	80179b0 <level_tick+0x6e0>
 80177a6:	bf00      	nop
 80177a8:	20001050 	.word	0x20001050
 80177ac:	20001088 	.word	0x20001088
 80177b0:	200010ac 	.word	0x200010ac
 80177b4:	200011cc 	.word	0x200011cc
 80177b8:	2000012c 	.word	0x2000012c
 80177bc:	200006dc 	.word	0x200006dc
				if(!gameState.bullets[i].alive) {
 80177c0:	49bb      	ldr	r1, [pc, #748]	; (8017ab0 <level_tick+0x7e0>)
 80177c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80177c4:	4613      	mov	r3, r2
 80177c6:	00db      	lsls	r3, r3, #3
 80177c8:	4413      	add	r3, r2
 80177ca:	009b      	lsls	r3, r3, #2
 80177cc:	440b      	add	r3, r1
 80177ce:	335c      	adds	r3, #92	; 0x5c
 80177d0:	781b      	ldrb	r3, [r3, #0]
 80177d2:	f083 0301 	eor.w	r3, r3, #1
 80177d6:	b2db      	uxtb	r3, r3
 80177d8:	2b00      	cmp	r3, #0
 80177da:	f000 80e6 	beq.w	80179aa <level_tick+0x6da>
					gameState.bullets[i].alive = true;
 80177de:	49b4      	ldr	r1, [pc, #720]	; (8017ab0 <level_tick+0x7e0>)
 80177e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80177e2:	4613      	mov	r3, r2
 80177e4:	00db      	lsls	r3, r3, #3
 80177e6:	4413      	add	r3, r2
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	440b      	add	r3, r1
 80177ec:	335c      	adds	r3, #92	; 0x5c
 80177ee:	2201      	movs	r2, #1
 80177f0:	701a      	strb	r2, [r3, #0]
					gameState.bullets[i].time = 0.0f;
 80177f2:	49af      	ldr	r1, [pc, #700]	; (8017ab0 <level_tick+0x7e0>)
 80177f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80177f6:	4613      	mov	r3, r2
 80177f8:	00db      	lsls	r3, r3, #3
 80177fa:	4413      	add	r3, r2
 80177fc:	009b      	lsls	r3, r3, #2
 80177fe:	440b      	add	r3, r1
 8017800:	3360      	adds	r3, #96	; 0x60
 8017802:	f04f 0200 	mov.w	r2, #0
 8017806:	601a      	str	r2, [r3, #0]
					f32 bx = gameState.ship.transform.tx + cos(gameState.ship.transform.angle) * 10;
 8017808:	4ba9      	ldr	r3, [pc, #676]	; (8017ab0 <level_tick+0x7e0>)
 801780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801780c:	4618      	mov	r0, r3
 801780e:	f7e8 ffed 	bl	80007ec <__aeabi_f2d>
 8017812:	4604      	mov	r4, r0
 8017814:	460d      	mov	r5, r1
 8017816:	4ba6      	ldr	r3, [pc, #664]	; (8017ab0 <level_tick+0x7e0>)
 8017818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801781a:	4618      	mov	r0, r3
 801781c:	f7e8 ffe6 	bl	80007ec <__aeabi_f2d>
 8017820:	4602      	mov	r2, r0
 8017822:	460b      	mov	r3, r1
 8017824:	ec43 2b10 	vmov	d0, r2, r3
 8017828:	f001 ffaa 	bl	8019780 <cos>
 801782c:	ec51 0b10 	vmov	r0, r1, d0
 8017830:	f04f 0200 	mov.w	r2, #0
 8017834:	4b9f      	ldr	r3, [pc, #636]	; (8017ab4 <level_tick+0x7e4>)
 8017836:	f7e8 fd4b 	bl	80002d0 <__aeabi_dmul>
 801783a:	4602      	mov	r2, r0
 801783c:	460b      	mov	r3, r1
 801783e:	4620      	mov	r0, r4
 8017840:	4629      	mov	r1, r5
 8017842:	f7e8 fe75 	bl	8000530 <__adddf3>
 8017846:	4602      	mov	r2, r0
 8017848:	460b      	mov	r3, r1
 801784a:	4610      	mov	r0, r2
 801784c:	4619      	mov	r1, r3
 801784e:	f7e9 f8d5 	bl	80009fc <__aeabi_d2f>
 8017852:	4603      	mov	r3, r0
 8017854:	63fb      	str	r3, [r7, #60]	; 0x3c
					f32 by = gameState.ship.transform.ty + sin(gameState.ship.transform.angle) * 10;
 8017856:	4b96      	ldr	r3, [pc, #600]	; (8017ab0 <level_tick+0x7e0>)
 8017858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801785a:	4618      	mov	r0, r3
 801785c:	f7e8 ffc6 	bl	80007ec <__aeabi_f2d>
 8017860:	4604      	mov	r4, r0
 8017862:	460d      	mov	r5, r1
 8017864:	4b92      	ldr	r3, [pc, #584]	; (8017ab0 <level_tick+0x7e0>)
 8017866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017868:	4618      	mov	r0, r3
 801786a:	f7e8 ffbf 	bl	80007ec <__aeabi_f2d>
 801786e:	4602      	mov	r2, r0
 8017870:	460b      	mov	r3, r1
 8017872:	ec43 2b10 	vmov	d0, r2, r3
 8017876:	f001 ffd7 	bl	8019828 <sin>
 801787a:	ec51 0b10 	vmov	r0, r1, d0
 801787e:	f04f 0200 	mov.w	r2, #0
 8017882:	4b8c      	ldr	r3, [pc, #560]	; (8017ab4 <level_tick+0x7e4>)
 8017884:	f7e8 fd24 	bl	80002d0 <__aeabi_dmul>
 8017888:	4602      	mov	r2, r0
 801788a:	460b      	mov	r3, r1
 801788c:	4620      	mov	r0, r4
 801788e:	4629      	mov	r1, r5
 8017890:	f7e8 fe4e 	bl	8000530 <__adddf3>
 8017894:	4602      	mov	r2, r0
 8017896:	460b      	mov	r3, r1
 8017898:	4610      	mov	r0, r2
 801789a:	4619      	mov	r1, r3
 801789c:	f7e9 f8ae 	bl	80009fc <__aeabi_d2f>
 80178a0:	4603      	mov	r3, r0
 80178a2:	63bb      	str	r3, [r7, #56]	; 0x38
					gameState.bullets[i].transform = transform_make(bx, by, gameState.ship.transform.angle, 1, 1);
 80178a4:	4b82      	ldr	r3, [pc, #520]	; (8017ab0 <level_tick+0x7e0>)
 80178a6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80178aa:	4981      	ldr	r1, [pc, #516]	; (8017ab0 <level_tick+0x7e0>)
 80178ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80178ae:	4613      	mov	r3, r2
 80178b0:	00db      	lsls	r3, r3, #3
 80178b2:	4413      	add	r3, r2
 80178b4:	009b      	lsls	r3, r3, #2
 80178b6:	440b      	add	r3, r1
 80178b8:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80178bc:	463b      	mov	r3, r7
 80178be:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80178c2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80178c6:	eeb0 1a67 	vmov.f32	s2, s15
 80178ca:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 80178ce:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80178d2:	4618      	mov	r0, r3
 80178d4:	f000 fee6 	bl	80186a4 <transform_make>
 80178d8:	3404      	adds	r4, #4
 80178da:	463d      	mov	r5, r7
 80178dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80178e0:	682b      	ldr	r3, [r5, #0]
 80178e2:	6023      	str	r3, [r4, #0]
					gameState.bullets[i].velocityX = cos(gameState.ship.transform.angle) * BULLET_SPEED + gameState.ship.velocityX;
 80178e4:	4b72      	ldr	r3, [pc, #456]	; (8017ab0 <level_tick+0x7e0>)
 80178e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178e8:	4618      	mov	r0, r3
 80178ea:	f7e8 ff7f 	bl	80007ec <__aeabi_f2d>
 80178ee:	4602      	mov	r2, r0
 80178f0:	460b      	mov	r3, r1
 80178f2:	ec43 2b10 	vmov	d0, r2, r3
 80178f6:	f001 ff43 	bl	8019780 <cos>
 80178fa:	ec51 0b10 	vmov	r0, r1, d0
 80178fe:	f04f 0200 	mov.w	r2, #0
 8017902:	4b6d      	ldr	r3, [pc, #436]	; (8017ab8 <level_tick+0x7e8>)
 8017904:	f7e8 fce4 	bl	80002d0 <__aeabi_dmul>
 8017908:	4602      	mov	r2, r0
 801790a:	460b      	mov	r3, r1
 801790c:	4614      	mov	r4, r2
 801790e:	461d      	mov	r5, r3
 8017910:	4b67      	ldr	r3, [pc, #412]	; (8017ab0 <level_tick+0x7e0>)
 8017912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017914:	4618      	mov	r0, r3
 8017916:	f7e8 ff69 	bl	80007ec <__aeabi_f2d>
 801791a:	4602      	mov	r2, r0
 801791c:	460b      	mov	r3, r1
 801791e:	4620      	mov	r0, r4
 8017920:	4629      	mov	r1, r5
 8017922:	f7e8 fe05 	bl	8000530 <__adddf3>
 8017926:	4602      	mov	r2, r0
 8017928:	460b      	mov	r3, r1
 801792a:	4610      	mov	r0, r2
 801792c:	4619      	mov	r1, r3
 801792e:	f7e9 f865 	bl	80009fc <__aeabi_d2f>
 8017932:	4601      	mov	r1, r0
 8017934:	485e      	ldr	r0, [pc, #376]	; (8017ab0 <level_tick+0x7e0>)
 8017936:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017938:	4613      	mov	r3, r2
 801793a:	00db      	lsls	r3, r3, #3
 801793c:	4413      	add	r3, r2
 801793e:	009b      	lsls	r3, r3, #2
 8017940:	4403      	add	r3, r0
 8017942:	3378      	adds	r3, #120	; 0x78
 8017944:	6019      	str	r1, [r3, #0]
					gameState.bullets[i].velocityY = sin(gameState.ship.transform.angle) * BULLET_SPEED + gameState.ship.velocityY;
 8017946:	4b5a      	ldr	r3, [pc, #360]	; (8017ab0 <level_tick+0x7e0>)
 8017948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801794a:	4618      	mov	r0, r3
 801794c:	f7e8 ff4e 	bl	80007ec <__aeabi_f2d>
 8017950:	4602      	mov	r2, r0
 8017952:	460b      	mov	r3, r1
 8017954:	ec43 2b10 	vmov	d0, r2, r3
 8017958:	f001 ff66 	bl	8019828 <sin>
 801795c:	ec51 0b10 	vmov	r0, r1, d0
 8017960:	f04f 0200 	mov.w	r2, #0
 8017964:	4b54      	ldr	r3, [pc, #336]	; (8017ab8 <level_tick+0x7e8>)
 8017966:	f7e8 fcb3 	bl	80002d0 <__aeabi_dmul>
 801796a:	4602      	mov	r2, r0
 801796c:	460b      	mov	r3, r1
 801796e:	4614      	mov	r4, r2
 8017970:	461d      	mov	r5, r3
 8017972:	4b4f      	ldr	r3, [pc, #316]	; (8017ab0 <level_tick+0x7e0>)
 8017974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017976:	4618      	mov	r0, r3
 8017978:	f7e8 ff38 	bl	80007ec <__aeabi_f2d>
 801797c:	4602      	mov	r2, r0
 801797e:	460b      	mov	r3, r1
 8017980:	4620      	mov	r0, r4
 8017982:	4629      	mov	r1, r5
 8017984:	f7e8 fdd4 	bl	8000530 <__adddf3>
 8017988:	4602      	mov	r2, r0
 801798a:	460b      	mov	r3, r1
 801798c:	4610      	mov	r0, r2
 801798e:	4619      	mov	r1, r3
 8017990:	f7e9 f834 	bl	80009fc <__aeabi_d2f>
 8017994:	4601      	mov	r1, r0
 8017996:	4846      	ldr	r0, [pc, #280]	; (8017ab0 <level_tick+0x7e0>)
 8017998:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801799a:	4613      	mov	r3, r2
 801799c:	00db      	lsls	r3, r3, #3
 801799e:	4413      	add	r3, r2
 80179a0:	009b      	lsls	r3, r3, #2
 80179a2:	4403      	add	r3, r0
 80179a4:	337c      	adds	r3, #124	; 0x7c
 80179a6:	6019      	str	r1, [r3, #0]
					break;
 80179a8:	e006      	b.n	80179b8 <level_tick+0x6e8>
			for(i32 i = 0; i < BULLET_COUNT; i++) {
 80179aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80179ac:	3301      	adds	r3, #1
 80179ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80179b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80179b2:	2b07      	cmp	r3, #7
 80179b4:	f77f af04 	ble.w	80177c0 <level_tick+0x4f0>
				}
			}
		}

		//Asteroids
		for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 80179b8:	2300      	movs	r3, #0
 80179ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80179bc:	e039      	b.n	8017a32 <level_tick+0x762>
			if(gameState.asteroids[i].alive) {
 80179be:	4a3c      	ldr	r2, [pc, #240]	; (8017ab0 <level_tick+0x7e0>)
 80179c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80179c2:	212c      	movs	r1, #44	; 0x2c
 80179c4:	fb01 f303 	mul.w	r3, r1, r3
 80179c8:	4413      	add	r3, r2
 80179ca:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80179ce:	781b      	ldrb	r3, [r3, #0]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d02b      	beq.n	8017a2c <level_tick+0x75c>
				move_transform(&gameState.asteroids[i].transform, gameState.asteroids[i].velocityX * deltaTime, gameState.asteroids[i].velocityY * deltaTime);
 80179d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80179d6:	222c      	movs	r2, #44	; 0x2c
 80179d8:	fb02 f303 	mul.w	r3, r2, r3
 80179dc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80179e0:	4a33      	ldr	r2, [pc, #204]	; (8017ab0 <level_tick+0x7e0>)
 80179e2:	4413      	add	r3, r2
 80179e4:	1d1a      	adds	r2, r3, #4
 80179e6:	4932      	ldr	r1, [pc, #200]	; (8017ab0 <level_tick+0x7e0>)
 80179e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80179ea:	202c      	movs	r0, #44	; 0x2c
 80179ec:	fb00 f303 	mul.w	r3, r0, r3
 80179f0:	440b      	add	r3, r1
 80179f2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80179f6:	ed93 7a00 	vldr	s14, [r3]
 80179fa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80179fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8017a02:	492b      	ldr	r1, [pc, #172]	; (8017ab0 <level_tick+0x7e0>)
 8017a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017a06:	202c      	movs	r0, #44	; 0x2c
 8017a08:	fb00 f303 	mul.w	r3, r0, r3
 8017a0c:	440b      	add	r3, r1
 8017a0e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8017a12:	ed93 7a00 	vldr	s14, [r3]
 8017a16:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8017a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017a1e:	eef0 0a67 	vmov.f32	s1, s15
 8017a22:	eeb0 0a66 	vmov.f32	s0, s13
 8017a26:	4610      	mov	r0, r2
 8017a28:	f000 fe62 	bl	80186f0 <move_transform>
		for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 8017a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017a2e:	3301      	adds	r3, #1
 8017a30:	65bb      	str	r3, [r7, #88]	; 0x58
 8017a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017a34:	2bff      	cmp	r3, #255	; 0xff
 8017a36:	ddc2      	ble.n	80179be <level_tick+0x6ee>
			}
		}


		bool nextLevel = true;
 8017a38:	2301      	movs	r3, #1
 8017a3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 8017a3e:	2300      	movs	r3, #0
 8017a40:	653b      	str	r3, [r7, #80]	; 0x50
 8017a42:	e010      	b.n	8017a66 <level_tick+0x796>
			if(gameState.asteroids[i].alive) {
 8017a44:	4a1a      	ldr	r2, [pc, #104]	; (8017ab0 <level_tick+0x7e0>)
 8017a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a48:	212c      	movs	r1, #44	; 0x2c
 8017a4a:	fb01 f303 	mul.w	r3, r1, r3
 8017a4e:	4413      	add	r3, r2
 8017a50:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017a54:	781b      	ldrb	r3, [r3, #0]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d002      	beq.n	8017a60 <level_tick+0x790>
				nextLevel = false;
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 8017a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a62:	3301      	adds	r3, #1
 8017a64:	653b      	str	r3, [r7, #80]	; 0x50
 8017a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a68:	2bff      	cmp	r3, #255	; 0xff
 8017a6a:	ddeb      	ble.n	8017a44 <level_tick+0x774>
			}
		}

		if(nextLevel) {
 8017a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d001      	beq.n	8017a78 <level_tick+0x7a8>
			level_setup();
 8017a74:	f7ff fb84 	bl	8017180 <level_setup>
		}

		shoot = false;
 8017a78:	2300      	movs	r3, #0
 8017a7a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	for(i32 i = 0; i < numberOfUpdates; i++) {
 8017a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017a80:	3301      	adds	r3, #1
 8017a82:	673b      	str	r3, [r7, #112]	; 0x70
 8017a84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a88:	429a      	cmp	r2, r3
 8017a8a:	f6ff ac4a 	blt.w	8017322 <level_tick+0x52>
	}

	//NOTE: DRAW
	if(gameState.ship.thrust) {
 8017a8e:	4b08      	ldr	r3, [pc, #32]	; (8017ab0 <level_tick+0x7e0>)
 8017a90:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d013      	beq.n	8017ac0 <level_tick+0x7f0>
		draw_shape(gameState.ship.transform, shapes[SHAPE_SHIP_THRUST], 1);
 8017a98:	4b05      	ldr	r3, [pc, #20]	; (8017ab0 <level_tick+0x7e0>)
 8017a9a:	2201      	movs	r2, #1
 8017a9c:	9202      	str	r2, [sp, #8]
 8017a9e:	4a07      	ldr	r2, [pc, #28]	; (8017abc <level_tick+0x7ec>)
 8017aa0:	9201      	str	r2, [sp, #4]
 8017aa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8017aa4:	9200      	str	r2, [sp, #0]
 8017aa6:	3338      	adds	r3, #56	; 0x38
 8017aa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017aaa:	f7ff f81b 	bl	8016ae4 <draw_shape>
 8017aae:	e012      	b.n	8017ad6 <level_tick+0x806>
 8017ab0:	20001050 	.word	0x20001050
 8017ab4:	40240000 	.word	0x40240000
 8017ab8:	40690000 	.word	0x40690000
 8017abc:	200001fc 	.word	0x200001fc
	} else {
		draw_shape(gameState.ship.transform, shapes[SHAPE_SHIP], 1);
 8017ac0:	4b34      	ldr	r3, [pc, #208]	; (8017b94 <level_tick+0x8c4>)
 8017ac2:	2201      	movs	r2, #1
 8017ac4:	9202      	str	r2, [sp, #8]
 8017ac6:	4a34      	ldr	r2, [pc, #208]	; (8017b98 <level_tick+0x8c8>)
 8017ac8:	9201      	str	r2, [sp, #4]
 8017aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8017acc:	9200      	str	r2, [sp, #0]
 8017ace:	3338      	adds	r3, #56	; 0x38
 8017ad0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ad2:	f7ff f807 	bl	8016ae4 <draw_shape>
	}

	for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017ada:	e02d      	b.n	8017b38 <level_tick+0x868>
		if(gameState.asteroids[i].alive) {
 8017adc:	4a2d      	ldr	r2, [pc, #180]	; (8017b94 <level_tick+0x8c4>)
 8017ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ae0:	212c      	movs	r1, #44	; 0x2c
 8017ae2:	fb01 f303 	mul.w	r3, r1, r3
 8017ae6:	4413      	add	r3, r2
 8017ae8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017aec:	781b      	ldrb	r3, [r3, #0]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d01f      	beq.n	8017b32 <level_tick+0x862>
			draw_shape(gameState.asteroids[i].transform, shapes[gameState.asteroids[i].shape], 1);
 8017af2:	4a28      	ldr	r2, [pc, #160]	; (8017b94 <level_tick+0x8c4>)
 8017af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017af6:	212c      	movs	r1, #44	; 0x2c
 8017af8:	fb01 f303 	mul.w	r3, r1, r3
 8017afc:	4413      	add	r3, r2
 8017afe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8017b02:	781b      	ldrb	r3, [r3, #0]
 8017b04:	461a      	mov	r2, r3
 8017b06:	23d0      	movs	r3, #208	; 0xd0
 8017b08:	fb02 f303 	mul.w	r3, r2, r3
 8017b0c:	4a22      	ldr	r2, [pc, #136]	; (8017b98 <level_tick+0x8c8>)
 8017b0e:	441a      	add	r2, r3
 8017b10:	4920      	ldr	r1, [pc, #128]	; (8017b94 <level_tick+0x8c4>)
 8017b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b14:	202c      	movs	r0, #44	; 0x2c
 8017b16:	fb00 f303 	mul.w	r3, r0, r3
 8017b1a:	440b      	add	r3, r1
 8017b1c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8017b20:	2101      	movs	r1, #1
 8017b22:	9102      	str	r1, [sp, #8]
 8017b24:	9201      	str	r2, [sp, #4]
 8017b26:	695a      	ldr	r2, [r3, #20]
 8017b28:	9200      	str	r2, [sp, #0]
 8017b2a:	3304      	adds	r3, #4
 8017b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017b2e:	f7fe ffd9 	bl	8016ae4 <draw_shape>
	for(i32 i = 0; i < ASTEROID_COUNT; i++) {
 8017b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b34:	3301      	adds	r3, #1
 8017b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b3a:	2bff      	cmp	r3, #255	; 0xff
 8017b3c:	ddce      	ble.n	8017adc <level_tick+0x80c>
		}
	}

	for(i32 i = 0; i < BULLET_COUNT; i++) {
 8017b3e:	2300      	movs	r3, #0
 8017b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8017b42:	e01f      	b.n	8017b84 <level_tick+0x8b4>
		if(gameState.bullets[i].alive) {
 8017b44:	4913      	ldr	r1, [pc, #76]	; (8017b94 <level_tick+0x8c4>)
 8017b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b48:	4613      	mov	r3, r2
 8017b4a:	00db      	lsls	r3, r3, #3
 8017b4c:	4413      	add	r3, r2
 8017b4e:	009b      	lsls	r3, r3, #2
 8017b50:	440b      	add	r3, r1
 8017b52:	335c      	adds	r3, #92	; 0x5c
 8017b54:	781b      	ldrb	r3, [r3, #0]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d011      	beq.n	8017b7e <level_tick+0x8ae>
			draw_shape(gameState.bullets[i].transform, shapes[SHAPE_BULLET], 1);
 8017b5a:	490e      	ldr	r1, [pc, #56]	; (8017b94 <level_tick+0x8c4>)
 8017b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b5e:	4613      	mov	r3, r2
 8017b60:	00db      	lsls	r3, r3, #3
 8017b62:	4413      	add	r3, r2
 8017b64:	009b      	lsls	r3, r3, #2
 8017b66:	440b      	add	r3, r1
 8017b68:	3360      	adds	r3, #96	; 0x60
 8017b6a:	2201      	movs	r2, #1
 8017b6c:	9202      	str	r2, [sp, #8]
 8017b6e:	4a0b      	ldr	r2, [pc, #44]	; (8017b9c <level_tick+0x8cc>)
 8017b70:	9201      	str	r2, [sp, #4]
 8017b72:	695a      	ldr	r2, [r3, #20]
 8017b74:	9200      	str	r2, [sp, #0]
 8017b76:	3304      	adds	r3, #4
 8017b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017b7a:	f7fe ffb3 	bl	8016ae4 <draw_shape>
	for(i32 i = 0; i < BULLET_COUNT; i++) {
 8017b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b80:	3301      	adds	r3, #1
 8017b82:	64bb      	str	r3, [r7, #72]	; 0x48
 8017b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b86:	2b07      	cmp	r3, #7
 8017b88:	dddc      	ble.n	8017b44 <level_tick+0x874>
		}
	}
}
 8017b8a:	bf00      	nop
 8017b8c:	bf00      	nop
 8017b8e:	377c      	adds	r7, #124	; 0x7c
 8017b90:	46bd      	mov	sp, r7
 8017b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b94:	20001050 	.word	0x20001050
 8017b98:	2000012c 	.word	0x2000012c
 8017b9c:	200006dc 	.word	0x200006dc

08017ba0 <swap_scene>:

void swap_scene(GameScene scene) {
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b082      	sub	sp, #8
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	71fb      	strb	r3, [r7, #7]
	if(scene == gameState.scene) {
 8017baa:	4b0e      	ldr	r3, [pc, #56]	; (8017be4 <swap_scene+0x44>)
 8017bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017bb0:	79fa      	ldrb	r2, [r7, #7]
 8017bb2:	429a      	cmp	r2, r3
 8017bb4:	d011      	beq.n	8017bda <swap_scene+0x3a>
		return;
	}

	gameState.scene = scene;
 8017bb6:	4a0b      	ldr	r2, [pc, #44]	; (8017be4 <swap_scene+0x44>)
 8017bb8:	79fb      	ldrb	r3, [r7, #7]
 8017bba:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	switch(gameState.scene) {
 8017bbe:	4b09      	ldr	r3, [pc, #36]	; (8017be4 <swap_scene+0x44>)
 8017bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d002      	beq.n	8017bce <swap_scene+0x2e>
 8017bc8:	2b01      	cmp	r3, #1
 8017bca:	d003      	beq.n	8017bd4 <swap_scene+0x34>
 8017bcc:	e006      	b.n	8017bdc <swap_scene+0x3c>
		case GAME_SCENE_MENU: menu_init(); break;
 8017bce:	f7ff f989 	bl	8016ee4 <menu_init>
 8017bd2:	e003      	b.n	8017bdc <swap_scene+0x3c>
		case GAME_SCENE_LEVEL: level_init(); break;
 8017bd4:	f7ff fb68 	bl	80172a8 <level_init>
 8017bd8:	e000      	b.n	8017bdc <swap_scene+0x3c>
		return;
 8017bda:	bf00      	nop
	}
}
 8017bdc:	3708      	adds	r7, #8
 8017bde:	46bd      	mov	sp, r7
 8017be0:	bd80      	pop	{r7, pc}
 8017be2:	bf00      	nop
 8017be4:	20001050 	.word	0x20001050

08017be8 <game_init>:

void game_init() {
 8017be8:	b580      	push	{r7, lr}
 8017bea:	af00      	add	r7, sp, #0
	set_led(0, true);
 8017bec:	2101      	movs	r1, #1
 8017bee:	2000      	movs	r0, #0
 8017bf0:	f000 f946 	bl	8017e80 <set_led>

	draw_init();
 8017bf4:	f7ff f8fc 	bl	8016df0 <draw_init>

	ui_init();
 8017bf8:	f000 fc16 	bl	8018428 <ui_init>

	set_palette_color( 0, 0x00000000); //Background
 8017bfc:	2100      	movs	r1, #0
 8017bfe:	2000      	movs	r0, #0
 8017c00:	f7fe fd42 	bl	8016688 <set_palette_color>
	set_palette_color( 1, 0x0000FF00); //Foreground
 8017c04:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8017c08:	2001      	movs	r0, #1
 8017c0a:	f7fe fd3d 	bl	8016688 <set_palette_color>
	set_palette_color(14, 0x00FF0000); //FPS COUNTER
 8017c0e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8017c12:	200e      	movs	r0, #14
 8017c14:	f7fe fd38 	bl	8016688 <set_palette_color>
	set_palette_color(15, 0x00FFFFFF); //UI
 8017c18:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8017c1c:	200f      	movs	r0, #15
 8017c1e:	f7fe fd33 	bl	8016688 <set_palette_color>

	sprintf(gameState.fpsCountString, "FPS   0");
 8017c22:	4903      	ldr	r1, [pc, #12]	; (8017c30 <game_init+0x48>)
 8017c24:	4803      	ldr	r0, [pc, #12]	; (8017c34 <game_init+0x4c>)
 8017c26:	f003 fefd 	bl	801ba24 <siprintf>
}
 8017c2a:	bf00      	nop
 8017c2c:	bd80      	pop	{r7, pc}
 8017c2e:	bf00      	nop
 8017c30:	0801d214 	.word	0x0801d214
 8017c34:	20001060 	.word	0x20001060

08017c38 <game_tick>:

void game_tick() {
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b088      	sub	sp, #32
 8017c3c:	af00      	add	r7, sp, #0
	set_led(2, get_button(BUTTON_UP).down);
 8017c3e:	2000      	movs	r0, #0
 8017c40:	f000 fafa 	bl	8018238 <get_button>
 8017c44:	4603      	mov	r3, r0
 8017c46:	607b      	str	r3, [r7, #4]
 8017c48:	793b      	ldrb	r3, [r7, #4]
 8017c4a:	4619      	mov	r1, r3
 8017c4c:	2002      	movs	r0, #2
 8017c4e:	f000 f917 	bl	8017e80 <set_led>
	set_led(1, get_button(BUTTON_DOWN).down);
 8017c52:	2001      	movs	r0, #1
 8017c54:	f000 faf0 	bl	8018238 <get_button>
 8017c58:	4603      	mov	r3, r0
 8017c5a:	60bb      	str	r3, [r7, #8]
 8017c5c:	7a3b      	ldrb	r3, [r7, #8]
 8017c5e:	4619      	mov	r1, r3
 8017c60:	2001      	movs	r0, #1
 8017c62:	f000 f90d 	bl	8017e80 <set_led>
	set_led(3, get_button(BUTTON_LEFT).down);
 8017c66:	2002      	movs	r0, #2
 8017c68:	f000 fae6 	bl	8018238 <get_button>
 8017c6c:	4603      	mov	r3, r0
 8017c6e:	60fb      	str	r3, [r7, #12]
 8017c70:	7b3b      	ldrb	r3, [r7, #12]
 8017c72:	4619      	mov	r1, r3
 8017c74:	2003      	movs	r0, #3
 8017c76:	f000 f903 	bl	8017e80 <set_led>
	set_led(0, get_button(BUTTON_RIGHT).down);
 8017c7a:	2003      	movs	r0, #3
 8017c7c:	f000 fadc 	bl	8018238 <get_button>
 8017c80:	4603      	mov	r3, r0
 8017c82:	613b      	str	r3, [r7, #16]
 8017c84:	7c3b      	ldrb	r3, [r7, #16]
 8017c86:	4619      	mov	r1, r3
 8017c88:	2000      	movs	r0, #0
 8017c8a:	f000 f8f9 	bl	8017e80 <set_led>
	set_led(6, get_button(BUTTON_OK).down);
 8017c8e:	2004      	movs	r0, #4
 8017c90:	f000 fad2 	bl	8018238 <get_button>
 8017c94:	4603      	mov	r3, r0
 8017c96:	617b      	str	r3, [r7, #20]
 8017c98:	7d3b      	ldrb	r3, [r7, #20]
 8017c9a:	4619      	mov	r1, r3
 8017c9c:	2006      	movs	r0, #6
 8017c9e:	f000 f8ef 	bl	8017e80 <set_led>
	set_led(5, get_button(BUTTON_ESCAPE).down);
 8017ca2:	2005      	movs	r0, #5
 8017ca4:	f000 fac8 	bl	8018238 <get_button>
 8017ca8:	4603      	mov	r3, r0
 8017caa:	61bb      	str	r3, [r7, #24]
 8017cac:	7e3b      	ldrb	r3, [r7, #24]
 8017cae:	4619      	mov	r1, r3
 8017cb0:	2005      	movs	r0, #5
 8017cb2:	f000 f8e5 	bl	8017e80 <set_led>
	set_led(4, get_button(BUTTON_THUMB).down);
 8017cb6:	2006      	movs	r0, #6
 8017cb8:	f000 fabe 	bl	8018238 <get_button>
 8017cbc:	4603      	mov	r3, r0
 8017cbe:	61fb      	str	r3, [r7, #28]
 8017cc0:	7f3b      	ldrb	r3, [r7, #28]
 8017cc2:	4619      	mov	r1, r3
 8017cc4:	2004      	movs	r0, #4
 8017cc6:	f000 f8db 	bl	8017e80 <set_led>

	pull_and_update_inputs();
 8017cca:	f000 f8f7 	bl	8017ebc <pull_and_update_inputs>

	clear_screen(0);
 8017cce:	2000      	movs	r0, #0
 8017cd0:	f7ff f87c 	bl	8016dcc <clear_screen>

	ui_start();
 8017cd4:	f000 fbb4 	bl	8018440 <ui_start>

	switch(gameState.scene) {
 8017cd8:	4b24      	ldr	r3, [pc, #144]	; (8017d6c <game_tick+0x134>)
 8017cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d002      	beq.n	8017ce8 <game_tick+0xb0>
 8017ce2:	2b01      	cmp	r3, #1
 8017ce4:	d003      	beq.n	8017cee <game_tick+0xb6>
 8017ce6:	e005      	b.n	8017cf4 <game_tick+0xbc>
		case GAME_SCENE_MENU: menu_tick(); break;
 8017ce8:	f7ff f904 	bl	8016ef4 <menu_tick>
 8017cec:	e002      	b.n	8017cf4 <game_tick+0xbc>
		case GAME_SCENE_LEVEL: level_tick(); break;
 8017cee:	f7ff faef 	bl	80172d0 <level_tick>
 8017cf2:	bf00      	nop
	}

	ui_end();
 8017cf4:	f000 fbac 	bl	8018450 <ui_end>

	{ // FPS Counter
		gameState.fpsCounter += gameState.deltaTime;
 8017cf8:	4b1c      	ldr	r3, [pc, #112]	; (8017d6c <game_tick+0x134>)
 8017cfa:	ed93 7a08 	vldr	s14, [r3, #32]
 8017cfe:	4b1b      	ldr	r3, [pc, #108]	; (8017d6c <game_tick+0x134>)
 8017d00:	edd3 7a03 	vldr	s15, [r3, #12]
 8017d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017d08:	4b18      	ldr	r3, [pc, #96]	; (8017d6c <game_tick+0x134>)
 8017d0a:	edc3 7a08 	vstr	s15, [r3, #32]
		gameState.fpsCount++;
 8017d0e:	4b17      	ldr	r3, [pc, #92]	; (8017d6c <game_tick+0x134>)
 8017d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d12:	3301      	adds	r3, #1
 8017d14:	4a15      	ldr	r2, [pc, #84]	; (8017d6c <game_tick+0x134>)
 8017d16:	6253      	str	r3, [r2, #36]	; 0x24

		if(gameState.fpsCounter >= 1.0f) {
 8017d18:	4b14      	ldr	r3, [pc, #80]	; (8017d6c <game_tick+0x134>)
 8017d1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8017d1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d2a:	db13      	blt.n	8017d54 <game_tick+0x11c>
			sprintf(gameState.fpsCountString, "FPS %3ld", gameState.fpsCount);
 8017d2c:	4b0f      	ldr	r3, [pc, #60]	; (8017d6c <game_tick+0x134>)
 8017d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d30:	461a      	mov	r2, r3
 8017d32:	490f      	ldr	r1, [pc, #60]	; (8017d70 <game_tick+0x138>)
 8017d34:	480f      	ldr	r0, [pc, #60]	; (8017d74 <game_tick+0x13c>)
 8017d36:	f003 fe75 	bl	801ba24 <siprintf>
			gameState.fpsCounter -= 1.0f;
 8017d3a:	4b0c      	ldr	r3, [pc, #48]	; (8017d6c <game_tick+0x134>)
 8017d3c:	edd3 7a08 	vldr	s15, [r3, #32]
 8017d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017d44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017d48:	4b08      	ldr	r3, [pc, #32]	; (8017d6c <game_tick+0x134>)
 8017d4a:	edc3 7a08 	vstr	s15, [r3, #32]
			gameState.fpsCount = 0;
 8017d4e:	4b07      	ldr	r3, [pc, #28]	; (8017d6c <game_tick+0x134>)
 8017d50:	2200      	movs	r2, #0
 8017d52:	625a      	str	r2, [r3, #36]	; 0x24
		}

		draw_string(gameState.fpsCountString, 10, 10, 14);
 8017d54:	230e      	movs	r3, #14
 8017d56:	220a      	movs	r2, #10
 8017d58:	210a      	movs	r1, #10
 8017d5a:	4806      	ldr	r0, [pc, #24]	; (8017d74 <game_tick+0x13c>)
 8017d5c:	f7fe fe9e 	bl	8016a9c <draw_string>
	}

	draw_push();
 8017d60:	f7ff f862 	bl	8016e28 <draw_push>

	//char thumbString[64];
	//Thumb thumb = get_thumb();
	//sprintf(thumbString, "Thumb X:%5d, Y:%5d\r\n", (i32)(thumb.x * 100), (i32)(thumb.y * 100));
	//usb_log(thumbString, strlen(thumbString));
}
 8017d64:	bf00      	nop
 8017d66:	3720      	adds	r7, #32
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	bd80      	pop	{r7, pc}
 8017d6c:	20001050 	.word	0x20001050
 8017d70:	0801d21c 	.word	0x0801d21c
 8017d74:	20001060 	.word	0x20001060

08017d78 <LL_GPIO_IsInputPinSet>:
{
 8017d78:	b480      	push	{r7}
 8017d7a:	b083      	sub	sp, #12
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
 8017d80:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	691a      	ldr	r2, [r3, #16]
 8017d86:	683b      	ldr	r3, [r7, #0]
 8017d88:	4013      	ands	r3, r2
 8017d8a:	683a      	ldr	r2, [r7, #0]
 8017d8c:	429a      	cmp	r2, r3
 8017d8e:	d101      	bne.n	8017d94 <LL_GPIO_IsInputPinSet+0x1c>
 8017d90:	2301      	movs	r3, #1
 8017d92:	e000      	b.n	8017d96 <LL_GPIO_IsInputPinSet+0x1e>
 8017d94:	2300      	movs	r3, #0
}
 8017d96:	4618      	mov	r0, r3
 8017d98:	370c      	adds	r7, #12
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da0:	4770      	bx	lr

08017da2 <LL_GPIO_SetOutputPin>:
{
 8017da2:	b480      	push	{r7}
 8017da4:	b083      	sub	sp, #12
 8017da6:	af00      	add	r7, sp, #0
 8017da8:	6078      	str	r0, [r7, #4]
 8017daa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	683a      	ldr	r2, [r7, #0]
 8017db0:	619a      	str	r2, [r3, #24]
}
 8017db2:	bf00      	nop
 8017db4:	370c      	adds	r7, #12
 8017db6:	46bd      	mov	sp, r7
 8017db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbc:	4770      	bx	lr

08017dbe <LL_GPIO_ResetOutputPin>:
{
 8017dbe:	b480      	push	{r7}
 8017dc0:	b083      	sub	sp, #12
 8017dc2:	af00      	add	r7, sp, #0
 8017dc4:	6078      	str	r0, [r7, #4]
 8017dc6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	683a      	ldr	r2, [r7, #0]
 8017dcc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017dce:	bf00      	nop
 8017dd0:	370c      	adds	r7, #12
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dd8:	4770      	bx	lr
	...

08017ddc <convert_index_to_port>:

void usb_log(char *string, u32 size) {
	CDC_Transmit_FS(string, size);
}

GPIO_TypeDef *convert_index_to_port(int index) {
 8017ddc:	b480      	push	{r7}
 8017dde:	b083      	sub	sp, #12
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
	if (index >= 0 && index < 4) {
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	db04      	blt.n	8017df4 <convert_index_to_port+0x18>
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	2b03      	cmp	r3, #3
 8017dee:	dc01      	bgt.n	8017df4 <convert_index_to_port+0x18>
		return GPIOF;
 8017df0:	4b08      	ldr	r3, [pc, #32]	; (8017e14 <convert_index_to_port+0x38>)
 8017df2:	e008      	b.n	8017e06 <convert_index_to_port+0x2a>
	} else if (index >= 4 && index < 8) {
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	2b03      	cmp	r3, #3
 8017df8:	dd04      	ble.n	8017e04 <convert_index_to_port+0x28>
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	2b07      	cmp	r3, #7
 8017dfe:	dc01      	bgt.n	8017e04 <convert_index_to_port+0x28>
		return GPIOC;
 8017e00:	4b05      	ldr	r3, [pc, #20]	; (8017e18 <convert_index_to_port+0x3c>)
 8017e02:	e000      	b.n	8017e06 <convert_index_to_port+0x2a>
	} else {
		return 0;
 8017e04:	2300      	movs	r3, #0
	}
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	370c      	adds	r7, #12
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e10:	4770      	bx	lr
 8017e12:	bf00      	nop
 8017e14:	48001400 	.word	0x48001400
 8017e18:	48000800 	.word	0x48000800

08017e1c <convert_index_to_pin>:

u32 convert_index_to_pin(int index) {
 8017e1c:	b480      	push	{r7}
 8017e1e:	b083      	sub	sp, #12
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
	switch(index) {
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	2b07      	cmp	r3, #7
 8017e28:	d822      	bhi.n	8017e70 <convert_index_to_pin+0x54>
 8017e2a:	a201      	add	r2, pc, #4	; (adr r2, 8017e30 <convert_index_to_pin+0x14>)
 8017e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e30:	08017e51 	.word	0x08017e51
 8017e34:	08017e55 	.word	0x08017e55
 8017e38:	08017e59 	.word	0x08017e59
 8017e3c:	08017e5d 	.word	0x08017e5d
 8017e40:	08017e61 	.word	0x08017e61
 8017e44:	08017e65 	.word	0x08017e65
 8017e48:	08017e69 	.word	0x08017e69
 8017e4c:	08017e6d 	.word	0x08017e6d
		case 0: return LL_GPIO_PIN_2;
 8017e50:	2304      	movs	r3, #4
 8017e52:	e00e      	b.n	8017e72 <convert_index_to_pin+0x56>
		case 1: return LL_GPIO_PIN_3;
 8017e54:	2308      	movs	r3, #8
 8017e56:	e00c      	b.n	8017e72 <convert_index_to_pin+0x56>
		case 2: return LL_GPIO_PIN_4;
 8017e58:	2310      	movs	r3, #16
 8017e5a:	e00a      	b.n	8017e72 <convert_index_to_pin+0x56>
		case 3: return LL_GPIO_PIN_5;
 8017e5c:	2320      	movs	r3, #32
 8017e5e:	e008      	b.n	8017e72 <convert_index_to_pin+0x56>
		case 4: return LL_GPIO_PIN_0;
 8017e60:	2301      	movs	r3, #1
 8017e62:	e006      	b.n	8017e72 <convert_index_to_pin+0x56>
		case 5: return LL_GPIO_PIN_1;
 8017e64:	2302      	movs	r3, #2
 8017e66:	e004      	b.n	8017e72 <convert_index_to_pin+0x56>
		case 6: return LL_GPIO_PIN_2;
 8017e68:	2304      	movs	r3, #4
 8017e6a:	e002      	b.n	8017e72 <convert_index_to_pin+0x56>
		case 7: return LL_GPIO_PIN_3;
 8017e6c:	2308      	movs	r3, #8
 8017e6e:	e000      	b.n	8017e72 <convert_index_to_pin+0x56>
		default: return 0;
 8017e70:	2300      	movs	r3, #0
	}
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	370c      	adds	r7, #12
 8017e76:	46bd      	mov	sp, r7
 8017e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7c:	4770      	bx	lr
 8017e7e:	bf00      	nop

08017e80 <set_led>:
	GPIO_TypeDef *port = convert_index_to_port(index);
	u32 pin = convert_index_to_pin(index);
	return LL_GPIO_IsOutputPinSet(port, pin) == 1;
}

void set_led(int index, bool value) {
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b084      	sub	sp, #16
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
 8017e88:	460b      	mov	r3, r1
 8017e8a:	70fb      	strb	r3, [r7, #3]
	GPIO_TypeDef *port = convert_index_to_port(index);
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f7ff ffa5 	bl	8017ddc <convert_index_to_port>
 8017e92:	60f8      	str	r0, [r7, #12]
	u32 pin = convert_index_to_pin(index);
 8017e94:	6878      	ldr	r0, [r7, #4]
 8017e96:	f7ff ffc1 	bl	8017e1c <convert_index_to_pin>
 8017e9a:	60b8      	str	r0, [r7, #8]
	if(value) {
 8017e9c:	78fb      	ldrb	r3, [r7, #3]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d004      	beq.n	8017eac <set_led+0x2c>
		LL_GPIO_SetOutputPin(port, pin);
 8017ea2:	68b9      	ldr	r1, [r7, #8]
 8017ea4:	68f8      	ldr	r0, [r7, #12]
 8017ea6:	f7ff ff7c 	bl	8017da2 <LL_GPIO_SetOutputPin>
	} else {
		LL_GPIO_ResetOutputPin(port, pin);
	}
}
 8017eaa:	e003      	b.n	8017eb4 <set_led+0x34>
		LL_GPIO_ResetOutputPin(port, pin);
 8017eac:	68b9      	ldr	r1, [r7, #8]
 8017eae:	68f8      	ldr	r0, [r7, #12]
 8017eb0:	f7ff ff85 	bl	8017dbe <LL_GPIO_ResetOutputPin>
}
 8017eb4:	bf00      	nop
 8017eb6:	3710      	adds	r7, #16
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	bd80      	pop	{r7, pc}

08017ebc <pull_and_update_inputs>:
//Thumb thumb = {};
//Touch touch = {};

IO io = {};

void pull_and_update_inputs() {
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b086      	sub	sp, #24
 8017ec0:	af00      	add	r7, sp, #0
	for(i32 index = 0; index < BUTTON_COUNT; index++) {
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	617b      	str	r3, [r7, #20]
 8017ec6:	e00c      	b.n	8017ee2 <pull_and_update_inputs+0x26>
		io.buttons[index].downPrev = io.buttons[index].down;
 8017ec8:	4ab3      	ldr	r2, [pc, #716]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017eca:	697b      	ldr	r3, [r7, #20]
 8017ecc:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8017ed0:	4ab1      	ldr	r2, [pc, #708]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017ed2:	697b      	ldr	r3, [r7, #20]
 8017ed4:	009b      	lsls	r3, r3, #2
 8017ed6:	4413      	add	r3, r2
 8017ed8:	460a      	mov	r2, r1
 8017eda:	705a      	strb	r2, [r3, #1]
	for(i32 index = 0; index < BUTTON_COUNT; index++) {
 8017edc:	697b      	ldr	r3, [r7, #20]
 8017ede:	3301      	adds	r3, #1
 8017ee0:	617b      	str	r3, [r7, #20]
 8017ee2:	697b      	ldr	r3, [r7, #20]
 8017ee4:	2b06      	cmp	r3, #6
 8017ee6:	ddef      	ble.n	8017ec8 <pull_and_update_inputs+0xc>
	}

	io.buttons[BUTTON_UP    ].down = LL_GPIO_IsInputPinSet(GPIOG, LL_GPIO_PIN_0 ) == 0;
 8017ee8:	2101      	movs	r1, #1
 8017eea:	48ac      	ldr	r0, [pc, #688]	; (801819c <pull_and_update_inputs+0x2e0>)
 8017eec:	f7ff ff44 	bl	8017d78 <LL_GPIO_IsInputPinSet>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	bf0c      	ite	eq
 8017ef6:	2301      	moveq	r3, #1
 8017ef8:	2300      	movne	r3, #0
 8017efa:	b2da      	uxtb	r2, r3
 8017efc:	4ba6      	ldr	r3, [pc, #664]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017efe:	701a      	strb	r2, [r3, #0]
	io.buttons[BUTTON_DOWN  ].down = LL_GPIO_IsInputPinSet(GPIOG, LL_GPIO_PIN_1 ) == 0;
 8017f00:	2102      	movs	r1, #2
 8017f02:	48a6      	ldr	r0, [pc, #664]	; (801819c <pull_and_update_inputs+0x2e0>)
 8017f04:	f7ff ff38 	bl	8017d78 <LL_GPIO_IsInputPinSet>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	bf0c      	ite	eq
 8017f0e:	2301      	moveq	r3, #1
 8017f10:	2300      	movne	r3, #0
 8017f12:	b2da      	uxtb	r2, r3
 8017f14:	4ba0      	ldr	r3, [pc, #640]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017f16:	711a      	strb	r2, [r3, #4]
	io.buttons[BUTTON_LEFT  ].down = LL_GPIO_IsInputPinSet(GPIOG, LL_GPIO_PIN_6 ) == 0;
 8017f18:	2140      	movs	r1, #64	; 0x40
 8017f1a:	48a0      	ldr	r0, [pc, #640]	; (801819c <pull_and_update_inputs+0x2e0>)
 8017f1c:	f7ff ff2c 	bl	8017d78 <LL_GPIO_IsInputPinSet>
 8017f20:	4603      	mov	r3, r0
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	bf0c      	ite	eq
 8017f26:	2301      	moveq	r3, #1
 8017f28:	2300      	movne	r3, #0
 8017f2a:	b2da      	uxtb	r2, r3
 8017f2c:	4b9a      	ldr	r3, [pc, #616]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017f2e:	721a      	strb	r2, [r3, #8]
	io.buttons[BUTTON_RIGHT ].down = LL_GPIO_IsInputPinSet(GPIOG, LL_GPIO_PIN_8 ) == 0;
 8017f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017f34:	4899      	ldr	r0, [pc, #612]	; (801819c <pull_and_update_inputs+0x2e0>)
 8017f36:	f7ff ff1f 	bl	8017d78 <LL_GPIO_IsInputPinSet>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	bf0c      	ite	eq
 8017f40:	2301      	moveq	r3, #1
 8017f42:	2300      	movne	r3, #0
 8017f44:	b2da      	uxtb	r2, r3
 8017f46:	4b94      	ldr	r3, [pc, #592]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017f48:	731a      	strb	r2, [r3, #12]
	io.buttons[BUTTON_OK    ].down = LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_15) == 0;
 8017f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8017f4e:	4894      	ldr	r0, [pc, #592]	; (80181a0 <pull_and_update_inputs+0x2e4>)
 8017f50:	f7ff ff12 	bl	8017d78 <LL_GPIO_IsInputPinSet>
 8017f54:	4603      	mov	r3, r0
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	bf0c      	ite	eq
 8017f5a:	2301      	moveq	r3, #1
 8017f5c:	2300      	movne	r3, #0
 8017f5e:	b2da      	uxtb	r2, r3
 8017f60:	4b8d      	ldr	r3, [pc, #564]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017f62:	741a      	strb	r2, [r3, #16]
	io.buttons[BUTTON_ESCAPE].down = LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_14) == 0;
 8017f64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8017f68:	488d      	ldr	r0, [pc, #564]	; (80181a0 <pull_and_update_inputs+0x2e4>)
 8017f6a:	f7ff ff05 	bl	8017d78 <LL_GPIO_IsInputPinSet>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	bf0c      	ite	eq
 8017f74:	2301      	moveq	r3, #1
 8017f76:	2300      	movne	r3, #0
 8017f78:	b2da      	uxtb	r2, r3
 8017f7a:	4b87      	ldr	r3, [pc, #540]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017f7c:	751a      	strb	r2, [r3, #20]
	io.buttons[BUTTON_THUMB ].down = LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_13) == 0;
 8017f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017f82:	4887      	ldr	r0, [pc, #540]	; (80181a0 <pull_and_update_inputs+0x2e4>)
 8017f84:	f7ff fef8 	bl	8017d78 <LL_GPIO_IsInputPinSet>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	bf0c      	ite	eq
 8017f8e:	2301      	moveq	r3, #1
 8017f90:	2300      	movne	r3, #0
 8017f92:	b2da      	uxtb	r2, r3
 8017f94:	4b80      	ldr	r3, [pc, #512]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017f96:	761a      	strb	r2, [r3, #24]

	for(i32 index = 0; index < BUTTON_COUNT; index++) {
 8017f98:	2300      	movs	r3, #0
 8017f9a:	613b      	str	r3, [r7, #16]
 8017f9c:	e03a      	b.n	8018014 <pull_and_update_inputs+0x158>
		io.buttons[index].pressed  =  io.buttons[index].down && !io.buttons[index].downPrev;
 8017f9e:	4a7e      	ldr	r2, [pc, #504]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017fa0:	693b      	ldr	r3, [r7, #16]
 8017fa2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d00b      	beq.n	8017fc2 <pull_and_update_inputs+0x106>
 8017faa:	4a7b      	ldr	r2, [pc, #492]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017fac:	693b      	ldr	r3, [r7, #16]
 8017fae:	009b      	lsls	r3, r3, #2
 8017fb0:	4413      	add	r3, r2
 8017fb2:	785b      	ldrb	r3, [r3, #1]
 8017fb4:	f083 0301 	eor.w	r3, r3, #1
 8017fb8:	b2db      	uxtb	r3, r3
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d001      	beq.n	8017fc2 <pull_and_update_inputs+0x106>
 8017fbe:	2301      	movs	r3, #1
 8017fc0:	e000      	b.n	8017fc4 <pull_and_update_inputs+0x108>
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	f003 0301 	and.w	r3, r3, #1
 8017fc8:	b2d9      	uxtb	r1, r3
 8017fca:	4a73      	ldr	r2, [pc, #460]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017fcc:	693b      	ldr	r3, [r7, #16]
 8017fce:	009b      	lsls	r3, r3, #2
 8017fd0:	4413      	add	r3, r2
 8017fd2:	460a      	mov	r2, r1
 8017fd4:	709a      	strb	r2, [r3, #2]
		io.buttons[index].released = !io.buttons[index].down &&  io.buttons[index].downPrev;
 8017fd6:	4a70      	ldr	r2, [pc, #448]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017fd8:	693b      	ldr	r3, [r7, #16]
 8017fda:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8017fde:	f083 0301 	eor.w	r3, r3, #1
 8017fe2:	b2db      	uxtb	r3, r3
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d008      	beq.n	8017ffa <pull_and_update_inputs+0x13e>
 8017fe8:	4a6b      	ldr	r2, [pc, #428]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8017fea:	693b      	ldr	r3, [r7, #16]
 8017fec:	009b      	lsls	r3, r3, #2
 8017fee:	4413      	add	r3, r2
 8017ff0:	785b      	ldrb	r3, [r3, #1]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d001      	beq.n	8017ffa <pull_and_update_inputs+0x13e>
 8017ff6:	2301      	movs	r3, #1
 8017ff8:	e000      	b.n	8017ffc <pull_and_update_inputs+0x140>
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	f003 0301 	and.w	r3, r3, #1
 8018000:	b2d9      	uxtb	r1, r3
 8018002:	4a65      	ldr	r2, [pc, #404]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8018004:	693b      	ldr	r3, [r7, #16]
 8018006:	009b      	lsls	r3, r3, #2
 8018008:	4413      	add	r3, r2
 801800a:	460a      	mov	r2, r1
 801800c:	70da      	strb	r2, [r3, #3]
	for(i32 index = 0; index < BUTTON_COUNT; index++) {
 801800e:	693b      	ldr	r3, [r7, #16]
 8018010:	3301      	adds	r3, #1
 8018012:	613b      	str	r3, [r7, #16]
 8018014:	693b      	ldr	r3, [r7, #16]
 8018016:	2b06      	cmp	r3, #6
 8018018:	ddc1      	ble.n	8017f9e <pull_and_update_inputs+0xe2>
	}

	HAL_ADC_Start(&hadc4);
 801801a:	4862      	ldr	r0, [pc, #392]	; (80181a4 <pull_and_update_inputs+0x2e8>)
 801801c:	f7ed f866 	bl	80050ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc4, 10);// Waiting for ADC conversion
 8018020:	210a      	movs	r1, #10
 8018022:	4860      	ldr	r0, [pc, #384]	; (80181a4 <pull_and_update_inputs+0x2e8>)
 8018024:	f7ed f9c4 	bl	80053b0 <HAL_ADC_PollForConversion>
	io.thumb.x = HAL_ADC_GetValue(&hadc4);
 8018028:	485e      	ldr	r0, [pc, #376]	; (80181a4 <pull_and_update_inputs+0x2e8>)
 801802a:	f7ed fae9 	bl	8005600 <HAL_ADC_GetValue>
 801802e:	ee07 0a90 	vmov	s15, r0
 8018032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018036:	4b58      	ldr	r3, [pc, #352]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8018038:	edc3 7a07 	vstr	s15, [r3, #28]

	HAL_ADC_Start(&hadc4);
 801803c:	4859      	ldr	r0, [pc, #356]	; (80181a4 <pull_and_update_inputs+0x2e8>)
 801803e:	f7ed f855 	bl	80050ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc4, 10);// Waiting for ADC conversion
 8018042:	210a      	movs	r1, #10
 8018044:	4857      	ldr	r0, [pc, #348]	; (80181a4 <pull_and_update_inputs+0x2e8>)
 8018046:	f7ed f9b3 	bl	80053b0 <HAL_ADC_PollForConversion>
	io.thumb.y = HAL_ADC_GetValue(&hadc4);
 801804a:	4856      	ldr	r0, [pc, #344]	; (80181a4 <pull_and_update_inputs+0x2e8>)
 801804c:	f7ed fad8 	bl	8005600 <HAL_ADC_GetValue>
 8018050:	ee07 0a90 	vmov	s15, r0
 8018054:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018058:	4b4f      	ldr	r3, [pc, #316]	; (8018198 <pull_and_update_inputs+0x2dc>)
 801805a:	edc3 7a08 	vstr	s15, [r3, #32]
	HAL_ADC_Stop(&hadc4);
 801805e:	4851      	ldr	r0, [pc, #324]	; (80181a4 <pull_and_update_inputs+0x2e8>)
 8018060:	f7ed f94a 	bl	80052f8 <HAL_ADC_Stop>

	i32 max = 3330;
 8018064:	f640 5302 	movw	r3, #3330	; 0xd02
 8018068:	60fb      	str	r3, [r7, #12]
	i32 min = 780;
 801806a:	f44f 7343 	mov.w	r3, #780	; 0x30c
 801806e:	60bb      	str	r3, [r7, #8]
	f32 range = (f32)(max - min);
 8018070:	68fa      	ldr	r2, [r7, #12]
 8018072:	68bb      	ldr	r3, [r7, #8]
 8018074:	1ad3      	subs	r3, r2, r3
 8018076:	ee07 3a90 	vmov	s15, r3
 801807a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801807e:	edc7 7a01 	vstr	s15, [r7, #4]
	io.thumb.x = ((f32)(io.thumb.x - min) / range) * 2.0f - 1.0f;
 8018082:	4b45      	ldr	r3, [pc, #276]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8018084:	ed93 7a07 	vldr	s14, [r3, #28]
 8018088:	68bb      	ldr	r3, [r7, #8]
 801808a:	ee07 3a90 	vmov	s15, r3
 801808e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018092:	ee77 6a67 	vsub.f32	s13, s14, s15
 8018096:	ed97 7a01 	vldr	s14, [r7, #4]
 801809a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801809e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80180a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80180a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80180aa:	4b3b      	ldr	r3, [pc, #236]	; (8018198 <pull_and_update_inputs+0x2dc>)
 80180ac:	edc3 7a07 	vstr	s15, [r3, #28]
	if(io.thumb.x < 0.2f && io.thumb.x > -0.2f) {
 80180b0:	4b39      	ldr	r3, [pc, #228]	; (8018198 <pull_and_update_inputs+0x2dc>)
 80180b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80180b6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80181a8 <pull_and_update_inputs+0x2ec>
 80180ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80180be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180c2:	d50e      	bpl.n	80180e2 <pull_and_update_inputs+0x226>
 80180c4:	4b34      	ldr	r3, [pc, #208]	; (8018198 <pull_and_update_inputs+0x2dc>)
 80180c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80180ca:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80181ac <pull_and_update_inputs+0x2f0>
 80180ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80180d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180d6:	dd04      	ble.n	80180e2 <pull_and_update_inputs+0x226>
		io.thumb.x = 0.0f;
 80180d8:	4b2f      	ldr	r3, [pc, #188]	; (8018198 <pull_and_update_inputs+0x2dc>)
 80180da:	f04f 0200 	mov.w	r2, #0
 80180de:	61da      	str	r2, [r3, #28]
 80180e0:	e01b      	b.n	801811a <pull_and_update_inputs+0x25e>
	} else if(io.thumb.x > 0.85f) {
 80180e2:	4b2d      	ldr	r3, [pc, #180]	; (8018198 <pull_and_update_inputs+0x2dc>)
 80180e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80180e8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80181b0 <pull_and_update_inputs+0x2f4>
 80180ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80180f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180f4:	dd04      	ble.n	8018100 <pull_and_update_inputs+0x244>
		io.thumb.x = 1.0f;
 80180f6:	4b28      	ldr	r3, [pc, #160]	; (8018198 <pull_and_update_inputs+0x2dc>)
 80180f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80180fc:	61da      	str	r2, [r3, #28]
 80180fe:	e00c      	b.n	801811a <pull_and_update_inputs+0x25e>
	} else if(io.thumb.x < -0.85f) {
 8018100:	4b25      	ldr	r3, [pc, #148]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8018102:	edd3 7a07 	vldr	s15, [r3, #28]
 8018106:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80181b4 <pull_and_update_inputs+0x2f8>
 801810a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801810e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018112:	d502      	bpl.n	801811a <pull_and_update_inputs+0x25e>
		io.thumb.x = -1.0f;
 8018114:	4b20      	ldr	r3, [pc, #128]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8018116:	4a28      	ldr	r2, [pc, #160]	; (80181b8 <pull_and_update_inputs+0x2fc>)
 8018118:	61da      	str	r2, [r3, #28]
	}

	io.thumb.y = ((f32)(io.thumb.y - min) / range) * 2.0f - 1.0f;
 801811a:	4b1f      	ldr	r3, [pc, #124]	; (8018198 <pull_and_update_inputs+0x2dc>)
 801811c:	ed93 7a08 	vldr	s14, [r3, #32]
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	ee07 3a90 	vmov	s15, r3
 8018126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801812a:	ee77 6a67 	vsub.f32	s13, s14, s15
 801812e:	ed97 7a01 	vldr	s14, [r7, #4]
 8018132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8018136:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801813a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801813e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018142:	4b15      	ldr	r3, [pc, #84]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8018144:	edc3 7a08 	vstr	s15, [r3, #32]
	if(io.thumb.y < 0.2f && io.thumb.y > -0.2f) {
 8018148:	4b13      	ldr	r3, [pc, #76]	; (8018198 <pull_and_update_inputs+0x2dc>)
 801814a:	edd3 7a08 	vldr	s15, [r3, #32]
 801814e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80181a8 <pull_and_update_inputs+0x2ec>
 8018152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801815a:	d50e      	bpl.n	801817a <pull_and_update_inputs+0x2be>
 801815c:	4b0e      	ldr	r3, [pc, #56]	; (8018198 <pull_and_update_inputs+0x2dc>)
 801815e:	edd3 7a08 	vldr	s15, [r3, #32]
 8018162:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80181ac <pull_and_update_inputs+0x2f0>
 8018166:	eef4 7ac7 	vcmpe.f32	s15, s14
 801816a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801816e:	dd04      	ble.n	801817a <pull_and_update_inputs+0x2be>
		io.thumb.y = 0.0f;
 8018170:	4b09      	ldr	r3, [pc, #36]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8018172:	f04f 0200 	mov.w	r2, #0
 8018176:	621a      	str	r2, [r3, #32]
 8018178:	e02d      	b.n	80181d6 <pull_and_update_inputs+0x31a>
	} else if(io.thumb.y > 0.85f) {
 801817a:	4b07      	ldr	r3, [pc, #28]	; (8018198 <pull_and_update_inputs+0x2dc>)
 801817c:	edd3 7a08 	vldr	s15, [r3, #32]
 8018180:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80181b0 <pull_and_update_inputs+0x2f4>
 8018184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801818c:	dd16      	ble.n	80181bc <pull_and_update_inputs+0x300>
		io.thumb.y = 1.0f;
 801818e:	4b02      	ldr	r3, [pc, #8]	; (8018198 <pull_and_update_inputs+0x2dc>)
 8018190:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8018194:	621a      	str	r2, [r3, #32]
 8018196:	e01e      	b.n	80181d6 <pull_and_update_inputs+0x31a>
 8018198:	20003de0 	.word	0x20003de0
 801819c:	48001800 	.word	0x48001800
 80181a0:	48000800 	.word	0x48000800
 80181a4:	200009d8 	.word	0x200009d8
 80181a8:	3e4ccccd 	.word	0x3e4ccccd
 80181ac:	be4ccccd 	.word	0xbe4ccccd
 80181b0:	3f59999a 	.word	0x3f59999a
 80181b4:	bf59999a 	.word	0xbf59999a
 80181b8:	bf800000 	.word	0xbf800000
	} else if(io.thumb.y < -0.85f) {
 80181bc:	4b1b      	ldr	r3, [pc, #108]	; (801822c <pull_and_update_inputs+0x370>)
 80181be:	edd3 7a08 	vldr	s15, [r3, #32]
 80181c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8018230 <pull_and_update_inputs+0x374>
 80181c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80181ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ce:	d502      	bpl.n	80181d6 <pull_and_update_inputs+0x31a>
		io.thumb.y = -1.0f;
 80181d0:	4b16      	ldr	r3, [pc, #88]	; (801822c <pull_and_update_inputs+0x370>)
 80181d2:	4a18      	ldr	r2, [pc, #96]	; (8018234 <pull_and_update_inputs+0x378>)
 80181d4:	621a      	str	r2, [r3, #32]
	}

	if(XPT2046_TouchPressed() != 0) {
 80181d6:	f7fc fad3 	bl	8014780 <XPT2046_TouchPressed>
 80181da:	4603      	mov	r3, r0
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d016      	beq.n	801820e <pull_and_update_inputs+0x352>
		io.touch.down = true;
 80181e0:	4b12      	ldr	r3, [pc, #72]	; (801822c <pull_and_update_inputs+0x370>)
 80181e2:	2201      	movs	r2, #1
 80181e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		u16 x = 0;
 80181e8:	2300      	movs	r3, #0
 80181ea:	807b      	strh	r3, [r7, #2]
		u16 y = 0;
 80181ec:	2300      	movs	r3, #0
 80181ee:	803b      	strh	r3, [r7, #0]
		XPT2046_TouchGetCoordinates(&x, &y, 0);
 80181f0:	4639      	mov	r1, r7
 80181f2:	1cbb      	adds	r3, r7, #2
 80181f4:	2200      	movs	r2, #0
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7fc fad4 	bl	80147a4 <XPT2046_TouchGetCoordinates>
		io.touch.x = x;
 80181fc:	887b      	ldrh	r3, [r7, #2]
 80181fe:	461a      	mov	r2, r3
 8018200:	4b0a      	ldr	r3, [pc, #40]	; (801822c <pull_and_update_inputs+0x370>)
 8018202:	629a      	str	r2, [r3, #40]	; 0x28
		io.touch.y = y;
 8018204:	883b      	ldrh	r3, [r7, #0]
 8018206:	461a      	mov	r2, r3
 8018208:	4b08      	ldr	r3, [pc, #32]	; (801822c <pull_and_update_inputs+0x370>)
 801820a:	62da      	str	r2, [r3, #44]	; 0x2c
	} else {
		io.touch.down = false;
		io.touch.x = 0;
		io.touch.y = 0;
	}
}
 801820c:	e009      	b.n	8018222 <pull_and_update_inputs+0x366>
		io.touch.down = false;
 801820e:	4b07      	ldr	r3, [pc, #28]	; (801822c <pull_and_update_inputs+0x370>)
 8018210:	2200      	movs	r2, #0
 8018212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		io.touch.x = 0;
 8018216:	4b05      	ldr	r3, [pc, #20]	; (801822c <pull_and_update_inputs+0x370>)
 8018218:	2200      	movs	r2, #0
 801821a:	629a      	str	r2, [r3, #40]	; 0x28
		io.touch.y = 0;
 801821c:	4b03      	ldr	r3, [pc, #12]	; (801822c <pull_and_update_inputs+0x370>)
 801821e:	2200      	movs	r2, #0
 8018220:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8018222:	bf00      	nop
 8018224:	3718      	adds	r7, #24
 8018226:	46bd      	mov	sp, r7
 8018228:	bd80      	pop	{r7, pc}
 801822a:	bf00      	nop
 801822c:	20003de0 	.word	0x20003de0
 8018230:	bf59999a 	.word	0xbf59999a
 8018234:	bf800000 	.word	0xbf800000

08018238 <get_button>:

Button get_button(ButtonType type) {
 8018238:	b480      	push	{r7}
 801823a:	b085      	sub	sp, #20
 801823c:	af00      	add	r7, sp, #0
 801823e:	4603      	mov	r3, r0
 8018240:	71fb      	strb	r3, [r7, #7]
	return io.buttons[type];
 8018242:	79fb      	ldrb	r3, [r7, #7]
 8018244:	4a0b      	ldr	r2, [pc, #44]	; (8018274 <get_button+0x3c>)
 8018246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801824a:	60fb      	str	r3, [r7, #12]
 801824c:	2300      	movs	r3, #0
 801824e:	7b3a      	ldrb	r2, [r7, #12]
 8018250:	f362 0307 	bfi	r3, r2, #0, #8
 8018254:	7b7a      	ldrb	r2, [r7, #13]
 8018256:	f362 230f 	bfi	r3, r2, #8, #8
 801825a:	7bba      	ldrb	r2, [r7, #14]
 801825c:	f362 4317 	bfi	r3, r2, #16, #8
 8018260:	7bfa      	ldrb	r2, [r7, #15]
 8018262:	f362 631f 	bfi	r3, r2, #24, #8
}
 8018266:	4618      	mov	r0, r3
 8018268:	3714      	adds	r7, #20
 801826a:	46bd      	mov	sp, r7
 801826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018270:	4770      	bx	lr
 8018272:	bf00      	nop
 8018274:	20003de0 	.word	0x20003de0

08018278 <get_thumb>:

Thumb get_thumb() {
 8018278:	b480      	push	{r7}
 801827a:	b085      	sub	sp, #20
 801827c:	af00      	add	r7, sp, #0
	return io.thumb;
 801827e:	4a0b      	ldr	r2, [pc, #44]	; (80182ac <get_thumb+0x34>)
 8018280:	f107 0308 	add.w	r3, r7, #8
 8018284:	321c      	adds	r2, #28
 8018286:	e892 0003 	ldmia.w	r2, {r0, r1}
 801828a:	e883 0003 	stmia.w	r3, {r0, r1}
 801828e:	68ba      	ldr	r2, [r7, #8]
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	ee07 2a10 	vmov	s14, r2
 8018296:	ee07 3a90 	vmov	s15, r3
}
 801829a:	eeb0 0a47 	vmov.f32	s0, s14
 801829e:	eef0 0a67 	vmov.f32	s1, s15
 80182a2:	3714      	adds	r7, #20
 80182a4:	46bd      	mov	sp, r7
 80182a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182aa:	4770      	bx	lr
 80182ac:	20003de0 	.word	0x20003de0

080182b0 <get_touch>:

Touch get_touch() {
 80182b0:	b490      	push	{r4, r7}
 80182b2:	b082      	sub	sp, #8
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
	return io.touch;
 80182b8:	687a      	ldr	r2, [r7, #4]
 80182ba:	4b06      	ldr	r3, [pc, #24]	; (80182d4 <get_touch+0x24>)
 80182bc:	4614      	mov	r4, r2
 80182be:	3324      	adds	r3, #36	; 0x24
 80182c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80182c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80182c8:	6878      	ldr	r0, [r7, #4]
 80182ca:	3708      	adds	r7, #8
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bc90      	pop	{r4, r7}
 80182d0:	4770      	bx	lr
 80182d2:	bf00      	nop
 80182d4:	20003de0 	.word	0x20003de0

080182d8 <lcd_reset_low>:
#define LCD_BACKLIGHT_GPIO_PORT GPIOB
#define LCD_BACKLIGHT_GPIO_PIN  GPIO_PIN_6

//DMA_HandleTypeDef hLCDDMA = {};

void lcd_reset_low() {
 80182d8:	b480      	push	{r7}
 80182da:	af00      	add	r7, sp, #0
	WRITE_REG(LCD_RESET_GPIO_PORT->BRR, LCD_RESET_GPIO_PIN);
 80182dc:	4b03      	ldr	r3, [pc, #12]	; (80182ec <lcd_reset_low+0x14>)
 80182de:	2208      	movs	r2, #8
 80182e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80182e2:	bf00      	nop
 80182e4:	46bd      	mov	sp, r7
 80182e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ea:	4770      	bx	lr
 80182ec:	48000c00 	.word	0x48000c00

080182f0 <lcd_reset_high>:

void lcd_reset_high() {
 80182f0:	b480      	push	{r7}
 80182f2:	af00      	add	r7, sp, #0
	WRITE_REG(LCD_RESET_GPIO_PORT->BSRR, LCD_RESET_GPIO_PIN);
 80182f4:	4b03      	ldr	r3, [pc, #12]	; (8018304 <lcd_reset_high+0x14>)
 80182f6:	2208      	movs	r2, #8
 80182f8:	619a      	str	r2, [r3, #24]
}
 80182fa:	bf00      	nop
 80182fc:	46bd      	mov	sp, r7
 80182fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018302:	4770      	bx	lr
 8018304:	48000c00 	.word	0x48000c00

08018308 <lcd_set_backlight>:

void lcd_set_backlight(bool value) {
 8018308:	b480      	push	{r7}
 801830a:	b083      	sub	sp, #12
 801830c:	af00      	add	r7, sp, #0
 801830e:	4603      	mov	r3, r0
 8018310:	71fb      	strb	r3, [r7, #7]
	if(value) {
 8018312:	79fb      	ldrb	r3, [r7, #7]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d003      	beq.n	8018320 <lcd_set_backlight+0x18>
		WRITE_REG(LCD_BACKLIGHT_GPIO_PORT->BSRR, LCD_BACKLIGHT_GPIO_PIN);
 8018318:	4b06      	ldr	r3, [pc, #24]	; (8018334 <lcd_set_backlight+0x2c>)
 801831a:	2240      	movs	r2, #64	; 0x40
 801831c:	619a      	str	r2, [r3, #24]
	} else {
		WRITE_REG(LCD_BACKLIGHT_GPIO_PORT->BRR, LCD_BACKLIGHT_GPIO_PIN);
	}
}
 801831e:	e002      	b.n	8018326 <lcd_set_backlight+0x1e>
		WRITE_REG(LCD_BACKLIGHT_GPIO_PORT->BRR, LCD_BACKLIGHT_GPIO_PIN);
 8018320:	4b04      	ldr	r3, [pc, #16]	; (8018334 <lcd_set_backlight+0x2c>)
 8018322:	2240      	movs	r2, #64	; 0x40
 8018324:	629a      	str	r2, [r3, #40]	; 0x28
}
 8018326:	bf00      	nop
 8018328:	370c      	adds	r7, #12
 801832a:	46bd      	mov	sp, r7
 801832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018330:	4770      	bx	lr
 8018332:	bf00      	nop
 8018334:	48000400 	.word	0x48000400

08018338 <lcd_fill>:
void lcd_set_pixel(u32 x, u32 y, u16 color) {
	ILI9341_SetDisplayWindow(x, y, 1, 1);
	ILI9341_SendData((u16*)&color, 1);
}

void lcd_fill(u32 x, u32 y, u32 w, u32 h, u16 *data) {
 8018338:	b580      	push	{r7, lr}
 801833a:	b084      	sub	sp, #16
 801833c:	af00      	add	r7, sp, #0
 801833e:	60f8      	str	r0, [r7, #12]
 8018340:	60b9      	str	r1, [r7, #8]
 8018342:	607a      	str	r2, [r7, #4]
 8018344:	603b      	str	r3, [r7, #0]
	ILI9341_SetDisplayWindow(x, y, w, h);
 8018346:	683b      	ldr	r3, [r7, #0]
 8018348:	687a      	ldr	r2, [r7, #4]
 801834a:	68b9      	ldr	r1, [r7, #8]
 801834c:	68f8      	ldr	r0, [r7, #12]
 801834e:	f7fc fb9b 	bl	8014a88 <ILI9341_SetDisplayWindow>
	ILI9341_SendData(data, w * h);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	683a      	ldr	r2, [r7, #0]
 8018356:	fb02 f303 	mul.w	r3, r2, r3
 801835a:	4619      	mov	r1, r3
 801835c:	69b8      	ldr	r0, [r7, #24]
 801835e:	f7fc fb1a 	bl	8014996 <ILI9341_SendData>
	//ILI9341_SendDataDMA(data, w * h);
}
 8018362:	bf00      	nop
 8018364:	3710      	adds	r7, #16
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}

0801836a <lcd_clear>:


void lcd_clear() {
 801836a:	b580      	push	{r7, lr}
 801836c:	b082      	sub	sp, #8
 801836e:	af00      	add	r7, sp, #0
	u32 pixel_count = ILI9341_GetParam(LCD_AREA);
 8018370:	2002      	movs	r0, #2
 8018372:	f7fc fc75 	bl	8014c60 <ILI9341_GetParam>
 8018376:	6078      	str	r0, [r7, #4]
	ILI9341_SetDisplayWindow(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8018378:	23f0      	movs	r3, #240	; 0xf0
 801837a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801837e:	2100      	movs	r1, #0
 8018380:	2000      	movs	r0, #0
 8018382:	f7fc fb81 	bl	8014a88 <ILI9341_SetDisplayWindow>
	ILI9341_SendRepeatedData(0, pixel_count);
 8018386:	6879      	ldr	r1, [r7, #4]
 8018388:	2000      	movs	r0, #0
 801838a:	f7fc fb26 	bl	80149da <ILI9341_SendRepeatedData>
}
 801838e:	bf00      	nop
 8018390:	3708      	adds	r7, #8
 8018392:	46bd      	mov	sp, r7
 8018394:	bd80      	pop	{r7, pc}

08018396 <lcd_init>:

void lcd_init() {
 8018396:	b580      	push	{r7, lr}
 8018398:	af00      	add	r7, sp, #0
	lcd_reset_low();
 801839a:	f7ff ff9d 	bl	80182d8 <lcd_reset_low>
	HAL_Delay(120);
 801839e:	2078      	movs	r0, #120	; 0x78
 80183a0:	f7eb ff50 	bl	8004244 <HAL_Delay>
	lcd_reset_high();
 80183a4:	f7ff ffa4 	bl	80182f0 <lcd_reset_high>
	HAL_Delay(120);
 80183a8:	2078      	movs	r0, #120	; 0x78
 80183aa:	f7eb ff4b 	bl	8004244 <HAL_Delay>

	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 80183ae:	2103      	movs	r1, #3
 80183b0:	2055      	movs	r0, #85	; 0x55
 80183b2:	f7fc fbcb 	bl	8014b4c <ILI9341_Init>
	ILI9341_DisplayOn();
 80183b6:	f7fc fc46 	bl	8014c46 <ILI9341_DisplayOn>
//
//	__DMA1_CLK_ENABLE();
//
//	HAL_DMA_Init(&hLCDDMA);

	lcd_clear();
 80183ba:	f7ff ffd6 	bl	801836a <lcd_clear>
	ILI9341_WaitTransfer();
 80183be:	f7fc fc3b 	bl	8014c38 <ILI9341_WaitTransfer>
	lcd_set_backlight(true);
 80183c2:	2001      	movs	r0, #1
 80183c4:	f7ff ffa0 	bl	8018308 <lcd_set_backlight>
}
 80183c8:	bf00      	nop
 80183ca:	bd80      	pop	{r7, pc}

080183cc <ui_touch_inside>:

#include "ui.h"

UIState uiState;

bool ui_touch_inside(i32 x, i32 y, i32 w, i32 h) {
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b088      	sub	sp, #32
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	60f8      	str	r0, [r7, #12]
 80183d4:	60b9      	str	r1, [r7, #8]
 80183d6:	607a      	str	r2, [r7, #4]
 80183d8:	603b      	str	r3, [r7, #0]
	Touch touch = get_touch();
 80183da:	f107 0314 	add.w	r3, r7, #20
 80183de:	4618      	mov	r0, r3
 80183e0:	f7ff ff66 	bl	80182b0 <get_touch>
	return touch.down && !(touch.x < x || touch.y < y || touch.x >= x + w || touch.y >= y + h);
 80183e4:	7d3b      	ldrb	r3, [r7, #20]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d015      	beq.n	8018416 <ui_touch_inside+0x4a>
 80183ea:	69bb      	ldr	r3, [r7, #24]
 80183ec:	68fa      	ldr	r2, [r7, #12]
 80183ee:	429a      	cmp	r2, r3
 80183f0:	dc11      	bgt.n	8018416 <ui_touch_inside+0x4a>
 80183f2:	69fb      	ldr	r3, [r7, #28]
 80183f4:	68ba      	ldr	r2, [r7, #8]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	dc0d      	bgt.n	8018416 <ui_touch_inside+0x4a>
 80183fa:	69ba      	ldr	r2, [r7, #24]
 80183fc:	68f9      	ldr	r1, [r7, #12]
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	440b      	add	r3, r1
 8018402:	429a      	cmp	r2, r3
 8018404:	da07      	bge.n	8018416 <ui_touch_inside+0x4a>
 8018406:	69fa      	ldr	r2, [r7, #28]
 8018408:	68b9      	ldr	r1, [r7, #8]
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	440b      	add	r3, r1
 801840e:	429a      	cmp	r2, r3
 8018410:	da01      	bge.n	8018416 <ui_touch_inside+0x4a>
 8018412:	2301      	movs	r3, #1
 8018414:	e000      	b.n	8018418 <ui_touch_inside+0x4c>
 8018416:	2300      	movs	r3, #0
 8018418:	f003 0301 	and.w	r3, r3, #1
 801841c:	b2db      	uxtb	r3, r3
}
 801841e:	4618      	mov	r0, r3
 8018420:	3720      	adds	r7, #32
 8018422:	46bd      	mov	sp, r7
 8018424:	bd80      	pop	{r7, pc}
	...

08018428 <ui_init>:

void ui_init() {
 8018428:	b480      	push	{r7}
 801842a:	af00      	add	r7, sp, #0
	uiState.color = 15;
 801842c:	4b03      	ldr	r3, [pc, #12]	; (801843c <ui_init+0x14>)
 801842e:	220f      	movs	r2, #15
 8018430:	601a      	str	r2, [r3, #0]
}
 8018432:	bf00      	nop
 8018434:	46bd      	mov	sp, r7
 8018436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801843a:	4770      	bx	lr
 801843c:	20003e10 	.word	0x20003e10

08018440 <ui_start>:

void ui_start() {
 8018440:	b480      	push	{r7}
 8018442:	af00      	add	r7, sp, #0

}
 8018444:	bf00      	nop
 8018446:	46bd      	mov	sp, r7
 8018448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844c:	4770      	bx	lr
	...

08018450 <ui_end>:

void ui_end() {
 8018450:	b580      	push	{r7, lr}
 8018452:	b084      	sub	sp, #16
 8018454:	af00      	add	r7, sp, #0
	Touch touch = get_touch();
 8018456:	1d3b      	adds	r3, r7, #4
 8018458:	4618      	mov	r0, r3
 801845a:	f7ff ff29 	bl	80182b0 <get_touch>
	if(!touch.down) {
 801845e:	793b      	ldrb	r3, [r7, #4]
 8018460:	f083 0301 	eor.w	r3, r3, #1
 8018464:	b2db      	uxtb	r3, r3
 8018466:	2b00      	cmp	r3, #0
 8018468:	d002      	beq.n	8018470 <ui_end+0x20>
		uiState.activeItem = 0;
 801846a:	4b03      	ldr	r3, [pc, #12]	; (8018478 <ui_end+0x28>)
 801846c:	2200      	movs	r2, #0
 801846e:	605a      	str	r2, [r3, #4]
	}
}
 8018470:	bf00      	nop
 8018472:	3710      	adds	r7, #16
 8018474:	46bd      	mov	sp, r7
 8018476:	bd80      	pop	{r7, pc}
 8018478:	20003e10 	.word	0x20003e10

0801847c <ui_button>:

bool ui_button(i32 id, i32 x, i32 y, i32 w, i32 h, char *string) {
 801847c:	b580      	push	{r7, lr}
 801847e:	b08c      	sub	sp, #48	; 0x30
 8018480:	af02      	add	r7, sp, #8
 8018482:	60f8      	str	r0, [r7, #12]
 8018484:	60b9      	str	r1, [r7, #8]
 8018486:	607a      	str	r2, [r7, #4]
 8018488:	603b      	str	r3, [r7, #0]
	if(ui_touch_inside(x, y, w, h) && uiState.activeItem == 0) {
 801848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801848c:	683a      	ldr	r2, [r7, #0]
 801848e:	6879      	ldr	r1, [r7, #4]
 8018490:	68b8      	ldr	r0, [r7, #8]
 8018492:	f7ff ff9b 	bl	80183cc <ui_touch_inside>
 8018496:	4603      	mov	r3, r0
 8018498:	2b00      	cmp	r3, #0
 801849a:	d006      	beq.n	80184aa <ui_button+0x2e>
 801849c:	4b24      	ldr	r3, [pc, #144]	; (8018530 <ui_button+0xb4>)
 801849e:	685b      	ldr	r3, [r3, #4]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d102      	bne.n	80184aa <ui_button+0x2e>
		uiState.activeItem = id;
 80184a4:	4a22      	ldr	r2, [pc, #136]	; (8018530 <ui_button+0xb4>)
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	6053      	str	r3, [r2, #4]
	}

	draw_rect(x, y, w, h, uiState.color);
 80184aa:	4b21      	ldr	r3, [pc, #132]	; (8018530 <ui_button+0xb4>)
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	9300      	str	r3, [sp, #0]
 80184b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184b2:	683a      	ldr	r2, [r7, #0]
 80184b4:	6879      	ldr	r1, [r7, #4]
 80184b6:	68b8      	ldr	r0, [r7, #8]
 80184b8:	f7fe f986 	bl	80167c8 <draw_rect>

	i32 stringLength = strlen(string);
 80184bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80184be:	f7e7 feaf 	bl	8000220 <strlen>
 80184c2:	4603      	mov	r3, r0
 80184c4:	627b      	str	r3, [r7, #36]	; 0x24
	i32 stringX = x + (w / 2) - (stringLength * (CHAR_WIDTH /2));
 80184c6:	683b      	ldr	r3, [r7, #0]
 80184c8:	0fda      	lsrs	r2, r3, #31
 80184ca:	4413      	add	r3, r2
 80184cc:	105b      	asrs	r3, r3, #1
 80184ce:	461a      	mov	r2, r3
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	441a      	add	r2, r3
 80184d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184d6:	009b      	lsls	r3, r3, #2
 80184d8:	1ad3      	subs	r3, r2, r3
 80184da:	623b      	str	r3, [r7, #32]
	i32 stringY = y + (h / 2) - (CHAR_HEIGHT / 2);
 80184dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184de:	0fda      	lsrs	r2, r3, #31
 80184e0:	4413      	add	r3, r2
 80184e2:	105b      	asrs	r3, r3, #1
 80184e4:	461a      	mov	r2, r3
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	4413      	add	r3, r2
 80184ea:	3b04      	subs	r3, #4
 80184ec:	61fb      	str	r3, [r7, #28]
	draw_string(string, stringX, stringY, uiState.color);
 80184ee:	4b10      	ldr	r3, [pc, #64]	; (8018530 <ui_button+0xb4>)
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	69fa      	ldr	r2, [r7, #28]
 80184f4:	6a39      	ldr	r1, [r7, #32]
 80184f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80184f8:	f7fe fad0 	bl	8016a9c <draw_string>

	Touch touch = get_touch();
 80184fc:	f107 0310 	add.w	r3, r7, #16
 8018500:	4618      	mov	r0, r3
 8018502:	f7ff fed5 	bl	80182b0 <get_touch>

	return !touch.down && uiState.activeItem == id;
 8018506:	7c3b      	ldrb	r3, [r7, #16]
 8018508:	f083 0301 	eor.w	r3, r3, #1
 801850c:	b2db      	uxtb	r3, r3
 801850e:	2b00      	cmp	r3, #0
 8018510:	d006      	beq.n	8018520 <ui_button+0xa4>
 8018512:	4b07      	ldr	r3, [pc, #28]	; (8018530 <ui_button+0xb4>)
 8018514:	685b      	ldr	r3, [r3, #4]
 8018516:	68fa      	ldr	r2, [r7, #12]
 8018518:	429a      	cmp	r2, r3
 801851a:	d101      	bne.n	8018520 <ui_button+0xa4>
 801851c:	2301      	movs	r3, #1
 801851e:	e000      	b.n	8018522 <ui_button+0xa6>
 8018520:	2300      	movs	r3, #0
 8018522:	f003 0301 	and.w	r3, r3, #1
 8018526:	b2db      	uxtb	r3, r3
}
 8018528:	4618      	mov	r0, r3
 801852a:	3728      	adds	r7, #40	; 0x28
 801852c:	46bd      	mov	sp, r7
 801852e:	bd80      	pop	{r7, pc}
 8018530:	20003e10 	.word	0x20003e10

08018534 <point_translate>:

#include "util.h"

void point_translate(f32 *px, f32 *py, f32 tx, f32 ty) {
 8018534:	b480      	push	{r7}
 8018536:	b085      	sub	sp, #20
 8018538:	af00      	add	r7, sp, #0
 801853a:	60f8      	str	r0, [r7, #12]
 801853c:	60b9      	str	r1, [r7, #8]
 801853e:	ed87 0a01 	vstr	s0, [r7, #4]
 8018542:	edc7 0a00 	vstr	s1, [r7]
	*px = *px + tx;
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	ed93 7a00 	vldr	s14, [r3]
 801854c:	edd7 7a01 	vldr	s15, [r7, #4]
 8018550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	edc3 7a00 	vstr	s15, [r3]
	*py = *py + ty;
 801855a:	68bb      	ldr	r3, [r7, #8]
 801855c:	ed93 7a00 	vldr	s14, [r3]
 8018560:	edd7 7a00 	vldr	s15, [r7]
 8018564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018568:	68bb      	ldr	r3, [r7, #8]
 801856a:	edc3 7a00 	vstr	s15, [r3]
}
 801856e:	bf00      	nop
 8018570:	3714      	adds	r7, #20
 8018572:	46bd      	mov	sp, r7
 8018574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018578:	4770      	bx	lr

0801857a <point_rotate>:

void point_rotate(f32 *px, f32 *py, f32 angle) {
 801857a:	b580      	push	{r7, lr}
 801857c:	ed2d 8b02 	vpush	{d8}
 8018580:	b086      	sub	sp, #24
 8018582:	af00      	add	r7, sp, #0
 8018584:	60f8      	str	r0, [r7, #12]
 8018586:	60b9      	str	r1, [r7, #8]
 8018588:	ed87 0a01 	vstr	s0, [r7, #4]
	f32 x = *px * cosf(angle) - *py * sinf(angle);
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	ed93 8a00 	vldr	s16, [r3]
 8018592:	ed97 0a01 	vldr	s0, [r7, #4]
 8018596:	f001 f99f 	bl	80198d8 <cosf>
 801859a:	eef0 7a40 	vmov.f32	s15, s0
 801859e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80185a2:	68bb      	ldr	r3, [r7, #8]
 80185a4:	edd3 8a00 	vldr	s17, [r3]
 80185a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80185ac:	f001 f9d8 	bl	8019960 <sinf>
 80185b0:	eef0 7a40 	vmov.f32	s15, s0
 80185b4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80185b8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80185bc:	edc7 7a05 	vstr	s15, [r7, #20]
	f32 y = *px * sinf(angle) + *py * cosf(angle);
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	ed93 8a00 	vldr	s16, [r3]
 80185c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80185ca:	f001 f9c9 	bl	8019960 <sinf>
 80185ce:	eef0 7a40 	vmov.f32	s15, s0
 80185d2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80185d6:	68bb      	ldr	r3, [r7, #8]
 80185d8:	edd3 8a00 	vldr	s17, [r3]
 80185dc:	ed97 0a01 	vldr	s0, [r7, #4]
 80185e0:	f001 f97a 	bl	80198d8 <cosf>
 80185e4:	eef0 7a40 	vmov.f32	s15, s0
 80185e8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80185ec:	ee78 7a27 	vadd.f32	s15, s16, s15
 80185f0:	edc7 7a04 	vstr	s15, [r7, #16]
	*px = x;
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	697a      	ldr	r2, [r7, #20]
 80185f8:	601a      	str	r2, [r3, #0]
	*py = y;
 80185fa:	68bb      	ldr	r3, [r7, #8]
 80185fc:	693a      	ldr	r2, [r7, #16]
 80185fe:	601a      	str	r2, [r3, #0]
}
 8018600:	bf00      	nop
 8018602:	3718      	adds	r7, #24
 8018604:	46bd      	mov	sp, r7
 8018606:	ecbd 8b02 	vpop	{d8}
 801860a:	bd80      	pop	{r7, pc}

0801860c <point_scale>:

void point_scale(f32 *px, f32 *py, f32 sx, f32 sy) {
 801860c:	b480      	push	{r7}
 801860e:	b085      	sub	sp, #20
 8018610:	af00      	add	r7, sp, #0
 8018612:	60f8      	str	r0, [r7, #12]
 8018614:	60b9      	str	r1, [r7, #8]
 8018616:	ed87 0a01 	vstr	s0, [r7, #4]
 801861a:	edc7 0a00 	vstr	s1, [r7]
	*px = *px * sx;
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	ed93 7a00 	vldr	s14, [r3]
 8018624:	edd7 7a01 	vldr	s15, [r7, #4]
 8018628:	ee67 7a27 	vmul.f32	s15, s14, s15
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	edc3 7a00 	vstr	s15, [r3]
	*py = *py * sy;
 8018632:	68bb      	ldr	r3, [r7, #8]
 8018634:	ed93 7a00 	vldr	s14, [r3]
 8018638:	edd7 7a00 	vldr	s15, [r7]
 801863c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	edc3 7a00 	vstr	s15, [r3]
}
 8018646:	bf00      	nop
 8018648:	3714      	adds	r7, #20
 801864a:	46bd      	mov	sp, r7
 801864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018650:	4770      	bx	lr

08018652 <point_translate_rotate_scale>:

void point_translate_rotate_scale(f32 *px, f32 *py, f32 tx, f32 ty, f32 angle, f32 sx, f32 sy) {
 8018652:	b580      	push	{r7, lr}
 8018654:	b088      	sub	sp, #32
 8018656:	af00      	add	r7, sp, #0
 8018658:	61f8      	str	r0, [r7, #28]
 801865a:	61b9      	str	r1, [r7, #24]
 801865c:	ed87 0a05 	vstr	s0, [r7, #20]
 8018660:	edc7 0a04 	vstr	s1, [r7, #16]
 8018664:	ed87 1a03 	vstr	s2, [r7, #12]
 8018668:	edc7 1a02 	vstr	s3, [r7, #8]
 801866c:	ed87 2a01 	vstr	s4, [r7, #4]
	point_scale(px, py, sx, sy);
 8018670:	edd7 0a01 	vldr	s1, [r7, #4]
 8018674:	ed97 0a02 	vldr	s0, [r7, #8]
 8018678:	69b9      	ldr	r1, [r7, #24]
 801867a:	69f8      	ldr	r0, [r7, #28]
 801867c:	f7ff ffc6 	bl	801860c <point_scale>
	point_rotate(px, py, angle);
 8018680:	ed97 0a03 	vldr	s0, [r7, #12]
 8018684:	69b9      	ldr	r1, [r7, #24]
 8018686:	69f8      	ldr	r0, [r7, #28]
 8018688:	f7ff ff77 	bl	801857a <point_rotate>
	point_translate(px, py, tx, ty);
 801868c:	edd7 0a04 	vldr	s1, [r7, #16]
 8018690:	ed97 0a05 	vldr	s0, [r7, #20]
 8018694:	69b9      	ldr	r1, [r7, #24]
 8018696:	69f8      	ldr	r0, [r7, #28]
 8018698:	f7ff ff4c 	bl	8018534 <point_translate>
}
 801869c:	bf00      	nop
 801869e:	3720      	adds	r7, #32
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bd80      	pop	{r7, pc}

080186a4 <transform_make>:

Transform transform_make(f32 tx, f32 ty, f32 angle, f32 sx, f32 sy) {
 80186a4:	b4b0      	push	{r4, r5, r7}
 80186a6:	b08d      	sub	sp, #52	; 0x34
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6178      	str	r0, [r7, #20]
 80186ac:	ed87 0a04 	vstr	s0, [r7, #16]
 80186b0:	edc7 0a03 	vstr	s1, [r7, #12]
 80186b4:	ed87 1a02 	vstr	s2, [r7, #8]
 80186b8:	edc7 1a01 	vstr	s3, [r7, #4]
 80186bc:	ed87 2a00 	vstr	s4, [r7]
	Transform transform;
	transform.tx = tx;
 80186c0:	693b      	ldr	r3, [r7, #16]
 80186c2:	61fb      	str	r3, [r7, #28]
	transform.ty = ty;
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	623b      	str	r3, [r7, #32]
	transform.angle = angle;
 80186c8:	68bb      	ldr	r3, [r7, #8]
 80186ca:	627b      	str	r3, [r7, #36]	; 0x24
	transform.sx = sx;
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	62bb      	str	r3, [r7, #40]	; 0x28
	transform.sy = sy;
 80186d0:	683b      	ldr	r3, [r7, #0]
 80186d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	return transform;
 80186d4:	697b      	ldr	r3, [r7, #20]
 80186d6:	461d      	mov	r5, r3
 80186d8:	f107 041c 	add.w	r4, r7, #28
 80186dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80186e0:	6823      	ldr	r3, [r4, #0]
 80186e2:	602b      	str	r3, [r5, #0]
}
 80186e4:	6978      	ldr	r0, [r7, #20]
 80186e6:	3734      	adds	r7, #52	; 0x34
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bcb0      	pop	{r4, r5, r7}
 80186ec:	4770      	bx	lr
	...

080186f0 <move_transform>:

void move_transform(Transform *t, f32 vx, f32 vy) {
 80186f0:	b480      	push	{r7}
 80186f2:	b085      	sub	sp, #20
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	60f8      	str	r0, [r7, #12]
 80186f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80186fc:	edc7 0a01 	vstr	s1, [r7, #4]
	t->tx += vx;
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	ed93 7a00 	vldr	s14, [r3]
 8018706:	edd7 7a02 	vldr	s15, [r7, #8]
 801870a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	edc3 7a00 	vstr	s15, [r3]
	t->ty += vy;
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	ed93 7a01 	vldr	s14, [r3, #4]
 801871a:	edd7 7a01 	vldr	s15, [r7, #4]
 801871e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	edc3 7a01 	vstr	s15, [r3, #4]

	t->tx = t->tx < 0 ? t->tx + SCREEN_WIDTH  : t->tx;
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	edd3 7a00 	vldr	s15, [r3]
 801872e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018736:	d507      	bpl.n	8018748 <move_transform+0x58>
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	edd3 7a00 	vldr	s15, [r3]
 801873e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80187ec <move_transform+0xfc>
 8018742:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018746:	e002      	b.n	801874e <move_transform+0x5e>
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	edd3 7a00 	vldr	s15, [r3]
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	edc3 7a00 	vstr	s15, [r3]
	t->ty = t->ty < 0 ? t->ty + SCREEN_HEIGHT : t->ty;
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	edd3 7a01 	vldr	s15, [r3, #4]
 801875a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801875e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018762:	d507      	bpl.n	8018774 <move_transform+0x84>
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	edd3 7a01 	vldr	s15, [r3, #4]
 801876a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80187f0 <move_transform+0x100>
 801876e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018772:	e002      	b.n	801877a <move_transform+0x8a>
 8018774:	68fb      	ldr	r3, [r7, #12]
 8018776:	edd3 7a01 	vldr	s15, [r3, #4]
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	edc3 7a01 	vstr	s15, [r3, #4]
	t->tx = t->tx >= SCREEN_WIDTH  ? t->tx - SCREEN_WIDTH  : t->tx;
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	edd3 7a00 	vldr	s15, [r3]
 8018786:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80187ec <move_transform+0xfc>
 801878a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801878e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018792:	db07      	blt.n	80187a4 <move_transform+0xb4>
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	edd3 7a00 	vldr	s15, [r3]
 801879a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80187ec <move_transform+0xfc>
 801879e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80187a2:	e002      	b.n	80187aa <move_transform+0xba>
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	edd3 7a00 	vldr	s15, [r3]
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	edc3 7a00 	vstr	s15, [r3]
	t->ty = t->ty >= SCREEN_HEIGHT ? t->ty - SCREEN_HEIGHT : t->ty;
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80187b6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80187f0 <move_transform+0x100>
 80187ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80187be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c2:	db07      	blt.n	80187d4 <move_transform+0xe4>
 80187c4:	68fb      	ldr	r3, [r7, #12]
 80187c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80187ca:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80187f0 <move_transform+0x100>
 80187ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80187d2:	e002      	b.n	80187da <move_transform+0xea>
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80187e0:	bf00      	nop
 80187e2:	3714      	adds	r7, #20
 80187e4:	46bd      	mov	sp, r7
 80187e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ea:	4770      	bx	lr
 80187ec:	43a00000 	.word	0x43a00000
 80187f0:	43700000 	.word	0x43700000

080187f4 <point_transform>:

void point_transform(f32 *px, f32 *py, Transform transform) {
 80187f4:	b082      	sub	sp, #8
 80187f6:	b580      	push	{r7, lr}
 80187f8:	b082      	sub	sp, #8
 80187fa:	af00      	add	r7, sp, #0
 80187fc:	6078      	str	r0, [r7, #4]
 80187fe:	6039      	str	r1, [r7, #0]
 8018800:	f107 0110 	add.w	r1, r7, #16
 8018804:	e881 000c 	stmia.w	r1, {r2, r3}
	point_translate_rotate_scale(px, py, transform.tx, transform.ty, transform.angle, transform.sx, transform.sy);
 8018808:	edd7 7a04 	vldr	s15, [r7, #16]
 801880c:	ed97 7a05 	vldr	s14, [r7, #20]
 8018810:	edd7 6a06 	vldr	s13, [r7, #24]
 8018814:	ed97 6a07 	vldr	s12, [r7, #28]
 8018818:	edd7 5a08 	vldr	s11, [r7, #32]
 801881c:	eeb0 2a65 	vmov.f32	s4, s11
 8018820:	eef0 1a46 	vmov.f32	s3, s12
 8018824:	eeb0 1a66 	vmov.f32	s2, s13
 8018828:	eef0 0a47 	vmov.f32	s1, s14
 801882c:	eeb0 0a67 	vmov.f32	s0, s15
 8018830:	6839      	ldr	r1, [r7, #0]
 8018832:	6878      	ldr	r0, [r7, #4]
 8018834:	f7ff ff0d 	bl	8018652 <point_translate_rotate_scale>
}
 8018838:	bf00      	nop
 801883a:	3708      	adds	r7, #8
 801883c:	46bd      	mov	sp, r7
 801883e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018842:	b002      	add	sp, #8
 8018844:	4770      	bx	lr

08018846 <line_point_intersect>:

bool line_point_intersect(f32 px, f32 py, f32 qx, f32 qy, f32 rx, f32 ry) {
 8018846:	b480      	push	{r7}
 8018848:	b087      	sub	sp, #28
 801884a:	af00      	add	r7, sp, #0
 801884c:	ed87 0a05 	vstr	s0, [r7, #20]
 8018850:	edc7 0a04 	vstr	s1, [r7, #16]
 8018854:	ed87 1a03 	vstr	s2, [r7, #12]
 8018858:	edc7 1a02 	vstr	s3, [r7, #8]
 801885c:	ed87 2a01 	vstr	s4, [r7, #4]
 8018860:	edc7 2a00 	vstr	s5, [r7]
    return qx <= MAX(px, rx) && qx >= MAX(px, rx) && qy <= MAX(py, ry) && qy >= MAX(py, ry);
 8018864:	ed97 7a05 	vldr	s14, [r7, #20]
 8018868:	edd7 7a01 	vldr	s15, [r7, #4]
 801886c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018874:	dd02      	ble.n	801887c <line_point_intersect+0x36>
 8018876:	edd7 7a05 	vldr	s15, [r7, #20]
 801887a:	e001      	b.n	8018880 <line_point_intersect+0x3a>
 801887c:	edd7 7a01 	vldr	s15, [r7, #4]
 8018880:	ed97 7a03 	vldr	s14, [r7, #12]
 8018884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801888c:	db40      	blt.n	8018910 <line_point_intersect+0xca>
 801888e:	ed97 7a05 	vldr	s14, [r7, #20]
 8018892:	edd7 7a01 	vldr	s15, [r7, #4]
 8018896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801889a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801889e:	dd02      	ble.n	80188a6 <line_point_intersect+0x60>
 80188a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80188a4:	e001      	b.n	80188aa <line_point_intersect+0x64>
 80188a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80188aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80188ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80188b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188b6:	d82b      	bhi.n	8018910 <line_point_intersect+0xca>
 80188b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80188bc:	edd7 7a00 	vldr	s15, [r7]
 80188c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188c8:	dd02      	ble.n	80188d0 <line_point_intersect+0x8a>
 80188ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80188ce:	e001      	b.n	80188d4 <line_point_intersect+0x8e>
 80188d0:	edd7 7a00 	vldr	s15, [r7]
 80188d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80188d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80188dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188e0:	db16      	blt.n	8018910 <line_point_intersect+0xca>
 80188e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80188e6:	edd7 7a00 	vldr	s15, [r7]
 80188ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80188ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188f2:	dd02      	ble.n	80188fa <line_point_intersect+0xb4>
 80188f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80188f8:	e001      	b.n	80188fe <line_point_intersect+0xb8>
 80188fa:	edd7 7a00 	vldr	s15, [r7]
 80188fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8018902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801890a:	d801      	bhi.n	8018910 <line_point_intersect+0xca>
 801890c:	2301      	movs	r3, #1
 801890e:	e000      	b.n	8018912 <line_point_intersect+0xcc>
 8018910:	2300      	movs	r3, #0
 8018912:	f003 0301 	and.w	r3, r3, #1
 8018916:	b2db      	uxtb	r3, r3
}
 8018918:	4618      	mov	r0, r3
 801891a:	371c      	adds	r7, #28
 801891c:	46bd      	mov	sp, r7
 801891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018922:	4770      	bx	lr

08018924 <line_point_orientation>:

int line_point_orientation(f32 px, f32 py, f32 qx, f32 qy, f32 rx, f32 ry) {
 8018924:	b480      	push	{r7}
 8018926:	b089      	sub	sp, #36	; 0x24
 8018928:	af00      	add	r7, sp, #0
 801892a:	ed87 0a05 	vstr	s0, [r7, #20]
 801892e:	edc7 0a04 	vstr	s1, [r7, #16]
 8018932:	ed87 1a03 	vstr	s2, [r7, #12]
 8018936:	edc7 1a02 	vstr	s3, [r7, #8]
 801893a:	ed87 2a01 	vstr	s4, [r7, #4]
 801893e:	edc7 2a00 	vstr	s5, [r7]
    int val = (qy - py) * (rx - qx) - (qx - px) * (ry - qy);
 8018942:	ed97 7a02 	vldr	s14, [r7, #8]
 8018946:	edd7 7a04 	vldr	s15, [r7, #16]
 801894a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801894e:	edd7 6a01 	vldr	s13, [r7, #4]
 8018952:	edd7 7a03 	vldr	s15, [r7, #12]
 8018956:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801895a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801895e:	edd7 6a03 	vldr	s13, [r7, #12]
 8018962:	edd7 7a05 	vldr	s15, [r7, #20]
 8018966:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801896a:	ed97 6a00 	vldr	s12, [r7]
 801896e:	edd7 7a02 	vldr	s15, [r7, #8]
 8018972:	ee76 7a67 	vsub.f32	s15, s12, s15
 8018976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801897a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801897e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018982:	ee17 3a90 	vmov	r3, s15
 8018986:	61fb      	str	r3, [r7, #28]

    if (val == 0) {
 8018988:	69fb      	ldr	r3, [r7, #28]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d101      	bne.n	8018992 <line_point_orientation+0x6e>
    	return 0;
 801898e:	2300      	movs	r3, #0
 8018990:	e005      	b.n	801899e <line_point_orientation+0x7a>
    }

    return val > 0 ? 1: 2;
 8018992:	69fb      	ldr	r3, [r7, #28]
 8018994:	2b00      	cmp	r3, #0
 8018996:	dd01      	ble.n	801899c <line_point_orientation+0x78>
 8018998:	2301      	movs	r3, #1
 801899a:	e000      	b.n	801899e <line_point_orientation+0x7a>
 801899c:	2302      	movs	r3, #2
}
 801899e:	4618      	mov	r0, r3
 80189a0:	3724      	adds	r7, #36	; 0x24
 80189a2:	46bd      	mov	sp, r7
 80189a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a8:	4770      	bx	lr

080189aa <line_line_intersect>:

bool line_line_intersect(f32 p0x, f32 p0y, f32 q0x, f32 q0y, f32 p1x, f32 p1y, f32 q1x, f32 q1y) {
 80189aa:	b580      	push	{r7, lr}
 80189ac:	b08c      	sub	sp, #48	; 0x30
 80189ae:	af00      	add	r7, sp, #0
 80189b0:	ed87 0a07 	vstr	s0, [r7, #28]
 80189b4:	edc7 0a06 	vstr	s1, [r7, #24]
 80189b8:	ed87 1a05 	vstr	s2, [r7, #20]
 80189bc:	edc7 1a04 	vstr	s3, [r7, #16]
 80189c0:	ed87 2a03 	vstr	s4, [r7, #12]
 80189c4:	edc7 2a02 	vstr	s5, [r7, #8]
 80189c8:	ed87 3a01 	vstr	s6, [r7, #4]
 80189cc:	edc7 3a00 	vstr	s7, [r7]
    int o0 = line_point_orientation(p0x, p0y, q0x, q0y, p1x, p1y);
 80189d0:	edd7 2a02 	vldr	s5, [r7, #8]
 80189d4:	ed97 2a03 	vldr	s4, [r7, #12]
 80189d8:	edd7 1a04 	vldr	s3, [r7, #16]
 80189dc:	ed97 1a05 	vldr	s2, [r7, #20]
 80189e0:	edd7 0a06 	vldr	s1, [r7, #24]
 80189e4:	ed97 0a07 	vldr	s0, [r7, #28]
 80189e8:	f7ff ff9c 	bl	8018924 <line_point_orientation>
 80189ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    int o1 = line_point_orientation(p0x, p0y, q0x, q0y, q1x, q1y);
 80189ee:	edd7 2a00 	vldr	s5, [r7]
 80189f2:	ed97 2a01 	vldr	s4, [r7, #4]
 80189f6:	edd7 1a04 	vldr	s3, [r7, #16]
 80189fa:	ed97 1a05 	vldr	s2, [r7, #20]
 80189fe:	edd7 0a06 	vldr	s1, [r7, #24]
 8018a02:	ed97 0a07 	vldr	s0, [r7, #28]
 8018a06:	f7ff ff8d 	bl	8018924 <line_point_orientation>
 8018a0a:	62b8      	str	r0, [r7, #40]	; 0x28
    int o2 = line_point_orientation(p1x, p1y, q1x, q1y, p0x, p0y);
 8018a0c:	edd7 2a06 	vldr	s5, [r7, #24]
 8018a10:	ed97 2a07 	vldr	s4, [r7, #28]
 8018a14:	edd7 1a00 	vldr	s3, [r7]
 8018a18:	ed97 1a01 	vldr	s2, [r7, #4]
 8018a1c:	edd7 0a02 	vldr	s1, [r7, #8]
 8018a20:	ed97 0a03 	vldr	s0, [r7, #12]
 8018a24:	f7ff ff7e 	bl	8018924 <line_point_orientation>
 8018a28:	6278      	str	r0, [r7, #36]	; 0x24
    int o3 = line_point_orientation(p1x, p1y, q1x, q1y, q0x, q0y);
 8018a2a:	edd7 2a04 	vldr	s5, [r7, #16]
 8018a2e:	ed97 2a05 	vldr	s4, [r7, #20]
 8018a32:	edd7 1a00 	vldr	s3, [r7]
 8018a36:	ed97 1a01 	vldr	s2, [r7, #4]
 8018a3a:	edd7 0a02 	vldr	s1, [r7, #8]
 8018a3e:	ed97 0a03 	vldr	s0, [r7, #12]
 8018a42:	f7ff ff6f 	bl	8018924 <line_point_orientation>
 8018a46:	6238      	str	r0, [r7, #32]

    if (o0 != o1 && o2 != o3) {
 8018a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a4c:	429a      	cmp	r2, r3
 8018a4e:	d005      	beq.n	8018a5c <line_line_intersect+0xb2>
 8018a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a52:	6a3b      	ldr	r3, [r7, #32]
 8018a54:	429a      	cmp	r2, r3
 8018a56:	d001      	beq.n	8018a5c <line_line_intersect+0xb2>
        return true;
 8018a58:	2301      	movs	r3, #1
 8018a5a:	e058      	b.n	8018b0e <line_line_intersect+0x164>
    }

    if (o0 == 0 && line_point_intersect(p0x, p0y, p1x, p1y, q0x, q0y)) { return true; }
 8018a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d112      	bne.n	8018a88 <line_line_intersect+0xde>
 8018a62:	edd7 2a04 	vldr	s5, [r7, #16]
 8018a66:	ed97 2a05 	vldr	s4, [r7, #20]
 8018a6a:	edd7 1a02 	vldr	s3, [r7, #8]
 8018a6e:	ed97 1a03 	vldr	s2, [r7, #12]
 8018a72:	edd7 0a06 	vldr	s1, [r7, #24]
 8018a76:	ed97 0a07 	vldr	s0, [r7, #28]
 8018a7a:	f7ff fee4 	bl	8018846 <line_point_intersect>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d001      	beq.n	8018a88 <line_line_intersect+0xde>
 8018a84:	2301      	movs	r3, #1
 8018a86:	e042      	b.n	8018b0e <line_line_intersect+0x164>
    if (o1 == 0 && line_point_intersect(p0x, p0y, q1x, q1y, q0x, q0y)) { return true; }
 8018a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d112      	bne.n	8018ab4 <line_line_intersect+0x10a>
 8018a8e:	edd7 2a04 	vldr	s5, [r7, #16]
 8018a92:	ed97 2a05 	vldr	s4, [r7, #20]
 8018a96:	edd7 1a00 	vldr	s3, [r7]
 8018a9a:	ed97 1a01 	vldr	s2, [r7, #4]
 8018a9e:	edd7 0a06 	vldr	s1, [r7, #24]
 8018aa2:	ed97 0a07 	vldr	s0, [r7, #28]
 8018aa6:	f7ff fece 	bl	8018846 <line_point_intersect>
 8018aaa:	4603      	mov	r3, r0
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d001      	beq.n	8018ab4 <line_line_intersect+0x10a>
 8018ab0:	2301      	movs	r3, #1
 8018ab2:	e02c      	b.n	8018b0e <line_line_intersect+0x164>
    if (o2 == 0 && line_point_intersect(p1x, p1y, p0x, p0y, q1x, q1y)) { return true; }
 8018ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d112      	bne.n	8018ae0 <line_line_intersect+0x136>
 8018aba:	edd7 2a00 	vldr	s5, [r7]
 8018abe:	ed97 2a01 	vldr	s4, [r7, #4]
 8018ac2:	edd7 1a06 	vldr	s3, [r7, #24]
 8018ac6:	ed97 1a07 	vldr	s2, [r7, #28]
 8018aca:	edd7 0a02 	vldr	s1, [r7, #8]
 8018ace:	ed97 0a03 	vldr	s0, [r7, #12]
 8018ad2:	f7ff feb8 	bl	8018846 <line_point_intersect>
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d001      	beq.n	8018ae0 <line_line_intersect+0x136>
 8018adc:	2301      	movs	r3, #1
 8018ade:	e016      	b.n	8018b0e <line_line_intersect+0x164>
    if (o3 == 0 && line_point_intersect(p1x, p1y, q0x, q0y, q1x, q1y)) { return true; }
 8018ae0:	6a3b      	ldr	r3, [r7, #32]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d112      	bne.n	8018b0c <line_line_intersect+0x162>
 8018ae6:	edd7 2a00 	vldr	s5, [r7]
 8018aea:	ed97 2a01 	vldr	s4, [r7, #4]
 8018aee:	edd7 1a04 	vldr	s3, [r7, #16]
 8018af2:	ed97 1a05 	vldr	s2, [r7, #20]
 8018af6:	edd7 0a02 	vldr	s1, [r7, #8]
 8018afa:	ed97 0a03 	vldr	s0, [r7, #12]
 8018afe:	f7ff fea2 	bl	8018846 <line_point_intersect>
 8018b02:	4603      	mov	r3, r0
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d001      	beq.n	8018b0c <line_line_intersect+0x162>
 8018b08:	2301      	movs	r3, #1
 8018b0a:	e000      	b.n	8018b0e <line_line_intersect+0x164>

    return false;
 8018b0c:	2300      	movs	r3, #0
}
 8018b0e:	4618      	mov	r0, r3
 8018b10:	3730      	adds	r7, #48	; 0x30
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd80      	pop	{r7, pc}

08018b16 <shape_intersect>:

bool shape_intersect(Transform t0, Line *lines0, Transform t1, Line *lines1) {
 8018b16:	b084      	sub	sp, #16
 8018b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b1a:	b08f      	sub	sp, #60	; 0x3c
 8018b1c:	af04      	add	r7, sp, #16
 8018b1e:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8018b22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(i32 i0 = 0; i0 < SHAPE_SIZE; i0++) {
 8018b26:	2300      	movs	r3, #0
 8018b28:	627b      	str	r3, [r7, #36]	; 0x24
 8018b2a:	e10c      	b.n	8018d46 <shape_intersect+0x230>
		f32 p0x = lines0[i0].x0;
 8018b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b2e:	011b      	lsls	r3, r3, #4
 8018b30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018b32:	4413      	add	r3, r2
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	ee07 3a90 	vmov	s15, r3
 8018b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b3e:	edc7 7a07 	vstr	s15, [r7, #28]
		f32 p0y = lines0[i0].y0;
 8018b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b44:	011b      	lsls	r3, r3, #4
 8018b46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018b48:	4413      	add	r3, r2
 8018b4a:	685b      	ldr	r3, [r3, #4]
 8018b4c:	ee07 3a90 	vmov	s15, r3
 8018b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b54:	edc7 7a06 	vstr	s15, [r7, #24]
		f32 q0x = lines0[i0].x1;
 8018b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b5a:	011b      	lsls	r3, r3, #4
 8018b5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018b5e:	4413      	add	r3, r2
 8018b60:	689b      	ldr	r3, [r3, #8]
 8018b62:	ee07 3a90 	vmov	s15, r3
 8018b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b6a:	edc7 7a05 	vstr	s15, [r7, #20]
		f32 q0y = lines0[i0].y1;
 8018b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b70:	011b      	lsls	r3, r3, #4
 8018b72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018b74:	4413      	add	r3, r2
 8018b76:	68db      	ldr	r3, [r3, #12]
 8018b78:	ee07 3a90 	vmov	s15, r3
 8018b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018b80:	edc7 7a04 	vstr	s15, [r7, #16]

		if(p0x == 0 && p0y == 0 && q0x == 0 && q0y == 0) {
 8018b84:	edd7 7a07 	vldr	s15, [r7, #28]
 8018b88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b90:	d115      	bne.n	8018bbe <shape_intersect+0xa8>
 8018b92:	edd7 7a06 	vldr	s15, [r7, #24]
 8018b96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b9e:	d10e      	bne.n	8018bbe <shape_intersect+0xa8>
 8018ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8018ba4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bac:	d107      	bne.n	8018bbe <shape_intersect+0xa8>
 8018bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8018bb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bba:	f000 80c9 	beq.w	8018d50 <shape_intersect+0x23a>
			break;
		}

		point_transform(&p0x, &p0y, t0);
 8018bbe:	f107 0618 	add.w	r6, r7, #24
 8018bc2:	f107 051c 	add.w	r5, r7, #28
 8018bc6:	466c      	mov	r4, sp
 8018bc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018bcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018bd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018bd8:	cb0c      	ldmia	r3, {r2, r3}
 8018bda:	4631      	mov	r1, r6
 8018bdc:	4628      	mov	r0, r5
 8018bde:	f7ff fe09 	bl	80187f4 <point_transform>
		point_transform(&q0x, &q0y, t0);
 8018be2:	f107 0610 	add.w	r6, r7, #16
 8018be6:	f107 0514 	add.w	r5, r7, #20
 8018bea:	466c      	mov	r4, sp
 8018bec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8018bf0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018bf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018bf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018bfc:	cb0c      	ldmia	r3, {r2, r3}
 8018bfe:	4631      	mov	r1, r6
 8018c00:	4628      	mov	r0, r5
 8018c02:	f7ff fdf7 	bl	80187f4 <point_transform>

		for(i32 i1 = 0; i1 < SHAPE_SIZE; i1++) {
 8018c06:	2300      	movs	r3, #0
 8018c08:	623b      	str	r3, [r7, #32]
 8018c0a:	e093      	b.n	8018d34 <shape_intersect+0x21e>
			f32 p1x = lines1[i1].x0;
 8018c0c:	6a3b      	ldr	r3, [r7, #32]
 8018c0e:	011b      	lsls	r3, r3, #4
 8018c10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018c12:	4413      	add	r3, r2
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	ee07 3a90 	vmov	s15, r3
 8018c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c1e:	edc7 7a03 	vstr	s15, [r7, #12]
			f32 p1y = lines1[i1].y0;
 8018c22:	6a3b      	ldr	r3, [r7, #32]
 8018c24:	011b      	lsls	r3, r3, #4
 8018c26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018c28:	4413      	add	r3, r2
 8018c2a:	685b      	ldr	r3, [r3, #4]
 8018c2c:	ee07 3a90 	vmov	s15, r3
 8018c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c34:	edc7 7a02 	vstr	s15, [r7, #8]
			f32 q1x = lines1[i1].x1;
 8018c38:	6a3b      	ldr	r3, [r7, #32]
 8018c3a:	011b      	lsls	r3, r3, #4
 8018c3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018c3e:	4413      	add	r3, r2
 8018c40:	689b      	ldr	r3, [r3, #8]
 8018c42:	ee07 3a90 	vmov	s15, r3
 8018c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c4a:	edc7 7a01 	vstr	s15, [r7, #4]
			f32 q1y = lines1[i1].y1;
 8018c4e:	6a3b      	ldr	r3, [r7, #32]
 8018c50:	011b      	lsls	r3, r3, #4
 8018c52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018c54:	4413      	add	r3, r2
 8018c56:	68db      	ldr	r3, [r3, #12]
 8018c58:	ee07 3a90 	vmov	s15, r3
 8018c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c60:	edc7 7a00 	vstr	s15, [r7]

			if(p1x == 0 && p1y == 0 && q1x == 0 && q1y == 0) {
 8018c64:	edd7 7a03 	vldr	s15, [r7, #12]
 8018c68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c70:	d114      	bne.n	8018c9c <shape_intersect+0x186>
 8018c72:	edd7 7a02 	vldr	s15, [r7, #8]
 8018c76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c7e:	d10d      	bne.n	8018c9c <shape_intersect+0x186>
 8018c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8018c84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c8c:	d106      	bne.n	8018c9c <shape_intersect+0x186>
 8018c8e:	edd7 7a00 	vldr	s15, [r7]
 8018c92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c9a:	d050      	beq.n	8018d3e <shape_intersect+0x228>
				break;
			}

			point_transform(&p1x, &p1y, t1);
 8018c9c:	f107 0608 	add.w	r6, r7, #8
 8018ca0:	f107 050c 	add.w	r5, r7, #12
 8018ca4:	466c      	mov	r4, sp
 8018ca6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8018caa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018cb2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018cb6:	cb0c      	ldmia	r3, {r2, r3}
 8018cb8:	4631      	mov	r1, r6
 8018cba:	4628      	mov	r0, r5
 8018cbc:	f7ff fd9a 	bl	80187f4 <point_transform>
			point_transform(&q1x, &q1y, t1);
 8018cc0:	463e      	mov	r6, r7
 8018cc2:	1d3d      	adds	r5, r7, #4
 8018cc4:	466c      	mov	r4, sp
 8018cc6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8018cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018cce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018cd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8018cd6:	cb0c      	ldmia	r3, {r2, r3}
 8018cd8:	4631      	mov	r1, r6
 8018cda:	4628      	mov	r0, r5
 8018cdc:	f7ff fd8a 	bl	80187f4 <point_transform>

			if(line_line_intersect(p0x, p0y, q0x, q0y, p1x, p1y, q1x, q1y)){
 8018ce0:	edd7 7a07 	vldr	s15, [r7, #28]
 8018ce4:	ed97 7a06 	vldr	s14, [r7, #24]
 8018ce8:	edd7 6a05 	vldr	s13, [r7, #20]
 8018cec:	ed97 6a04 	vldr	s12, [r7, #16]
 8018cf0:	edd7 5a03 	vldr	s11, [r7, #12]
 8018cf4:	ed97 5a02 	vldr	s10, [r7, #8]
 8018cf8:	edd7 4a01 	vldr	s9, [r7, #4]
 8018cfc:	ed97 4a00 	vldr	s8, [r7]
 8018d00:	eef0 3a44 	vmov.f32	s7, s8
 8018d04:	eeb0 3a64 	vmov.f32	s6, s9
 8018d08:	eef0 2a45 	vmov.f32	s5, s10
 8018d0c:	eeb0 2a65 	vmov.f32	s4, s11
 8018d10:	eef0 1a46 	vmov.f32	s3, s12
 8018d14:	eeb0 1a66 	vmov.f32	s2, s13
 8018d18:	eef0 0a47 	vmov.f32	s1, s14
 8018d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8018d20:	f7ff fe43 	bl	80189aa <line_line_intersect>
 8018d24:	4603      	mov	r3, r0
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d001      	beq.n	8018d2e <shape_intersect+0x218>
				return true;
 8018d2a:	2301      	movs	r3, #1
 8018d2c:	e012      	b.n	8018d54 <shape_intersect+0x23e>
		for(i32 i1 = 0; i1 < SHAPE_SIZE; i1++) {
 8018d2e:	6a3b      	ldr	r3, [r7, #32]
 8018d30:	3301      	adds	r3, #1
 8018d32:	623b      	str	r3, [r7, #32]
 8018d34:	6a3b      	ldr	r3, [r7, #32]
 8018d36:	2b0c      	cmp	r3, #12
 8018d38:	f77f af68 	ble.w	8018c0c <shape_intersect+0xf6>
 8018d3c:	e000      	b.n	8018d40 <shape_intersect+0x22a>
				break;
 8018d3e:	bf00      	nop
	for(i32 i0 = 0; i0 < SHAPE_SIZE; i0++) {
 8018d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d42:	3301      	adds	r3, #1
 8018d44:	627b      	str	r3, [r7, #36]	; 0x24
 8018d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d48:	2b0c      	cmp	r3, #12
 8018d4a:	f77f aeef 	ble.w	8018b2c <shape_intersect+0x16>
 8018d4e:	e000      	b.n	8018d52 <shape_intersect+0x23c>
			break;
 8018d50:	bf00      	nop
			}
		}
	}

	return false;
 8018d52:	2300      	movs	r3, #0
}
 8018d54:	4618      	mov	r0, r3
 8018d56:	372c      	adds	r7, #44	; 0x2c
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018d5e:	b004      	add	sp, #16
 8018d60:	4770      	bx	lr
	...

08018d64 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8018d68:	2200      	movs	r2, #0
 8018d6a:	4912      	ldr	r1, [pc, #72]	; (8018db4 <MX_USB_Device_Init+0x50>)
 8018d6c:	4812      	ldr	r0, [pc, #72]	; (8018db8 <MX_USB_Device_Init+0x54>)
 8018d6e:	f7fc facd 	bl	801530c <USBD_Init>
 8018d72:	4603      	mov	r3, r0
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d001      	beq.n	8018d7c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8018d78:	f7e9 fc55 	bl	8002626 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8018d7c:	490f      	ldr	r1, [pc, #60]	; (8018dbc <MX_USB_Device_Init+0x58>)
 8018d7e:	480e      	ldr	r0, [pc, #56]	; (8018db8 <MX_USB_Device_Init+0x54>)
 8018d80:	f7fc faf4 	bl	801536c <USBD_RegisterClass>
 8018d84:	4603      	mov	r3, r0
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d001      	beq.n	8018d8e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8018d8a:	f7e9 fc4c 	bl	8002626 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8018d8e:	490c      	ldr	r1, [pc, #48]	; (8018dc0 <MX_USB_Device_Init+0x5c>)
 8018d90:	4809      	ldr	r0, [pc, #36]	; (8018db8 <MX_USB_Device_Init+0x54>)
 8018d92:	f7fc fa15 	bl	80151c0 <USBD_CDC_RegisterInterface>
 8018d96:	4603      	mov	r3, r0
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d001      	beq.n	8018da0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8018d9c:	f7e9 fc43 	bl	8002626 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8018da0:	4805      	ldr	r0, [pc, #20]	; (8018db8 <MX_USB_Device_Init+0x54>)
 8018da2:	f7fc fb0a 	bl	80153ba <USBD_Start>
 8018da6:	4603      	mov	r3, r0
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d001      	beq.n	8018db0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8018dac:	f7e9 fc3b 	bl	8002626 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8018db0:	bf00      	nop
 8018db2:	bd80      	pop	{r7, pc}
 8018db4:	200007c0 	.word	0x200007c0
 8018db8:	20003e18 	.word	0x20003e18
 8018dbc:	20000028 	.word	0x20000028
 8018dc0:	200007ac 	.word	0x200007ac

08018dc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018dc8:	2200      	movs	r2, #0
 8018dca:	4905      	ldr	r1, [pc, #20]	; (8018de0 <CDC_Init_FS+0x1c>)
 8018dcc:	4805      	ldr	r0, [pc, #20]	; (8018de4 <CDC_Init_FS+0x20>)
 8018dce:	f7fc fa0c 	bl	80151ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018dd2:	4905      	ldr	r1, [pc, #20]	; (8018de8 <CDC_Init_FS+0x24>)
 8018dd4:	4803      	ldr	r0, [pc, #12]	; (8018de4 <CDC_Init_FS+0x20>)
 8018dd6:	f7fc fa26 	bl	8015226 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018dda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	bd80      	pop	{r7, pc}
 8018de0:	200048e8 	.word	0x200048e8
 8018de4:	20003e18 	.word	0x20003e18
 8018de8:	200040e8 	.word	0x200040e8

08018dec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018dec:	b480      	push	{r7}
 8018dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018df0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	46bd      	mov	sp, r7
 8018df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfa:	4770      	bx	lr

08018dfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018dfc:	b480      	push	{r7}
 8018dfe:	b083      	sub	sp, #12
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	4603      	mov	r3, r0
 8018e04:	6039      	str	r1, [r7, #0]
 8018e06:	71fb      	strb	r3, [r7, #7]
 8018e08:	4613      	mov	r3, r2
 8018e0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018e0c:	79fb      	ldrb	r3, [r7, #7]
 8018e0e:	2b23      	cmp	r3, #35	; 0x23
 8018e10:	d84a      	bhi.n	8018ea8 <CDC_Control_FS+0xac>
 8018e12:	a201      	add	r2, pc, #4	; (adr r2, 8018e18 <CDC_Control_FS+0x1c>)
 8018e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e18:	08018ea9 	.word	0x08018ea9
 8018e1c:	08018ea9 	.word	0x08018ea9
 8018e20:	08018ea9 	.word	0x08018ea9
 8018e24:	08018ea9 	.word	0x08018ea9
 8018e28:	08018ea9 	.word	0x08018ea9
 8018e2c:	08018ea9 	.word	0x08018ea9
 8018e30:	08018ea9 	.word	0x08018ea9
 8018e34:	08018ea9 	.word	0x08018ea9
 8018e38:	08018ea9 	.word	0x08018ea9
 8018e3c:	08018ea9 	.word	0x08018ea9
 8018e40:	08018ea9 	.word	0x08018ea9
 8018e44:	08018ea9 	.word	0x08018ea9
 8018e48:	08018ea9 	.word	0x08018ea9
 8018e4c:	08018ea9 	.word	0x08018ea9
 8018e50:	08018ea9 	.word	0x08018ea9
 8018e54:	08018ea9 	.word	0x08018ea9
 8018e58:	08018ea9 	.word	0x08018ea9
 8018e5c:	08018ea9 	.word	0x08018ea9
 8018e60:	08018ea9 	.word	0x08018ea9
 8018e64:	08018ea9 	.word	0x08018ea9
 8018e68:	08018ea9 	.word	0x08018ea9
 8018e6c:	08018ea9 	.word	0x08018ea9
 8018e70:	08018ea9 	.word	0x08018ea9
 8018e74:	08018ea9 	.word	0x08018ea9
 8018e78:	08018ea9 	.word	0x08018ea9
 8018e7c:	08018ea9 	.word	0x08018ea9
 8018e80:	08018ea9 	.word	0x08018ea9
 8018e84:	08018ea9 	.word	0x08018ea9
 8018e88:	08018ea9 	.word	0x08018ea9
 8018e8c:	08018ea9 	.word	0x08018ea9
 8018e90:	08018ea9 	.word	0x08018ea9
 8018e94:	08018ea9 	.word	0x08018ea9
 8018e98:	08018ea9 	.word	0x08018ea9
 8018e9c:	08018ea9 	.word	0x08018ea9
 8018ea0:	08018ea9 	.word	0x08018ea9
 8018ea4:	08018ea9 	.word	0x08018ea9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018ea8:	bf00      	nop
  }

  return (USBD_OK);
 8018eaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018eac:	4618      	mov	r0, r3
 8018eae:	370c      	adds	r7, #12
 8018eb0:	46bd      	mov	sp, r7
 8018eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb6:	4770      	bx	lr

08018eb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018eb8:	b580      	push	{r7, lr}
 8018eba:	b082      	sub	sp, #8
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
 8018ec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018ec2:	6879      	ldr	r1, [r7, #4]
 8018ec4:	4805      	ldr	r0, [pc, #20]	; (8018edc <CDC_Receive_FS+0x24>)
 8018ec6:	f7fc f9ae 	bl	8015226 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018eca:	4804      	ldr	r0, [pc, #16]	; (8018edc <CDC_Receive_FS+0x24>)
 8018ecc:	f7fc f9f4 	bl	80152b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018ed0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	3708      	adds	r7, #8
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	bd80      	pop	{r7, pc}
 8018eda:	bf00      	nop
 8018edc:	20003e18 	.word	0x20003e18

08018ee0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b084      	sub	sp, #16
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
 8018ee8:	460b      	mov	r3, r1
 8018eea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018eec:	2300      	movs	r3, #0
 8018eee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018ef0:	4b0d      	ldr	r3, [pc, #52]	; (8018f28 <CDC_Transmit_FS+0x48>)
 8018ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018ef6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018ef8:	68bb      	ldr	r3, [r7, #8]
 8018efa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d001      	beq.n	8018f06 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8018f02:	2301      	movs	r3, #1
 8018f04:	e00b      	b.n	8018f1e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018f06:	887b      	ldrh	r3, [r7, #2]
 8018f08:	461a      	mov	r2, r3
 8018f0a:	6879      	ldr	r1, [r7, #4]
 8018f0c:	4806      	ldr	r0, [pc, #24]	; (8018f28 <CDC_Transmit_FS+0x48>)
 8018f0e:	f7fc f96c 	bl	80151ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018f12:	4805      	ldr	r0, [pc, #20]	; (8018f28 <CDC_Transmit_FS+0x48>)
 8018f14:	f7fc f9a0 	bl	8015258 <USBD_CDC_TransmitPacket>
 8018f18:	4603      	mov	r3, r0
 8018f1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018f1e:	4618      	mov	r0, r3
 8018f20:	3710      	adds	r7, #16
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd80      	pop	{r7, pc}
 8018f26:	bf00      	nop
 8018f28:	20003e18 	.word	0x20003e18

08018f2c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018f2c:	b480      	push	{r7}
 8018f2e:	b087      	sub	sp, #28
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	60f8      	str	r0, [r7, #12]
 8018f34:	60b9      	str	r1, [r7, #8]
 8018f36:	4613      	mov	r3, r2
 8018f38:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	371c      	adds	r7, #28
 8018f46:	46bd      	mov	sp, r7
 8018f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f4c:	4770      	bx	lr
	...

08018f50 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f50:	b480      	push	{r7}
 8018f52:	b083      	sub	sp, #12
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	4603      	mov	r3, r0
 8018f58:	6039      	str	r1, [r7, #0]
 8018f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	2212      	movs	r2, #18
 8018f60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8018f62:	4b03      	ldr	r3, [pc, #12]	; (8018f70 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8018f64:	4618      	mov	r0, r3
 8018f66:	370c      	adds	r7, #12
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6e:	4770      	bx	lr
 8018f70:	200007e0 	.word	0x200007e0

08018f74 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f74:	b480      	push	{r7}
 8018f76:	b083      	sub	sp, #12
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	6039      	str	r1, [r7, #0]
 8018f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	2204      	movs	r2, #4
 8018f84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018f86:	4b03      	ldr	r3, [pc, #12]	; (8018f94 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018f88:	4618      	mov	r0, r3
 8018f8a:	370c      	adds	r7, #12
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f92:	4770      	bx	lr
 8018f94:	200007f4 	.word	0x200007f4

08018f98 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b082      	sub	sp, #8
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	6039      	str	r1, [r7, #0]
 8018fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018fa4:	79fb      	ldrb	r3, [r7, #7]
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	d105      	bne.n	8018fb6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018faa:	683a      	ldr	r2, [r7, #0]
 8018fac:	4907      	ldr	r1, [pc, #28]	; (8018fcc <USBD_CDC_ProductStrDescriptor+0x34>)
 8018fae:	4808      	ldr	r0, [pc, #32]	; (8018fd0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018fb0:	f7fd f9eb 	bl	801638a <USBD_GetString>
 8018fb4:	e004      	b.n	8018fc0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018fb6:	683a      	ldr	r2, [r7, #0]
 8018fb8:	4904      	ldr	r1, [pc, #16]	; (8018fcc <USBD_CDC_ProductStrDescriptor+0x34>)
 8018fba:	4805      	ldr	r0, [pc, #20]	; (8018fd0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018fbc:	f7fd f9e5 	bl	801638a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018fc0:	4b02      	ldr	r3, [pc, #8]	; (8018fcc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	3708      	adds	r7, #8
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	bd80      	pop	{r7, pc}
 8018fca:	bf00      	nop
 8018fcc:	200050e8 	.word	0x200050e8
 8018fd0:	0801d228 	.word	0x0801d228

08018fd4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b082      	sub	sp, #8
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	4603      	mov	r3, r0
 8018fdc:	6039      	str	r1, [r7, #0]
 8018fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018fe0:	683a      	ldr	r2, [r7, #0]
 8018fe2:	4904      	ldr	r1, [pc, #16]	; (8018ff4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8018fe4:	4804      	ldr	r0, [pc, #16]	; (8018ff8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8018fe6:	f7fd f9d0 	bl	801638a <USBD_GetString>
  return USBD_StrDesc;
 8018fea:	4b02      	ldr	r3, [pc, #8]	; (8018ff4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8018fec:	4618      	mov	r0, r3
 8018fee:	3708      	adds	r7, #8
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd80      	pop	{r7, pc}
 8018ff4:	200050e8 	.word	0x200050e8
 8018ff8:	0801d240 	.word	0x0801d240

08018ffc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b082      	sub	sp, #8
 8019000:	af00      	add	r7, sp, #0
 8019002:	4603      	mov	r3, r0
 8019004:	6039      	str	r1, [r7, #0]
 8019006:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019008:	683b      	ldr	r3, [r7, #0]
 801900a:	221a      	movs	r2, #26
 801900c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801900e:	f000 f843 	bl	8019098 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8019012:	4b02      	ldr	r3, [pc, #8]	; (801901c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8019014:	4618      	mov	r0, r3
 8019016:	3708      	adds	r7, #8
 8019018:	46bd      	mov	sp, r7
 801901a:	bd80      	pop	{r7, pc}
 801901c:	200007f8 	.word	0x200007f8

08019020 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b082      	sub	sp, #8
 8019024:	af00      	add	r7, sp, #0
 8019026:	4603      	mov	r3, r0
 8019028:	6039      	str	r1, [r7, #0]
 801902a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801902c:	79fb      	ldrb	r3, [r7, #7]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d105      	bne.n	801903e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8019032:	683a      	ldr	r2, [r7, #0]
 8019034:	4907      	ldr	r1, [pc, #28]	; (8019054 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8019036:	4808      	ldr	r0, [pc, #32]	; (8019058 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019038:	f7fd f9a7 	bl	801638a <USBD_GetString>
 801903c:	e004      	b.n	8019048 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801903e:	683a      	ldr	r2, [r7, #0]
 8019040:	4904      	ldr	r1, [pc, #16]	; (8019054 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8019042:	4805      	ldr	r0, [pc, #20]	; (8019058 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8019044:	f7fd f9a1 	bl	801638a <USBD_GetString>
  }
  return USBD_StrDesc;
 8019048:	4b02      	ldr	r3, [pc, #8]	; (8019054 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801904a:	4618      	mov	r0, r3
 801904c:	3708      	adds	r7, #8
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}
 8019052:	bf00      	nop
 8019054:	200050e8 	.word	0x200050e8
 8019058:	0801d254 	.word	0x0801d254

0801905c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b082      	sub	sp, #8
 8019060:	af00      	add	r7, sp, #0
 8019062:	4603      	mov	r3, r0
 8019064:	6039      	str	r1, [r7, #0]
 8019066:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019068:	79fb      	ldrb	r3, [r7, #7]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d105      	bne.n	801907a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801906e:	683a      	ldr	r2, [r7, #0]
 8019070:	4907      	ldr	r1, [pc, #28]	; (8019090 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8019072:	4808      	ldr	r0, [pc, #32]	; (8019094 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8019074:	f7fd f989 	bl	801638a <USBD_GetString>
 8019078:	e004      	b.n	8019084 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801907a:	683a      	ldr	r2, [r7, #0]
 801907c:	4904      	ldr	r1, [pc, #16]	; (8019090 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801907e:	4805      	ldr	r0, [pc, #20]	; (8019094 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8019080:	f7fd f983 	bl	801638a <USBD_GetString>
  }
  return USBD_StrDesc;
 8019084:	4b02      	ldr	r3, [pc, #8]	; (8019090 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8019086:	4618      	mov	r0, r3
 8019088:	3708      	adds	r7, #8
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}
 801908e:	bf00      	nop
 8019090:	200050e8 	.word	0x200050e8
 8019094:	0801d260 	.word	0x0801d260

08019098 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b084      	sub	sp, #16
 801909c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801909e:	4b0f      	ldr	r3, [pc, #60]	; (80190dc <Get_SerialNum+0x44>)
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80190a4:	4b0e      	ldr	r3, [pc, #56]	; (80190e0 <Get_SerialNum+0x48>)
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80190aa:	4b0e      	ldr	r3, [pc, #56]	; (80190e4 <Get_SerialNum+0x4c>)
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80190b0:	68fa      	ldr	r2, [r7, #12]
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	4413      	add	r3, r2
 80190b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80190b8:	68fb      	ldr	r3, [r7, #12]
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d009      	beq.n	80190d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80190be:	2208      	movs	r2, #8
 80190c0:	4909      	ldr	r1, [pc, #36]	; (80190e8 <Get_SerialNum+0x50>)
 80190c2:	68f8      	ldr	r0, [r7, #12]
 80190c4:	f000 f814 	bl	80190f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80190c8:	2204      	movs	r2, #4
 80190ca:	4908      	ldr	r1, [pc, #32]	; (80190ec <Get_SerialNum+0x54>)
 80190cc:	68b8      	ldr	r0, [r7, #8]
 80190ce:	f000 f80f 	bl	80190f0 <IntToUnicode>
  }
}
 80190d2:	bf00      	nop
 80190d4:	3710      	adds	r7, #16
 80190d6:	46bd      	mov	sp, r7
 80190d8:	bd80      	pop	{r7, pc}
 80190da:	bf00      	nop
 80190dc:	1fff7590 	.word	0x1fff7590
 80190e0:	1fff7594 	.word	0x1fff7594
 80190e4:	1fff7598 	.word	0x1fff7598
 80190e8:	200007fa 	.word	0x200007fa
 80190ec:	2000080a 	.word	0x2000080a

080190f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80190f0:	b480      	push	{r7}
 80190f2:	b087      	sub	sp, #28
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	60f8      	str	r0, [r7, #12]
 80190f8:	60b9      	str	r1, [r7, #8]
 80190fa:	4613      	mov	r3, r2
 80190fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80190fe:	2300      	movs	r3, #0
 8019100:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019102:	2300      	movs	r3, #0
 8019104:	75fb      	strb	r3, [r7, #23]
 8019106:	e027      	b.n	8019158 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019108:	68fb      	ldr	r3, [r7, #12]
 801910a:	0f1b      	lsrs	r3, r3, #28
 801910c:	2b09      	cmp	r3, #9
 801910e:	d80b      	bhi.n	8019128 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	0f1b      	lsrs	r3, r3, #28
 8019114:	b2da      	uxtb	r2, r3
 8019116:	7dfb      	ldrb	r3, [r7, #23]
 8019118:	005b      	lsls	r3, r3, #1
 801911a:	4619      	mov	r1, r3
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	440b      	add	r3, r1
 8019120:	3230      	adds	r2, #48	; 0x30
 8019122:	b2d2      	uxtb	r2, r2
 8019124:	701a      	strb	r2, [r3, #0]
 8019126:	e00a      	b.n	801913e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	0f1b      	lsrs	r3, r3, #28
 801912c:	b2da      	uxtb	r2, r3
 801912e:	7dfb      	ldrb	r3, [r7, #23]
 8019130:	005b      	lsls	r3, r3, #1
 8019132:	4619      	mov	r1, r3
 8019134:	68bb      	ldr	r3, [r7, #8]
 8019136:	440b      	add	r3, r1
 8019138:	3237      	adds	r2, #55	; 0x37
 801913a:	b2d2      	uxtb	r2, r2
 801913c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801913e:	68fb      	ldr	r3, [r7, #12]
 8019140:	011b      	lsls	r3, r3, #4
 8019142:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019144:	7dfb      	ldrb	r3, [r7, #23]
 8019146:	005b      	lsls	r3, r3, #1
 8019148:	3301      	adds	r3, #1
 801914a:	68ba      	ldr	r2, [r7, #8]
 801914c:	4413      	add	r3, r2
 801914e:	2200      	movs	r2, #0
 8019150:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019152:	7dfb      	ldrb	r3, [r7, #23]
 8019154:	3301      	adds	r3, #1
 8019156:	75fb      	strb	r3, [r7, #23]
 8019158:	7dfa      	ldrb	r2, [r7, #23]
 801915a:	79fb      	ldrb	r3, [r7, #7]
 801915c:	429a      	cmp	r2, r3
 801915e:	d3d3      	bcc.n	8019108 <IntToUnicode+0x18>
  }
}
 8019160:	bf00      	nop
 8019162:	bf00      	nop
 8019164:	371c      	adds	r7, #28
 8019166:	46bd      	mov	sp, r7
 8019168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801916c:	4770      	bx	lr
	...

08019170 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019170:	b580      	push	{r7, lr}
 8019172:	b098      	sub	sp, #96	; 0x60
 8019174:	af00      	add	r7, sp, #0
 8019176:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8019178:	f107 030c 	add.w	r3, r7, #12
 801917c:	2254      	movs	r2, #84	; 0x54
 801917e:	2100      	movs	r1, #0
 8019180:	4618      	mov	r0, r3
 8019182:	f002 fae5 	bl	801b750 <memset>
  if(pcdHandle->Instance==USB)
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	4a15      	ldr	r2, [pc, #84]	; (80191e0 <HAL_PCD_MspInit+0x70>)
 801918c:	4293      	cmp	r3, r2
 801918e:	d122      	bne.n	80191d6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8019190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019194:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8019196:	2300      	movs	r3, #0
 8019198:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801919a:	f107 030c 	add.w	r3, r7, #12
 801919e:	4618      	mov	r0, r3
 80191a0:	f7f2 f9f2 	bl	800b588 <HAL_RCCEx_PeriphCLKConfig>
 80191a4:	4603      	mov	r3, r0
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d001      	beq.n	80191ae <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80191aa:	f7e9 fa3c 	bl	8002626 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80191ae:	4b0d      	ldr	r3, [pc, #52]	; (80191e4 <HAL_PCD_MspInit+0x74>)
 80191b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80191b2:	4a0c      	ldr	r2, [pc, #48]	; (80191e4 <HAL_PCD_MspInit+0x74>)
 80191b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80191b8:	6593      	str	r3, [r2, #88]	; 0x58
 80191ba:	4b0a      	ldr	r3, [pc, #40]	; (80191e4 <HAL_PCD_MspInit+0x74>)
 80191bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80191be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80191c2:	60bb      	str	r3, [r7, #8]
 80191c4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80191c6:	2200      	movs	r2, #0
 80191c8:	2100      	movs	r1, #0
 80191ca:	2014      	movs	r0, #20
 80191cc:	f7ed fe76 	bl	8006ebc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80191d0:	2014      	movs	r0, #20
 80191d2:	f7ed fe9d 	bl	8006f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80191d6:	bf00      	nop
 80191d8:	3760      	adds	r7, #96	; 0x60
 80191da:	46bd      	mov	sp, r7
 80191dc:	bd80      	pop	{r7, pc}
 80191de:	bf00      	nop
 80191e0:	40005c00 	.word	0x40005c00
 80191e4:	40021000 	.word	0x40021000

080191e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b082      	sub	sp, #8
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80191fc:	4619      	mov	r1, r3
 80191fe:	4610      	mov	r0, r2
 8019200:	f7fc f926 	bl	8015450 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8019204:	bf00      	nop
 8019206:	3708      	adds	r7, #8
 8019208:	46bd      	mov	sp, r7
 801920a:	bd80      	pop	{r7, pc}

0801920c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b082      	sub	sp, #8
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
 8019214:	460b      	mov	r3, r1
 8019216:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801921e:	78fa      	ldrb	r2, [r7, #3]
 8019220:	6879      	ldr	r1, [r7, #4]
 8019222:	4613      	mov	r3, r2
 8019224:	009b      	lsls	r3, r3, #2
 8019226:	4413      	add	r3, r2
 8019228:	00db      	lsls	r3, r3, #3
 801922a:	440b      	add	r3, r1
 801922c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8019230:	681a      	ldr	r2, [r3, #0]
 8019232:	78fb      	ldrb	r3, [r7, #3]
 8019234:	4619      	mov	r1, r3
 8019236:	f7fc f960 	bl	80154fa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801923a:	bf00      	nop
 801923c:	3708      	adds	r7, #8
 801923e:	46bd      	mov	sp, r7
 8019240:	bd80      	pop	{r7, pc}

08019242 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019242:	b580      	push	{r7, lr}
 8019244:	b082      	sub	sp, #8
 8019246:	af00      	add	r7, sp, #0
 8019248:	6078      	str	r0, [r7, #4]
 801924a:	460b      	mov	r3, r1
 801924c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8019254:	78fa      	ldrb	r2, [r7, #3]
 8019256:	6879      	ldr	r1, [r7, #4]
 8019258:	4613      	mov	r3, r2
 801925a:	009b      	lsls	r3, r3, #2
 801925c:	4413      	add	r3, r2
 801925e:	00db      	lsls	r3, r3, #3
 8019260:	440b      	add	r3, r1
 8019262:	333c      	adds	r3, #60	; 0x3c
 8019264:	681a      	ldr	r2, [r3, #0]
 8019266:	78fb      	ldrb	r3, [r7, #3]
 8019268:	4619      	mov	r1, r3
 801926a:	f7fc f9a9 	bl	80155c0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801926e:	bf00      	nop
 8019270:	3708      	adds	r7, #8
 8019272:	46bd      	mov	sp, r7
 8019274:	bd80      	pop	{r7, pc}

08019276 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019276:	b580      	push	{r7, lr}
 8019278:	b082      	sub	sp, #8
 801927a:	af00      	add	r7, sp, #0
 801927c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8019284:	4618      	mov	r0, r3
 8019286:	f7fc fabd 	bl	8015804 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801928a:	bf00      	nop
 801928c:	3708      	adds	r7, #8
 801928e:	46bd      	mov	sp, r7
 8019290:	bd80      	pop	{r7, pc}

08019292 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019292:	b580      	push	{r7, lr}
 8019294:	b084      	sub	sp, #16
 8019296:	af00      	add	r7, sp, #0
 8019298:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801929a:	2301      	movs	r3, #1
 801929c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	689b      	ldr	r3, [r3, #8]
 80192a2:	2b02      	cmp	r3, #2
 80192a4:	d001      	beq.n	80192aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80192a6:	f7e9 f9be 	bl	8002626 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80192b0:	7bfa      	ldrb	r2, [r7, #15]
 80192b2:	4611      	mov	r1, r2
 80192b4:	4618      	mov	r0, r3
 80192b6:	f7fc fa67 	bl	8015788 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80192c0:	4618      	mov	r0, r3
 80192c2:	f7fc fa13 	bl	80156ec <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80192c6:	bf00      	nop
 80192c8:	3710      	adds	r7, #16
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}
	...

080192d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b082      	sub	sp, #8
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80192de:	4618      	mov	r0, r3
 80192e0:	f7fc fa62 	bl	80157a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	699b      	ldr	r3, [r3, #24]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d005      	beq.n	80192f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80192ec:	4b04      	ldr	r3, [pc, #16]	; (8019300 <HAL_PCD_SuspendCallback+0x30>)
 80192ee:	691b      	ldr	r3, [r3, #16]
 80192f0:	4a03      	ldr	r2, [pc, #12]	; (8019300 <HAL_PCD_SuspendCallback+0x30>)
 80192f2:	f043 0306 	orr.w	r3, r3, #6
 80192f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80192f8:	bf00      	nop
 80192fa:	3708      	adds	r7, #8
 80192fc:	46bd      	mov	sp, r7
 80192fe:	bd80      	pop	{r7, pc}
 8019300:	e000ed00 	.word	0xe000ed00

08019304 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b082      	sub	sp, #8
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	699b      	ldr	r3, [r3, #24]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d007      	beq.n	8019324 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019314:	4b08      	ldr	r3, [pc, #32]	; (8019338 <HAL_PCD_ResumeCallback+0x34>)
 8019316:	691b      	ldr	r3, [r3, #16]
 8019318:	4a07      	ldr	r2, [pc, #28]	; (8019338 <HAL_PCD_ResumeCallback+0x34>)
 801931a:	f023 0306 	bic.w	r3, r3, #6
 801931e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019320:	f000 f9fa 	bl	8019718 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801932a:	4618      	mov	r0, r3
 801932c:	f7fc fa52 	bl	80157d4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8019330:	bf00      	nop
 8019332:	3708      	adds	r7, #8
 8019334:	46bd      	mov	sp, r7
 8019336:	bd80      	pop	{r7, pc}
 8019338:	e000ed00 	.word	0xe000ed00

0801933c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801933c:	b580      	push	{r7, lr}
 801933e:	b082      	sub	sp, #8
 8019340:	af00      	add	r7, sp, #0
 8019342:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8019344:	4a2b      	ldr	r2, [pc, #172]	; (80193f4 <USBD_LL_Init+0xb8>)
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	4a29      	ldr	r2, [pc, #164]	; (80193f4 <USBD_LL_Init+0xb8>)
 8019350:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8019354:	4b27      	ldr	r3, [pc, #156]	; (80193f4 <USBD_LL_Init+0xb8>)
 8019356:	4a28      	ldr	r2, [pc, #160]	; (80193f8 <USBD_LL_Init+0xbc>)
 8019358:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801935a:	4b26      	ldr	r3, [pc, #152]	; (80193f4 <USBD_LL_Init+0xb8>)
 801935c:	2208      	movs	r2, #8
 801935e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8019360:	4b24      	ldr	r3, [pc, #144]	; (80193f4 <USBD_LL_Init+0xb8>)
 8019362:	2202      	movs	r2, #2
 8019364:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019366:	4b23      	ldr	r3, [pc, #140]	; (80193f4 <USBD_LL_Init+0xb8>)
 8019368:	2202      	movs	r2, #2
 801936a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801936c:	4b21      	ldr	r3, [pc, #132]	; (80193f4 <USBD_LL_Init+0xb8>)
 801936e:	2200      	movs	r2, #0
 8019370:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019372:	4b20      	ldr	r3, [pc, #128]	; (80193f4 <USBD_LL_Init+0xb8>)
 8019374:	2200      	movs	r2, #0
 8019376:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8019378:	4b1e      	ldr	r3, [pc, #120]	; (80193f4 <USBD_LL_Init+0xb8>)
 801937a:	2200      	movs	r2, #0
 801937c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801937e:	4b1d      	ldr	r3, [pc, #116]	; (80193f4 <USBD_LL_Init+0xb8>)
 8019380:	2200      	movs	r2, #0
 8019382:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019384:	481b      	ldr	r0, [pc, #108]	; (80193f4 <USBD_LL_Init+0xb8>)
 8019386:	f7ef fab5 	bl	80088f4 <HAL_PCD_Init>
 801938a:	4603      	mov	r3, r0
 801938c:	2b00      	cmp	r3, #0
 801938e:	d001      	beq.n	8019394 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8019390:	f7e9 f949 	bl	8002626 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801939a:	2318      	movs	r3, #24
 801939c:	2200      	movs	r2, #0
 801939e:	2100      	movs	r1, #0
 80193a0:	f7f0 ff7b 	bl	800a29a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80193aa:	2358      	movs	r3, #88	; 0x58
 80193ac:	2200      	movs	r2, #0
 80193ae:	2180      	movs	r1, #128	; 0x80
 80193b0:	f7f0 ff73 	bl	800a29a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80193ba:	23c0      	movs	r3, #192	; 0xc0
 80193bc:	2200      	movs	r2, #0
 80193be:	2181      	movs	r1, #129	; 0x81
 80193c0:	f7f0 ff6b 	bl	800a29a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80193ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80193ce:	2200      	movs	r2, #0
 80193d0:	2101      	movs	r1, #1
 80193d2:	f7f0 ff62 	bl	800a29a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80193dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80193e0:	2200      	movs	r2, #0
 80193e2:	2182      	movs	r1, #130	; 0x82
 80193e4:	f7f0 ff59 	bl	800a29a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80193e8:	2300      	movs	r3, #0
}
 80193ea:	4618      	mov	r0, r3
 80193ec:	3708      	adds	r7, #8
 80193ee:	46bd      	mov	sp, r7
 80193f0:	bd80      	pop	{r7, pc}
 80193f2:	bf00      	nop
 80193f4:	200052e8 	.word	0x200052e8
 80193f8:	40005c00 	.word	0x40005c00

080193fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b084      	sub	sp, #16
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019404:	2300      	movs	r3, #0
 8019406:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019408:	2300      	movs	r3, #0
 801940a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019412:	4618      	mov	r0, r3
 8019414:	f7ef fb60 	bl	8008ad8 <HAL_PCD_Start>
 8019418:	4603      	mov	r3, r0
 801941a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801941c:	7bfb      	ldrb	r3, [r7, #15]
 801941e:	4618      	mov	r0, r3
 8019420:	f000 f980 	bl	8019724 <USBD_Get_USB_Status>
 8019424:	4603      	mov	r3, r0
 8019426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019428:	7bbb      	ldrb	r3, [r7, #14]
}
 801942a:	4618      	mov	r0, r3
 801942c:	3710      	adds	r7, #16
 801942e:	46bd      	mov	sp, r7
 8019430:	bd80      	pop	{r7, pc}

08019432 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019432:	b580      	push	{r7, lr}
 8019434:	b084      	sub	sp, #16
 8019436:	af00      	add	r7, sp, #0
 8019438:	6078      	str	r0, [r7, #4]
 801943a:	4608      	mov	r0, r1
 801943c:	4611      	mov	r1, r2
 801943e:	461a      	mov	r2, r3
 8019440:	4603      	mov	r3, r0
 8019442:	70fb      	strb	r3, [r7, #3]
 8019444:	460b      	mov	r3, r1
 8019446:	70bb      	strb	r3, [r7, #2]
 8019448:	4613      	mov	r3, r2
 801944a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801944c:	2300      	movs	r3, #0
 801944e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019450:	2300      	movs	r3, #0
 8019452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801945a:	78bb      	ldrb	r3, [r7, #2]
 801945c:	883a      	ldrh	r2, [r7, #0]
 801945e:	78f9      	ldrb	r1, [r7, #3]
 8019460:	f7ef fca8 	bl	8008db4 <HAL_PCD_EP_Open>
 8019464:	4603      	mov	r3, r0
 8019466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019468:	7bfb      	ldrb	r3, [r7, #15]
 801946a:	4618      	mov	r0, r3
 801946c:	f000 f95a 	bl	8019724 <USBD_Get_USB_Status>
 8019470:	4603      	mov	r3, r0
 8019472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019474:	7bbb      	ldrb	r3, [r7, #14]
}
 8019476:	4618      	mov	r0, r3
 8019478:	3710      	adds	r7, #16
 801947a:	46bd      	mov	sp, r7
 801947c:	bd80      	pop	{r7, pc}

0801947e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801947e:	b580      	push	{r7, lr}
 8019480:	b084      	sub	sp, #16
 8019482:	af00      	add	r7, sp, #0
 8019484:	6078      	str	r0, [r7, #4]
 8019486:	460b      	mov	r3, r1
 8019488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801948a:	2300      	movs	r3, #0
 801948c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801948e:	2300      	movs	r3, #0
 8019490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019498:	78fa      	ldrb	r2, [r7, #3]
 801949a:	4611      	mov	r1, r2
 801949c:	4618      	mov	r0, r3
 801949e:	f7ef fcef 	bl	8008e80 <HAL_PCD_EP_Close>
 80194a2:	4603      	mov	r3, r0
 80194a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80194a6:	7bfb      	ldrb	r3, [r7, #15]
 80194a8:	4618      	mov	r0, r3
 80194aa:	f000 f93b 	bl	8019724 <USBD_Get_USB_Status>
 80194ae:	4603      	mov	r3, r0
 80194b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80194b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80194b4:	4618      	mov	r0, r3
 80194b6:	3710      	adds	r7, #16
 80194b8:	46bd      	mov	sp, r7
 80194ba:	bd80      	pop	{r7, pc}

080194bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80194bc:	b580      	push	{r7, lr}
 80194be:	b084      	sub	sp, #16
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	6078      	str	r0, [r7, #4]
 80194c4:	460b      	mov	r3, r1
 80194c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80194c8:	2300      	movs	r3, #0
 80194ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194cc:	2300      	movs	r3, #0
 80194ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80194d6:	78fa      	ldrb	r2, [r7, #3]
 80194d8:	4611      	mov	r1, r2
 80194da:	4618      	mov	r0, r3
 80194dc:	f7ef fdb0 	bl	8009040 <HAL_PCD_EP_SetStall>
 80194e0:	4603      	mov	r3, r0
 80194e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80194e4:	7bfb      	ldrb	r3, [r7, #15]
 80194e6:	4618      	mov	r0, r3
 80194e8:	f000 f91c 	bl	8019724 <USBD_Get_USB_Status>
 80194ec:	4603      	mov	r3, r0
 80194ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80194f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80194f2:	4618      	mov	r0, r3
 80194f4:	3710      	adds	r7, #16
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}

080194fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80194fa:	b580      	push	{r7, lr}
 80194fc:	b084      	sub	sp, #16
 80194fe:	af00      	add	r7, sp, #0
 8019500:	6078      	str	r0, [r7, #4]
 8019502:	460b      	mov	r3, r1
 8019504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019506:	2300      	movs	r3, #0
 8019508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801950a:	2300      	movs	r3, #0
 801950c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019514:	78fa      	ldrb	r2, [r7, #3]
 8019516:	4611      	mov	r1, r2
 8019518:	4618      	mov	r0, r3
 801951a:	f7ef fde3 	bl	80090e4 <HAL_PCD_EP_ClrStall>
 801951e:	4603      	mov	r3, r0
 8019520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019522:	7bfb      	ldrb	r3, [r7, #15]
 8019524:	4618      	mov	r0, r3
 8019526:	f000 f8fd 	bl	8019724 <USBD_Get_USB_Status>
 801952a:	4603      	mov	r3, r0
 801952c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801952e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019530:	4618      	mov	r0, r3
 8019532:	3710      	adds	r7, #16
 8019534:	46bd      	mov	sp, r7
 8019536:	bd80      	pop	{r7, pc}

08019538 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019538:	b480      	push	{r7}
 801953a:	b085      	sub	sp, #20
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
 8019540:	460b      	mov	r3, r1
 8019542:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801954a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801954c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019550:	2b00      	cmp	r3, #0
 8019552:	da0c      	bge.n	801956e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019554:	78fb      	ldrb	r3, [r7, #3]
 8019556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801955a:	68f9      	ldr	r1, [r7, #12]
 801955c:	1c5a      	adds	r2, r3, #1
 801955e:	4613      	mov	r3, r2
 8019560:	009b      	lsls	r3, r3, #2
 8019562:	4413      	add	r3, r2
 8019564:	00db      	lsls	r3, r3, #3
 8019566:	440b      	add	r3, r1
 8019568:	3302      	adds	r3, #2
 801956a:	781b      	ldrb	r3, [r3, #0]
 801956c:	e00b      	b.n	8019586 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801956e:	78fb      	ldrb	r3, [r7, #3]
 8019570:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019574:	68f9      	ldr	r1, [r7, #12]
 8019576:	4613      	mov	r3, r2
 8019578:	009b      	lsls	r3, r3, #2
 801957a:	4413      	add	r3, r2
 801957c:	00db      	lsls	r3, r3, #3
 801957e:	440b      	add	r3, r1
 8019580:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8019584:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019586:	4618      	mov	r0, r3
 8019588:	3714      	adds	r7, #20
 801958a:	46bd      	mov	sp, r7
 801958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019590:	4770      	bx	lr

08019592 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019592:	b580      	push	{r7, lr}
 8019594:	b084      	sub	sp, #16
 8019596:	af00      	add	r7, sp, #0
 8019598:	6078      	str	r0, [r7, #4]
 801959a:	460b      	mov	r3, r1
 801959c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801959e:	2300      	movs	r3, #0
 80195a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80195a2:	2300      	movs	r3, #0
 80195a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80195ac:	78fa      	ldrb	r2, [r7, #3]
 80195ae:	4611      	mov	r1, r2
 80195b0:	4618      	mov	r0, r3
 80195b2:	f7ef fbda 	bl	8008d6a <HAL_PCD_SetAddress>
 80195b6:	4603      	mov	r3, r0
 80195b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80195ba:	7bfb      	ldrb	r3, [r7, #15]
 80195bc:	4618      	mov	r0, r3
 80195be:	f000 f8b1 	bl	8019724 <USBD_Get_USB_Status>
 80195c2:	4603      	mov	r3, r0
 80195c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80195c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80195c8:	4618      	mov	r0, r3
 80195ca:	3710      	adds	r7, #16
 80195cc:	46bd      	mov	sp, r7
 80195ce:	bd80      	pop	{r7, pc}

080195d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b086      	sub	sp, #24
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	60f8      	str	r0, [r7, #12]
 80195d8:	607a      	str	r2, [r7, #4]
 80195da:	603b      	str	r3, [r7, #0]
 80195dc:	460b      	mov	r3, r1
 80195de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80195e0:	2300      	movs	r3, #0
 80195e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80195e4:	2300      	movs	r3, #0
 80195e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80195ee:	7af9      	ldrb	r1, [r7, #11]
 80195f0:	683b      	ldr	r3, [r7, #0]
 80195f2:	687a      	ldr	r2, [r7, #4]
 80195f4:	f7ef fce1 	bl	8008fba <HAL_PCD_EP_Transmit>
 80195f8:	4603      	mov	r3, r0
 80195fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80195fc:	7dfb      	ldrb	r3, [r7, #23]
 80195fe:	4618      	mov	r0, r3
 8019600:	f000 f890 	bl	8019724 <USBD_Get_USB_Status>
 8019604:	4603      	mov	r3, r0
 8019606:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019608:	7dbb      	ldrb	r3, [r7, #22]
}
 801960a:	4618      	mov	r0, r3
 801960c:	3718      	adds	r7, #24
 801960e:	46bd      	mov	sp, r7
 8019610:	bd80      	pop	{r7, pc}

08019612 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019612:	b580      	push	{r7, lr}
 8019614:	b086      	sub	sp, #24
 8019616:	af00      	add	r7, sp, #0
 8019618:	60f8      	str	r0, [r7, #12]
 801961a:	607a      	str	r2, [r7, #4]
 801961c:	603b      	str	r3, [r7, #0]
 801961e:	460b      	mov	r3, r1
 8019620:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019622:	2300      	movs	r3, #0
 8019624:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019626:	2300      	movs	r3, #0
 8019628:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019630:	7af9      	ldrb	r1, [r7, #11]
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	687a      	ldr	r2, [r7, #4]
 8019636:	f7ef fc6b 	bl	8008f10 <HAL_PCD_EP_Receive>
 801963a:	4603      	mov	r3, r0
 801963c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801963e:	7dfb      	ldrb	r3, [r7, #23]
 8019640:	4618      	mov	r0, r3
 8019642:	f000 f86f 	bl	8019724 <USBD_Get_USB_Status>
 8019646:	4603      	mov	r3, r0
 8019648:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801964a:	7dbb      	ldrb	r3, [r7, #22]
}
 801964c:	4618      	mov	r0, r3
 801964e:	3718      	adds	r7, #24
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}

08019654 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019654:	b580      	push	{r7, lr}
 8019656:	b082      	sub	sp, #8
 8019658:	af00      	add	r7, sp, #0
 801965a:	6078      	str	r0, [r7, #4]
 801965c:	460b      	mov	r3, r1
 801965e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019666:	78fa      	ldrb	r2, [r7, #3]
 8019668:	4611      	mov	r1, r2
 801966a:	4618      	mov	r0, r3
 801966c:	f7ef fc8d 	bl	8008f8a <HAL_PCD_EP_GetRxCount>
 8019670:	4603      	mov	r3, r0
}
 8019672:	4618      	mov	r0, r3
 8019674:	3708      	adds	r7, #8
 8019676:	46bd      	mov	sp, r7
 8019678:	bd80      	pop	{r7, pc}
	...

0801967c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801967c:	b580      	push	{r7, lr}
 801967e:	b082      	sub	sp, #8
 8019680:	af00      	add	r7, sp, #0
 8019682:	6078      	str	r0, [r7, #4]
 8019684:	460b      	mov	r3, r1
 8019686:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8019688:	78fb      	ldrb	r3, [r7, #3]
 801968a:	2b00      	cmp	r3, #0
 801968c:	d002      	beq.n	8019694 <HAL_PCDEx_LPM_Callback+0x18>
 801968e:	2b01      	cmp	r3, #1
 8019690:	d013      	beq.n	80196ba <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8019692:	e023      	b.n	80196dc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	699b      	ldr	r3, [r3, #24]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d007      	beq.n	80196ac <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801969c:	f000 f83c 	bl	8019718 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80196a0:	4b10      	ldr	r3, [pc, #64]	; (80196e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80196a2:	691b      	ldr	r3, [r3, #16]
 80196a4:	4a0f      	ldr	r2, [pc, #60]	; (80196e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80196a6:	f023 0306 	bic.w	r3, r3, #6
 80196aa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80196b2:	4618      	mov	r0, r3
 80196b4:	f7fc f88e 	bl	80157d4 <USBD_LL_Resume>
    break;
 80196b8:	e010      	b.n	80196dc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80196c0:	4618      	mov	r0, r3
 80196c2:	f7fc f871 	bl	80157a8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	699b      	ldr	r3, [r3, #24]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d005      	beq.n	80196da <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80196ce:	4b05      	ldr	r3, [pc, #20]	; (80196e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80196d0:	691b      	ldr	r3, [r3, #16]
 80196d2:	4a04      	ldr	r2, [pc, #16]	; (80196e4 <HAL_PCDEx_LPM_Callback+0x68>)
 80196d4:	f043 0306 	orr.w	r3, r3, #6
 80196d8:	6113      	str	r3, [r2, #16]
    break;
 80196da:	bf00      	nop
}
 80196dc:	bf00      	nop
 80196de:	3708      	adds	r7, #8
 80196e0:	46bd      	mov	sp, r7
 80196e2:	bd80      	pop	{r7, pc}
 80196e4:	e000ed00 	.word	0xe000ed00

080196e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80196e8:	b480      	push	{r7}
 80196ea:	b083      	sub	sp, #12
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80196f0:	4b03      	ldr	r3, [pc, #12]	; (8019700 <USBD_static_malloc+0x18>)
}
 80196f2:	4618      	mov	r0, r3
 80196f4:	370c      	adds	r7, #12
 80196f6:	46bd      	mov	sp, r7
 80196f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196fc:	4770      	bx	lr
 80196fe:	bf00      	nop
 8019700:	200055dc 	.word	0x200055dc

08019704 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019704:	b480      	push	{r7}
 8019706:	b083      	sub	sp, #12
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]

}
 801970c:	bf00      	nop
 801970e:	370c      	adds	r7, #12
 8019710:	46bd      	mov	sp, r7
 8019712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019716:	4770      	bx	lr

08019718 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019718:	b580      	push	{r7, lr}
 801971a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801971c:	f7e8 ff38 	bl	8002590 <SystemClock_Config>
}
 8019720:	bf00      	nop
 8019722:	bd80      	pop	{r7, pc}

08019724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019724:	b480      	push	{r7}
 8019726:	b085      	sub	sp, #20
 8019728:	af00      	add	r7, sp, #0
 801972a:	4603      	mov	r3, r0
 801972c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801972e:	2300      	movs	r3, #0
 8019730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019732:	79fb      	ldrb	r3, [r7, #7]
 8019734:	2b03      	cmp	r3, #3
 8019736:	d817      	bhi.n	8019768 <USBD_Get_USB_Status+0x44>
 8019738:	a201      	add	r2, pc, #4	; (adr r2, 8019740 <USBD_Get_USB_Status+0x1c>)
 801973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801973e:	bf00      	nop
 8019740:	08019751 	.word	0x08019751
 8019744:	08019757 	.word	0x08019757
 8019748:	0801975d 	.word	0x0801975d
 801974c:	08019763 	.word	0x08019763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019750:	2300      	movs	r3, #0
 8019752:	73fb      	strb	r3, [r7, #15]
    break;
 8019754:	e00b      	b.n	801976e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019756:	2303      	movs	r3, #3
 8019758:	73fb      	strb	r3, [r7, #15]
    break;
 801975a:	e008      	b.n	801976e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801975c:	2301      	movs	r3, #1
 801975e:	73fb      	strb	r3, [r7, #15]
    break;
 8019760:	e005      	b.n	801976e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019762:	2303      	movs	r3, #3
 8019764:	73fb      	strb	r3, [r7, #15]
    break;
 8019766:	e002      	b.n	801976e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019768:	2303      	movs	r3, #3
 801976a:	73fb      	strb	r3, [r7, #15]
    break;
 801976c:	bf00      	nop
  }
  return usb_status;
 801976e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019770:	4618      	mov	r0, r3
 8019772:	3714      	adds	r7, #20
 8019774:	46bd      	mov	sp, r7
 8019776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977a:	4770      	bx	lr
 801977c:	0000      	movs	r0, r0
	...

08019780 <cos>:
 8019780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019782:	ec53 2b10 	vmov	r2, r3, d0
 8019786:	4826      	ldr	r0, [pc, #152]	; (8019820 <cos+0xa0>)
 8019788:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801978c:	4281      	cmp	r1, r0
 801978e:	dc06      	bgt.n	801979e <cos+0x1e>
 8019790:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8019818 <cos+0x98>
 8019794:	b005      	add	sp, #20
 8019796:	f85d eb04 	ldr.w	lr, [sp], #4
 801979a:	f000 bd11 	b.w	801a1c0 <__kernel_cos>
 801979e:	4821      	ldr	r0, [pc, #132]	; (8019824 <cos+0xa4>)
 80197a0:	4281      	cmp	r1, r0
 80197a2:	dd09      	ble.n	80197b8 <cos+0x38>
 80197a4:	ee10 0a10 	vmov	r0, s0
 80197a8:	4619      	mov	r1, r3
 80197aa:	f7e6 febf 	bl	800052c <__aeabi_dsub>
 80197ae:	ec41 0b10 	vmov	d0, r0, r1
 80197b2:	b005      	add	sp, #20
 80197b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80197b8:	4668      	mov	r0, sp
 80197ba:	f000 f919 	bl	80199f0 <__ieee754_rem_pio2>
 80197be:	f000 0003 	and.w	r0, r0, #3
 80197c2:	2801      	cmp	r0, #1
 80197c4:	d00b      	beq.n	80197de <cos+0x5e>
 80197c6:	2802      	cmp	r0, #2
 80197c8:	d016      	beq.n	80197f8 <cos+0x78>
 80197ca:	b9e0      	cbnz	r0, 8019806 <cos+0x86>
 80197cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197d0:	ed9d 0b00 	vldr	d0, [sp]
 80197d4:	f000 fcf4 	bl	801a1c0 <__kernel_cos>
 80197d8:	ec51 0b10 	vmov	r0, r1, d0
 80197dc:	e7e7      	b.n	80197ae <cos+0x2e>
 80197de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197e2:	ed9d 0b00 	vldr	d0, [sp]
 80197e6:	f001 f903 	bl	801a9f0 <__kernel_sin>
 80197ea:	ec53 2b10 	vmov	r2, r3, d0
 80197ee:	ee10 0a10 	vmov	r0, s0
 80197f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80197f6:	e7da      	b.n	80197ae <cos+0x2e>
 80197f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80197fc:	ed9d 0b00 	vldr	d0, [sp]
 8019800:	f000 fcde 	bl	801a1c0 <__kernel_cos>
 8019804:	e7f1      	b.n	80197ea <cos+0x6a>
 8019806:	ed9d 1b02 	vldr	d1, [sp, #8]
 801980a:	ed9d 0b00 	vldr	d0, [sp]
 801980e:	2001      	movs	r0, #1
 8019810:	f001 f8ee 	bl	801a9f0 <__kernel_sin>
 8019814:	e7e0      	b.n	80197d8 <cos+0x58>
 8019816:	bf00      	nop
	...
 8019820:	3fe921fb 	.word	0x3fe921fb
 8019824:	7fefffff 	.word	0x7fefffff

08019828 <sin>:
 8019828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801982a:	ec53 2b10 	vmov	r2, r3, d0
 801982e:	4828      	ldr	r0, [pc, #160]	; (80198d0 <sin+0xa8>)
 8019830:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019834:	4281      	cmp	r1, r0
 8019836:	dc07      	bgt.n	8019848 <sin+0x20>
 8019838:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80198c8 <sin+0xa0>
 801983c:	2000      	movs	r0, #0
 801983e:	b005      	add	sp, #20
 8019840:	f85d eb04 	ldr.w	lr, [sp], #4
 8019844:	f001 b8d4 	b.w	801a9f0 <__kernel_sin>
 8019848:	4822      	ldr	r0, [pc, #136]	; (80198d4 <sin+0xac>)
 801984a:	4281      	cmp	r1, r0
 801984c:	dd09      	ble.n	8019862 <sin+0x3a>
 801984e:	ee10 0a10 	vmov	r0, s0
 8019852:	4619      	mov	r1, r3
 8019854:	f7e6 fe6a 	bl	800052c <__aeabi_dsub>
 8019858:	ec41 0b10 	vmov	d0, r0, r1
 801985c:	b005      	add	sp, #20
 801985e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019862:	4668      	mov	r0, sp
 8019864:	f000 f8c4 	bl	80199f0 <__ieee754_rem_pio2>
 8019868:	f000 0003 	and.w	r0, r0, #3
 801986c:	2801      	cmp	r0, #1
 801986e:	d00c      	beq.n	801988a <sin+0x62>
 8019870:	2802      	cmp	r0, #2
 8019872:	d011      	beq.n	8019898 <sin+0x70>
 8019874:	b9f0      	cbnz	r0, 80198b4 <sin+0x8c>
 8019876:	ed9d 1b02 	vldr	d1, [sp, #8]
 801987a:	ed9d 0b00 	vldr	d0, [sp]
 801987e:	2001      	movs	r0, #1
 8019880:	f001 f8b6 	bl	801a9f0 <__kernel_sin>
 8019884:	ec51 0b10 	vmov	r0, r1, d0
 8019888:	e7e6      	b.n	8019858 <sin+0x30>
 801988a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801988e:	ed9d 0b00 	vldr	d0, [sp]
 8019892:	f000 fc95 	bl	801a1c0 <__kernel_cos>
 8019896:	e7f5      	b.n	8019884 <sin+0x5c>
 8019898:	ed9d 1b02 	vldr	d1, [sp, #8]
 801989c:	ed9d 0b00 	vldr	d0, [sp]
 80198a0:	2001      	movs	r0, #1
 80198a2:	f001 f8a5 	bl	801a9f0 <__kernel_sin>
 80198a6:	ec53 2b10 	vmov	r2, r3, d0
 80198aa:	ee10 0a10 	vmov	r0, s0
 80198ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80198b2:	e7d1      	b.n	8019858 <sin+0x30>
 80198b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80198b8:	ed9d 0b00 	vldr	d0, [sp]
 80198bc:	f000 fc80 	bl	801a1c0 <__kernel_cos>
 80198c0:	e7f1      	b.n	80198a6 <sin+0x7e>
 80198c2:	bf00      	nop
 80198c4:	f3af 8000 	nop.w
	...
 80198d0:	3fe921fb 	.word	0x3fe921fb
 80198d4:	7fefffff 	.word	0x7fefffff

080198d8 <cosf>:
 80198d8:	ee10 3a10 	vmov	r3, s0
 80198dc:	b507      	push	{r0, r1, r2, lr}
 80198de:	4a1e      	ldr	r2, [pc, #120]	; (8019958 <cosf+0x80>)
 80198e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80198e4:	4293      	cmp	r3, r2
 80198e6:	dc06      	bgt.n	80198f6 <cosf+0x1e>
 80198e8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 801995c <cosf+0x84>
 80198ec:	b003      	add	sp, #12
 80198ee:	f85d eb04 	ldr.w	lr, [sp], #4
 80198f2:	f001 b93b 	b.w	801ab6c <__kernel_cosf>
 80198f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80198fa:	db04      	blt.n	8019906 <cosf+0x2e>
 80198fc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019900:	b003      	add	sp, #12
 8019902:	f85d fb04 	ldr.w	pc, [sp], #4
 8019906:	4668      	mov	r0, sp
 8019908:	f000 fb1e 	bl	8019f48 <__ieee754_rem_pio2f>
 801990c:	f000 0003 	and.w	r0, r0, #3
 8019910:	2801      	cmp	r0, #1
 8019912:	d009      	beq.n	8019928 <cosf+0x50>
 8019914:	2802      	cmp	r0, #2
 8019916:	d010      	beq.n	801993a <cosf+0x62>
 8019918:	b9b0      	cbnz	r0, 8019948 <cosf+0x70>
 801991a:	eddd 0a01 	vldr	s1, [sp, #4]
 801991e:	ed9d 0a00 	vldr	s0, [sp]
 8019922:	f001 f923 	bl	801ab6c <__kernel_cosf>
 8019926:	e7eb      	b.n	8019900 <cosf+0x28>
 8019928:	eddd 0a01 	vldr	s1, [sp, #4]
 801992c:	ed9d 0a00 	vldr	s0, [sp]
 8019930:	f001 fbf2 	bl	801b118 <__kernel_sinf>
 8019934:	eeb1 0a40 	vneg.f32	s0, s0
 8019938:	e7e2      	b.n	8019900 <cosf+0x28>
 801993a:	eddd 0a01 	vldr	s1, [sp, #4]
 801993e:	ed9d 0a00 	vldr	s0, [sp]
 8019942:	f001 f913 	bl	801ab6c <__kernel_cosf>
 8019946:	e7f5      	b.n	8019934 <cosf+0x5c>
 8019948:	eddd 0a01 	vldr	s1, [sp, #4]
 801994c:	ed9d 0a00 	vldr	s0, [sp]
 8019950:	2001      	movs	r0, #1
 8019952:	f001 fbe1 	bl	801b118 <__kernel_sinf>
 8019956:	e7d3      	b.n	8019900 <cosf+0x28>
 8019958:	3f490fd8 	.word	0x3f490fd8
 801995c:	00000000 	.word	0x00000000

08019960 <sinf>:
 8019960:	ee10 3a10 	vmov	r3, s0
 8019964:	b507      	push	{r0, r1, r2, lr}
 8019966:	4a1f      	ldr	r2, [pc, #124]	; (80199e4 <sinf+0x84>)
 8019968:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801996c:	4293      	cmp	r3, r2
 801996e:	dc07      	bgt.n	8019980 <sinf+0x20>
 8019970:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80199e8 <sinf+0x88>
 8019974:	2000      	movs	r0, #0
 8019976:	b003      	add	sp, #12
 8019978:	f85d eb04 	ldr.w	lr, [sp], #4
 801997c:	f001 bbcc 	b.w	801b118 <__kernel_sinf>
 8019980:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019984:	db04      	blt.n	8019990 <sinf+0x30>
 8019986:	ee30 0a40 	vsub.f32	s0, s0, s0
 801998a:	b003      	add	sp, #12
 801998c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019990:	4668      	mov	r0, sp
 8019992:	f000 fad9 	bl	8019f48 <__ieee754_rem_pio2f>
 8019996:	f000 0003 	and.w	r0, r0, #3
 801999a:	2801      	cmp	r0, #1
 801999c:	d00a      	beq.n	80199b4 <sinf+0x54>
 801999e:	2802      	cmp	r0, #2
 80199a0:	d00f      	beq.n	80199c2 <sinf+0x62>
 80199a2:	b9c0      	cbnz	r0, 80199d6 <sinf+0x76>
 80199a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80199a8:	ed9d 0a00 	vldr	s0, [sp]
 80199ac:	2001      	movs	r0, #1
 80199ae:	f001 fbb3 	bl	801b118 <__kernel_sinf>
 80199b2:	e7ea      	b.n	801998a <sinf+0x2a>
 80199b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80199b8:	ed9d 0a00 	vldr	s0, [sp]
 80199bc:	f001 f8d6 	bl	801ab6c <__kernel_cosf>
 80199c0:	e7e3      	b.n	801998a <sinf+0x2a>
 80199c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80199c6:	ed9d 0a00 	vldr	s0, [sp]
 80199ca:	2001      	movs	r0, #1
 80199cc:	f001 fba4 	bl	801b118 <__kernel_sinf>
 80199d0:	eeb1 0a40 	vneg.f32	s0, s0
 80199d4:	e7d9      	b.n	801998a <sinf+0x2a>
 80199d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80199da:	ed9d 0a00 	vldr	s0, [sp]
 80199de:	f001 f8c5 	bl	801ab6c <__kernel_cosf>
 80199e2:	e7f5      	b.n	80199d0 <sinf+0x70>
 80199e4:	3f490fd8 	.word	0x3f490fd8
 80199e8:	00000000 	.word	0x00000000

080199ec <atan2f>:
 80199ec:	f000 ba0c 	b.w	8019e08 <__ieee754_atan2f>

080199f0 <__ieee754_rem_pio2>:
 80199f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199f4:	ed2d 8b02 	vpush	{d8}
 80199f8:	ec55 4b10 	vmov	r4, r5, d0
 80199fc:	4bca      	ldr	r3, [pc, #808]	; (8019d28 <__ieee754_rem_pio2+0x338>)
 80199fe:	b08b      	sub	sp, #44	; 0x2c
 8019a00:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8019a04:	4598      	cmp	r8, r3
 8019a06:	4682      	mov	sl, r0
 8019a08:	9502      	str	r5, [sp, #8]
 8019a0a:	dc08      	bgt.n	8019a1e <__ieee754_rem_pio2+0x2e>
 8019a0c:	2200      	movs	r2, #0
 8019a0e:	2300      	movs	r3, #0
 8019a10:	ed80 0b00 	vstr	d0, [r0]
 8019a14:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019a18:	f04f 0b00 	mov.w	fp, #0
 8019a1c:	e028      	b.n	8019a70 <__ieee754_rem_pio2+0x80>
 8019a1e:	4bc3      	ldr	r3, [pc, #780]	; (8019d2c <__ieee754_rem_pio2+0x33c>)
 8019a20:	4598      	cmp	r8, r3
 8019a22:	dc78      	bgt.n	8019b16 <__ieee754_rem_pio2+0x126>
 8019a24:	9b02      	ldr	r3, [sp, #8]
 8019a26:	4ec2      	ldr	r6, [pc, #776]	; (8019d30 <__ieee754_rem_pio2+0x340>)
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	ee10 0a10 	vmov	r0, s0
 8019a2e:	a3b0      	add	r3, pc, #704	; (adr r3, 8019cf0 <__ieee754_rem_pio2+0x300>)
 8019a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a34:	4629      	mov	r1, r5
 8019a36:	dd39      	ble.n	8019aac <__ieee754_rem_pio2+0xbc>
 8019a38:	f7e6 fd78 	bl	800052c <__aeabi_dsub>
 8019a3c:	45b0      	cmp	r8, r6
 8019a3e:	4604      	mov	r4, r0
 8019a40:	460d      	mov	r5, r1
 8019a42:	d01b      	beq.n	8019a7c <__ieee754_rem_pio2+0x8c>
 8019a44:	a3ac      	add	r3, pc, #688	; (adr r3, 8019cf8 <__ieee754_rem_pio2+0x308>)
 8019a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a4a:	f7e6 fd6f 	bl	800052c <__aeabi_dsub>
 8019a4e:	4602      	mov	r2, r0
 8019a50:	460b      	mov	r3, r1
 8019a52:	e9ca 2300 	strd	r2, r3, [sl]
 8019a56:	4620      	mov	r0, r4
 8019a58:	4629      	mov	r1, r5
 8019a5a:	f7e6 fd67 	bl	800052c <__aeabi_dsub>
 8019a5e:	a3a6      	add	r3, pc, #664	; (adr r3, 8019cf8 <__ieee754_rem_pio2+0x308>)
 8019a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a64:	f7e6 fd62 	bl	800052c <__aeabi_dsub>
 8019a68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019a6c:	f04f 0b01 	mov.w	fp, #1
 8019a70:	4658      	mov	r0, fp
 8019a72:	b00b      	add	sp, #44	; 0x2c
 8019a74:	ecbd 8b02 	vpop	{d8}
 8019a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a7c:	a3a0      	add	r3, pc, #640	; (adr r3, 8019d00 <__ieee754_rem_pio2+0x310>)
 8019a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a82:	f7e6 fd53 	bl	800052c <__aeabi_dsub>
 8019a86:	a3a0      	add	r3, pc, #640	; (adr r3, 8019d08 <__ieee754_rem_pio2+0x318>)
 8019a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a8c:	4604      	mov	r4, r0
 8019a8e:	460d      	mov	r5, r1
 8019a90:	f7e6 fd4c 	bl	800052c <__aeabi_dsub>
 8019a94:	4602      	mov	r2, r0
 8019a96:	460b      	mov	r3, r1
 8019a98:	e9ca 2300 	strd	r2, r3, [sl]
 8019a9c:	4620      	mov	r0, r4
 8019a9e:	4629      	mov	r1, r5
 8019aa0:	f7e6 fd44 	bl	800052c <__aeabi_dsub>
 8019aa4:	a398      	add	r3, pc, #608	; (adr r3, 8019d08 <__ieee754_rem_pio2+0x318>)
 8019aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aaa:	e7db      	b.n	8019a64 <__ieee754_rem_pio2+0x74>
 8019aac:	f7e6 fd40 	bl	8000530 <__adddf3>
 8019ab0:	45b0      	cmp	r8, r6
 8019ab2:	4604      	mov	r4, r0
 8019ab4:	460d      	mov	r5, r1
 8019ab6:	d016      	beq.n	8019ae6 <__ieee754_rem_pio2+0xf6>
 8019ab8:	a38f      	add	r3, pc, #572	; (adr r3, 8019cf8 <__ieee754_rem_pio2+0x308>)
 8019aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019abe:	f7e6 fd37 	bl	8000530 <__adddf3>
 8019ac2:	4602      	mov	r2, r0
 8019ac4:	460b      	mov	r3, r1
 8019ac6:	e9ca 2300 	strd	r2, r3, [sl]
 8019aca:	4620      	mov	r0, r4
 8019acc:	4629      	mov	r1, r5
 8019ace:	f7e6 fd2d 	bl	800052c <__aeabi_dsub>
 8019ad2:	a389      	add	r3, pc, #548	; (adr r3, 8019cf8 <__ieee754_rem_pio2+0x308>)
 8019ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ad8:	f7e6 fd2a 	bl	8000530 <__adddf3>
 8019adc:	f04f 3bff 	mov.w	fp, #4294967295
 8019ae0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019ae4:	e7c4      	b.n	8019a70 <__ieee754_rem_pio2+0x80>
 8019ae6:	a386      	add	r3, pc, #536	; (adr r3, 8019d00 <__ieee754_rem_pio2+0x310>)
 8019ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aec:	f7e6 fd20 	bl	8000530 <__adddf3>
 8019af0:	a385      	add	r3, pc, #532	; (adr r3, 8019d08 <__ieee754_rem_pio2+0x318>)
 8019af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019af6:	4604      	mov	r4, r0
 8019af8:	460d      	mov	r5, r1
 8019afa:	f7e6 fd19 	bl	8000530 <__adddf3>
 8019afe:	4602      	mov	r2, r0
 8019b00:	460b      	mov	r3, r1
 8019b02:	e9ca 2300 	strd	r2, r3, [sl]
 8019b06:	4620      	mov	r0, r4
 8019b08:	4629      	mov	r1, r5
 8019b0a:	f7e6 fd0f 	bl	800052c <__aeabi_dsub>
 8019b0e:	a37e      	add	r3, pc, #504	; (adr r3, 8019d08 <__ieee754_rem_pio2+0x318>)
 8019b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b14:	e7e0      	b.n	8019ad8 <__ieee754_rem_pio2+0xe8>
 8019b16:	4b87      	ldr	r3, [pc, #540]	; (8019d34 <__ieee754_rem_pio2+0x344>)
 8019b18:	4598      	cmp	r8, r3
 8019b1a:	f300 80d9 	bgt.w	8019cd0 <__ieee754_rem_pio2+0x2e0>
 8019b1e:	f001 fb43 	bl	801b1a8 <fabs>
 8019b22:	ec55 4b10 	vmov	r4, r5, d0
 8019b26:	ee10 0a10 	vmov	r0, s0
 8019b2a:	a379      	add	r3, pc, #484	; (adr r3, 8019d10 <__ieee754_rem_pio2+0x320>)
 8019b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b30:	4629      	mov	r1, r5
 8019b32:	f7e6 fbcd 	bl	80002d0 <__aeabi_dmul>
 8019b36:	4b80      	ldr	r3, [pc, #512]	; (8019d38 <__ieee754_rem_pio2+0x348>)
 8019b38:	2200      	movs	r2, #0
 8019b3a:	f7e6 fcf9 	bl	8000530 <__adddf3>
 8019b3e:	f7e6 ff35 	bl	80009ac <__aeabi_d2iz>
 8019b42:	4683      	mov	fp, r0
 8019b44:	f7e6 fe40 	bl	80007c8 <__aeabi_i2d>
 8019b48:	4602      	mov	r2, r0
 8019b4a:	460b      	mov	r3, r1
 8019b4c:	ec43 2b18 	vmov	d8, r2, r3
 8019b50:	a367      	add	r3, pc, #412	; (adr r3, 8019cf0 <__ieee754_rem_pio2+0x300>)
 8019b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b56:	f7e6 fbbb 	bl	80002d0 <__aeabi_dmul>
 8019b5a:	4602      	mov	r2, r0
 8019b5c:	460b      	mov	r3, r1
 8019b5e:	4620      	mov	r0, r4
 8019b60:	4629      	mov	r1, r5
 8019b62:	f7e6 fce3 	bl	800052c <__aeabi_dsub>
 8019b66:	a364      	add	r3, pc, #400	; (adr r3, 8019cf8 <__ieee754_rem_pio2+0x308>)
 8019b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b6c:	4606      	mov	r6, r0
 8019b6e:	460f      	mov	r7, r1
 8019b70:	ec51 0b18 	vmov	r0, r1, d8
 8019b74:	f7e6 fbac 	bl	80002d0 <__aeabi_dmul>
 8019b78:	f1bb 0f1f 	cmp.w	fp, #31
 8019b7c:	4604      	mov	r4, r0
 8019b7e:	460d      	mov	r5, r1
 8019b80:	dc0d      	bgt.n	8019b9e <__ieee754_rem_pio2+0x1ae>
 8019b82:	4b6e      	ldr	r3, [pc, #440]	; (8019d3c <__ieee754_rem_pio2+0x34c>)
 8019b84:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019b8c:	4543      	cmp	r3, r8
 8019b8e:	d006      	beq.n	8019b9e <__ieee754_rem_pio2+0x1ae>
 8019b90:	4622      	mov	r2, r4
 8019b92:	462b      	mov	r3, r5
 8019b94:	4630      	mov	r0, r6
 8019b96:	4639      	mov	r1, r7
 8019b98:	f7e6 fcc8 	bl	800052c <__aeabi_dsub>
 8019b9c:	e00f      	b.n	8019bbe <__ieee754_rem_pio2+0x1ce>
 8019b9e:	462b      	mov	r3, r5
 8019ba0:	4622      	mov	r2, r4
 8019ba2:	4630      	mov	r0, r6
 8019ba4:	4639      	mov	r1, r7
 8019ba6:	f7e6 fcc1 	bl	800052c <__aeabi_dsub>
 8019baa:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019bae:	9303      	str	r3, [sp, #12]
 8019bb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019bb4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8019bb8:	f1b8 0f10 	cmp.w	r8, #16
 8019bbc:	dc02      	bgt.n	8019bc4 <__ieee754_rem_pio2+0x1d4>
 8019bbe:	e9ca 0100 	strd	r0, r1, [sl]
 8019bc2:	e039      	b.n	8019c38 <__ieee754_rem_pio2+0x248>
 8019bc4:	a34e      	add	r3, pc, #312	; (adr r3, 8019d00 <__ieee754_rem_pio2+0x310>)
 8019bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bca:	ec51 0b18 	vmov	r0, r1, d8
 8019bce:	f7e6 fb7f 	bl	80002d0 <__aeabi_dmul>
 8019bd2:	4604      	mov	r4, r0
 8019bd4:	460d      	mov	r5, r1
 8019bd6:	4602      	mov	r2, r0
 8019bd8:	460b      	mov	r3, r1
 8019bda:	4630      	mov	r0, r6
 8019bdc:	4639      	mov	r1, r7
 8019bde:	f7e6 fca5 	bl	800052c <__aeabi_dsub>
 8019be2:	4602      	mov	r2, r0
 8019be4:	460b      	mov	r3, r1
 8019be6:	4680      	mov	r8, r0
 8019be8:	4689      	mov	r9, r1
 8019bea:	4630      	mov	r0, r6
 8019bec:	4639      	mov	r1, r7
 8019bee:	f7e6 fc9d 	bl	800052c <__aeabi_dsub>
 8019bf2:	4622      	mov	r2, r4
 8019bf4:	462b      	mov	r3, r5
 8019bf6:	f7e6 fc99 	bl	800052c <__aeabi_dsub>
 8019bfa:	a343      	add	r3, pc, #268	; (adr r3, 8019d08 <__ieee754_rem_pio2+0x318>)
 8019bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c00:	4604      	mov	r4, r0
 8019c02:	460d      	mov	r5, r1
 8019c04:	ec51 0b18 	vmov	r0, r1, d8
 8019c08:	f7e6 fb62 	bl	80002d0 <__aeabi_dmul>
 8019c0c:	4622      	mov	r2, r4
 8019c0e:	462b      	mov	r3, r5
 8019c10:	f7e6 fc8c 	bl	800052c <__aeabi_dsub>
 8019c14:	4602      	mov	r2, r0
 8019c16:	460b      	mov	r3, r1
 8019c18:	4604      	mov	r4, r0
 8019c1a:	460d      	mov	r5, r1
 8019c1c:	4640      	mov	r0, r8
 8019c1e:	4649      	mov	r1, r9
 8019c20:	f7e6 fc84 	bl	800052c <__aeabi_dsub>
 8019c24:	9a03      	ldr	r2, [sp, #12]
 8019c26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019c2a:	1ad3      	subs	r3, r2, r3
 8019c2c:	2b31      	cmp	r3, #49	; 0x31
 8019c2e:	dc24      	bgt.n	8019c7a <__ieee754_rem_pio2+0x28a>
 8019c30:	e9ca 0100 	strd	r0, r1, [sl]
 8019c34:	4646      	mov	r6, r8
 8019c36:	464f      	mov	r7, r9
 8019c38:	e9da 8900 	ldrd	r8, r9, [sl]
 8019c3c:	4630      	mov	r0, r6
 8019c3e:	4642      	mov	r2, r8
 8019c40:	464b      	mov	r3, r9
 8019c42:	4639      	mov	r1, r7
 8019c44:	f7e6 fc72 	bl	800052c <__aeabi_dsub>
 8019c48:	462b      	mov	r3, r5
 8019c4a:	4622      	mov	r2, r4
 8019c4c:	f7e6 fc6e 	bl	800052c <__aeabi_dsub>
 8019c50:	9b02      	ldr	r3, [sp, #8]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019c58:	f6bf af0a 	bge.w	8019a70 <__ieee754_rem_pio2+0x80>
 8019c5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019c60:	f8ca 3004 	str.w	r3, [sl, #4]
 8019c64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019c68:	f8ca 8000 	str.w	r8, [sl]
 8019c6c:	f8ca 0008 	str.w	r0, [sl, #8]
 8019c70:	f8ca 300c 	str.w	r3, [sl, #12]
 8019c74:	f1cb 0b00 	rsb	fp, fp, #0
 8019c78:	e6fa      	b.n	8019a70 <__ieee754_rem_pio2+0x80>
 8019c7a:	a327      	add	r3, pc, #156	; (adr r3, 8019d18 <__ieee754_rem_pio2+0x328>)
 8019c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c80:	ec51 0b18 	vmov	r0, r1, d8
 8019c84:	f7e6 fb24 	bl	80002d0 <__aeabi_dmul>
 8019c88:	4604      	mov	r4, r0
 8019c8a:	460d      	mov	r5, r1
 8019c8c:	4602      	mov	r2, r0
 8019c8e:	460b      	mov	r3, r1
 8019c90:	4640      	mov	r0, r8
 8019c92:	4649      	mov	r1, r9
 8019c94:	f7e6 fc4a 	bl	800052c <__aeabi_dsub>
 8019c98:	4602      	mov	r2, r0
 8019c9a:	460b      	mov	r3, r1
 8019c9c:	4606      	mov	r6, r0
 8019c9e:	460f      	mov	r7, r1
 8019ca0:	4640      	mov	r0, r8
 8019ca2:	4649      	mov	r1, r9
 8019ca4:	f7e6 fc42 	bl	800052c <__aeabi_dsub>
 8019ca8:	4622      	mov	r2, r4
 8019caa:	462b      	mov	r3, r5
 8019cac:	f7e6 fc3e 	bl	800052c <__aeabi_dsub>
 8019cb0:	a31b      	add	r3, pc, #108	; (adr r3, 8019d20 <__ieee754_rem_pio2+0x330>)
 8019cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cb6:	4604      	mov	r4, r0
 8019cb8:	460d      	mov	r5, r1
 8019cba:	ec51 0b18 	vmov	r0, r1, d8
 8019cbe:	f7e6 fb07 	bl	80002d0 <__aeabi_dmul>
 8019cc2:	4622      	mov	r2, r4
 8019cc4:	462b      	mov	r3, r5
 8019cc6:	f7e6 fc31 	bl	800052c <__aeabi_dsub>
 8019cca:	4604      	mov	r4, r0
 8019ccc:	460d      	mov	r5, r1
 8019cce:	e75f      	b.n	8019b90 <__ieee754_rem_pio2+0x1a0>
 8019cd0:	4b1b      	ldr	r3, [pc, #108]	; (8019d40 <__ieee754_rem_pio2+0x350>)
 8019cd2:	4598      	cmp	r8, r3
 8019cd4:	dd36      	ble.n	8019d44 <__ieee754_rem_pio2+0x354>
 8019cd6:	ee10 2a10 	vmov	r2, s0
 8019cda:	462b      	mov	r3, r5
 8019cdc:	4620      	mov	r0, r4
 8019cde:	4629      	mov	r1, r5
 8019ce0:	f7e6 fc24 	bl	800052c <__aeabi_dsub>
 8019ce4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019ce8:	e9ca 0100 	strd	r0, r1, [sl]
 8019cec:	e694      	b.n	8019a18 <__ieee754_rem_pio2+0x28>
 8019cee:	bf00      	nop
 8019cf0:	54400000 	.word	0x54400000
 8019cf4:	3ff921fb 	.word	0x3ff921fb
 8019cf8:	1a626331 	.word	0x1a626331
 8019cfc:	3dd0b461 	.word	0x3dd0b461
 8019d00:	1a600000 	.word	0x1a600000
 8019d04:	3dd0b461 	.word	0x3dd0b461
 8019d08:	2e037073 	.word	0x2e037073
 8019d0c:	3ba3198a 	.word	0x3ba3198a
 8019d10:	6dc9c883 	.word	0x6dc9c883
 8019d14:	3fe45f30 	.word	0x3fe45f30
 8019d18:	2e000000 	.word	0x2e000000
 8019d1c:	3ba3198a 	.word	0x3ba3198a
 8019d20:	252049c1 	.word	0x252049c1
 8019d24:	397b839a 	.word	0x397b839a
 8019d28:	3fe921fb 	.word	0x3fe921fb
 8019d2c:	4002d97b 	.word	0x4002d97b
 8019d30:	3ff921fb 	.word	0x3ff921fb
 8019d34:	413921fb 	.word	0x413921fb
 8019d38:	3fe00000 	.word	0x3fe00000
 8019d3c:	0801d5f4 	.word	0x0801d5f4
 8019d40:	7fefffff 	.word	0x7fefffff
 8019d44:	ea4f 5428 	mov.w	r4, r8, asr #20
 8019d48:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8019d4c:	ee10 0a10 	vmov	r0, s0
 8019d50:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8019d54:	ee10 6a10 	vmov	r6, s0
 8019d58:	460f      	mov	r7, r1
 8019d5a:	f7e6 fe27 	bl	80009ac <__aeabi_d2iz>
 8019d5e:	f7e6 fd33 	bl	80007c8 <__aeabi_i2d>
 8019d62:	4602      	mov	r2, r0
 8019d64:	460b      	mov	r3, r1
 8019d66:	4630      	mov	r0, r6
 8019d68:	4639      	mov	r1, r7
 8019d6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019d6e:	f7e6 fbdd 	bl	800052c <__aeabi_dsub>
 8019d72:	4b23      	ldr	r3, [pc, #140]	; (8019e00 <__ieee754_rem_pio2+0x410>)
 8019d74:	2200      	movs	r2, #0
 8019d76:	f7e6 faab 	bl	80002d0 <__aeabi_dmul>
 8019d7a:	460f      	mov	r7, r1
 8019d7c:	4606      	mov	r6, r0
 8019d7e:	f7e6 fe15 	bl	80009ac <__aeabi_d2iz>
 8019d82:	f7e6 fd21 	bl	80007c8 <__aeabi_i2d>
 8019d86:	4602      	mov	r2, r0
 8019d88:	460b      	mov	r3, r1
 8019d8a:	4630      	mov	r0, r6
 8019d8c:	4639      	mov	r1, r7
 8019d8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019d92:	f7e6 fbcb 	bl	800052c <__aeabi_dsub>
 8019d96:	4b1a      	ldr	r3, [pc, #104]	; (8019e00 <__ieee754_rem_pio2+0x410>)
 8019d98:	2200      	movs	r2, #0
 8019d9a:	f7e6 fa99 	bl	80002d0 <__aeabi_dmul>
 8019d9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019da2:	ad04      	add	r5, sp, #16
 8019da4:	f04f 0803 	mov.w	r8, #3
 8019da8:	46a9      	mov	r9, r5
 8019daa:	2600      	movs	r6, #0
 8019dac:	2700      	movs	r7, #0
 8019dae:	4632      	mov	r2, r6
 8019db0:	463b      	mov	r3, r7
 8019db2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8019db6:	46c3      	mov	fp, r8
 8019db8:	3d08      	subs	r5, #8
 8019dba:	f108 38ff 	add.w	r8, r8, #4294967295
 8019dbe:	f7e6 fdc3 	bl	8000948 <__aeabi_dcmpeq>
 8019dc2:	2800      	cmp	r0, #0
 8019dc4:	d1f3      	bne.n	8019dae <__ieee754_rem_pio2+0x3be>
 8019dc6:	4b0f      	ldr	r3, [pc, #60]	; (8019e04 <__ieee754_rem_pio2+0x414>)
 8019dc8:	9301      	str	r3, [sp, #4]
 8019dca:	2302      	movs	r3, #2
 8019dcc:	9300      	str	r3, [sp, #0]
 8019dce:	4622      	mov	r2, r4
 8019dd0:	465b      	mov	r3, fp
 8019dd2:	4651      	mov	r1, sl
 8019dd4:	4648      	mov	r0, r9
 8019dd6:	f000 fabb 	bl	801a350 <__kernel_rem_pio2>
 8019dda:	9b02      	ldr	r3, [sp, #8]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	4683      	mov	fp, r0
 8019de0:	f6bf ae46 	bge.w	8019a70 <__ieee754_rem_pio2+0x80>
 8019de4:	e9da 2100 	ldrd	r2, r1, [sl]
 8019de8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019dec:	e9ca 2300 	strd	r2, r3, [sl]
 8019df0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8019df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019df8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8019dfc:	e73a      	b.n	8019c74 <__ieee754_rem_pio2+0x284>
 8019dfe:	bf00      	nop
 8019e00:	41700000 	.word	0x41700000
 8019e04:	0801d674 	.word	0x0801d674

08019e08 <__ieee754_atan2f>:
 8019e08:	ee10 2a90 	vmov	r2, s1
 8019e0c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019e10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019e14:	b510      	push	{r4, lr}
 8019e16:	eef0 7a40 	vmov.f32	s15, s0
 8019e1a:	dc06      	bgt.n	8019e2a <__ieee754_atan2f+0x22>
 8019e1c:	ee10 0a10 	vmov	r0, s0
 8019e20:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019e24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019e28:	dd04      	ble.n	8019e34 <__ieee754_atan2f+0x2c>
 8019e2a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019e2e:	eeb0 0a67 	vmov.f32	s0, s15
 8019e32:	bd10      	pop	{r4, pc}
 8019e34:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019e38:	d103      	bne.n	8019e42 <__ieee754_atan2f+0x3a>
 8019e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e3e:	f001 bac5 	b.w	801b3cc <atanf>
 8019e42:	1794      	asrs	r4, r2, #30
 8019e44:	f004 0402 	and.w	r4, r4, #2
 8019e48:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019e4c:	b943      	cbnz	r3, 8019e60 <__ieee754_atan2f+0x58>
 8019e4e:	2c02      	cmp	r4, #2
 8019e50:	d05e      	beq.n	8019f10 <__ieee754_atan2f+0x108>
 8019e52:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8019f24 <__ieee754_atan2f+0x11c>
 8019e56:	2c03      	cmp	r4, #3
 8019e58:	bf08      	it	eq
 8019e5a:	eef0 7a47 	vmoveq.f32	s15, s14
 8019e5e:	e7e6      	b.n	8019e2e <__ieee754_atan2f+0x26>
 8019e60:	b941      	cbnz	r1, 8019e74 <__ieee754_atan2f+0x6c>
 8019e62:	eddf 7a31 	vldr	s15, [pc, #196]	; 8019f28 <__ieee754_atan2f+0x120>
 8019e66:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8019f2c <__ieee754_atan2f+0x124>
 8019e6a:	2800      	cmp	r0, #0
 8019e6c:	bfb8      	it	lt
 8019e6e:	eef0 7a40 	vmovlt.f32	s15, s0
 8019e72:	e7dc      	b.n	8019e2e <__ieee754_atan2f+0x26>
 8019e74:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019e78:	d110      	bne.n	8019e9c <__ieee754_atan2f+0x94>
 8019e7a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019e7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8019e82:	d107      	bne.n	8019e94 <__ieee754_atan2f+0x8c>
 8019e84:	2c02      	cmp	r4, #2
 8019e86:	d846      	bhi.n	8019f16 <__ieee754_atan2f+0x10e>
 8019e88:	4b29      	ldr	r3, [pc, #164]	; (8019f30 <__ieee754_atan2f+0x128>)
 8019e8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019e8e:	edd4 7a00 	vldr	s15, [r4]
 8019e92:	e7cc      	b.n	8019e2e <__ieee754_atan2f+0x26>
 8019e94:	2c02      	cmp	r4, #2
 8019e96:	d841      	bhi.n	8019f1c <__ieee754_atan2f+0x114>
 8019e98:	4b26      	ldr	r3, [pc, #152]	; (8019f34 <__ieee754_atan2f+0x12c>)
 8019e9a:	e7f6      	b.n	8019e8a <__ieee754_atan2f+0x82>
 8019e9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019ea0:	d0df      	beq.n	8019e62 <__ieee754_atan2f+0x5a>
 8019ea2:	1a5b      	subs	r3, r3, r1
 8019ea4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8019ea8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019eac:	da1a      	bge.n	8019ee4 <__ieee754_atan2f+0xdc>
 8019eae:	2a00      	cmp	r2, #0
 8019eb0:	da01      	bge.n	8019eb6 <__ieee754_atan2f+0xae>
 8019eb2:	313c      	adds	r1, #60	; 0x3c
 8019eb4:	db19      	blt.n	8019eea <__ieee754_atan2f+0xe2>
 8019eb6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019eba:	f001 fb5b 	bl	801b574 <fabsf>
 8019ebe:	f001 fa85 	bl	801b3cc <atanf>
 8019ec2:	eef0 7a40 	vmov.f32	s15, s0
 8019ec6:	2c01      	cmp	r4, #1
 8019ec8:	d012      	beq.n	8019ef0 <__ieee754_atan2f+0xe8>
 8019eca:	2c02      	cmp	r4, #2
 8019ecc:	d017      	beq.n	8019efe <__ieee754_atan2f+0xf6>
 8019ece:	2c00      	cmp	r4, #0
 8019ed0:	d0ad      	beq.n	8019e2e <__ieee754_atan2f+0x26>
 8019ed2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8019f38 <__ieee754_atan2f+0x130>
 8019ed6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019eda:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8019f3c <__ieee754_atan2f+0x134>
 8019ede:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019ee2:	e7a4      	b.n	8019e2e <__ieee754_atan2f+0x26>
 8019ee4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8019f28 <__ieee754_atan2f+0x120>
 8019ee8:	e7ed      	b.n	8019ec6 <__ieee754_atan2f+0xbe>
 8019eea:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019f40 <__ieee754_atan2f+0x138>
 8019eee:	e7ea      	b.n	8019ec6 <__ieee754_atan2f+0xbe>
 8019ef0:	ee17 3a90 	vmov	r3, s15
 8019ef4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019ef8:	ee07 3a90 	vmov	s15, r3
 8019efc:	e797      	b.n	8019e2e <__ieee754_atan2f+0x26>
 8019efe:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8019f38 <__ieee754_atan2f+0x130>
 8019f02:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019f06:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8019f3c <__ieee754_atan2f+0x134>
 8019f0a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019f0e:	e78e      	b.n	8019e2e <__ieee754_atan2f+0x26>
 8019f10:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8019f3c <__ieee754_atan2f+0x134>
 8019f14:	e78b      	b.n	8019e2e <__ieee754_atan2f+0x26>
 8019f16:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019f44 <__ieee754_atan2f+0x13c>
 8019f1a:	e788      	b.n	8019e2e <__ieee754_atan2f+0x26>
 8019f1c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019f40 <__ieee754_atan2f+0x138>
 8019f20:	e785      	b.n	8019e2e <__ieee754_atan2f+0x26>
 8019f22:	bf00      	nop
 8019f24:	c0490fdb 	.word	0xc0490fdb
 8019f28:	3fc90fdb 	.word	0x3fc90fdb
 8019f2c:	bfc90fdb 	.word	0xbfc90fdb
 8019f30:	0801d77c 	.word	0x0801d77c
 8019f34:	0801d788 	.word	0x0801d788
 8019f38:	33bbbd2e 	.word	0x33bbbd2e
 8019f3c:	40490fdb 	.word	0x40490fdb
 8019f40:	00000000 	.word	0x00000000
 8019f44:	3f490fdb 	.word	0x3f490fdb

08019f48 <__ieee754_rem_pio2f>:
 8019f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f4a:	ee10 6a10 	vmov	r6, s0
 8019f4e:	4b8e      	ldr	r3, [pc, #568]	; (801a188 <__ieee754_rem_pio2f+0x240>)
 8019f50:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019f54:	429d      	cmp	r5, r3
 8019f56:	b087      	sub	sp, #28
 8019f58:	eef0 7a40 	vmov.f32	s15, s0
 8019f5c:	4604      	mov	r4, r0
 8019f5e:	dc05      	bgt.n	8019f6c <__ieee754_rem_pio2f+0x24>
 8019f60:	2300      	movs	r3, #0
 8019f62:	ed80 0a00 	vstr	s0, [r0]
 8019f66:	6043      	str	r3, [r0, #4]
 8019f68:	2000      	movs	r0, #0
 8019f6a:	e01a      	b.n	8019fa2 <__ieee754_rem_pio2f+0x5a>
 8019f6c:	4b87      	ldr	r3, [pc, #540]	; (801a18c <__ieee754_rem_pio2f+0x244>)
 8019f6e:	429d      	cmp	r5, r3
 8019f70:	dc46      	bgt.n	801a000 <__ieee754_rem_pio2f+0xb8>
 8019f72:	2e00      	cmp	r6, #0
 8019f74:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801a190 <__ieee754_rem_pio2f+0x248>
 8019f78:	4b86      	ldr	r3, [pc, #536]	; (801a194 <__ieee754_rem_pio2f+0x24c>)
 8019f7a:	f025 050f 	bic.w	r5, r5, #15
 8019f7e:	dd1f      	ble.n	8019fc0 <__ieee754_rem_pio2f+0x78>
 8019f80:	429d      	cmp	r5, r3
 8019f82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019f86:	d00e      	beq.n	8019fa6 <__ieee754_rem_pio2f+0x5e>
 8019f88:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801a198 <__ieee754_rem_pio2f+0x250>
 8019f8c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019f90:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019f94:	ed80 0a00 	vstr	s0, [r0]
 8019f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f9c:	2001      	movs	r0, #1
 8019f9e:	edc4 7a01 	vstr	s15, [r4, #4]
 8019fa2:	b007      	add	sp, #28
 8019fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fa6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801a19c <__ieee754_rem_pio2f+0x254>
 8019faa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801a1a0 <__ieee754_rem_pio2f+0x258>
 8019fae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019fb2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019fb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019fba:	edc0 6a00 	vstr	s13, [r0]
 8019fbe:	e7eb      	b.n	8019f98 <__ieee754_rem_pio2f+0x50>
 8019fc0:	429d      	cmp	r5, r3
 8019fc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019fc6:	d00e      	beq.n	8019fe6 <__ieee754_rem_pio2f+0x9e>
 8019fc8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801a198 <__ieee754_rem_pio2f+0x250>
 8019fcc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019fd0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019fd4:	ed80 0a00 	vstr	s0, [r0]
 8019fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8019fe0:	edc4 7a01 	vstr	s15, [r4, #4]
 8019fe4:	e7dd      	b.n	8019fa2 <__ieee754_rem_pio2f+0x5a>
 8019fe6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801a19c <__ieee754_rem_pio2f+0x254>
 8019fea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801a1a0 <__ieee754_rem_pio2f+0x258>
 8019fee:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019ff2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019ff6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019ffa:	edc0 6a00 	vstr	s13, [r0]
 8019ffe:	e7eb      	b.n	8019fd8 <__ieee754_rem_pio2f+0x90>
 801a000:	4b68      	ldr	r3, [pc, #416]	; (801a1a4 <__ieee754_rem_pio2f+0x25c>)
 801a002:	429d      	cmp	r5, r3
 801a004:	dc72      	bgt.n	801a0ec <__ieee754_rem_pio2f+0x1a4>
 801a006:	f001 fab5 	bl	801b574 <fabsf>
 801a00a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801a1a8 <__ieee754_rem_pio2f+0x260>
 801a00e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a012:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a01a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a01e:	ee17 0a90 	vmov	r0, s15
 801a022:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801a190 <__ieee754_rem_pio2f+0x248>
 801a026:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a02a:	281f      	cmp	r0, #31
 801a02c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801a198 <__ieee754_rem_pio2f+0x250>
 801a030:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a034:	eeb1 6a47 	vneg.f32	s12, s14
 801a038:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a03c:	ee16 2a90 	vmov	r2, s13
 801a040:	dc1c      	bgt.n	801a07c <__ieee754_rem_pio2f+0x134>
 801a042:	495a      	ldr	r1, [pc, #360]	; (801a1ac <__ieee754_rem_pio2f+0x264>)
 801a044:	1e47      	subs	r7, r0, #1
 801a046:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801a04a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801a04e:	428b      	cmp	r3, r1
 801a050:	d014      	beq.n	801a07c <__ieee754_rem_pio2f+0x134>
 801a052:	6022      	str	r2, [r4, #0]
 801a054:	ed94 7a00 	vldr	s14, [r4]
 801a058:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a05c:	2e00      	cmp	r6, #0
 801a05e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a062:	ed84 0a01 	vstr	s0, [r4, #4]
 801a066:	da9c      	bge.n	8019fa2 <__ieee754_rem_pio2f+0x5a>
 801a068:	eeb1 7a47 	vneg.f32	s14, s14
 801a06c:	eeb1 0a40 	vneg.f32	s0, s0
 801a070:	ed84 7a00 	vstr	s14, [r4]
 801a074:	ed84 0a01 	vstr	s0, [r4, #4]
 801a078:	4240      	negs	r0, r0
 801a07a:	e792      	b.n	8019fa2 <__ieee754_rem_pio2f+0x5a>
 801a07c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a080:	15eb      	asrs	r3, r5, #23
 801a082:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801a086:	2d08      	cmp	r5, #8
 801a088:	dde3      	ble.n	801a052 <__ieee754_rem_pio2f+0x10a>
 801a08a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801a19c <__ieee754_rem_pio2f+0x254>
 801a08e:	eddf 5a44 	vldr	s11, [pc, #272]	; 801a1a0 <__ieee754_rem_pio2f+0x258>
 801a092:	eef0 6a40 	vmov.f32	s13, s0
 801a096:	eee6 6a27 	vfma.f32	s13, s12, s15
 801a09a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801a09e:	eea6 0a27 	vfma.f32	s0, s12, s15
 801a0a2:	eef0 7a40 	vmov.f32	s15, s0
 801a0a6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a0aa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a0ae:	ee15 2a90 	vmov	r2, s11
 801a0b2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a0b6:	1a5b      	subs	r3, r3, r1
 801a0b8:	2b19      	cmp	r3, #25
 801a0ba:	dc04      	bgt.n	801a0c6 <__ieee754_rem_pio2f+0x17e>
 801a0bc:	edc4 5a00 	vstr	s11, [r4]
 801a0c0:	eeb0 0a66 	vmov.f32	s0, s13
 801a0c4:	e7c6      	b.n	801a054 <__ieee754_rem_pio2f+0x10c>
 801a0c6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a1b0 <__ieee754_rem_pio2f+0x268>
 801a0ca:	eeb0 0a66 	vmov.f32	s0, s13
 801a0ce:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a0d2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a0d6:	eddf 6a37 	vldr	s13, [pc, #220]	; 801a1b4 <__ieee754_rem_pio2f+0x26c>
 801a0da:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a0de:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a0e2:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a0e6:	ed84 7a00 	vstr	s14, [r4]
 801a0ea:	e7b3      	b.n	801a054 <__ieee754_rem_pio2f+0x10c>
 801a0ec:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801a0f0:	db06      	blt.n	801a100 <__ieee754_rem_pio2f+0x1b8>
 801a0f2:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a0f6:	edc0 7a01 	vstr	s15, [r0, #4]
 801a0fa:	edc0 7a00 	vstr	s15, [r0]
 801a0fe:	e733      	b.n	8019f68 <__ieee754_rem_pio2f+0x20>
 801a100:	15ea      	asrs	r2, r5, #23
 801a102:	3a86      	subs	r2, #134	; 0x86
 801a104:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a108:	ee07 3a90 	vmov	s15, r3
 801a10c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a110:	eddf 6a29 	vldr	s13, [pc, #164]	; 801a1b8 <__ieee754_rem_pio2f+0x270>
 801a114:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a11c:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a120:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a124:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a128:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a12c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a130:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a138:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a140:	edcd 7a05 	vstr	s15, [sp, #20]
 801a144:	d11e      	bne.n	801a184 <__ieee754_rem_pio2f+0x23c>
 801a146:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a14e:	bf14      	ite	ne
 801a150:	2302      	movne	r3, #2
 801a152:	2301      	moveq	r3, #1
 801a154:	4919      	ldr	r1, [pc, #100]	; (801a1bc <__ieee754_rem_pio2f+0x274>)
 801a156:	9101      	str	r1, [sp, #4]
 801a158:	2102      	movs	r1, #2
 801a15a:	9100      	str	r1, [sp, #0]
 801a15c:	a803      	add	r0, sp, #12
 801a15e:	4621      	mov	r1, r4
 801a160:	f000 fd64 	bl	801ac2c <__kernel_rem_pio2f>
 801a164:	2e00      	cmp	r6, #0
 801a166:	f6bf af1c 	bge.w	8019fa2 <__ieee754_rem_pio2f+0x5a>
 801a16a:	edd4 7a00 	vldr	s15, [r4]
 801a16e:	eef1 7a67 	vneg.f32	s15, s15
 801a172:	edc4 7a00 	vstr	s15, [r4]
 801a176:	edd4 7a01 	vldr	s15, [r4, #4]
 801a17a:	eef1 7a67 	vneg.f32	s15, s15
 801a17e:	edc4 7a01 	vstr	s15, [r4, #4]
 801a182:	e779      	b.n	801a078 <__ieee754_rem_pio2f+0x130>
 801a184:	2303      	movs	r3, #3
 801a186:	e7e5      	b.n	801a154 <__ieee754_rem_pio2f+0x20c>
 801a188:	3f490fd8 	.word	0x3f490fd8
 801a18c:	4016cbe3 	.word	0x4016cbe3
 801a190:	3fc90f80 	.word	0x3fc90f80
 801a194:	3fc90fd0 	.word	0x3fc90fd0
 801a198:	37354443 	.word	0x37354443
 801a19c:	37354400 	.word	0x37354400
 801a1a0:	2e85a308 	.word	0x2e85a308
 801a1a4:	43490f80 	.word	0x43490f80
 801a1a8:	3f22f984 	.word	0x3f22f984
 801a1ac:	0801d794 	.word	0x0801d794
 801a1b0:	2e85a300 	.word	0x2e85a300
 801a1b4:	248d3132 	.word	0x248d3132
 801a1b8:	43800000 	.word	0x43800000
 801a1bc:	0801d814 	.word	0x0801d814

0801a1c0 <__kernel_cos>:
 801a1c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1c4:	ec57 6b10 	vmov	r6, r7, d0
 801a1c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801a1cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 801a1d0:	ed8d 1b00 	vstr	d1, [sp]
 801a1d4:	da07      	bge.n	801a1e6 <__kernel_cos+0x26>
 801a1d6:	ee10 0a10 	vmov	r0, s0
 801a1da:	4639      	mov	r1, r7
 801a1dc:	f7e6 fbe6 	bl	80009ac <__aeabi_d2iz>
 801a1e0:	2800      	cmp	r0, #0
 801a1e2:	f000 8088 	beq.w	801a2f6 <__kernel_cos+0x136>
 801a1e6:	4632      	mov	r2, r6
 801a1e8:	463b      	mov	r3, r7
 801a1ea:	4630      	mov	r0, r6
 801a1ec:	4639      	mov	r1, r7
 801a1ee:	f7e6 f86f 	bl	80002d0 <__aeabi_dmul>
 801a1f2:	4b51      	ldr	r3, [pc, #324]	; (801a338 <__kernel_cos+0x178>)
 801a1f4:	2200      	movs	r2, #0
 801a1f6:	4604      	mov	r4, r0
 801a1f8:	460d      	mov	r5, r1
 801a1fa:	f7e6 f869 	bl	80002d0 <__aeabi_dmul>
 801a1fe:	a340      	add	r3, pc, #256	; (adr r3, 801a300 <__kernel_cos+0x140>)
 801a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a204:	4682      	mov	sl, r0
 801a206:	468b      	mov	fp, r1
 801a208:	4620      	mov	r0, r4
 801a20a:	4629      	mov	r1, r5
 801a20c:	f7e6 f860 	bl	80002d0 <__aeabi_dmul>
 801a210:	a33d      	add	r3, pc, #244	; (adr r3, 801a308 <__kernel_cos+0x148>)
 801a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a216:	f7e6 f98b 	bl	8000530 <__adddf3>
 801a21a:	4622      	mov	r2, r4
 801a21c:	462b      	mov	r3, r5
 801a21e:	f7e6 f857 	bl	80002d0 <__aeabi_dmul>
 801a222:	a33b      	add	r3, pc, #236	; (adr r3, 801a310 <__kernel_cos+0x150>)
 801a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a228:	f7e6 f980 	bl	800052c <__aeabi_dsub>
 801a22c:	4622      	mov	r2, r4
 801a22e:	462b      	mov	r3, r5
 801a230:	f7e6 f84e 	bl	80002d0 <__aeabi_dmul>
 801a234:	a338      	add	r3, pc, #224	; (adr r3, 801a318 <__kernel_cos+0x158>)
 801a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a23a:	f7e6 f979 	bl	8000530 <__adddf3>
 801a23e:	4622      	mov	r2, r4
 801a240:	462b      	mov	r3, r5
 801a242:	f7e6 f845 	bl	80002d0 <__aeabi_dmul>
 801a246:	a336      	add	r3, pc, #216	; (adr r3, 801a320 <__kernel_cos+0x160>)
 801a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a24c:	f7e6 f96e 	bl	800052c <__aeabi_dsub>
 801a250:	4622      	mov	r2, r4
 801a252:	462b      	mov	r3, r5
 801a254:	f7e6 f83c 	bl	80002d0 <__aeabi_dmul>
 801a258:	a333      	add	r3, pc, #204	; (adr r3, 801a328 <__kernel_cos+0x168>)
 801a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a25e:	f7e6 f967 	bl	8000530 <__adddf3>
 801a262:	4622      	mov	r2, r4
 801a264:	462b      	mov	r3, r5
 801a266:	f7e6 f833 	bl	80002d0 <__aeabi_dmul>
 801a26a:	4622      	mov	r2, r4
 801a26c:	462b      	mov	r3, r5
 801a26e:	f7e6 f82f 	bl	80002d0 <__aeabi_dmul>
 801a272:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a276:	4604      	mov	r4, r0
 801a278:	460d      	mov	r5, r1
 801a27a:	4630      	mov	r0, r6
 801a27c:	4639      	mov	r1, r7
 801a27e:	f7e6 f827 	bl	80002d0 <__aeabi_dmul>
 801a282:	460b      	mov	r3, r1
 801a284:	4602      	mov	r2, r0
 801a286:	4629      	mov	r1, r5
 801a288:	4620      	mov	r0, r4
 801a28a:	f7e6 f94f 	bl	800052c <__aeabi_dsub>
 801a28e:	4b2b      	ldr	r3, [pc, #172]	; (801a33c <__kernel_cos+0x17c>)
 801a290:	4598      	cmp	r8, r3
 801a292:	4606      	mov	r6, r0
 801a294:	460f      	mov	r7, r1
 801a296:	dc10      	bgt.n	801a2ba <__kernel_cos+0xfa>
 801a298:	4602      	mov	r2, r0
 801a29a:	460b      	mov	r3, r1
 801a29c:	4650      	mov	r0, sl
 801a29e:	4659      	mov	r1, fp
 801a2a0:	f7e6 f944 	bl	800052c <__aeabi_dsub>
 801a2a4:	460b      	mov	r3, r1
 801a2a6:	4926      	ldr	r1, [pc, #152]	; (801a340 <__kernel_cos+0x180>)
 801a2a8:	4602      	mov	r2, r0
 801a2aa:	2000      	movs	r0, #0
 801a2ac:	f7e6 f93e 	bl	800052c <__aeabi_dsub>
 801a2b0:	ec41 0b10 	vmov	d0, r0, r1
 801a2b4:	b003      	add	sp, #12
 801a2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ba:	4b22      	ldr	r3, [pc, #136]	; (801a344 <__kernel_cos+0x184>)
 801a2bc:	4920      	ldr	r1, [pc, #128]	; (801a340 <__kernel_cos+0x180>)
 801a2be:	4598      	cmp	r8, r3
 801a2c0:	bfcc      	ite	gt
 801a2c2:	4d21      	ldrgt	r5, [pc, #132]	; (801a348 <__kernel_cos+0x188>)
 801a2c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 801a2c8:	2400      	movs	r4, #0
 801a2ca:	4622      	mov	r2, r4
 801a2cc:	462b      	mov	r3, r5
 801a2ce:	2000      	movs	r0, #0
 801a2d0:	f7e6 f92c 	bl	800052c <__aeabi_dsub>
 801a2d4:	4622      	mov	r2, r4
 801a2d6:	4680      	mov	r8, r0
 801a2d8:	4689      	mov	r9, r1
 801a2da:	462b      	mov	r3, r5
 801a2dc:	4650      	mov	r0, sl
 801a2de:	4659      	mov	r1, fp
 801a2e0:	f7e6 f924 	bl	800052c <__aeabi_dsub>
 801a2e4:	4632      	mov	r2, r6
 801a2e6:	463b      	mov	r3, r7
 801a2e8:	f7e6 f920 	bl	800052c <__aeabi_dsub>
 801a2ec:	4602      	mov	r2, r0
 801a2ee:	460b      	mov	r3, r1
 801a2f0:	4640      	mov	r0, r8
 801a2f2:	4649      	mov	r1, r9
 801a2f4:	e7da      	b.n	801a2ac <__kernel_cos+0xec>
 801a2f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 801a330 <__kernel_cos+0x170>
 801a2fa:	e7db      	b.n	801a2b4 <__kernel_cos+0xf4>
 801a2fc:	f3af 8000 	nop.w
 801a300:	be8838d4 	.word	0xbe8838d4
 801a304:	bda8fae9 	.word	0xbda8fae9
 801a308:	bdb4b1c4 	.word	0xbdb4b1c4
 801a30c:	3e21ee9e 	.word	0x3e21ee9e
 801a310:	809c52ad 	.word	0x809c52ad
 801a314:	3e927e4f 	.word	0x3e927e4f
 801a318:	19cb1590 	.word	0x19cb1590
 801a31c:	3efa01a0 	.word	0x3efa01a0
 801a320:	16c15177 	.word	0x16c15177
 801a324:	3f56c16c 	.word	0x3f56c16c
 801a328:	5555554c 	.word	0x5555554c
 801a32c:	3fa55555 	.word	0x3fa55555
 801a330:	00000000 	.word	0x00000000
 801a334:	3ff00000 	.word	0x3ff00000
 801a338:	3fe00000 	.word	0x3fe00000
 801a33c:	3fd33332 	.word	0x3fd33332
 801a340:	3ff00000 	.word	0x3ff00000
 801a344:	3fe90000 	.word	0x3fe90000
 801a348:	3fd20000 	.word	0x3fd20000
 801a34c:	00000000 	.word	0x00000000

0801a350 <__kernel_rem_pio2>:
 801a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a354:	ed2d 8b02 	vpush	{d8}
 801a358:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801a35c:	f112 0f14 	cmn.w	r2, #20
 801a360:	9308      	str	r3, [sp, #32]
 801a362:	9101      	str	r1, [sp, #4]
 801a364:	4bc4      	ldr	r3, [pc, #784]	; (801a678 <__kernel_rem_pio2+0x328>)
 801a366:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801a368:	900b      	str	r0, [sp, #44]	; 0x2c
 801a36a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a36e:	9302      	str	r3, [sp, #8]
 801a370:	9b08      	ldr	r3, [sp, #32]
 801a372:	f103 33ff 	add.w	r3, r3, #4294967295
 801a376:	bfa8      	it	ge
 801a378:	1ed4      	subge	r4, r2, #3
 801a37a:	9306      	str	r3, [sp, #24]
 801a37c:	bfb2      	itee	lt
 801a37e:	2400      	movlt	r4, #0
 801a380:	2318      	movge	r3, #24
 801a382:	fb94 f4f3 	sdivge	r4, r4, r3
 801a386:	f06f 0317 	mvn.w	r3, #23
 801a38a:	fb04 3303 	mla	r3, r4, r3, r3
 801a38e:	eb03 0a02 	add.w	sl, r3, r2
 801a392:	9b02      	ldr	r3, [sp, #8]
 801a394:	9a06      	ldr	r2, [sp, #24]
 801a396:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 801a668 <__kernel_rem_pio2+0x318>
 801a39a:	eb03 0802 	add.w	r8, r3, r2
 801a39e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a3a0:	1aa7      	subs	r7, r4, r2
 801a3a2:	ae22      	add	r6, sp, #136	; 0x88
 801a3a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a3a8:	2500      	movs	r5, #0
 801a3aa:	4545      	cmp	r5, r8
 801a3ac:	dd13      	ble.n	801a3d6 <__kernel_rem_pio2+0x86>
 801a3ae:	9b08      	ldr	r3, [sp, #32]
 801a3b0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 801a668 <__kernel_rem_pio2+0x318>
 801a3b4:	aa22      	add	r2, sp, #136	; 0x88
 801a3b6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801a3ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801a3be:	f04f 0800 	mov.w	r8, #0
 801a3c2:	9b02      	ldr	r3, [sp, #8]
 801a3c4:	4598      	cmp	r8, r3
 801a3c6:	dc2f      	bgt.n	801a428 <__kernel_rem_pio2+0xd8>
 801a3c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 801a3cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801a3d0:	462f      	mov	r7, r5
 801a3d2:	2600      	movs	r6, #0
 801a3d4:	e01b      	b.n	801a40e <__kernel_rem_pio2+0xbe>
 801a3d6:	42ef      	cmn	r7, r5
 801a3d8:	d407      	bmi.n	801a3ea <__kernel_rem_pio2+0x9a>
 801a3da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a3de:	f7e6 f9f3 	bl	80007c8 <__aeabi_i2d>
 801a3e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a3e6:	3501      	adds	r5, #1
 801a3e8:	e7df      	b.n	801a3aa <__kernel_rem_pio2+0x5a>
 801a3ea:	ec51 0b18 	vmov	r0, r1, d8
 801a3ee:	e7f8      	b.n	801a3e2 <__kernel_rem_pio2+0x92>
 801a3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a3f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a3f8:	f7e5 ff6a 	bl	80002d0 <__aeabi_dmul>
 801a3fc:	4602      	mov	r2, r0
 801a3fe:	460b      	mov	r3, r1
 801a400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a404:	f7e6 f894 	bl	8000530 <__adddf3>
 801a408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a40c:	3601      	adds	r6, #1
 801a40e:	9b06      	ldr	r3, [sp, #24]
 801a410:	429e      	cmp	r6, r3
 801a412:	f1a7 0708 	sub.w	r7, r7, #8
 801a416:	ddeb      	ble.n	801a3f0 <__kernel_rem_pio2+0xa0>
 801a418:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a41c:	f108 0801 	add.w	r8, r8, #1
 801a420:	ecab 7b02 	vstmia	fp!, {d7}
 801a424:	3508      	adds	r5, #8
 801a426:	e7cc      	b.n	801a3c2 <__kernel_rem_pio2+0x72>
 801a428:	9b02      	ldr	r3, [sp, #8]
 801a42a:	aa0e      	add	r2, sp, #56	; 0x38
 801a42c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a430:	930d      	str	r3, [sp, #52]	; 0x34
 801a432:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801a434:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a438:	9c02      	ldr	r4, [sp, #8]
 801a43a:	930c      	str	r3, [sp, #48]	; 0x30
 801a43c:	00e3      	lsls	r3, r4, #3
 801a43e:	930a      	str	r3, [sp, #40]	; 0x28
 801a440:	ab9a      	add	r3, sp, #616	; 0x268
 801a442:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a446:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801a44a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801a44e:	ab72      	add	r3, sp, #456	; 0x1c8
 801a450:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801a454:	46c3      	mov	fp, r8
 801a456:	46a1      	mov	r9, r4
 801a458:	f1b9 0f00 	cmp.w	r9, #0
 801a45c:	f1a5 0508 	sub.w	r5, r5, #8
 801a460:	dc77      	bgt.n	801a552 <__kernel_rem_pio2+0x202>
 801a462:	ec47 6b10 	vmov	d0, r6, r7
 801a466:	4650      	mov	r0, sl
 801a468:	f000 ff2a 	bl	801b2c0 <scalbn>
 801a46c:	ec57 6b10 	vmov	r6, r7, d0
 801a470:	2200      	movs	r2, #0
 801a472:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a476:	ee10 0a10 	vmov	r0, s0
 801a47a:	4639      	mov	r1, r7
 801a47c:	f7e5 ff28 	bl	80002d0 <__aeabi_dmul>
 801a480:	ec41 0b10 	vmov	d0, r0, r1
 801a484:	f000 fe9c 	bl	801b1c0 <floor>
 801a488:	4b7c      	ldr	r3, [pc, #496]	; (801a67c <__kernel_rem_pio2+0x32c>)
 801a48a:	ec51 0b10 	vmov	r0, r1, d0
 801a48e:	2200      	movs	r2, #0
 801a490:	f7e5 ff1e 	bl	80002d0 <__aeabi_dmul>
 801a494:	4602      	mov	r2, r0
 801a496:	460b      	mov	r3, r1
 801a498:	4630      	mov	r0, r6
 801a49a:	4639      	mov	r1, r7
 801a49c:	f7e6 f846 	bl	800052c <__aeabi_dsub>
 801a4a0:	460f      	mov	r7, r1
 801a4a2:	4606      	mov	r6, r0
 801a4a4:	f7e6 fa82 	bl	80009ac <__aeabi_d2iz>
 801a4a8:	9004      	str	r0, [sp, #16]
 801a4aa:	f7e6 f98d 	bl	80007c8 <__aeabi_i2d>
 801a4ae:	4602      	mov	r2, r0
 801a4b0:	460b      	mov	r3, r1
 801a4b2:	4630      	mov	r0, r6
 801a4b4:	4639      	mov	r1, r7
 801a4b6:	f7e6 f839 	bl	800052c <__aeabi_dsub>
 801a4ba:	f1ba 0f00 	cmp.w	sl, #0
 801a4be:	4606      	mov	r6, r0
 801a4c0:	460f      	mov	r7, r1
 801a4c2:	dd6d      	ble.n	801a5a0 <__kernel_rem_pio2+0x250>
 801a4c4:	1e62      	subs	r2, r4, #1
 801a4c6:	ab0e      	add	r3, sp, #56	; 0x38
 801a4c8:	9d04      	ldr	r5, [sp, #16]
 801a4ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a4ce:	f1ca 0118 	rsb	r1, sl, #24
 801a4d2:	fa40 f301 	asr.w	r3, r0, r1
 801a4d6:	441d      	add	r5, r3
 801a4d8:	408b      	lsls	r3, r1
 801a4da:	1ac0      	subs	r0, r0, r3
 801a4dc:	ab0e      	add	r3, sp, #56	; 0x38
 801a4de:	9504      	str	r5, [sp, #16]
 801a4e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801a4e4:	f1ca 0317 	rsb	r3, sl, #23
 801a4e8:	fa40 fb03 	asr.w	fp, r0, r3
 801a4ec:	f1bb 0f00 	cmp.w	fp, #0
 801a4f0:	dd65      	ble.n	801a5be <__kernel_rem_pio2+0x26e>
 801a4f2:	9b04      	ldr	r3, [sp, #16]
 801a4f4:	2200      	movs	r2, #0
 801a4f6:	3301      	adds	r3, #1
 801a4f8:	9304      	str	r3, [sp, #16]
 801a4fa:	4615      	mov	r5, r2
 801a4fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a500:	4294      	cmp	r4, r2
 801a502:	f300 809c 	bgt.w	801a63e <__kernel_rem_pio2+0x2ee>
 801a506:	f1ba 0f00 	cmp.w	sl, #0
 801a50a:	dd07      	ble.n	801a51c <__kernel_rem_pio2+0x1cc>
 801a50c:	f1ba 0f01 	cmp.w	sl, #1
 801a510:	f000 80c0 	beq.w	801a694 <__kernel_rem_pio2+0x344>
 801a514:	f1ba 0f02 	cmp.w	sl, #2
 801a518:	f000 80c6 	beq.w	801a6a8 <__kernel_rem_pio2+0x358>
 801a51c:	f1bb 0f02 	cmp.w	fp, #2
 801a520:	d14d      	bne.n	801a5be <__kernel_rem_pio2+0x26e>
 801a522:	4632      	mov	r2, r6
 801a524:	463b      	mov	r3, r7
 801a526:	4956      	ldr	r1, [pc, #344]	; (801a680 <__kernel_rem_pio2+0x330>)
 801a528:	2000      	movs	r0, #0
 801a52a:	f7e5 ffff 	bl	800052c <__aeabi_dsub>
 801a52e:	4606      	mov	r6, r0
 801a530:	460f      	mov	r7, r1
 801a532:	2d00      	cmp	r5, #0
 801a534:	d043      	beq.n	801a5be <__kernel_rem_pio2+0x26e>
 801a536:	4650      	mov	r0, sl
 801a538:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 801a670 <__kernel_rem_pio2+0x320>
 801a53c:	f000 fec0 	bl	801b2c0 <scalbn>
 801a540:	4630      	mov	r0, r6
 801a542:	4639      	mov	r1, r7
 801a544:	ec53 2b10 	vmov	r2, r3, d0
 801a548:	f7e5 fff0 	bl	800052c <__aeabi_dsub>
 801a54c:	4606      	mov	r6, r0
 801a54e:	460f      	mov	r7, r1
 801a550:	e035      	b.n	801a5be <__kernel_rem_pio2+0x26e>
 801a552:	4b4c      	ldr	r3, [pc, #304]	; (801a684 <__kernel_rem_pio2+0x334>)
 801a554:	2200      	movs	r2, #0
 801a556:	4630      	mov	r0, r6
 801a558:	4639      	mov	r1, r7
 801a55a:	f7e5 feb9 	bl	80002d0 <__aeabi_dmul>
 801a55e:	f7e6 fa25 	bl	80009ac <__aeabi_d2iz>
 801a562:	f7e6 f931 	bl	80007c8 <__aeabi_i2d>
 801a566:	4602      	mov	r2, r0
 801a568:	460b      	mov	r3, r1
 801a56a:	ec43 2b18 	vmov	d8, r2, r3
 801a56e:	4b46      	ldr	r3, [pc, #280]	; (801a688 <__kernel_rem_pio2+0x338>)
 801a570:	2200      	movs	r2, #0
 801a572:	f7e5 fead 	bl	80002d0 <__aeabi_dmul>
 801a576:	4602      	mov	r2, r0
 801a578:	460b      	mov	r3, r1
 801a57a:	4630      	mov	r0, r6
 801a57c:	4639      	mov	r1, r7
 801a57e:	f7e5 ffd5 	bl	800052c <__aeabi_dsub>
 801a582:	f7e6 fa13 	bl	80009ac <__aeabi_d2iz>
 801a586:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a58a:	f84b 0b04 	str.w	r0, [fp], #4
 801a58e:	ec51 0b18 	vmov	r0, r1, d8
 801a592:	f7e5 ffcd 	bl	8000530 <__adddf3>
 801a596:	f109 39ff 	add.w	r9, r9, #4294967295
 801a59a:	4606      	mov	r6, r0
 801a59c:	460f      	mov	r7, r1
 801a59e:	e75b      	b.n	801a458 <__kernel_rem_pio2+0x108>
 801a5a0:	d106      	bne.n	801a5b0 <__kernel_rem_pio2+0x260>
 801a5a2:	1e63      	subs	r3, r4, #1
 801a5a4:	aa0e      	add	r2, sp, #56	; 0x38
 801a5a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a5aa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 801a5ae:	e79d      	b.n	801a4ec <__kernel_rem_pio2+0x19c>
 801a5b0:	4b36      	ldr	r3, [pc, #216]	; (801a68c <__kernel_rem_pio2+0x33c>)
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	f7e6 f9e6 	bl	8000984 <__aeabi_dcmpge>
 801a5b8:	2800      	cmp	r0, #0
 801a5ba:	d13d      	bne.n	801a638 <__kernel_rem_pio2+0x2e8>
 801a5bc:	4683      	mov	fp, r0
 801a5be:	2200      	movs	r2, #0
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	4630      	mov	r0, r6
 801a5c4:	4639      	mov	r1, r7
 801a5c6:	f7e6 f9bf 	bl	8000948 <__aeabi_dcmpeq>
 801a5ca:	2800      	cmp	r0, #0
 801a5cc:	f000 80c0 	beq.w	801a750 <__kernel_rem_pio2+0x400>
 801a5d0:	1e65      	subs	r5, r4, #1
 801a5d2:	462b      	mov	r3, r5
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	9902      	ldr	r1, [sp, #8]
 801a5d8:	428b      	cmp	r3, r1
 801a5da:	da6c      	bge.n	801a6b6 <__kernel_rem_pio2+0x366>
 801a5dc:	2a00      	cmp	r2, #0
 801a5de:	f000 8089 	beq.w	801a6f4 <__kernel_rem_pio2+0x3a4>
 801a5e2:	ab0e      	add	r3, sp, #56	; 0x38
 801a5e4:	f1aa 0a18 	sub.w	sl, sl, #24
 801a5e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	f000 80ad 	beq.w	801a74c <__kernel_rem_pio2+0x3fc>
 801a5f2:	4650      	mov	r0, sl
 801a5f4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 801a670 <__kernel_rem_pio2+0x320>
 801a5f8:	f000 fe62 	bl	801b2c0 <scalbn>
 801a5fc:	ab9a      	add	r3, sp, #616	; 0x268
 801a5fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a602:	ec57 6b10 	vmov	r6, r7, d0
 801a606:	00ec      	lsls	r4, r5, #3
 801a608:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801a60c:	46aa      	mov	sl, r5
 801a60e:	f1ba 0f00 	cmp.w	sl, #0
 801a612:	f280 80d6 	bge.w	801a7c2 <__kernel_rem_pio2+0x472>
 801a616:	ed9f 8b14 	vldr	d8, [pc, #80]	; 801a668 <__kernel_rem_pio2+0x318>
 801a61a:	462e      	mov	r6, r5
 801a61c:	2e00      	cmp	r6, #0
 801a61e:	f2c0 8104 	blt.w	801a82a <__kernel_rem_pio2+0x4da>
 801a622:	ab72      	add	r3, sp, #456	; 0x1c8
 801a624:	ed8d 8b06 	vstr	d8, [sp, #24]
 801a628:	f8df a064 	ldr.w	sl, [pc, #100]	; 801a690 <__kernel_rem_pio2+0x340>
 801a62c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 801a630:	f04f 0800 	mov.w	r8, #0
 801a634:	1baf      	subs	r7, r5, r6
 801a636:	e0ea      	b.n	801a80e <__kernel_rem_pio2+0x4be>
 801a638:	f04f 0b02 	mov.w	fp, #2
 801a63c:	e759      	b.n	801a4f2 <__kernel_rem_pio2+0x1a2>
 801a63e:	f8d8 3000 	ldr.w	r3, [r8]
 801a642:	b955      	cbnz	r5, 801a65a <__kernel_rem_pio2+0x30a>
 801a644:	b123      	cbz	r3, 801a650 <__kernel_rem_pio2+0x300>
 801a646:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a64a:	f8c8 3000 	str.w	r3, [r8]
 801a64e:	2301      	movs	r3, #1
 801a650:	3201      	adds	r2, #1
 801a652:	f108 0804 	add.w	r8, r8, #4
 801a656:	461d      	mov	r5, r3
 801a658:	e752      	b.n	801a500 <__kernel_rem_pio2+0x1b0>
 801a65a:	1acb      	subs	r3, r1, r3
 801a65c:	f8c8 3000 	str.w	r3, [r8]
 801a660:	462b      	mov	r3, r5
 801a662:	e7f5      	b.n	801a650 <__kernel_rem_pio2+0x300>
 801a664:	f3af 8000 	nop.w
	...
 801a674:	3ff00000 	.word	0x3ff00000
 801a678:	0801db70 	.word	0x0801db70
 801a67c:	40200000 	.word	0x40200000
 801a680:	3ff00000 	.word	0x3ff00000
 801a684:	3e700000 	.word	0x3e700000
 801a688:	41700000 	.word	0x41700000
 801a68c:	3fe00000 	.word	0x3fe00000
 801a690:	0801db30 	.word	0x0801db30
 801a694:	1e62      	subs	r2, r4, #1
 801a696:	ab0e      	add	r3, sp, #56	; 0x38
 801a698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a69c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a6a0:	a90e      	add	r1, sp, #56	; 0x38
 801a6a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a6a6:	e739      	b.n	801a51c <__kernel_rem_pio2+0x1cc>
 801a6a8:	1e62      	subs	r2, r4, #1
 801a6aa:	ab0e      	add	r3, sp, #56	; 0x38
 801a6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a6b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a6b4:	e7f4      	b.n	801a6a0 <__kernel_rem_pio2+0x350>
 801a6b6:	a90e      	add	r1, sp, #56	; 0x38
 801a6b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a6bc:	3b01      	subs	r3, #1
 801a6be:	430a      	orrs	r2, r1
 801a6c0:	e789      	b.n	801a5d6 <__kernel_rem_pio2+0x286>
 801a6c2:	3301      	adds	r3, #1
 801a6c4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a6c8:	2900      	cmp	r1, #0
 801a6ca:	d0fa      	beq.n	801a6c2 <__kernel_rem_pio2+0x372>
 801a6cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a6ce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801a6d2:	446a      	add	r2, sp
 801a6d4:	3a98      	subs	r2, #152	; 0x98
 801a6d6:	920a      	str	r2, [sp, #40]	; 0x28
 801a6d8:	9a08      	ldr	r2, [sp, #32]
 801a6da:	18e3      	adds	r3, r4, r3
 801a6dc:	18a5      	adds	r5, r4, r2
 801a6de:	aa22      	add	r2, sp, #136	; 0x88
 801a6e0:	f104 0801 	add.w	r8, r4, #1
 801a6e4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801a6e8:	9304      	str	r3, [sp, #16]
 801a6ea:	9b04      	ldr	r3, [sp, #16]
 801a6ec:	4543      	cmp	r3, r8
 801a6ee:	da04      	bge.n	801a6fa <__kernel_rem_pio2+0x3aa>
 801a6f0:	461c      	mov	r4, r3
 801a6f2:	e6a3      	b.n	801a43c <__kernel_rem_pio2+0xec>
 801a6f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a6f6:	2301      	movs	r3, #1
 801a6f8:	e7e4      	b.n	801a6c4 <__kernel_rem_pio2+0x374>
 801a6fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a6fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a700:	f7e6 f862 	bl	80007c8 <__aeabi_i2d>
 801a704:	e8e5 0102 	strd	r0, r1, [r5], #8
 801a708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a70a:	46ab      	mov	fp, r5
 801a70c:	461c      	mov	r4, r3
 801a70e:	f04f 0900 	mov.w	r9, #0
 801a712:	2600      	movs	r6, #0
 801a714:	2700      	movs	r7, #0
 801a716:	9b06      	ldr	r3, [sp, #24]
 801a718:	4599      	cmp	r9, r3
 801a71a:	dd06      	ble.n	801a72a <__kernel_rem_pio2+0x3da>
 801a71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a71e:	e8e3 6702 	strd	r6, r7, [r3], #8
 801a722:	f108 0801 	add.w	r8, r8, #1
 801a726:	930a      	str	r3, [sp, #40]	; 0x28
 801a728:	e7df      	b.n	801a6ea <__kernel_rem_pio2+0x39a>
 801a72a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a72e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a732:	f7e5 fdcd 	bl	80002d0 <__aeabi_dmul>
 801a736:	4602      	mov	r2, r0
 801a738:	460b      	mov	r3, r1
 801a73a:	4630      	mov	r0, r6
 801a73c:	4639      	mov	r1, r7
 801a73e:	f7e5 fef7 	bl	8000530 <__adddf3>
 801a742:	f109 0901 	add.w	r9, r9, #1
 801a746:	4606      	mov	r6, r0
 801a748:	460f      	mov	r7, r1
 801a74a:	e7e4      	b.n	801a716 <__kernel_rem_pio2+0x3c6>
 801a74c:	3d01      	subs	r5, #1
 801a74e:	e748      	b.n	801a5e2 <__kernel_rem_pio2+0x292>
 801a750:	ec47 6b10 	vmov	d0, r6, r7
 801a754:	f1ca 0000 	rsb	r0, sl, #0
 801a758:	f000 fdb2 	bl	801b2c0 <scalbn>
 801a75c:	ec57 6b10 	vmov	r6, r7, d0
 801a760:	4ba0      	ldr	r3, [pc, #640]	; (801a9e4 <__kernel_rem_pio2+0x694>)
 801a762:	ee10 0a10 	vmov	r0, s0
 801a766:	2200      	movs	r2, #0
 801a768:	4639      	mov	r1, r7
 801a76a:	f7e6 f90b 	bl	8000984 <__aeabi_dcmpge>
 801a76e:	b1f8      	cbz	r0, 801a7b0 <__kernel_rem_pio2+0x460>
 801a770:	4b9d      	ldr	r3, [pc, #628]	; (801a9e8 <__kernel_rem_pio2+0x698>)
 801a772:	2200      	movs	r2, #0
 801a774:	4630      	mov	r0, r6
 801a776:	4639      	mov	r1, r7
 801a778:	f7e5 fdaa 	bl	80002d0 <__aeabi_dmul>
 801a77c:	f7e6 f916 	bl	80009ac <__aeabi_d2iz>
 801a780:	4680      	mov	r8, r0
 801a782:	f7e6 f821 	bl	80007c8 <__aeabi_i2d>
 801a786:	4b97      	ldr	r3, [pc, #604]	; (801a9e4 <__kernel_rem_pio2+0x694>)
 801a788:	2200      	movs	r2, #0
 801a78a:	f7e5 fda1 	bl	80002d0 <__aeabi_dmul>
 801a78e:	460b      	mov	r3, r1
 801a790:	4602      	mov	r2, r0
 801a792:	4639      	mov	r1, r7
 801a794:	4630      	mov	r0, r6
 801a796:	f7e5 fec9 	bl	800052c <__aeabi_dsub>
 801a79a:	f7e6 f907 	bl	80009ac <__aeabi_d2iz>
 801a79e:	1c65      	adds	r5, r4, #1
 801a7a0:	ab0e      	add	r3, sp, #56	; 0x38
 801a7a2:	f10a 0a18 	add.w	sl, sl, #24
 801a7a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a7aa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a7ae:	e720      	b.n	801a5f2 <__kernel_rem_pio2+0x2a2>
 801a7b0:	4630      	mov	r0, r6
 801a7b2:	4639      	mov	r1, r7
 801a7b4:	f7e6 f8fa 	bl	80009ac <__aeabi_d2iz>
 801a7b8:	ab0e      	add	r3, sp, #56	; 0x38
 801a7ba:	4625      	mov	r5, r4
 801a7bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a7c0:	e717      	b.n	801a5f2 <__kernel_rem_pio2+0x2a2>
 801a7c2:	ab0e      	add	r3, sp, #56	; 0x38
 801a7c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 801a7c8:	f7e5 fffe 	bl	80007c8 <__aeabi_i2d>
 801a7cc:	4632      	mov	r2, r6
 801a7ce:	463b      	mov	r3, r7
 801a7d0:	f7e5 fd7e 	bl	80002d0 <__aeabi_dmul>
 801a7d4:	4b84      	ldr	r3, [pc, #528]	; (801a9e8 <__kernel_rem_pio2+0x698>)
 801a7d6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801a7da:	2200      	movs	r2, #0
 801a7dc:	4630      	mov	r0, r6
 801a7de:	4639      	mov	r1, r7
 801a7e0:	f7e5 fd76 	bl	80002d0 <__aeabi_dmul>
 801a7e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a7e8:	4606      	mov	r6, r0
 801a7ea:	460f      	mov	r7, r1
 801a7ec:	e70f      	b.n	801a60e <__kernel_rem_pio2+0x2be>
 801a7ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801a7f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801a7f6:	f7e5 fd6b 	bl	80002d0 <__aeabi_dmul>
 801a7fa:	4602      	mov	r2, r0
 801a7fc:	460b      	mov	r3, r1
 801a7fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a802:	f7e5 fe95 	bl	8000530 <__adddf3>
 801a806:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a80a:	f108 0801 	add.w	r8, r8, #1
 801a80e:	9b02      	ldr	r3, [sp, #8]
 801a810:	4598      	cmp	r8, r3
 801a812:	dc01      	bgt.n	801a818 <__kernel_rem_pio2+0x4c8>
 801a814:	45b8      	cmp	r8, r7
 801a816:	ddea      	ble.n	801a7ee <__kernel_rem_pio2+0x49e>
 801a818:	ed9d 7b06 	vldr	d7, [sp, #24]
 801a81c:	ab4a      	add	r3, sp, #296	; 0x128
 801a81e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801a822:	ed87 7b00 	vstr	d7, [r7]
 801a826:	3e01      	subs	r6, #1
 801a828:	e6f8      	b.n	801a61c <__kernel_rem_pio2+0x2cc>
 801a82a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a82c:	2b02      	cmp	r3, #2
 801a82e:	dc0b      	bgt.n	801a848 <__kernel_rem_pio2+0x4f8>
 801a830:	2b00      	cmp	r3, #0
 801a832:	dc35      	bgt.n	801a8a0 <__kernel_rem_pio2+0x550>
 801a834:	d059      	beq.n	801a8ea <__kernel_rem_pio2+0x59a>
 801a836:	9b04      	ldr	r3, [sp, #16]
 801a838:	f003 0007 	and.w	r0, r3, #7
 801a83c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 801a840:	ecbd 8b02 	vpop	{d8}
 801a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a848:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801a84a:	2b03      	cmp	r3, #3
 801a84c:	d1f3      	bne.n	801a836 <__kernel_rem_pio2+0x4e6>
 801a84e:	ab4a      	add	r3, sp, #296	; 0x128
 801a850:	4423      	add	r3, r4
 801a852:	9306      	str	r3, [sp, #24]
 801a854:	461c      	mov	r4, r3
 801a856:	469a      	mov	sl, r3
 801a858:	9502      	str	r5, [sp, #8]
 801a85a:	9b02      	ldr	r3, [sp, #8]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	f1aa 0a08 	sub.w	sl, sl, #8
 801a862:	dc6b      	bgt.n	801a93c <__kernel_rem_pio2+0x5ec>
 801a864:	46aa      	mov	sl, r5
 801a866:	f1ba 0f01 	cmp.w	sl, #1
 801a86a:	f1a4 0408 	sub.w	r4, r4, #8
 801a86e:	f300 8085 	bgt.w	801a97c <__kernel_rem_pio2+0x62c>
 801a872:	9c06      	ldr	r4, [sp, #24]
 801a874:	2000      	movs	r0, #0
 801a876:	3408      	adds	r4, #8
 801a878:	2100      	movs	r1, #0
 801a87a:	2d01      	cmp	r5, #1
 801a87c:	f300 809d 	bgt.w	801a9ba <__kernel_rem_pio2+0x66a>
 801a880:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801a884:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 801a888:	f1bb 0f00 	cmp.w	fp, #0
 801a88c:	f040 809b 	bne.w	801a9c6 <__kernel_rem_pio2+0x676>
 801a890:	9b01      	ldr	r3, [sp, #4]
 801a892:	e9c3 5600 	strd	r5, r6, [r3]
 801a896:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801a89a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a89e:	e7ca      	b.n	801a836 <__kernel_rem_pio2+0x4e6>
 801a8a0:	3408      	adds	r4, #8
 801a8a2:	ab4a      	add	r3, sp, #296	; 0x128
 801a8a4:	441c      	add	r4, r3
 801a8a6:	462e      	mov	r6, r5
 801a8a8:	2000      	movs	r0, #0
 801a8aa:	2100      	movs	r1, #0
 801a8ac:	2e00      	cmp	r6, #0
 801a8ae:	da36      	bge.n	801a91e <__kernel_rem_pio2+0x5ce>
 801a8b0:	f1bb 0f00 	cmp.w	fp, #0
 801a8b4:	d039      	beq.n	801a92a <__kernel_rem_pio2+0x5da>
 801a8b6:	4602      	mov	r2, r0
 801a8b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a8bc:	9c01      	ldr	r4, [sp, #4]
 801a8be:	e9c4 2300 	strd	r2, r3, [r4]
 801a8c2:	4602      	mov	r2, r0
 801a8c4:	460b      	mov	r3, r1
 801a8c6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801a8ca:	f7e5 fe2f 	bl	800052c <__aeabi_dsub>
 801a8ce:	ae4c      	add	r6, sp, #304	; 0x130
 801a8d0:	2401      	movs	r4, #1
 801a8d2:	42a5      	cmp	r5, r4
 801a8d4:	da2c      	bge.n	801a930 <__kernel_rem_pio2+0x5e0>
 801a8d6:	f1bb 0f00 	cmp.w	fp, #0
 801a8da:	d002      	beq.n	801a8e2 <__kernel_rem_pio2+0x592>
 801a8dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a8e0:	4619      	mov	r1, r3
 801a8e2:	9b01      	ldr	r3, [sp, #4]
 801a8e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a8e8:	e7a5      	b.n	801a836 <__kernel_rem_pio2+0x4e6>
 801a8ea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801a8ee:	eb0d 0403 	add.w	r4, sp, r3
 801a8f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801a8f6:	2000      	movs	r0, #0
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	2d00      	cmp	r5, #0
 801a8fc:	da09      	bge.n	801a912 <__kernel_rem_pio2+0x5c2>
 801a8fe:	f1bb 0f00 	cmp.w	fp, #0
 801a902:	d002      	beq.n	801a90a <__kernel_rem_pio2+0x5ba>
 801a904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a908:	4619      	mov	r1, r3
 801a90a:	9b01      	ldr	r3, [sp, #4]
 801a90c:	e9c3 0100 	strd	r0, r1, [r3]
 801a910:	e791      	b.n	801a836 <__kernel_rem_pio2+0x4e6>
 801a912:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a916:	f7e5 fe0b 	bl	8000530 <__adddf3>
 801a91a:	3d01      	subs	r5, #1
 801a91c:	e7ed      	b.n	801a8fa <__kernel_rem_pio2+0x5aa>
 801a91e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a922:	f7e5 fe05 	bl	8000530 <__adddf3>
 801a926:	3e01      	subs	r6, #1
 801a928:	e7c0      	b.n	801a8ac <__kernel_rem_pio2+0x55c>
 801a92a:	4602      	mov	r2, r0
 801a92c:	460b      	mov	r3, r1
 801a92e:	e7c5      	b.n	801a8bc <__kernel_rem_pio2+0x56c>
 801a930:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a934:	f7e5 fdfc 	bl	8000530 <__adddf3>
 801a938:	3401      	adds	r4, #1
 801a93a:	e7ca      	b.n	801a8d2 <__kernel_rem_pio2+0x582>
 801a93c:	e9da 8900 	ldrd	r8, r9, [sl]
 801a940:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801a944:	9b02      	ldr	r3, [sp, #8]
 801a946:	3b01      	subs	r3, #1
 801a948:	9302      	str	r3, [sp, #8]
 801a94a:	4632      	mov	r2, r6
 801a94c:	463b      	mov	r3, r7
 801a94e:	4640      	mov	r0, r8
 801a950:	4649      	mov	r1, r9
 801a952:	f7e5 fded 	bl	8000530 <__adddf3>
 801a956:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a95a:	4602      	mov	r2, r0
 801a95c:	460b      	mov	r3, r1
 801a95e:	4640      	mov	r0, r8
 801a960:	4649      	mov	r1, r9
 801a962:	f7e5 fde3 	bl	800052c <__aeabi_dsub>
 801a966:	4632      	mov	r2, r6
 801a968:	463b      	mov	r3, r7
 801a96a:	f7e5 fde1 	bl	8000530 <__adddf3>
 801a96e:	ed9d 7b08 	vldr	d7, [sp, #32]
 801a972:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a976:	ed8a 7b00 	vstr	d7, [sl]
 801a97a:	e76e      	b.n	801a85a <__kernel_rem_pio2+0x50a>
 801a97c:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a980:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801a984:	4640      	mov	r0, r8
 801a986:	4632      	mov	r2, r6
 801a988:	463b      	mov	r3, r7
 801a98a:	4649      	mov	r1, r9
 801a98c:	f7e5 fdd0 	bl	8000530 <__adddf3>
 801a990:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a994:	4602      	mov	r2, r0
 801a996:	460b      	mov	r3, r1
 801a998:	4640      	mov	r0, r8
 801a99a:	4649      	mov	r1, r9
 801a99c:	f7e5 fdc6 	bl	800052c <__aeabi_dsub>
 801a9a0:	4632      	mov	r2, r6
 801a9a2:	463b      	mov	r3, r7
 801a9a4:	f7e5 fdc4 	bl	8000530 <__adddf3>
 801a9a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a9ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a9b0:	ed84 7b00 	vstr	d7, [r4]
 801a9b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a9b8:	e755      	b.n	801a866 <__kernel_rem_pio2+0x516>
 801a9ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a9be:	f7e5 fdb7 	bl	8000530 <__adddf3>
 801a9c2:	3d01      	subs	r5, #1
 801a9c4:	e759      	b.n	801a87a <__kernel_rem_pio2+0x52a>
 801a9c6:	9b01      	ldr	r3, [sp, #4]
 801a9c8:	9a01      	ldr	r2, [sp, #4]
 801a9ca:	601d      	str	r5, [r3, #0]
 801a9cc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801a9d0:	605c      	str	r4, [r3, #4]
 801a9d2:	609f      	str	r7, [r3, #8]
 801a9d4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801a9d8:	60d3      	str	r3, [r2, #12]
 801a9da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a9de:	6110      	str	r0, [r2, #16]
 801a9e0:	6153      	str	r3, [r2, #20]
 801a9e2:	e728      	b.n	801a836 <__kernel_rem_pio2+0x4e6>
 801a9e4:	41700000 	.word	0x41700000
 801a9e8:	3e700000 	.word	0x3e700000
 801a9ec:	00000000 	.word	0x00000000

0801a9f0 <__kernel_sin>:
 801a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f4:	ed2d 8b04 	vpush	{d8-d9}
 801a9f8:	eeb0 8a41 	vmov.f32	s16, s2
 801a9fc:	eef0 8a61 	vmov.f32	s17, s3
 801aa00:	ec55 4b10 	vmov	r4, r5, d0
 801aa04:	b083      	sub	sp, #12
 801aa06:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801aa0a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801aa0e:	9001      	str	r0, [sp, #4]
 801aa10:	da06      	bge.n	801aa20 <__kernel_sin+0x30>
 801aa12:	ee10 0a10 	vmov	r0, s0
 801aa16:	4629      	mov	r1, r5
 801aa18:	f7e5 ffc8 	bl	80009ac <__aeabi_d2iz>
 801aa1c:	2800      	cmp	r0, #0
 801aa1e:	d051      	beq.n	801aac4 <__kernel_sin+0xd4>
 801aa20:	4622      	mov	r2, r4
 801aa22:	462b      	mov	r3, r5
 801aa24:	4620      	mov	r0, r4
 801aa26:	4629      	mov	r1, r5
 801aa28:	f7e5 fc52 	bl	80002d0 <__aeabi_dmul>
 801aa2c:	4682      	mov	sl, r0
 801aa2e:	468b      	mov	fp, r1
 801aa30:	4602      	mov	r2, r0
 801aa32:	460b      	mov	r3, r1
 801aa34:	4620      	mov	r0, r4
 801aa36:	4629      	mov	r1, r5
 801aa38:	f7e5 fc4a 	bl	80002d0 <__aeabi_dmul>
 801aa3c:	a341      	add	r3, pc, #260	; (adr r3, 801ab44 <__kernel_sin+0x154>)
 801aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa42:	4680      	mov	r8, r0
 801aa44:	4689      	mov	r9, r1
 801aa46:	4650      	mov	r0, sl
 801aa48:	4659      	mov	r1, fp
 801aa4a:	f7e5 fc41 	bl	80002d0 <__aeabi_dmul>
 801aa4e:	a33f      	add	r3, pc, #252	; (adr r3, 801ab4c <__kernel_sin+0x15c>)
 801aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa54:	f7e5 fd6a 	bl	800052c <__aeabi_dsub>
 801aa58:	4652      	mov	r2, sl
 801aa5a:	465b      	mov	r3, fp
 801aa5c:	f7e5 fc38 	bl	80002d0 <__aeabi_dmul>
 801aa60:	a33c      	add	r3, pc, #240	; (adr r3, 801ab54 <__kernel_sin+0x164>)
 801aa62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa66:	f7e5 fd63 	bl	8000530 <__adddf3>
 801aa6a:	4652      	mov	r2, sl
 801aa6c:	465b      	mov	r3, fp
 801aa6e:	f7e5 fc2f 	bl	80002d0 <__aeabi_dmul>
 801aa72:	a33a      	add	r3, pc, #232	; (adr r3, 801ab5c <__kernel_sin+0x16c>)
 801aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa78:	f7e5 fd58 	bl	800052c <__aeabi_dsub>
 801aa7c:	4652      	mov	r2, sl
 801aa7e:	465b      	mov	r3, fp
 801aa80:	f7e5 fc26 	bl	80002d0 <__aeabi_dmul>
 801aa84:	a337      	add	r3, pc, #220	; (adr r3, 801ab64 <__kernel_sin+0x174>)
 801aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa8a:	f7e5 fd51 	bl	8000530 <__adddf3>
 801aa8e:	9b01      	ldr	r3, [sp, #4]
 801aa90:	4606      	mov	r6, r0
 801aa92:	460f      	mov	r7, r1
 801aa94:	b9eb      	cbnz	r3, 801aad2 <__kernel_sin+0xe2>
 801aa96:	4602      	mov	r2, r0
 801aa98:	460b      	mov	r3, r1
 801aa9a:	4650      	mov	r0, sl
 801aa9c:	4659      	mov	r1, fp
 801aa9e:	f7e5 fc17 	bl	80002d0 <__aeabi_dmul>
 801aaa2:	a325      	add	r3, pc, #148	; (adr r3, 801ab38 <__kernel_sin+0x148>)
 801aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaa8:	f7e5 fd40 	bl	800052c <__aeabi_dsub>
 801aaac:	4642      	mov	r2, r8
 801aaae:	464b      	mov	r3, r9
 801aab0:	f7e5 fc0e 	bl	80002d0 <__aeabi_dmul>
 801aab4:	4602      	mov	r2, r0
 801aab6:	460b      	mov	r3, r1
 801aab8:	4620      	mov	r0, r4
 801aaba:	4629      	mov	r1, r5
 801aabc:	f7e5 fd38 	bl	8000530 <__adddf3>
 801aac0:	4604      	mov	r4, r0
 801aac2:	460d      	mov	r5, r1
 801aac4:	ec45 4b10 	vmov	d0, r4, r5
 801aac8:	b003      	add	sp, #12
 801aaca:	ecbd 8b04 	vpop	{d8-d9}
 801aace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aad2:	4b1b      	ldr	r3, [pc, #108]	; (801ab40 <__kernel_sin+0x150>)
 801aad4:	ec51 0b18 	vmov	r0, r1, d8
 801aad8:	2200      	movs	r2, #0
 801aada:	f7e5 fbf9 	bl	80002d0 <__aeabi_dmul>
 801aade:	4632      	mov	r2, r6
 801aae0:	ec41 0b19 	vmov	d9, r0, r1
 801aae4:	463b      	mov	r3, r7
 801aae6:	4640      	mov	r0, r8
 801aae8:	4649      	mov	r1, r9
 801aaea:	f7e5 fbf1 	bl	80002d0 <__aeabi_dmul>
 801aaee:	4602      	mov	r2, r0
 801aaf0:	460b      	mov	r3, r1
 801aaf2:	ec51 0b19 	vmov	r0, r1, d9
 801aaf6:	f7e5 fd19 	bl	800052c <__aeabi_dsub>
 801aafa:	4652      	mov	r2, sl
 801aafc:	465b      	mov	r3, fp
 801aafe:	f7e5 fbe7 	bl	80002d0 <__aeabi_dmul>
 801ab02:	ec53 2b18 	vmov	r2, r3, d8
 801ab06:	f7e5 fd11 	bl	800052c <__aeabi_dsub>
 801ab0a:	a30b      	add	r3, pc, #44	; (adr r3, 801ab38 <__kernel_sin+0x148>)
 801ab0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab10:	4606      	mov	r6, r0
 801ab12:	460f      	mov	r7, r1
 801ab14:	4640      	mov	r0, r8
 801ab16:	4649      	mov	r1, r9
 801ab18:	f7e5 fbda 	bl	80002d0 <__aeabi_dmul>
 801ab1c:	4602      	mov	r2, r0
 801ab1e:	460b      	mov	r3, r1
 801ab20:	4630      	mov	r0, r6
 801ab22:	4639      	mov	r1, r7
 801ab24:	f7e5 fd04 	bl	8000530 <__adddf3>
 801ab28:	4602      	mov	r2, r0
 801ab2a:	460b      	mov	r3, r1
 801ab2c:	4620      	mov	r0, r4
 801ab2e:	4629      	mov	r1, r5
 801ab30:	f7e5 fcfc 	bl	800052c <__aeabi_dsub>
 801ab34:	e7c4      	b.n	801aac0 <__kernel_sin+0xd0>
 801ab36:	bf00      	nop
 801ab38:	55555549 	.word	0x55555549
 801ab3c:	3fc55555 	.word	0x3fc55555
 801ab40:	3fe00000 	.word	0x3fe00000
 801ab44:	5acfd57c 	.word	0x5acfd57c
 801ab48:	3de5d93a 	.word	0x3de5d93a
 801ab4c:	8a2b9ceb 	.word	0x8a2b9ceb
 801ab50:	3e5ae5e6 	.word	0x3e5ae5e6
 801ab54:	57b1fe7d 	.word	0x57b1fe7d
 801ab58:	3ec71de3 	.word	0x3ec71de3
 801ab5c:	19c161d5 	.word	0x19c161d5
 801ab60:	3f2a01a0 	.word	0x3f2a01a0
 801ab64:	1110f8a6 	.word	0x1110f8a6
 801ab68:	3f811111 	.word	0x3f811111

0801ab6c <__kernel_cosf>:
 801ab6c:	ee10 3a10 	vmov	r3, s0
 801ab70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ab74:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801ab78:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801ab7c:	da05      	bge.n	801ab8a <__kernel_cosf+0x1e>
 801ab7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801ab82:	ee17 2a90 	vmov	r2, s15
 801ab86:	2a00      	cmp	r2, #0
 801ab88:	d03d      	beq.n	801ac06 <__kernel_cosf+0x9a>
 801ab8a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801ab8e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801ac0c <__kernel_cosf+0xa0>
 801ab92:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801ac10 <__kernel_cosf+0xa4>
 801ab96:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801ac14 <__kernel_cosf+0xa8>
 801ab9a:	4a1f      	ldr	r2, [pc, #124]	; (801ac18 <__kernel_cosf+0xac>)
 801ab9c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801aba0:	4293      	cmp	r3, r2
 801aba2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801ac1c <__kernel_cosf+0xb0>
 801aba6:	eee7 7a25 	vfma.f32	s15, s14, s11
 801abaa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801ac20 <__kernel_cosf+0xb4>
 801abae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801abb2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801ac24 <__kernel_cosf+0xb8>
 801abb6:	eee7 7a25 	vfma.f32	s15, s14, s11
 801abba:	eeb0 7a66 	vmov.f32	s14, s13
 801abbe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801abc2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801abc6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801abca:	ee67 6a25 	vmul.f32	s13, s14, s11
 801abce:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801abd2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801abd6:	dc04      	bgt.n	801abe2 <__kernel_cosf+0x76>
 801abd8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801abdc:	ee36 0a47 	vsub.f32	s0, s12, s14
 801abe0:	4770      	bx	lr
 801abe2:	4a11      	ldr	r2, [pc, #68]	; (801ac28 <__kernel_cosf+0xbc>)
 801abe4:	4293      	cmp	r3, r2
 801abe6:	bfda      	itte	le
 801abe8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801abec:	ee06 3a90 	vmovle	s13, r3
 801abf0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801abf4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801abf8:	ee36 0a66 	vsub.f32	s0, s12, s13
 801abfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ac00:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ac04:	4770      	bx	lr
 801ac06:	eeb0 0a46 	vmov.f32	s0, s12
 801ac0a:	4770      	bx	lr
 801ac0c:	ad47d74e 	.word	0xad47d74e
 801ac10:	310f74f6 	.word	0x310f74f6
 801ac14:	3d2aaaab 	.word	0x3d2aaaab
 801ac18:	3e999999 	.word	0x3e999999
 801ac1c:	b493f27c 	.word	0xb493f27c
 801ac20:	37d00d01 	.word	0x37d00d01
 801ac24:	bab60b61 	.word	0xbab60b61
 801ac28:	3f480000 	.word	0x3f480000

0801ac2c <__kernel_rem_pio2f>:
 801ac2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac30:	ed2d 8b04 	vpush	{d8-d9}
 801ac34:	b0d9      	sub	sp, #356	; 0x164
 801ac36:	4688      	mov	r8, r1
 801ac38:	9002      	str	r0, [sp, #8]
 801ac3a:	49bb      	ldr	r1, [pc, #748]	; (801af28 <__kernel_rem_pio2f+0x2fc>)
 801ac3c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801ac3e:	9301      	str	r3, [sp, #4]
 801ac40:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801ac44:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801ac48:	1e59      	subs	r1, r3, #1
 801ac4a:	1d13      	adds	r3, r2, #4
 801ac4c:	db27      	blt.n	801ac9e <__kernel_rem_pio2f+0x72>
 801ac4e:	f1b2 0b03 	subs.w	fp, r2, #3
 801ac52:	bf48      	it	mi
 801ac54:	f102 0b04 	addmi.w	fp, r2, #4
 801ac58:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801ac5c:	1c45      	adds	r5, r0, #1
 801ac5e:	00ec      	lsls	r4, r5, #3
 801ac60:	1a47      	subs	r7, r0, r1
 801ac62:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801af38 <__kernel_rem_pio2f+0x30c>
 801ac66:	9403      	str	r4, [sp, #12]
 801ac68:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801ac6c:	eb0a 0c01 	add.w	ip, sl, r1
 801ac70:	ae1c      	add	r6, sp, #112	; 0x70
 801ac72:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801ac76:	2400      	movs	r4, #0
 801ac78:	4564      	cmp	r4, ip
 801ac7a:	dd12      	ble.n	801aca2 <__kernel_rem_pio2f+0x76>
 801ac7c:	9b01      	ldr	r3, [sp, #4]
 801ac7e:	ac1c      	add	r4, sp, #112	; 0x70
 801ac80:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801ac84:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801ac88:	f04f 0c00 	mov.w	ip, #0
 801ac8c:	45d4      	cmp	ip, sl
 801ac8e:	dc27      	bgt.n	801ace0 <__kernel_rem_pio2f+0xb4>
 801ac90:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801ac94:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801af38 <__kernel_rem_pio2f+0x30c>
 801ac98:	4627      	mov	r7, r4
 801ac9a:	2600      	movs	r6, #0
 801ac9c:	e016      	b.n	801accc <__kernel_rem_pio2f+0xa0>
 801ac9e:	2000      	movs	r0, #0
 801aca0:	e7dc      	b.n	801ac5c <__kernel_rem_pio2f+0x30>
 801aca2:	42e7      	cmn	r7, r4
 801aca4:	bf5d      	ittte	pl
 801aca6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801acaa:	ee07 3a90 	vmovpl	s15, r3
 801acae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801acb2:	eef0 7a47 	vmovmi.f32	s15, s14
 801acb6:	ece6 7a01 	vstmia	r6!, {s15}
 801acba:	3401      	adds	r4, #1
 801acbc:	e7dc      	b.n	801ac78 <__kernel_rem_pio2f+0x4c>
 801acbe:	ecf9 6a01 	vldmia	r9!, {s13}
 801acc2:	ed97 7a00 	vldr	s14, [r7]
 801acc6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801acca:	3601      	adds	r6, #1
 801accc:	428e      	cmp	r6, r1
 801acce:	f1a7 0704 	sub.w	r7, r7, #4
 801acd2:	ddf4      	ble.n	801acbe <__kernel_rem_pio2f+0x92>
 801acd4:	eceb 7a01 	vstmia	fp!, {s15}
 801acd8:	f10c 0c01 	add.w	ip, ip, #1
 801acdc:	3404      	adds	r4, #4
 801acde:	e7d5      	b.n	801ac8c <__kernel_rem_pio2f+0x60>
 801ace0:	ab08      	add	r3, sp, #32
 801ace2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801ace6:	eddf 8a93 	vldr	s17, [pc, #588]	; 801af34 <__kernel_rem_pio2f+0x308>
 801acea:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801af30 <__kernel_rem_pio2f+0x304>
 801acee:	9304      	str	r3, [sp, #16]
 801acf0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801acf4:	4656      	mov	r6, sl
 801acf6:	00b3      	lsls	r3, r6, #2
 801acf8:	9305      	str	r3, [sp, #20]
 801acfa:	ab58      	add	r3, sp, #352	; 0x160
 801acfc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801ad00:	ac08      	add	r4, sp, #32
 801ad02:	ab44      	add	r3, sp, #272	; 0x110
 801ad04:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801ad08:	46a4      	mov	ip, r4
 801ad0a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801ad0e:	4637      	mov	r7, r6
 801ad10:	2f00      	cmp	r7, #0
 801ad12:	f1a0 0004 	sub.w	r0, r0, #4
 801ad16:	dc4f      	bgt.n	801adb8 <__kernel_rem_pio2f+0x18c>
 801ad18:	4628      	mov	r0, r5
 801ad1a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801ad1e:	f000 fc73 	bl	801b608 <scalbnf>
 801ad22:	eeb0 8a40 	vmov.f32	s16, s0
 801ad26:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801ad2a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801ad2e:	f000 fc29 	bl	801b584 <floorf>
 801ad32:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801ad36:	eea0 8a67 	vfms.f32	s16, s0, s15
 801ad3a:	2d00      	cmp	r5, #0
 801ad3c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801ad40:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801ad44:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ad48:	ee17 9a90 	vmov	r9, s15
 801ad4c:	ee38 8a40 	vsub.f32	s16, s16, s0
 801ad50:	dd44      	ble.n	801addc <__kernel_rem_pio2f+0x1b0>
 801ad52:	f106 3cff 	add.w	ip, r6, #4294967295
 801ad56:	ab08      	add	r3, sp, #32
 801ad58:	f1c5 0e08 	rsb	lr, r5, #8
 801ad5c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801ad60:	fa47 f00e 	asr.w	r0, r7, lr
 801ad64:	4481      	add	r9, r0
 801ad66:	fa00 f00e 	lsl.w	r0, r0, lr
 801ad6a:	1a3f      	subs	r7, r7, r0
 801ad6c:	f1c5 0007 	rsb	r0, r5, #7
 801ad70:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801ad74:	4107      	asrs	r7, r0
 801ad76:	2f00      	cmp	r7, #0
 801ad78:	dd3f      	ble.n	801adfa <__kernel_rem_pio2f+0x1ce>
 801ad7a:	f04f 0e00 	mov.w	lr, #0
 801ad7e:	f109 0901 	add.w	r9, r9, #1
 801ad82:	4673      	mov	r3, lr
 801ad84:	4576      	cmp	r6, lr
 801ad86:	dc6b      	bgt.n	801ae60 <__kernel_rem_pio2f+0x234>
 801ad88:	2d00      	cmp	r5, #0
 801ad8a:	dd04      	ble.n	801ad96 <__kernel_rem_pio2f+0x16a>
 801ad8c:	2d01      	cmp	r5, #1
 801ad8e:	d078      	beq.n	801ae82 <__kernel_rem_pio2f+0x256>
 801ad90:	2d02      	cmp	r5, #2
 801ad92:	f000 8081 	beq.w	801ae98 <__kernel_rem_pio2f+0x26c>
 801ad96:	2f02      	cmp	r7, #2
 801ad98:	d12f      	bne.n	801adfa <__kernel_rem_pio2f+0x1ce>
 801ad9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ad9e:	ee30 8a48 	vsub.f32	s16, s0, s16
 801ada2:	b353      	cbz	r3, 801adfa <__kernel_rem_pio2f+0x1ce>
 801ada4:	4628      	mov	r0, r5
 801ada6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801adaa:	f000 fc2d 	bl	801b608 <scalbnf>
 801adae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801adb2:	ee38 8a40 	vsub.f32	s16, s16, s0
 801adb6:	e020      	b.n	801adfa <__kernel_rem_pio2f+0x1ce>
 801adb8:	ee60 7a28 	vmul.f32	s15, s0, s17
 801adbc:	3f01      	subs	r7, #1
 801adbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801adc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801adc6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801adca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801adce:	ecac 0a01 	vstmia	ip!, {s0}
 801add2:	ed90 0a00 	vldr	s0, [r0]
 801add6:	ee37 0a80 	vadd.f32	s0, s15, s0
 801adda:	e799      	b.n	801ad10 <__kernel_rem_pio2f+0xe4>
 801addc:	d105      	bne.n	801adea <__kernel_rem_pio2f+0x1be>
 801adde:	1e70      	subs	r0, r6, #1
 801ade0:	ab08      	add	r3, sp, #32
 801ade2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801ade6:	11ff      	asrs	r7, r7, #7
 801ade8:	e7c5      	b.n	801ad76 <__kernel_rem_pio2f+0x14a>
 801adea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801adee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adf6:	da31      	bge.n	801ae5c <__kernel_rem_pio2f+0x230>
 801adf8:	2700      	movs	r7, #0
 801adfa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801adfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae02:	f040 809b 	bne.w	801af3c <__kernel_rem_pio2f+0x310>
 801ae06:	1e74      	subs	r4, r6, #1
 801ae08:	46a4      	mov	ip, r4
 801ae0a:	2000      	movs	r0, #0
 801ae0c:	45d4      	cmp	ip, sl
 801ae0e:	da4a      	bge.n	801aea6 <__kernel_rem_pio2f+0x27a>
 801ae10:	2800      	cmp	r0, #0
 801ae12:	d07a      	beq.n	801af0a <__kernel_rem_pio2f+0x2de>
 801ae14:	ab08      	add	r3, sp, #32
 801ae16:	3d08      	subs	r5, #8
 801ae18:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	f000 8081 	beq.w	801af24 <__kernel_rem_pio2f+0x2f8>
 801ae22:	4628      	mov	r0, r5
 801ae24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ae28:	00a5      	lsls	r5, r4, #2
 801ae2a:	f000 fbed 	bl	801b608 <scalbnf>
 801ae2e:	aa44      	add	r2, sp, #272	; 0x110
 801ae30:	1d2b      	adds	r3, r5, #4
 801ae32:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801af34 <__kernel_rem_pio2f+0x308>
 801ae36:	18d1      	adds	r1, r2, r3
 801ae38:	4622      	mov	r2, r4
 801ae3a:	2a00      	cmp	r2, #0
 801ae3c:	f280 80ae 	bge.w	801af9c <__kernel_rem_pio2f+0x370>
 801ae40:	4622      	mov	r2, r4
 801ae42:	2a00      	cmp	r2, #0
 801ae44:	f2c0 80cc 	blt.w	801afe0 <__kernel_rem_pio2f+0x3b4>
 801ae48:	a944      	add	r1, sp, #272	; 0x110
 801ae4a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801ae4e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801af2c <__kernel_rem_pio2f+0x300>
 801ae52:	eddf 7a39 	vldr	s15, [pc, #228]	; 801af38 <__kernel_rem_pio2f+0x30c>
 801ae56:	2000      	movs	r0, #0
 801ae58:	1aa1      	subs	r1, r4, r2
 801ae5a:	e0b6      	b.n	801afca <__kernel_rem_pio2f+0x39e>
 801ae5c:	2702      	movs	r7, #2
 801ae5e:	e78c      	b.n	801ad7a <__kernel_rem_pio2f+0x14e>
 801ae60:	6820      	ldr	r0, [r4, #0]
 801ae62:	b94b      	cbnz	r3, 801ae78 <__kernel_rem_pio2f+0x24c>
 801ae64:	b118      	cbz	r0, 801ae6e <__kernel_rem_pio2f+0x242>
 801ae66:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ae6a:	6020      	str	r0, [r4, #0]
 801ae6c:	2001      	movs	r0, #1
 801ae6e:	f10e 0e01 	add.w	lr, lr, #1
 801ae72:	3404      	adds	r4, #4
 801ae74:	4603      	mov	r3, r0
 801ae76:	e785      	b.n	801ad84 <__kernel_rem_pio2f+0x158>
 801ae78:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801ae7c:	6020      	str	r0, [r4, #0]
 801ae7e:	4618      	mov	r0, r3
 801ae80:	e7f5      	b.n	801ae6e <__kernel_rem_pio2f+0x242>
 801ae82:	1e74      	subs	r4, r6, #1
 801ae84:	a808      	add	r0, sp, #32
 801ae86:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801ae8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ae8e:	f10d 0c20 	add.w	ip, sp, #32
 801ae92:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801ae96:	e77e      	b.n	801ad96 <__kernel_rem_pio2f+0x16a>
 801ae98:	1e74      	subs	r4, r6, #1
 801ae9a:	a808      	add	r0, sp, #32
 801ae9c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801aea0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801aea4:	e7f3      	b.n	801ae8e <__kernel_rem_pio2f+0x262>
 801aea6:	ab08      	add	r3, sp, #32
 801aea8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801aeac:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aeb0:	4318      	orrs	r0, r3
 801aeb2:	e7ab      	b.n	801ae0c <__kernel_rem_pio2f+0x1e0>
 801aeb4:	f10c 0c01 	add.w	ip, ip, #1
 801aeb8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801aebc:	2c00      	cmp	r4, #0
 801aebe:	d0f9      	beq.n	801aeb4 <__kernel_rem_pio2f+0x288>
 801aec0:	9b05      	ldr	r3, [sp, #20]
 801aec2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801aec6:	eb0d 0003 	add.w	r0, sp, r3
 801aeca:	9b01      	ldr	r3, [sp, #4]
 801aecc:	18f4      	adds	r4, r6, r3
 801aece:	ab1c      	add	r3, sp, #112	; 0x70
 801aed0:	1c77      	adds	r7, r6, #1
 801aed2:	384c      	subs	r0, #76	; 0x4c
 801aed4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801aed8:	4466      	add	r6, ip
 801aeda:	42be      	cmp	r6, r7
 801aedc:	f6ff af0b 	blt.w	801acf6 <__kernel_rem_pio2f+0xca>
 801aee0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801aee4:	f8dd e008 	ldr.w	lr, [sp, #8]
 801aee8:	ee07 3a90 	vmov	s15, r3
 801aeec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aef0:	f04f 0c00 	mov.w	ip, #0
 801aef4:	ece4 7a01 	vstmia	r4!, {s15}
 801aef8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801af38 <__kernel_rem_pio2f+0x30c>
 801aefc:	46a1      	mov	r9, r4
 801aefe:	458c      	cmp	ip, r1
 801af00:	dd07      	ble.n	801af12 <__kernel_rem_pio2f+0x2e6>
 801af02:	ece0 7a01 	vstmia	r0!, {s15}
 801af06:	3701      	adds	r7, #1
 801af08:	e7e7      	b.n	801aeda <__kernel_rem_pio2f+0x2ae>
 801af0a:	9804      	ldr	r0, [sp, #16]
 801af0c:	f04f 0c01 	mov.w	ip, #1
 801af10:	e7d2      	b.n	801aeb8 <__kernel_rem_pio2f+0x28c>
 801af12:	ecfe 6a01 	vldmia	lr!, {s13}
 801af16:	ed39 7a01 	vldmdb	r9!, {s14}
 801af1a:	f10c 0c01 	add.w	ip, ip, #1
 801af1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801af22:	e7ec      	b.n	801aefe <__kernel_rem_pio2f+0x2d2>
 801af24:	3c01      	subs	r4, #1
 801af26:	e775      	b.n	801ae14 <__kernel_rem_pio2f+0x1e8>
 801af28:	0801dbac 	.word	0x0801dbac
 801af2c:	0801db80 	.word	0x0801db80
 801af30:	43800000 	.word	0x43800000
 801af34:	3b800000 	.word	0x3b800000
 801af38:	00000000 	.word	0x00000000
 801af3c:	9b03      	ldr	r3, [sp, #12]
 801af3e:	eeb0 0a48 	vmov.f32	s0, s16
 801af42:	1a98      	subs	r0, r3, r2
 801af44:	f000 fb60 	bl	801b608 <scalbnf>
 801af48:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801af30 <__kernel_rem_pio2f+0x304>
 801af4c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801af50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af54:	db19      	blt.n	801af8a <__kernel_rem_pio2f+0x35e>
 801af56:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801af34 <__kernel_rem_pio2f+0x308>
 801af5a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801af5e:	aa08      	add	r2, sp, #32
 801af60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af64:	1c74      	adds	r4, r6, #1
 801af66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af6a:	3508      	adds	r5, #8
 801af6c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801af70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801af78:	ee10 3a10 	vmov	r3, s0
 801af7c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801af80:	ee17 3a90 	vmov	r3, s15
 801af84:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801af88:	e74b      	b.n	801ae22 <__kernel_rem_pio2f+0x1f6>
 801af8a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801af8e:	aa08      	add	r2, sp, #32
 801af90:	ee10 3a10 	vmov	r3, s0
 801af94:	4634      	mov	r4, r6
 801af96:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801af9a:	e742      	b.n	801ae22 <__kernel_rem_pio2f+0x1f6>
 801af9c:	a808      	add	r0, sp, #32
 801af9e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801afa2:	9001      	str	r0, [sp, #4]
 801afa4:	ee07 0a90 	vmov	s15, r0
 801afa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afac:	3a01      	subs	r2, #1
 801afae:	ee67 7a80 	vmul.f32	s15, s15, s0
 801afb2:	ee20 0a07 	vmul.f32	s0, s0, s14
 801afb6:	ed61 7a01 	vstmdb	r1!, {s15}
 801afba:	e73e      	b.n	801ae3a <__kernel_rem_pio2f+0x20e>
 801afbc:	ecfc 6a01 	vldmia	ip!, {s13}
 801afc0:	ecb6 7a01 	vldmia	r6!, {s14}
 801afc4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801afc8:	3001      	adds	r0, #1
 801afca:	4550      	cmp	r0, sl
 801afcc:	dc01      	bgt.n	801afd2 <__kernel_rem_pio2f+0x3a6>
 801afce:	4288      	cmp	r0, r1
 801afd0:	ddf4      	ble.n	801afbc <__kernel_rem_pio2f+0x390>
 801afd2:	a858      	add	r0, sp, #352	; 0x160
 801afd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801afd8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801afdc:	3a01      	subs	r2, #1
 801afde:	e730      	b.n	801ae42 <__kernel_rem_pio2f+0x216>
 801afe0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801afe2:	2a02      	cmp	r2, #2
 801afe4:	dc09      	bgt.n	801affa <__kernel_rem_pio2f+0x3ce>
 801afe6:	2a00      	cmp	r2, #0
 801afe8:	dc2a      	bgt.n	801b040 <__kernel_rem_pio2f+0x414>
 801afea:	d043      	beq.n	801b074 <__kernel_rem_pio2f+0x448>
 801afec:	f009 0007 	and.w	r0, r9, #7
 801aff0:	b059      	add	sp, #356	; 0x164
 801aff2:	ecbd 8b04 	vpop	{d8-d9}
 801aff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801affa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801affc:	2b03      	cmp	r3, #3
 801affe:	d1f5      	bne.n	801afec <__kernel_rem_pio2f+0x3c0>
 801b000:	ab30      	add	r3, sp, #192	; 0xc0
 801b002:	442b      	add	r3, r5
 801b004:	461a      	mov	r2, r3
 801b006:	4619      	mov	r1, r3
 801b008:	4620      	mov	r0, r4
 801b00a:	2800      	cmp	r0, #0
 801b00c:	f1a1 0104 	sub.w	r1, r1, #4
 801b010:	dc51      	bgt.n	801b0b6 <__kernel_rem_pio2f+0x48a>
 801b012:	4621      	mov	r1, r4
 801b014:	2901      	cmp	r1, #1
 801b016:	f1a2 0204 	sub.w	r2, r2, #4
 801b01a:	dc5c      	bgt.n	801b0d6 <__kernel_rem_pio2f+0x4aa>
 801b01c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801af38 <__kernel_rem_pio2f+0x30c>
 801b020:	3304      	adds	r3, #4
 801b022:	2c01      	cmp	r4, #1
 801b024:	dc67      	bgt.n	801b0f6 <__kernel_rem_pio2f+0x4ca>
 801b026:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801b02a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801b02e:	2f00      	cmp	r7, #0
 801b030:	d167      	bne.n	801b102 <__kernel_rem_pio2f+0x4d6>
 801b032:	edc8 6a00 	vstr	s13, [r8]
 801b036:	ed88 7a01 	vstr	s14, [r8, #4]
 801b03a:	edc8 7a02 	vstr	s15, [r8, #8]
 801b03e:	e7d5      	b.n	801afec <__kernel_rem_pio2f+0x3c0>
 801b040:	aa30      	add	r2, sp, #192	; 0xc0
 801b042:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801af38 <__kernel_rem_pio2f+0x30c>
 801b046:	4413      	add	r3, r2
 801b048:	4622      	mov	r2, r4
 801b04a:	2a00      	cmp	r2, #0
 801b04c:	da24      	bge.n	801b098 <__kernel_rem_pio2f+0x46c>
 801b04e:	b34f      	cbz	r7, 801b0a4 <__kernel_rem_pio2f+0x478>
 801b050:	eef1 7a47 	vneg.f32	s15, s14
 801b054:	edc8 7a00 	vstr	s15, [r8]
 801b058:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801b05c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b060:	aa31      	add	r2, sp, #196	; 0xc4
 801b062:	2301      	movs	r3, #1
 801b064:	429c      	cmp	r4, r3
 801b066:	da20      	bge.n	801b0aa <__kernel_rem_pio2f+0x47e>
 801b068:	b10f      	cbz	r7, 801b06e <__kernel_rem_pio2f+0x442>
 801b06a:	eef1 7a67 	vneg.f32	s15, s15
 801b06e:	edc8 7a01 	vstr	s15, [r8, #4]
 801b072:	e7bb      	b.n	801afec <__kernel_rem_pio2f+0x3c0>
 801b074:	aa30      	add	r2, sp, #192	; 0xc0
 801b076:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801af38 <__kernel_rem_pio2f+0x30c>
 801b07a:	4413      	add	r3, r2
 801b07c:	2c00      	cmp	r4, #0
 801b07e:	da05      	bge.n	801b08c <__kernel_rem_pio2f+0x460>
 801b080:	b10f      	cbz	r7, 801b086 <__kernel_rem_pio2f+0x45a>
 801b082:	eef1 7a67 	vneg.f32	s15, s15
 801b086:	edc8 7a00 	vstr	s15, [r8]
 801b08a:	e7af      	b.n	801afec <__kernel_rem_pio2f+0x3c0>
 801b08c:	ed33 7a01 	vldmdb	r3!, {s14}
 801b090:	3c01      	subs	r4, #1
 801b092:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b096:	e7f1      	b.n	801b07c <__kernel_rem_pio2f+0x450>
 801b098:	ed73 7a01 	vldmdb	r3!, {s15}
 801b09c:	3a01      	subs	r2, #1
 801b09e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b0a2:	e7d2      	b.n	801b04a <__kernel_rem_pio2f+0x41e>
 801b0a4:	eef0 7a47 	vmov.f32	s15, s14
 801b0a8:	e7d4      	b.n	801b054 <__kernel_rem_pio2f+0x428>
 801b0aa:	ecb2 7a01 	vldmia	r2!, {s14}
 801b0ae:	3301      	adds	r3, #1
 801b0b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b0b4:	e7d6      	b.n	801b064 <__kernel_rem_pio2f+0x438>
 801b0b6:	edd1 7a00 	vldr	s15, [r1]
 801b0ba:	edd1 6a01 	vldr	s13, [r1, #4]
 801b0be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b0c2:	3801      	subs	r0, #1
 801b0c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b0c8:	ed81 7a00 	vstr	s14, [r1]
 801b0cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b0d0:	edc1 7a01 	vstr	s15, [r1, #4]
 801b0d4:	e799      	b.n	801b00a <__kernel_rem_pio2f+0x3de>
 801b0d6:	edd2 7a00 	vldr	s15, [r2]
 801b0da:	edd2 6a01 	vldr	s13, [r2, #4]
 801b0de:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b0e2:	3901      	subs	r1, #1
 801b0e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b0e8:	ed82 7a00 	vstr	s14, [r2]
 801b0ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b0f0:	edc2 7a01 	vstr	s15, [r2, #4]
 801b0f4:	e78e      	b.n	801b014 <__kernel_rem_pio2f+0x3e8>
 801b0f6:	ed33 7a01 	vldmdb	r3!, {s14}
 801b0fa:	3c01      	subs	r4, #1
 801b0fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b100:	e78f      	b.n	801b022 <__kernel_rem_pio2f+0x3f6>
 801b102:	eef1 6a66 	vneg.f32	s13, s13
 801b106:	eeb1 7a47 	vneg.f32	s14, s14
 801b10a:	edc8 6a00 	vstr	s13, [r8]
 801b10e:	ed88 7a01 	vstr	s14, [r8, #4]
 801b112:	eef1 7a67 	vneg.f32	s15, s15
 801b116:	e790      	b.n	801b03a <__kernel_rem_pio2f+0x40e>

0801b118 <__kernel_sinf>:
 801b118:	ee10 3a10 	vmov	r3, s0
 801b11c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b120:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801b124:	da04      	bge.n	801b130 <__kernel_sinf+0x18>
 801b126:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b12a:	ee17 3a90 	vmov	r3, s15
 801b12e:	b35b      	cbz	r3, 801b188 <__kernel_sinf+0x70>
 801b130:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b134:	eddf 7a15 	vldr	s15, [pc, #84]	; 801b18c <__kernel_sinf+0x74>
 801b138:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801b190 <__kernel_sinf+0x78>
 801b13c:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b140:	eddf 7a14 	vldr	s15, [pc, #80]	; 801b194 <__kernel_sinf+0x7c>
 801b144:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b148:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801b198 <__kernel_sinf+0x80>
 801b14c:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b150:	eddf 7a12 	vldr	s15, [pc, #72]	; 801b19c <__kernel_sinf+0x84>
 801b154:	ee60 6a07 	vmul.f32	s13, s0, s14
 801b158:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b15c:	b930      	cbnz	r0, 801b16c <__kernel_sinf+0x54>
 801b15e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801b1a0 <__kernel_sinf+0x88>
 801b162:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b166:	eea6 0a26 	vfma.f32	s0, s12, s13
 801b16a:	4770      	bx	lr
 801b16c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801b170:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801b174:	eee0 7a86 	vfma.f32	s15, s1, s12
 801b178:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801b17c:	eddf 7a09 	vldr	s15, [pc, #36]	; 801b1a4 <__kernel_sinf+0x8c>
 801b180:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801b184:	ee30 0a60 	vsub.f32	s0, s0, s1
 801b188:	4770      	bx	lr
 801b18a:	bf00      	nop
 801b18c:	2f2ec9d3 	.word	0x2f2ec9d3
 801b190:	b2d72f34 	.word	0xb2d72f34
 801b194:	3638ef1b 	.word	0x3638ef1b
 801b198:	b9500d01 	.word	0xb9500d01
 801b19c:	3c088889 	.word	0x3c088889
 801b1a0:	be2aaaab 	.word	0xbe2aaaab
 801b1a4:	3e2aaaab 	.word	0x3e2aaaab

0801b1a8 <fabs>:
 801b1a8:	ec51 0b10 	vmov	r0, r1, d0
 801b1ac:	ee10 2a10 	vmov	r2, s0
 801b1b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b1b4:	ec43 2b10 	vmov	d0, r2, r3
 801b1b8:	4770      	bx	lr
 801b1ba:	0000      	movs	r0, r0
 801b1bc:	0000      	movs	r0, r0
	...

0801b1c0 <floor>:
 801b1c0:	ec51 0b10 	vmov	r0, r1, d0
 801b1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b1cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801b1d0:	2e13      	cmp	r6, #19
 801b1d2:	ee10 5a10 	vmov	r5, s0
 801b1d6:	ee10 8a10 	vmov	r8, s0
 801b1da:	460c      	mov	r4, r1
 801b1dc:	dc32      	bgt.n	801b244 <floor+0x84>
 801b1de:	2e00      	cmp	r6, #0
 801b1e0:	da14      	bge.n	801b20c <floor+0x4c>
 801b1e2:	a333      	add	r3, pc, #204	; (adr r3, 801b2b0 <floor+0xf0>)
 801b1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e8:	f7e5 f9a2 	bl	8000530 <__adddf3>
 801b1ec:	2200      	movs	r2, #0
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	f7e5 fbd2 	bl	8000998 <__aeabi_dcmpgt>
 801b1f4:	b138      	cbz	r0, 801b206 <floor+0x46>
 801b1f6:	2c00      	cmp	r4, #0
 801b1f8:	da57      	bge.n	801b2aa <floor+0xea>
 801b1fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b1fe:	431d      	orrs	r5, r3
 801b200:	d001      	beq.n	801b206 <floor+0x46>
 801b202:	4c2d      	ldr	r4, [pc, #180]	; (801b2b8 <floor+0xf8>)
 801b204:	2500      	movs	r5, #0
 801b206:	4621      	mov	r1, r4
 801b208:	4628      	mov	r0, r5
 801b20a:	e025      	b.n	801b258 <floor+0x98>
 801b20c:	4f2b      	ldr	r7, [pc, #172]	; (801b2bc <floor+0xfc>)
 801b20e:	4137      	asrs	r7, r6
 801b210:	ea01 0307 	and.w	r3, r1, r7
 801b214:	4303      	orrs	r3, r0
 801b216:	d01f      	beq.n	801b258 <floor+0x98>
 801b218:	a325      	add	r3, pc, #148	; (adr r3, 801b2b0 <floor+0xf0>)
 801b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b21e:	f7e5 f987 	bl	8000530 <__adddf3>
 801b222:	2200      	movs	r2, #0
 801b224:	2300      	movs	r3, #0
 801b226:	f7e5 fbb7 	bl	8000998 <__aeabi_dcmpgt>
 801b22a:	2800      	cmp	r0, #0
 801b22c:	d0eb      	beq.n	801b206 <floor+0x46>
 801b22e:	2c00      	cmp	r4, #0
 801b230:	bfbe      	ittt	lt
 801b232:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801b236:	fa43 f606 	asrlt.w	r6, r3, r6
 801b23a:	19a4      	addlt	r4, r4, r6
 801b23c:	ea24 0407 	bic.w	r4, r4, r7
 801b240:	2500      	movs	r5, #0
 801b242:	e7e0      	b.n	801b206 <floor+0x46>
 801b244:	2e33      	cmp	r6, #51	; 0x33
 801b246:	dd0b      	ble.n	801b260 <floor+0xa0>
 801b248:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b24c:	d104      	bne.n	801b258 <floor+0x98>
 801b24e:	ee10 2a10 	vmov	r2, s0
 801b252:	460b      	mov	r3, r1
 801b254:	f7e5 f96c 	bl	8000530 <__adddf3>
 801b258:	ec41 0b10 	vmov	d0, r0, r1
 801b25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b260:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801b264:	f04f 33ff 	mov.w	r3, #4294967295
 801b268:	fa23 f707 	lsr.w	r7, r3, r7
 801b26c:	4207      	tst	r7, r0
 801b26e:	d0f3      	beq.n	801b258 <floor+0x98>
 801b270:	a30f      	add	r3, pc, #60	; (adr r3, 801b2b0 <floor+0xf0>)
 801b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b276:	f7e5 f95b 	bl	8000530 <__adddf3>
 801b27a:	2200      	movs	r2, #0
 801b27c:	2300      	movs	r3, #0
 801b27e:	f7e5 fb8b 	bl	8000998 <__aeabi_dcmpgt>
 801b282:	2800      	cmp	r0, #0
 801b284:	d0bf      	beq.n	801b206 <floor+0x46>
 801b286:	2c00      	cmp	r4, #0
 801b288:	da02      	bge.n	801b290 <floor+0xd0>
 801b28a:	2e14      	cmp	r6, #20
 801b28c:	d103      	bne.n	801b296 <floor+0xd6>
 801b28e:	3401      	adds	r4, #1
 801b290:	ea25 0507 	bic.w	r5, r5, r7
 801b294:	e7b7      	b.n	801b206 <floor+0x46>
 801b296:	2301      	movs	r3, #1
 801b298:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801b29c:	fa03 f606 	lsl.w	r6, r3, r6
 801b2a0:	4435      	add	r5, r6
 801b2a2:	4545      	cmp	r5, r8
 801b2a4:	bf38      	it	cc
 801b2a6:	18e4      	addcc	r4, r4, r3
 801b2a8:	e7f2      	b.n	801b290 <floor+0xd0>
 801b2aa:	2500      	movs	r5, #0
 801b2ac:	462c      	mov	r4, r5
 801b2ae:	e7aa      	b.n	801b206 <floor+0x46>
 801b2b0:	8800759c 	.word	0x8800759c
 801b2b4:	7e37e43c 	.word	0x7e37e43c
 801b2b8:	bff00000 	.word	0xbff00000
 801b2bc:	000fffff 	.word	0x000fffff

0801b2c0 <scalbn>:
 801b2c0:	b570      	push	{r4, r5, r6, lr}
 801b2c2:	ec55 4b10 	vmov	r4, r5, d0
 801b2c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b2ca:	4606      	mov	r6, r0
 801b2cc:	462b      	mov	r3, r5
 801b2ce:	b99a      	cbnz	r2, 801b2f8 <scalbn+0x38>
 801b2d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b2d4:	4323      	orrs	r3, r4
 801b2d6:	d036      	beq.n	801b346 <scalbn+0x86>
 801b2d8:	4b39      	ldr	r3, [pc, #228]	; (801b3c0 <scalbn+0x100>)
 801b2da:	4629      	mov	r1, r5
 801b2dc:	ee10 0a10 	vmov	r0, s0
 801b2e0:	2200      	movs	r2, #0
 801b2e2:	f7e4 fff5 	bl	80002d0 <__aeabi_dmul>
 801b2e6:	4b37      	ldr	r3, [pc, #220]	; (801b3c4 <scalbn+0x104>)
 801b2e8:	429e      	cmp	r6, r3
 801b2ea:	4604      	mov	r4, r0
 801b2ec:	460d      	mov	r5, r1
 801b2ee:	da10      	bge.n	801b312 <scalbn+0x52>
 801b2f0:	a32b      	add	r3, pc, #172	; (adr r3, 801b3a0 <scalbn+0xe0>)
 801b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2f6:	e03a      	b.n	801b36e <scalbn+0xae>
 801b2f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b2fc:	428a      	cmp	r2, r1
 801b2fe:	d10c      	bne.n	801b31a <scalbn+0x5a>
 801b300:	ee10 2a10 	vmov	r2, s0
 801b304:	4620      	mov	r0, r4
 801b306:	4629      	mov	r1, r5
 801b308:	f7e5 f912 	bl	8000530 <__adddf3>
 801b30c:	4604      	mov	r4, r0
 801b30e:	460d      	mov	r5, r1
 801b310:	e019      	b.n	801b346 <scalbn+0x86>
 801b312:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b316:	460b      	mov	r3, r1
 801b318:	3a36      	subs	r2, #54	; 0x36
 801b31a:	4432      	add	r2, r6
 801b31c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b320:	428a      	cmp	r2, r1
 801b322:	dd08      	ble.n	801b336 <scalbn+0x76>
 801b324:	2d00      	cmp	r5, #0
 801b326:	a120      	add	r1, pc, #128	; (adr r1, 801b3a8 <scalbn+0xe8>)
 801b328:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b32c:	da1c      	bge.n	801b368 <scalbn+0xa8>
 801b32e:	a120      	add	r1, pc, #128	; (adr r1, 801b3b0 <scalbn+0xf0>)
 801b330:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b334:	e018      	b.n	801b368 <scalbn+0xa8>
 801b336:	2a00      	cmp	r2, #0
 801b338:	dd08      	ble.n	801b34c <scalbn+0x8c>
 801b33a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b33e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b342:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b346:	ec45 4b10 	vmov	d0, r4, r5
 801b34a:	bd70      	pop	{r4, r5, r6, pc}
 801b34c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b350:	da19      	bge.n	801b386 <scalbn+0xc6>
 801b352:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b356:	429e      	cmp	r6, r3
 801b358:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801b35c:	dd0a      	ble.n	801b374 <scalbn+0xb4>
 801b35e:	a112      	add	r1, pc, #72	; (adr r1, 801b3a8 <scalbn+0xe8>)
 801b360:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d1e2      	bne.n	801b32e <scalbn+0x6e>
 801b368:	a30f      	add	r3, pc, #60	; (adr r3, 801b3a8 <scalbn+0xe8>)
 801b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b36e:	f7e4 ffaf 	bl	80002d0 <__aeabi_dmul>
 801b372:	e7cb      	b.n	801b30c <scalbn+0x4c>
 801b374:	a10a      	add	r1, pc, #40	; (adr r1, 801b3a0 <scalbn+0xe0>)
 801b376:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d0b8      	beq.n	801b2f0 <scalbn+0x30>
 801b37e:	a10e      	add	r1, pc, #56	; (adr r1, 801b3b8 <scalbn+0xf8>)
 801b380:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b384:	e7b4      	b.n	801b2f0 <scalbn+0x30>
 801b386:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b38a:	3236      	adds	r2, #54	; 0x36
 801b38c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b390:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801b394:	4620      	mov	r0, r4
 801b396:	4b0c      	ldr	r3, [pc, #48]	; (801b3c8 <scalbn+0x108>)
 801b398:	2200      	movs	r2, #0
 801b39a:	e7e8      	b.n	801b36e <scalbn+0xae>
 801b39c:	f3af 8000 	nop.w
 801b3a0:	c2f8f359 	.word	0xc2f8f359
 801b3a4:	01a56e1f 	.word	0x01a56e1f
 801b3a8:	8800759c 	.word	0x8800759c
 801b3ac:	7e37e43c 	.word	0x7e37e43c
 801b3b0:	8800759c 	.word	0x8800759c
 801b3b4:	fe37e43c 	.word	0xfe37e43c
 801b3b8:	c2f8f359 	.word	0xc2f8f359
 801b3bc:	81a56e1f 	.word	0x81a56e1f
 801b3c0:	43500000 	.word	0x43500000
 801b3c4:	ffff3cb0 	.word	0xffff3cb0
 801b3c8:	3c900000 	.word	0x3c900000

0801b3cc <atanf>:
 801b3cc:	b538      	push	{r3, r4, r5, lr}
 801b3ce:	ee10 5a10 	vmov	r5, s0
 801b3d2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801b3d6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801b3da:	eef0 7a40 	vmov.f32	s15, s0
 801b3de:	db10      	blt.n	801b402 <atanf+0x36>
 801b3e0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801b3e4:	dd04      	ble.n	801b3f0 <atanf+0x24>
 801b3e6:	ee70 7a00 	vadd.f32	s15, s0, s0
 801b3ea:	eeb0 0a67 	vmov.f32	s0, s15
 801b3ee:	bd38      	pop	{r3, r4, r5, pc}
 801b3f0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801b528 <atanf+0x15c>
 801b3f4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801b52c <atanf+0x160>
 801b3f8:	2d00      	cmp	r5, #0
 801b3fa:	bfd8      	it	le
 801b3fc:	eef0 7a40 	vmovle.f32	s15, s0
 801b400:	e7f3      	b.n	801b3ea <atanf+0x1e>
 801b402:	4b4b      	ldr	r3, [pc, #300]	; (801b530 <atanf+0x164>)
 801b404:	429c      	cmp	r4, r3
 801b406:	dc10      	bgt.n	801b42a <atanf+0x5e>
 801b408:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801b40c:	da0a      	bge.n	801b424 <atanf+0x58>
 801b40e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801b534 <atanf+0x168>
 801b412:	ee30 7a07 	vadd.f32	s14, s0, s14
 801b416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b41a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801b41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b422:	dce2      	bgt.n	801b3ea <atanf+0x1e>
 801b424:	f04f 33ff 	mov.w	r3, #4294967295
 801b428:	e013      	b.n	801b452 <atanf+0x86>
 801b42a:	f000 f8a3 	bl	801b574 <fabsf>
 801b42e:	4b42      	ldr	r3, [pc, #264]	; (801b538 <atanf+0x16c>)
 801b430:	429c      	cmp	r4, r3
 801b432:	dc4f      	bgt.n	801b4d4 <atanf+0x108>
 801b434:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801b438:	429c      	cmp	r4, r3
 801b43a:	dc41      	bgt.n	801b4c0 <atanf+0xf4>
 801b43c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801b440:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b444:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b448:	2300      	movs	r3, #0
 801b44a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b44e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b452:	1c5a      	adds	r2, r3, #1
 801b454:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801b458:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801b53c <atanf+0x170>
 801b45c:	eddf 5a38 	vldr	s11, [pc, #224]	; 801b540 <atanf+0x174>
 801b460:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801b544 <atanf+0x178>
 801b464:	ee66 6a06 	vmul.f32	s13, s12, s12
 801b468:	eee6 5a87 	vfma.f32	s11, s13, s14
 801b46c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801b548 <atanf+0x17c>
 801b470:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b474:	eddf 5a35 	vldr	s11, [pc, #212]	; 801b54c <atanf+0x180>
 801b478:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b47c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801b550 <atanf+0x184>
 801b480:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801b484:	eddf 5a33 	vldr	s11, [pc, #204]	; 801b554 <atanf+0x188>
 801b488:	eee7 5a26 	vfma.f32	s11, s14, s13
 801b48c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 801b558 <atanf+0x18c>
 801b490:	eea6 5a87 	vfma.f32	s10, s13, s14
 801b494:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801b55c <atanf+0x190>
 801b498:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b49c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 801b560 <atanf+0x194>
 801b4a0:	eea7 5a26 	vfma.f32	s10, s14, s13
 801b4a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801b564 <atanf+0x198>
 801b4a8:	eea5 7a26 	vfma.f32	s14, s10, s13
 801b4ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b4b0:	eea5 7a86 	vfma.f32	s14, s11, s12
 801b4b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 801b4b8:	d121      	bne.n	801b4fe <atanf+0x132>
 801b4ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b4be:	e794      	b.n	801b3ea <atanf+0x1e>
 801b4c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b4c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b4c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b4cc:	2301      	movs	r3, #1
 801b4ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b4d2:	e7be      	b.n	801b452 <atanf+0x86>
 801b4d4:	4b24      	ldr	r3, [pc, #144]	; (801b568 <atanf+0x19c>)
 801b4d6:	429c      	cmp	r4, r3
 801b4d8:	dc0b      	bgt.n	801b4f2 <atanf+0x126>
 801b4da:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801b4de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b4e2:	eea0 7a27 	vfma.f32	s14, s0, s15
 801b4e6:	2302      	movs	r3, #2
 801b4e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b4ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b4f0:	e7af      	b.n	801b452 <atanf+0x86>
 801b4f2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801b4f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b4fa:	2303      	movs	r3, #3
 801b4fc:	e7a9      	b.n	801b452 <atanf+0x86>
 801b4fe:	4a1b      	ldr	r2, [pc, #108]	; (801b56c <atanf+0x1a0>)
 801b500:	491b      	ldr	r1, [pc, #108]	; (801b570 <atanf+0x1a4>)
 801b502:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b506:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b50a:	ed93 0a00 	vldr	s0, [r3]
 801b50e:	ee37 7a40 	vsub.f32	s14, s14, s0
 801b512:	ed92 0a00 	vldr	s0, [r2]
 801b516:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b51a:	2d00      	cmp	r5, #0
 801b51c:	ee70 7a67 	vsub.f32	s15, s0, s15
 801b520:	bfb8      	it	lt
 801b522:	eef1 7a67 	vneglt.f32	s15, s15
 801b526:	e760      	b.n	801b3ea <atanf+0x1e>
 801b528:	3fc90fdb 	.word	0x3fc90fdb
 801b52c:	bfc90fdb 	.word	0xbfc90fdb
 801b530:	3edfffff 	.word	0x3edfffff
 801b534:	7149f2ca 	.word	0x7149f2ca
 801b538:	3f97ffff 	.word	0x3f97ffff
 801b53c:	3c8569d7 	.word	0x3c8569d7
 801b540:	3d4bda59 	.word	0x3d4bda59
 801b544:	bd6ef16b 	.word	0xbd6ef16b
 801b548:	3d886b35 	.word	0x3d886b35
 801b54c:	3dba2e6e 	.word	0x3dba2e6e
 801b550:	3e124925 	.word	0x3e124925
 801b554:	3eaaaaab 	.word	0x3eaaaaab
 801b558:	bd15a221 	.word	0xbd15a221
 801b55c:	bd9d8795 	.word	0xbd9d8795
 801b560:	bde38e38 	.word	0xbde38e38
 801b564:	be4ccccd 	.word	0xbe4ccccd
 801b568:	401bffff 	.word	0x401bffff
 801b56c:	0801dbb8 	.word	0x0801dbb8
 801b570:	0801dbc8 	.word	0x0801dbc8

0801b574 <fabsf>:
 801b574:	ee10 3a10 	vmov	r3, s0
 801b578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b57c:	ee00 3a10 	vmov	s0, r3
 801b580:	4770      	bx	lr
	...

0801b584 <floorf>:
 801b584:	ee10 3a10 	vmov	r3, s0
 801b588:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b58c:	3a7f      	subs	r2, #127	; 0x7f
 801b58e:	2a16      	cmp	r2, #22
 801b590:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b594:	dc2a      	bgt.n	801b5ec <floorf+0x68>
 801b596:	2a00      	cmp	r2, #0
 801b598:	da11      	bge.n	801b5be <floorf+0x3a>
 801b59a:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b5fc <floorf+0x78>
 801b59e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b5a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5aa:	dd05      	ble.n	801b5b8 <floorf+0x34>
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	da23      	bge.n	801b5f8 <floorf+0x74>
 801b5b0:	4a13      	ldr	r2, [pc, #76]	; (801b600 <floorf+0x7c>)
 801b5b2:	2900      	cmp	r1, #0
 801b5b4:	bf18      	it	ne
 801b5b6:	4613      	movne	r3, r2
 801b5b8:	ee00 3a10 	vmov	s0, r3
 801b5bc:	4770      	bx	lr
 801b5be:	4911      	ldr	r1, [pc, #68]	; (801b604 <floorf+0x80>)
 801b5c0:	4111      	asrs	r1, r2
 801b5c2:	420b      	tst	r3, r1
 801b5c4:	d0fa      	beq.n	801b5bc <floorf+0x38>
 801b5c6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b5fc <floorf+0x78>
 801b5ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b5ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5d6:	ddef      	ble.n	801b5b8 <floorf+0x34>
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	bfbe      	ittt	lt
 801b5dc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801b5e0:	fa40 f202 	asrlt.w	r2, r0, r2
 801b5e4:	189b      	addlt	r3, r3, r2
 801b5e6:	ea23 0301 	bic.w	r3, r3, r1
 801b5ea:	e7e5      	b.n	801b5b8 <floorf+0x34>
 801b5ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b5f0:	d3e4      	bcc.n	801b5bc <floorf+0x38>
 801b5f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b5f6:	4770      	bx	lr
 801b5f8:	2300      	movs	r3, #0
 801b5fa:	e7dd      	b.n	801b5b8 <floorf+0x34>
 801b5fc:	7149f2ca 	.word	0x7149f2ca
 801b600:	bf800000 	.word	0xbf800000
 801b604:	007fffff 	.word	0x007fffff

0801b608 <scalbnf>:
 801b608:	ee10 3a10 	vmov	r3, s0
 801b60c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b610:	d025      	beq.n	801b65e <scalbnf+0x56>
 801b612:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b616:	d302      	bcc.n	801b61e <scalbnf+0x16>
 801b618:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b61c:	4770      	bx	lr
 801b61e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b622:	d122      	bne.n	801b66a <scalbnf+0x62>
 801b624:	4b2a      	ldr	r3, [pc, #168]	; (801b6d0 <scalbnf+0xc8>)
 801b626:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801b6d4 <scalbnf+0xcc>
 801b62a:	4298      	cmp	r0, r3
 801b62c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b630:	db16      	blt.n	801b660 <scalbnf+0x58>
 801b632:	ee10 3a10 	vmov	r3, s0
 801b636:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b63a:	3a19      	subs	r2, #25
 801b63c:	4402      	add	r2, r0
 801b63e:	2afe      	cmp	r2, #254	; 0xfe
 801b640:	dd15      	ble.n	801b66e <scalbnf+0x66>
 801b642:	ee10 3a10 	vmov	r3, s0
 801b646:	eddf 7a24 	vldr	s15, [pc, #144]	; 801b6d8 <scalbnf+0xd0>
 801b64a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801b6dc <scalbnf+0xd4>
 801b64e:	2b00      	cmp	r3, #0
 801b650:	eeb0 7a67 	vmov.f32	s14, s15
 801b654:	bfb8      	it	lt
 801b656:	eef0 7a66 	vmovlt.f32	s15, s13
 801b65a:	ee27 0a27 	vmul.f32	s0, s14, s15
 801b65e:	4770      	bx	lr
 801b660:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801b6e0 <scalbnf+0xd8>
 801b664:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b668:	4770      	bx	lr
 801b66a:	0dd2      	lsrs	r2, r2, #23
 801b66c:	e7e6      	b.n	801b63c <scalbnf+0x34>
 801b66e:	2a00      	cmp	r2, #0
 801b670:	dd06      	ble.n	801b680 <scalbnf+0x78>
 801b672:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b676:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b67a:	ee00 3a10 	vmov	s0, r3
 801b67e:	4770      	bx	lr
 801b680:	f112 0f16 	cmn.w	r2, #22
 801b684:	da1a      	bge.n	801b6bc <scalbnf+0xb4>
 801b686:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b68a:	4298      	cmp	r0, r3
 801b68c:	ee10 3a10 	vmov	r3, s0
 801b690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b694:	dd0a      	ble.n	801b6ac <scalbnf+0xa4>
 801b696:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801b6d8 <scalbnf+0xd0>
 801b69a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801b6dc <scalbnf+0xd4>
 801b69e:	eef0 7a40 	vmov.f32	s15, s0
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	bf18      	it	ne
 801b6a6:	eeb0 0a47 	vmovne.f32	s0, s14
 801b6aa:	e7db      	b.n	801b664 <scalbnf+0x5c>
 801b6ac:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801b6e0 <scalbnf+0xd8>
 801b6b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801b6e4 <scalbnf+0xdc>
 801b6b4:	eef0 7a40 	vmov.f32	s15, s0
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	e7f3      	b.n	801b6a4 <scalbnf+0x9c>
 801b6bc:	3219      	adds	r2, #25
 801b6be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b6c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801b6c6:	eddf 7a08 	vldr	s15, [pc, #32]	; 801b6e8 <scalbnf+0xe0>
 801b6ca:	ee07 3a10 	vmov	s14, r3
 801b6ce:	e7c4      	b.n	801b65a <scalbnf+0x52>
 801b6d0:	ffff3cb0 	.word	0xffff3cb0
 801b6d4:	4c000000 	.word	0x4c000000
 801b6d8:	7149f2ca 	.word	0x7149f2ca
 801b6dc:	f149f2ca 	.word	0xf149f2ca
 801b6e0:	0da24260 	.word	0x0da24260
 801b6e4:	8da24260 	.word	0x8da24260
 801b6e8:	33000000 	.word	0x33000000

0801b6ec <__errno>:
 801b6ec:	4b01      	ldr	r3, [pc, #4]	; (801b6f4 <__errno+0x8>)
 801b6ee:	6818      	ldr	r0, [r3, #0]
 801b6f0:	4770      	bx	lr
 801b6f2:	bf00      	nop
 801b6f4:	20000814 	.word	0x20000814

0801b6f8 <__libc_init_array>:
 801b6f8:	b570      	push	{r4, r5, r6, lr}
 801b6fa:	4d0d      	ldr	r5, [pc, #52]	; (801b730 <__libc_init_array+0x38>)
 801b6fc:	4c0d      	ldr	r4, [pc, #52]	; (801b734 <__libc_init_array+0x3c>)
 801b6fe:	1b64      	subs	r4, r4, r5
 801b700:	10a4      	asrs	r4, r4, #2
 801b702:	2600      	movs	r6, #0
 801b704:	42a6      	cmp	r6, r4
 801b706:	d109      	bne.n	801b71c <__libc_init_array+0x24>
 801b708:	4d0b      	ldr	r5, [pc, #44]	; (801b738 <__libc_init_array+0x40>)
 801b70a:	4c0c      	ldr	r4, [pc, #48]	; (801b73c <__libc_init_array+0x44>)
 801b70c:	f001 fa68 	bl	801cbe0 <_init>
 801b710:	1b64      	subs	r4, r4, r5
 801b712:	10a4      	asrs	r4, r4, #2
 801b714:	2600      	movs	r6, #0
 801b716:	42a6      	cmp	r6, r4
 801b718:	d105      	bne.n	801b726 <__libc_init_array+0x2e>
 801b71a:	bd70      	pop	{r4, r5, r6, pc}
 801b71c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b720:	4798      	blx	r3
 801b722:	3601      	adds	r6, #1
 801b724:	e7ee      	b.n	801b704 <__libc_init_array+0xc>
 801b726:	f855 3b04 	ldr.w	r3, [r5], #4
 801b72a:	4798      	blx	r3
 801b72c:	3601      	adds	r6, #1
 801b72e:	e7f2      	b.n	801b716 <__libc_init_array+0x1e>
 801b730:	0801dd28 	.word	0x0801dd28
 801b734:	0801dd28 	.word	0x0801dd28
 801b738:	0801dd28 	.word	0x0801dd28
 801b73c:	0801dd2c 	.word	0x0801dd2c

0801b740 <malloc>:
 801b740:	4b02      	ldr	r3, [pc, #8]	; (801b74c <malloc+0xc>)
 801b742:	4601      	mov	r1, r0
 801b744:	6818      	ldr	r0, [r3, #0]
 801b746:	f000 b877 	b.w	801b838 <_malloc_r>
 801b74a:	bf00      	nop
 801b74c:	20000814 	.word	0x20000814

0801b750 <memset>:
 801b750:	4402      	add	r2, r0
 801b752:	4603      	mov	r3, r0
 801b754:	4293      	cmp	r3, r2
 801b756:	d100      	bne.n	801b75a <memset+0xa>
 801b758:	4770      	bx	lr
 801b75a:	f803 1b01 	strb.w	r1, [r3], #1
 801b75e:	e7f9      	b.n	801b754 <memset+0x4>

0801b760 <_free_r>:
 801b760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b762:	2900      	cmp	r1, #0
 801b764:	d044      	beq.n	801b7f0 <_free_r+0x90>
 801b766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b76a:	9001      	str	r0, [sp, #4]
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	f1a1 0404 	sub.w	r4, r1, #4
 801b772:	bfb8      	it	lt
 801b774:	18e4      	addlt	r4, r4, r3
 801b776:	f000 f9a5 	bl	801bac4 <__malloc_lock>
 801b77a:	4a1e      	ldr	r2, [pc, #120]	; (801b7f4 <_free_r+0x94>)
 801b77c:	9801      	ldr	r0, [sp, #4]
 801b77e:	6813      	ldr	r3, [r2, #0]
 801b780:	b933      	cbnz	r3, 801b790 <_free_r+0x30>
 801b782:	6063      	str	r3, [r4, #4]
 801b784:	6014      	str	r4, [r2, #0]
 801b786:	b003      	add	sp, #12
 801b788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b78c:	f000 b9a0 	b.w	801bad0 <__malloc_unlock>
 801b790:	42a3      	cmp	r3, r4
 801b792:	d908      	bls.n	801b7a6 <_free_r+0x46>
 801b794:	6825      	ldr	r5, [r4, #0]
 801b796:	1961      	adds	r1, r4, r5
 801b798:	428b      	cmp	r3, r1
 801b79a:	bf01      	itttt	eq
 801b79c:	6819      	ldreq	r1, [r3, #0]
 801b79e:	685b      	ldreq	r3, [r3, #4]
 801b7a0:	1949      	addeq	r1, r1, r5
 801b7a2:	6021      	streq	r1, [r4, #0]
 801b7a4:	e7ed      	b.n	801b782 <_free_r+0x22>
 801b7a6:	461a      	mov	r2, r3
 801b7a8:	685b      	ldr	r3, [r3, #4]
 801b7aa:	b10b      	cbz	r3, 801b7b0 <_free_r+0x50>
 801b7ac:	42a3      	cmp	r3, r4
 801b7ae:	d9fa      	bls.n	801b7a6 <_free_r+0x46>
 801b7b0:	6811      	ldr	r1, [r2, #0]
 801b7b2:	1855      	adds	r5, r2, r1
 801b7b4:	42a5      	cmp	r5, r4
 801b7b6:	d10b      	bne.n	801b7d0 <_free_r+0x70>
 801b7b8:	6824      	ldr	r4, [r4, #0]
 801b7ba:	4421      	add	r1, r4
 801b7bc:	1854      	adds	r4, r2, r1
 801b7be:	42a3      	cmp	r3, r4
 801b7c0:	6011      	str	r1, [r2, #0]
 801b7c2:	d1e0      	bne.n	801b786 <_free_r+0x26>
 801b7c4:	681c      	ldr	r4, [r3, #0]
 801b7c6:	685b      	ldr	r3, [r3, #4]
 801b7c8:	6053      	str	r3, [r2, #4]
 801b7ca:	4421      	add	r1, r4
 801b7cc:	6011      	str	r1, [r2, #0]
 801b7ce:	e7da      	b.n	801b786 <_free_r+0x26>
 801b7d0:	d902      	bls.n	801b7d8 <_free_r+0x78>
 801b7d2:	230c      	movs	r3, #12
 801b7d4:	6003      	str	r3, [r0, #0]
 801b7d6:	e7d6      	b.n	801b786 <_free_r+0x26>
 801b7d8:	6825      	ldr	r5, [r4, #0]
 801b7da:	1961      	adds	r1, r4, r5
 801b7dc:	428b      	cmp	r3, r1
 801b7de:	bf04      	itt	eq
 801b7e0:	6819      	ldreq	r1, [r3, #0]
 801b7e2:	685b      	ldreq	r3, [r3, #4]
 801b7e4:	6063      	str	r3, [r4, #4]
 801b7e6:	bf04      	itt	eq
 801b7e8:	1949      	addeq	r1, r1, r5
 801b7ea:	6021      	streq	r1, [r4, #0]
 801b7ec:	6054      	str	r4, [r2, #4]
 801b7ee:	e7ca      	b.n	801b786 <_free_r+0x26>
 801b7f0:	b003      	add	sp, #12
 801b7f2:	bd30      	pop	{r4, r5, pc}
 801b7f4:	200057fc 	.word	0x200057fc

0801b7f8 <sbrk_aligned>:
 801b7f8:	b570      	push	{r4, r5, r6, lr}
 801b7fa:	4e0e      	ldr	r6, [pc, #56]	; (801b834 <sbrk_aligned+0x3c>)
 801b7fc:	460c      	mov	r4, r1
 801b7fe:	6831      	ldr	r1, [r6, #0]
 801b800:	4605      	mov	r5, r0
 801b802:	b911      	cbnz	r1, 801b80a <sbrk_aligned+0x12>
 801b804:	f000 f8ca 	bl	801b99c <_sbrk_r>
 801b808:	6030      	str	r0, [r6, #0]
 801b80a:	4621      	mov	r1, r4
 801b80c:	4628      	mov	r0, r5
 801b80e:	f000 f8c5 	bl	801b99c <_sbrk_r>
 801b812:	1c43      	adds	r3, r0, #1
 801b814:	d00a      	beq.n	801b82c <sbrk_aligned+0x34>
 801b816:	1cc4      	adds	r4, r0, #3
 801b818:	f024 0403 	bic.w	r4, r4, #3
 801b81c:	42a0      	cmp	r0, r4
 801b81e:	d007      	beq.n	801b830 <sbrk_aligned+0x38>
 801b820:	1a21      	subs	r1, r4, r0
 801b822:	4628      	mov	r0, r5
 801b824:	f000 f8ba 	bl	801b99c <_sbrk_r>
 801b828:	3001      	adds	r0, #1
 801b82a:	d101      	bne.n	801b830 <sbrk_aligned+0x38>
 801b82c:	f04f 34ff 	mov.w	r4, #4294967295
 801b830:	4620      	mov	r0, r4
 801b832:	bd70      	pop	{r4, r5, r6, pc}
 801b834:	20005800 	.word	0x20005800

0801b838 <_malloc_r>:
 801b838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b83c:	1ccd      	adds	r5, r1, #3
 801b83e:	f025 0503 	bic.w	r5, r5, #3
 801b842:	3508      	adds	r5, #8
 801b844:	2d0c      	cmp	r5, #12
 801b846:	bf38      	it	cc
 801b848:	250c      	movcc	r5, #12
 801b84a:	2d00      	cmp	r5, #0
 801b84c:	4607      	mov	r7, r0
 801b84e:	db01      	blt.n	801b854 <_malloc_r+0x1c>
 801b850:	42a9      	cmp	r1, r5
 801b852:	d905      	bls.n	801b860 <_malloc_r+0x28>
 801b854:	230c      	movs	r3, #12
 801b856:	603b      	str	r3, [r7, #0]
 801b858:	2600      	movs	r6, #0
 801b85a:	4630      	mov	r0, r6
 801b85c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b860:	4e2e      	ldr	r6, [pc, #184]	; (801b91c <_malloc_r+0xe4>)
 801b862:	f000 f92f 	bl	801bac4 <__malloc_lock>
 801b866:	6833      	ldr	r3, [r6, #0]
 801b868:	461c      	mov	r4, r3
 801b86a:	bb34      	cbnz	r4, 801b8ba <_malloc_r+0x82>
 801b86c:	4629      	mov	r1, r5
 801b86e:	4638      	mov	r0, r7
 801b870:	f7ff ffc2 	bl	801b7f8 <sbrk_aligned>
 801b874:	1c43      	adds	r3, r0, #1
 801b876:	4604      	mov	r4, r0
 801b878:	d14d      	bne.n	801b916 <_malloc_r+0xde>
 801b87a:	6834      	ldr	r4, [r6, #0]
 801b87c:	4626      	mov	r6, r4
 801b87e:	2e00      	cmp	r6, #0
 801b880:	d140      	bne.n	801b904 <_malloc_r+0xcc>
 801b882:	6823      	ldr	r3, [r4, #0]
 801b884:	4631      	mov	r1, r6
 801b886:	4638      	mov	r0, r7
 801b888:	eb04 0803 	add.w	r8, r4, r3
 801b88c:	f000 f886 	bl	801b99c <_sbrk_r>
 801b890:	4580      	cmp	r8, r0
 801b892:	d13a      	bne.n	801b90a <_malloc_r+0xd2>
 801b894:	6821      	ldr	r1, [r4, #0]
 801b896:	3503      	adds	r5, #3
 801b898:	1a6d      	subs	r5, r5, r1
 801b89a:	f025 0503 	bic.w	r5, r5, #3
 801b89e:	3508      	adds	r5, #8
 801b8a0:	2d0c      	cmp	r5, #12
 801b8a2:	bf38      	it	cc
 801b8a4:	250c      	movcc	r5, #12
 801b8a6:	4629      	mov	r1, r5
 801b8a8:	4638      	mov	r0, r7
 801b8aa:	f7ff ffa5 	bl	801b7f8 <sbrk_aligned>
 801b8ae:	3001      	adds	r0, #1
 801b8b0:	d02b      	beq.n	801b90a <_malloc_r+0xd2>
 801b8b2:	6823      	ldr	r3, [r4, #0]
 801b8b4:	442b      	add	r3, r5
 801b8b6:	6023      	str	r3, [r4, #0]
 801b8b8:	e00e      	b.n	801b8d8 <_malloc_r+0xa0>
 801b8ba:	6822      	ldr	r2, [r4, #0]
 801b8bc:	1b52      	subs	r2, r2, r5
 801b8be:	d41e      	bmi.n	801b8fe <_malloc_r+0xc6>
 801b8c0:	2a0b      	cmp	r2, #11
 801b8c2:	d916      	bls.n	801b8f2 <_malloc_r+0xba>
 801b8c4:	1961      	adds	r1, r4, r5
 801b8c6:	42a3      	cmp	r3, r4
 801b8c8:	6025      	str	r5, [r4, #0]
 801b8ca:	bf18      	it	ne
 801b8cc:	6059      	strne	r1, [r3, #4]
 801b8ce:	6863      	ldr	r3, [r4, #4]
 801b8d0:	bf08      	it	eq
 801b8d2:	6031      	streq	r1, [r6, #0]
 801b8d4:	5162      	str	r2, [r4, r5]
 801b8d6:	604b      	str	r3, [r1, #4]
 801b8d8:	4638      	mov	r0, r7
 801b8da:	f104 060b 	add.w	r6, r4, #11
 801b8de:	f000 f8f7 	bl	801bad0 <__malloc_unlock>
 801b8e2:	f026 0607 	bic.w	r6, r6, #7
 801b8e6:	1d23      	adds	r3, r4, #4
 801b8e8:	1af2      	subs	r2, r6, r3
 801b8ea:	d0b6      	beq.n	801b85a <_malloc_r+0x22>
 801b8ec:	1b9b      	subs	r3, r3, r6
 801b8ee:	50a3      	str	r3, [r4, r2]
 801b8f0:	e7b3      	b.n	801b85a <_malloc_r+0x22>
 801b8f2:	6862      	ldr	r2, [r4, #4]
 801b8f4:	42a3      	cmp	r3, r4
 801b8f6:	bf0c      	ite	eq
 801b8f8:	6032      	streq	r2, [r6, #0]
 801b8fa:	605a      	strne	r2, [r3, #4]
 801b8fc:	e7ec      	b.n	801b8d8 <_malloc_r+0xa0>
 801b8fe:	4623      	mov	r3, r4
 801b900:	6864      	ldr	r4, [r4, #4]
 801b902:	e7b2      	b.n	801b86a <_malloc_r+0x32>
 801b904:	4634      	mov	r4, r6
 801b906:	6876      	ldr	r6, [r6, #4]
 801b908:	e7b9      	b.n	801b87e <_malloc_r+0x46>
 801b90a:	230c      	movs	r3, #12
 801b90c:	603b      	str	r3, [r7, #0]
 801b90e:	4638      	mov	r0, r7
 801b910:	f000 f8de 	bl	801bad0 <__malloc_unlock>
 801b914:	e7a1      	b.n	801b85a <_malloc_r+0x22>
 801b916:	6025      	str	r5, [r4, #0]
 801b918:	e7de      	b.n	801b8d8 <_malloc_r+0xa0>
 801b91a:	bf00      	nop
 801b91c:	200057fc 	.word	0x200057fc

0801b920 <rand>:
 801b920:	4b16      	ldr	r3, [pc, #88]	; (801b97c <rand+0x5c>)
 801b922:	b510      	push	{r4, lr}
 801b924:	681c      	ldr	r4, [r3, #0]
 801b926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b928:	b9b3      	cbnz	r3, 801b958 <rand+0x38>
 801b92a:	2018      	movs	r0, #24
 801b92c:	f7ff ff08 	bl	801b740 <malloc>
 801b930:	63a0      	str	r0, [r4, #56]	; 0x38
 801b932:	b928      	cbnz	r0, 801b940 <rand+0x20>
 801b934:	4602      	mov	r2, r0
 801b936:	4b12      	ldr	r3, [pc, #72]	; (801b980 <rand+0x60>)
 801b938:	4812      	ldr	r0, [pc, #72]	; (801b984 <rand+0x64>)
 801b93a:	214e      	movs	r1, #78	; 0x4e
 801b93c:	f000 f892 	bl	801ba64 <__assert_func>
 801b940:	4a11      	ldr	r2, [pc, #68]	; (801b988 <rand+0x68>)
 801b942:	4b12      	ldr	r3, [pc, #72]	; (801b98c <rand+0x6c>)
 801b944:	e9c0 2300 	strd	r2, r3, [r0]
 801b948:	4b11      	ldr	r3, [pc, #68]	; (801b990 <rand+0x70>)
 801b94a:	6083      	str	r3, [r0, #8]
 801b94c:	230b      	movs	r3, #11
 801b94e:	8183      	strh	r3, [r0, #12]
 801b950:	2201      	movs	r2, #1
 801b952:	2300      	movs	r3, #0
 801b954:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b958:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801b95a:	4a0e      	ldr	r2, [pc, #56]	; (801b994 <rand+0x74>)
 801b95c:	6920      	ldr	r0, [r4, #16]
 801b95e:	6963      	ldr	r3, [r4, #20]
 801b960:	490d      	ldr	r1, [pc, #52]	; (801b998 <rand+0x78>)
 801b962:	4342      	muls	r2, r0
 801b964:	fb01 2203 	mla	r2, r1, r3, r2
 801b968:	fba0 0101 	umull	r0, r1, r0, r1
 801b96c:	1c43      	adds	r3, r0, #1
 801b96e:	eb42 0001 	adc.w	r0, r2, r1
 801b972:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801b976:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b97a:	bd10      	pop	{r4, pc}
 801b97c:	20000814 	.word	0x20000814
 801b980:	0801dbdc 	.word	0x0801dbdc
 801b984:	0801dbf3 	.word	0x0801dbf3
 801b988:	abcd330e 	.word	0xabcd330e
 801b98c:	e66d1234 	.word	0xe66d1234
 801b990:	0005deec 	.word	0x0005deec
 801b994:	5851f42d 	.word	0x5851f42d
 801b998:	4c957f2d 	.word	0x4c957f2d

0801b99c <_sbrk_r>:
 801b99c:	b538      	push	{r3, r4, r5, lr}
 801b99e:	4d06      	ldr	r5, [pc, #24]	; (801b9b8 <_sbrk_r+0x1c>)
 801b9a0:	2300      	movs	r3, #0
 801b9a2:	4604      	mov	r4, r0
 801b9a4:	4608      	mov	r0, r1
 801b9a6:	602b      	str	r3, [r5, #0]
 801b9a8:	f7e7 f8e4 	bl	8002b74 <_sbrk>
 801b9ac:	1c43      	adds	r3, r0, #1
 801b9ae:	d102      	bne.n	801b9b6 <_sbrk_r+0x1a>
 801b9b0:	682b      	ldr	r3, [r5, #0]
 801b9b2:	b103      	cbz	r3, 801b9b6 <_sbrk_r+0x1a>
 801b9b4:	6023      	str	r3, [r4, #0]
 801b9b6:	bd38      	pop	{r3, r4, r5, pc}
 801b9b8:	20005804 	.word	0x20005804

0801b9bc <sniprintf>:
 801b9bc:	b40c      	push	{r2, r3}
 801b9be:	b530      	push	{r4, r5, lr}
 801b9c0:	4b17      	ldr	r3, [pc, #92]	; (801ba20 <sniprintf+0x64>)
 801b9c2:	1e0c      	subs	r4, r1, #0
 801b9c4:	681d      	ldr	r5, [r3, #0]
 801b9c6:	b09d      	sub	sp, #116	; 0x74
 801b9c8:	da08      	bge.n	801b9dc <sniprintf+0x20>
 801b9ca:	238b      	movs	r3, #139	; 0x8b
 801b9cc:	602b      	str	r3, [r5, #0]
 801b9ce:	f04f 30ff 	mov.w	r0, #4294967295
 801b9d2:	b01d      	add	sp, #116	; 0x74
 801b9d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b9d8:	b002      	add	sp, #8
 801b9da:	4770      	bx	lr
 801b9dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b9e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b9e4:	bf14      	ite	ne
 801b9e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b9ea:	4623      	moveq	r3, r4
 801b9ec:	9304      	str	r3, [sp, #16]
 801b9ee:	9307      	str	r3, [sp, #28]
 801b9f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b9f4:	9002      	str	r0, [sp, #8]
 801b9f6:	9006      	str	r0, [sp, #24]
 801b9f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b9fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b9fe:	ab21      	add	r3, sp, #132	; 0x84
 801ba00:	a902      	add	r1, sp, #8
 801ba02:	4628      	mov	r0, r5
 801ba04:	9301      	str	r3, [sp, #4]
 801ba06:	f000 f8c5 	bl	801bb94 <_svfiprintf_r>
 801ba0a:	1c43      	adds	r3, r0, #1
 801ba0c:	bfbc      	itt	lt
 801ba0e:	238b      	movlt	r3, #139	; 0x8b
 801ba10:	602b      	strlt	r3, [r5, #0]
 801ba12:	2c00      	cmp	r4, #0
 801ba14:	d0dd      	beq.n	801b9d2 <sniprintf+0x16>
 801ba16:	9b02      	ldr	r3, [sp, #8]
 801ba18:	2200      	movs	r2, #0
 801ba1a:	701a      	strb	r2, [r3, #0]
 801ba1c:	e7d9      	b.n	801b9d2 <sniprintf+0x16>
 801ba1e:	bf00      	nop
 801ba20:	20000814 	.word	0x20000814

0801ba24 <siprintf>:
 801ba24:	b40e      	push	{r1, r2, r3}
 801ba26:	b500      	push	{lr}
 801ba28:	b09c      	sub	sp, #112	; 0x70
 801ba2a:	ab1d      	add	r3, sp, #116	; 0x74
 801ba2c:	9002      	str	r0, [sp, #8]
 801ba2e:	9006      	str	r0, [sp, #24]
 801ba30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ba34:	4809      	ldr	r0, [pc, #36]	; (801ba5c <siprintf+0x38>)
 801ba36:	9107      	str	r1, [sp, #28]
 801ba38:	9104      	str	r1, [sp, #16]
 801ba3a:	4909      	ldr	r1, [pc, #36]	; (801ba60 <siprintf+0x3c>)
 801ba3c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba40:	9105      	str	r1, [sp, #20]
 801ba42:	6800      	ldr	r0, [r0, #0]
 801ba44:	9301      	str	r3, [sp, #4]
 801ba46:	a902      	add	r1, sp, #8
 801ba48:	f000 f8a4 	bl	801bb94 <_svfiprintf_r>
 801ba4c:	9b02      	ldr	r3, [sp, #8]
 801ba4e:	2200      	movs	r2, #0
 801ba50:	701a      	strb	r2, [r3, #0]
 801ba52:	b01c      	add	sp, #112	; 0x70
 801ba54:	f85d eb04 	ldr.w	lr, [sp], #4
 801ba58:	b003      	add	sp, #12
 801ba5a:	4770      	bx	lr
 801ba5c:	20000814 	.word	0x20000814
 801ba60:	ffff0208 	.word	0xffff0208

0801ba64 <__assert_func>:
 801ba64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ba66:	4614      	mov	r4, r2
 801ba68:	461a      	mov	r2, r3
 801ba6a:	4b09      	ldr	r3, [pc, #36]	; (801ba90 <__assert_func+0x2c>)
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	4605      	mov	r5, r0
 801ba70:	68d8      	ldr	r0, [r3, #12]
 801ba72:	b14c      	cbz	r4, 801ba88 <__assert_func+0x24>
 801ba74:	4b07      	ldr	r3, [pc, #28]	; (801ba94 <__assert_func+0x30>)
 801ba76:	9100      	str	r1, [sp, #0]
 801ba78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ba7c:	4906      	ldr	r1, [pc, #24]	; (801ba98 <__assert_func+0x34>)
 801ba7e:	462b      	mov	r3, r5
 801ba80:	f000 f80e 	bl	801baa0 <fiprintf>
 801ba84:	f000 fd34 	bl	801c4f0 <abort>
 801ba88:	4b04      	ldr	r3, [pc, #16]	; (801ba9c <__assert_func+0x38>)
 801ba8a:	461c      	mov	r4, r3
 801ba8c:	e7f3      	b.n	801ba76 <__assert_func+0x12>
 801ba8e:	bf00      	nop
 801ba90:	20000814 	.word	0x20000814
 801ba94:	0801dc4e 	.word	0x0801dc4e
 801ba98:	0801dc5b 	.word	0x0801dc5b
 801ba9c:	0801dc89 	.word	0x0801dc89

0801baa0 <fiprintf>:
 801baa0:	b40e      	push	{r1, r2, r3}
 801baa2:	b503      	push	{r0, r1, lr}
 801baa4:	4601      	mov	r1, r0
 801baa6:	ab03      	add	r3, sp, #12
 801baa8:	4805      	ldr	r0, [pc, #20]	; (801bac0 <fiprintf+0x20>)
 801baaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801baae:	6800      	ldr	r0, [r0, #0]
 801bab0:	9301      	str	r3, [sp, #4]
 801bab2:	f000 f999 	bl	801bde8 <_vfiprintf_r>
 801bab6:	b002      	add	sp, #8
 801bab8:	f85d eb04 	ldr.w	lr, [sp], #4
 801babc:	b003      	add	sp, #12
 801babe:	4770      	bx	lr
 801bac0:	20000814 	.word	0x20000814

0801bac4 <__malloc_lock>:
 801bac4:	4801      	ldr	r0, [pc, #4]	; (801bacc <__malloc_lock+0x8>)
 801bac6:	f000 bed3 	b.w	801c870 <__retarget_lock_acquire_recursive>
 801baca:	bf00      	nop
 801bacc:	20005808 	.word	0x20005808

0801bad0 <__malloc_unlock>:
 801bad0:	4801      	ldr	r0, [pc, #4]	; (801bad8 <__malloc_unlock+0x8>)
 801bad2:	f000 bece 	b.w	801c872 <__retarget_lock_release_recursive>
 801bad6:	bf00      	nop
 801bad8:	20005808 	.word	0x20005808

0801badc <__ssputs_r>:
 801badc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bae0:	688e      	ldr	r6, [r1, #8]
 801bae2:	429e      	cmp	r6, r3
 801bae4:	4682      	mov	sl, r0
 801bae6:	460c      	mov	r4, r1
 801bae8:	4690      	mov	r8, r2
 801baea:	461f      	mov	r7, r3
 801baec:	d838      	bhi.n	801bb60 <__ssputs_r+0x84>
 801baee:	898a      	ldrh	r2, [r1, #12]
 801baf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801baf4:	d032      	beq.n	801bb5c <__ssputs_r+0x80>
 801baf6:	6825      	ldr	r5, [r4, #0]
 801baf8:	6909      	ldr	r1, [r1, #16]
 801bafa:	eba5 0901 	sub.w	r9, r5, r1
 801bafe:	6965      	ldr	r5, [r4, #20]
 801bb00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bb04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bb08:	3301      	adds	r3, #1
 801bb0a:	444b      	add	r3, r9
 801bb0c:	106d      	asrs	r5, r5, #1
 801bb0e:	429d      	cmp	r5, r3
 801bb10:	bf38      	it	cc
 801bb12:	461d      	movcc	r5, r3
 801bb14:	0553      	lsls	r3, r2, #21
 801bb16:	d531      	bpl.n	801bb7c <__ssputs_r+0xa0>
 801bb18:	4629      	mov	r1, r5
 801bb1a:	f7ff fe8d 	bl	801b838 <_malloc_r>
 801bb1e:	4606      	mov	r6, r0
 801bb20:	b950      	cbnz	r0, 801bb38 <__ssputs_r+0x5c>
 801bb22:	230c      	movs	r3, #12
 801bb24:	f8ca 3000 	str.w	r3, [sl]
 801bb28:	89a3      	ldrh	r3, [r4, #12]
 801bb2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb2e:	81a3      	strh	r3, [r4, #12]
 801bb30:	f04f 30ff 	mov.w	r0, #4294967295
 801bb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb38:	6921      	ldr	r1, [r4, #16]
 801bb3a:	464a      	mov	r2, r9
 801bb3c:	f000 ff00 	bl	801c940 <memcpy>
 801bb40:	89a3      	ldrh	r3, [r4, #12]
 801bb42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bb46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb4a:	81a3      	strh	r3, [r4, #12]
 801bb4c:	6126      	str	r6, [r4, #16]
 801bb4e:	6165      	str	r5, [r4, #20]
 801bb50:	444e      	add	r6, r9
 801bb52:	eba5 0509 	sub.w	r5, r5, r9
 801bb56:	6026      	str	r6, [r4, #0]
 801bb58:	60a5      	str	r5, [r4, #8]
 801bb5a:	463e      	mov	r6, r7
 801bb5c:	42be      	cmp	r6, r7
 801bb5e:	d900      	bls.n	801bb62 <__ssputs_r+0x86>
 801bb60:	463e      	mov	r6, r7
 801bb62:	6820      	ldr	r0, [r4, #0]
 801bb64:	4632      	mov	r2, r6
 801bb66:	4641      	mov	r1, r8
 801bb68:	f000 fef8 	bl	801c95c <memmove>
 801bb6c:	68a3      	ldr	r3, [r4, #8]
 801bb6e:	1b9b      	subs	r3, r3, r6
 801bb70:	60a3      	str	r3, [r4, #8]
 801bb72:	6823      	ldr	r3, [r4, #0]
 801bb74:	4433      	add	r3, r6
 801bb76:	6023      	str	r3, [r4, #0]
 801bb78:	2000      	movs	r0, #0
 801bb7a:	e7db      	b.n	801bb34 <__ssputs_r+0x58>
 801bb7c:	462a      	mov	r2, r5
 801bb7e:	f000 ff07 	bl	801c990 <_realloc_r>
 801bb82:	4606      	mov	r6, r0
 801bb84:	2800      	cmp	r0, #0
 801bb86:	d1e1      	bne.n	801bb4c <__ssputs_r+0x70>
 801bb88:	6921      	ldr	r1, [r4, #16]
 801bb8a:	4650      	mov	r0, sl
 801bb8c:	f7ff fde8 	bl	801b760 <_free_r>
 801bb90:	e7c7      	b.n	801bb22 <__ssputs_r+0x46>
	...

0801bb94 <_svfiprintf_r>:
 801bb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb98:	4698      	mov	r8, r3
 801bb9a:	898b      	ldrh	r3, [r1, #12]
 801bb9c:	061b      	lsls	r3, r3, #24
 801bb9e:	b09d      	sub	sp, #116	; 0x74
 801bba0:	4607      	mov	r7, r0
 801bba2:	460d      	mov	r5, r1
 801bba4:	4614      	mov	r4, r2
 801bba6:	d50e      	bpl.n	801bbc6 <_svfiprintf_r+0x32>
 801bba8:	690b      	ldr	r3, [r1, #16]
 801bbaa:	b963      	cbnz	r3, 801bbc6 <_svfiprintf_r+0x32>
 801bbac:	2140      	movs	r1, #64	; 0x40
 801bbae:	f7ff fe43 	bl	801b838 <_malloc_r>
 801bbb2:	6028      	str	r0, [r5, #0]
 801bbb4:	6128      	str	r0, [r5, #16]
 801bbb6:	b920      	cbnz	r0, 801bbc2 <_svfiprintf_r+0x2e>
 801bbb8:	230c      	movs	r3, #12
 801bbba:	603b      	str	r3, [r7, #0]
 801bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 801bbc0:	e0d1      	b.n	801bd66 <_svfiprintf_r+0x1d2>
 801bbc2:	2340      	movs	r3, #64	; 0x40
 801bbc4:	616b      	str	r3, [r5, #20]
 801bbc6:	2300      	movs	r3, #0
 801bbc8:	9309      	str	r3, [sp, #36]	; 0x24
 801bbca:	2320      	movs	r3, #32
 801bbcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bbd0:	f8cd 800c 	str.w	r8, [sp, #12]
 801bbd4:	2330      	movs	r3, #48	; 0x30
 801bbd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801bd80 <_svfiprintf_r+0x1ec>
 801bbda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bbde:	f04f 0901 	mov.w	r9, #1
 801bbe2:	4623      	mov	r3, r4
 801bbe4:	469a      	mov	sl, r3
 801bbe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bbea:	b10a      	cbz	r2, 801bbf0 <_svfiprintf_r+0x5c>
 801bbec:	2a25      	cmp	r2, #37	; 0x25
 801bbee:	d1f9      	bne.n	801bbe4 <_svfiprintf_r+0x50>
 801bbf0:	ebba 0b04 	subs.w	fp, sl, r4
 801bbf4:	d00b      	beq.n	801bc0e <_svfiprintf_r+0x7a>
 801bbf6:	465b      	mov	r3, fp
 801bbf8:	4622      	mov	r2, r4
 801bbfa:	4629      	mov	r1, r5
 801bbfc:	4638      	mov	r0, r7
 801bbfe:	f7ff ff6d 	bl	801badc <__ssputs_r>
 801bc02:	3001      	adds	r0, #1
 801bc04:	f000 80aa 	beq.w	801bd5c <_svfiprintf_r+0x1c8>
 801bc08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bc0a:	445a      	add	r2, fp
 801bc0c:	9209      	str	r2, [sp, #36]	; 0x24
 801bc0e:	f89a 3000 	ldrb.w	r3, [sl]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	f000 80a2 	beq.w	801bd5c <_svfiprintf_r+0x1c8>
 801bc18:	2300      	movs	r3, #0
 801bc1a:	f04f 32ff 	mov.w	r2, #4294967295
 801bc1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bc22:	f10a 0a01 	add.w	sl, sl, #1
 801bc26:	9304      	str	r3, [sp, #16]
 801bc28:	9307      	str	r3, [sp, #28]
 801bc2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bc2e:	931a      	str	r3, [sp, #104]	; 0x68
 801bc30:	4654      	mov	r4, sl
 801bc32:	2205      	movs	r2, #5
 801bc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc38:	4851      	ldr	r0, [pc, #324]	; (801bd80 <_svfiprintf_r+0x1ec>)
 801bc3a:	f7e4 faf9 	bl	8000230 <memchr>
 801bc3e:	9a04      	ldr	r2, [sp, #16]
 801bc40:	b9d8      	cbnz	r0, 801bc7a <_svfiprintf_r+0xe6>
 801bc42:	06d0      	lsls	r0, r2, #27
 801bc44:	bf44      	itt	mi
 801bc46:	2320      	movmi	r3, #32
 801bc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc4c:	0711      	lsls	r1, r2, #28
 801bc4e:	bf44      	itt	mi
 801bc50:	232b      	movmi	r3, #43	; 0x2b
 801bc52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bc56:	f89a 3000 	ldrb.w	r3, [sl]
 801bc5a:	2b2a      	cmp	r3, #42	; 0x2a
 801bc5c:	d015      	beq.n	801bc8a <_svfiprintf_r+0xf6>
 801bc5e:	9a07      	ldr	r2, [sp, #28]
 801bc60:	4654      	mov	r4, sl
 801bc62:	2000      	movs	r0, #0
 801bc64:	f04f 0c0a 	mov.w	ip, #10
 801bc68:	4621      	mov	r1, r4
 801bc6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bc6e:	3b30      	subs	r3, #48	; 0x30
 801bc70:	2b09      	cmp	r3, #9
 801bc72:	d94e      	bls.n	801bd12 <_svfiprintf_r+0x17e>
 801bc74:	b1b0      	cbz	r0, 801bca4 <_svfiprintf_r+0x110>
 801bc76:	9207      	str	r2, [sp, #28]
 801bc78:	e014      	b.n	801bca4 <_svfiprintf_r+0x110>
 801bc7a:	eba0 0308 	sub.w	r3, r0, r8
 801bc7e:	fa09 f303 	lsl.w	r3, r9, r3
 801bc82:	4313      	orrs	r3, r2
 801bc84:	9304      	str	r3, [sp, #16]
 801bc86:	46a2      	mov	sl, r4
 801bc88:	e7d2      	b.n	801bc30 <_svfiprintf_r+0x9c>
 801bc8a:	9b03      	ldr	r3, [sp, #12]
 801bc8c:	1d19      	adds	r1, r3, #4
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	9103      	str	r1, [sp, #12]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	bfbb      	ittet	lt
 801bc96:	425b      	neglt	r3, r3
 801bc98:	f042 0202 	orrlt.w	r2, r2, #2
 801bc9c:	9307      	strge	r3, [sp, #28]
 801bc9e:	9307      	strlt	r3, [sp, #28]
 801bca0:	bfb8      	it	lt
 801bca2:	9204      	strlt	r2, [sp, #16]
 801bca4:	7823      	ldrb	r3, [r4, #0]
 801bca6:	2b2e      	cmp	r3, #46	; 0x2e
 801bca8:	d10c      	bne.n	801bcc4 <_svfiprintf_r+0x130>
 801bcaa:	7863      	ldrb	r3, [r4, #1]
 801bcac:	2b2a      	cmp	r3, #42	; 0x2a
 801bcae:	d135      	bne.n	801bd1c <_svfiprintf_r+0x188>
 801bcb0:	9b03      	ldr	r3, [sp, #12]
 801bcb2:	1d1a      	adds	r2, r3, #4
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	9203      	str	r2, [sp, #12]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	bfb8      	it	lt
 801bcbc:	f04f 33ff 	movlt.w	r3, #4294967295
 801bcc0:	3402      	adds	r4, #2
 801bcc2:	9305      	str	r3, [sp, #20]
 801bcc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bd90 <_svfiprintf_r+0x1fc>
 801bcc8:	7821      	ldrb	r1, [r4, #0]
 801bcca:	2203      	movs	r2, #3
 801bccc:	4650      	mov	r0, sl
 801bcce:	f7e4 faaf 	bl	8000230 <memchr>
 801bcd2:	b140      	cbz	r0, 801bce6 <_svfiprintf_r+0x152>
 801bcd4:	2340      	movs	r3, #64	; 0x40
 801bcd6:	eba0 000a 	sub.w	r0, r0, sl
 801bcda:	fa03 f000 	lsl.w	r0, r3, r0
 801bcde:	9b04      	ldr	r3, [sp, #16]
 801bce0:	4303      	orrs	r3, r0
 801bce2:	3401      	adds	r4, #1
 801bce4:	9304      	str	r3, [sp, #16]
 801bce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcea:	4826      	ldr	r0, [pc, #152]	; (801bd84 <_svfiprintf_r+0x1f0>)
 801bcec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bcf0:	2206      	movs	r2, #6
 801bcf2:	f7e4 fa9d 	bl	8000230 <memchr>
 801bcf6:	2800      	cmp	r0, #0
 801bcf8:	d038      	beq.n	801bd6c <_svfiprintf_r+0x1d8>
 801bcfa:	4b23      	ldr	r3, [pc, #140]	; (801bd88 <_svfiprintf_r+0x1f4>)
 801bcfc:	bb1b      	cbnz	r3, 801bd46 <_svfiprintf_r+0x1b2>
 801bcfe:	9b03      	ldr	r3, [sp, #12]
 801bd00:	3307      	adds	r3, #7
 801bd02:	f023 0307 	bic.w	r3, r3, #7
 801bd06:	3308      	adds	r3, #8
 801bd08:	9303      	str	r3, [sp, #12]
 801bd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd0c:	4433      	add	r3, r6
 801bd0e:	9309      	str	r3, [sp, #36]	; 0x24
 801bd10:	e767      	b.n	801bbe2 <_svfiprintf_r+0x4e>
 801bd12:	fb0c 3202 	mla	r2, ip, r2, r3
 801bd16:	460c      	mov	r4, r1
 801bd18:	2001      	movs	r0, #1
 801bd1a:	e7a5      	b.n	801bc68 <_svfiprintf_r+0xd4>
 801bd1c:	2300      	movs	r3, #0
 801bd1e:	3401      	adds	r4, #1
 801bd20:	9305      	str	r3, [sp, #20]
 801bd22:	4619      	mov	r1, r3
 801bd24:	f04f 0c0a 	mov.w	ip, #10
 801bd28:	4620      	mov	r0, r4
 801bd2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bd2e:	3a30      	subs	r2, #48	; 0x30
 801bd30:	2a09      	cmp	r2, #9
 801bd32:	d903      	bls.n	801bd3c <_svfiprintf_r+0x1a8>
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d0c5      	beq.n	801bcc4 <_svfiprintf_r+0x130>
 801bd38:	9105      	str	r1, [sp, #20]
 801bd3a:	e7c3      	b.n	801bcc4 <_svfiprintf_r+0x130>
 801bd3c:	fb0c 2101 	mla	r1, ip, r1, r2
 801bd40:	4604      	mov	r4, r0
 801bd42:	2301      	movs	r3, #1
 801bd44:	e7f0      	b.n	801bd28 <_svfiprintf_r+0x194>
 801bd46:	ab03      	add	r3, sp, #12
 801bd48:	9300      	str	r3, [sp, #0]
 801bd4a:	462a      	mov	r2, r5
 801bd4c:	4b0f      	ldr	r3, [pc, #60]	; (801bd8c <_svfiprintf_r+0x1f8>)
 801bd4e:	a904      	add	r1, sp, #16
 801bd50:	4638      	mov	r0, r7
 801bd52:	f3af 8000 	nop.w
 801bd56:	1c42      	adds	r2, r0, #1
 801bd58:	4606      	mov	r6, r0
 801bd5a:	d1d6      	bne.n	801bd0a <_svfiprintf_r+0x176>
 801bd5c:	89ab      	ldrh	r3, [r5, #12]
 801bd5e:	065b      	lsls	r3, r3, #25
 801bd60:	f53f af2c 	bmi.w	801bbbc <_svfiprintf_r+0x28>
 801bd64:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd66:	b01d      	add	sp, #116	; 0x74
 801bd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd6c:	ab03      	add	r3, sp, #12
 801bd6e:	9300      	str	r3, [sp, #0]
 801bd70:	462a      	mov	r2, r5
 801bd72:	4b06      	ldr	r3, [pc, #24]	; (801bd8c <_svfiprintf_r+0x1f8>)
 801bd74:	a904      	add	r1, sp, #16
 801bd76:	4638      	mov	r0, r7
 801bd78:	f000 f9d4 	bl	801c124 <_printf_i>
 801bd7c:	e7eb      	b.n	801bd56 <_svfiprintf_r+0x1c2>
 801bd7e:	bf00      	nop
 801bd80:	0801dc8a 	.word	0x0801dc8a
 801bd84:	0801dc94 	.word	0x0801dc94
 801bd88:	00000000 	.word	0x00000000
 801bd8c:	0801badd 	.word	0x0801badd
 801bd90:	0801dc90 	.word	0x0801dc90

0801bd94 <__sfputc_r>:
 801bd94:	6893      	ldr	r3, [r2, #8]
 801bd96:	3b01      	subs	r3, #1
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	b410      	push	{r4}
 801bd9c:	6093      	str	r3, [r2, #8]
 801bd9e:	da08      	bge.n	801bdb2 <__sfputc_r+0x1e>
 801bda0:	6994      	ldr	r4, [r2, #24]
 801bda2:	42a3      	cmp	r3, r4
 801bda4:	db01      	blt.n	801bdaa <__sfputc_r+0x16>
 801bda6:	290a      	cmp	r1, #10
 801bda8:	d103      	bne.n	801bdb2 <__sfputc_r+0x1e>
 801bdaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdae:	f000 badf 	b.w	801c370 <__swbuf_r>
 801bdb2:	6813      	ldr	r3, [r2, #0]
 801bdb4:	1c58      	adds	r0, r3, #1
 801bdb6:	6010      	str	r0, [r2, #0]
 801bdb8:	7019      	strb	r1, [r3, #0]
 801bdba:	4608      	mov	r0, r1
 801bdbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdc0:	4770      	bx	lr

0801bdc2 <__sfputs_r>:
 801bdc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdc4:	4606      	mov	r6, r0
 801bdc6:	460f      	mov	r7, r1
 801bdc8:	4614      	mov	r4, r2
 801bdca:	18d5      	adds	r5, r2, r3
 801bdcc:	42ac      	cmp	r4, r5
 801bdce:	d101      	bne.n	801bdd4 <__sfputs_r+0x12>
 801bdd0:	2000      	movs	r0, #0
 801bdd2:	e007      	b.n	801bde4 <__sfputs_r+0x22>
 801bdd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdd8:	463a      	mov	r2, r7
 801bdda:	4630      	mov	r0, r6
 801bddc:	f7ff ffda 	bl	801bd94 <__sfputc_r>
 801bde0:	1c43      	adds	r3, r0, #1
 801bde2:	d1f3      	bne.n	801bdcc <__sfputs_r+0xa>
 801bde4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bde8 <_vfiprintf_r>:
 801bde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdec:	460d      	mov	r5, r1
 801bdee:	b09d      	sub	sp, #116	; 0x74
 801bdf0:	4614      	mov	r4, r2
 801bdf2:	4698      	mov	r8, r3
 801bdf4:	4606      	mov	r6, r0
 801bdf6:	b118      	cbz	r0, 801be00 <_vfiprintf_r+0x18>
 801bdf8:	6983      	ldr	r3, [r0, #24]
 801bdfa:	b90b      	cbnz	r3, 801be00 <_vfiprintf_r+0x18>
 801bdfc:	f000 fc9a 	bl	801c734 <__sinit>
 801be00:	4b89      	ldr	r3, [pc, #548]	; (801c028 <_vfiprintf_r+0x240>)
 801be02:	429d      	cmp	r5, r3
 801be04:	d11b      	bne.n	801be3e <_vfiprintf_r+0x56>
 801be06:	6875      	ldr	r5, [r6, #4]
 801be08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be0a:	07d9      	lsls	r1, r3, #31
 801be0c:	d405      	bmi.n	801be1a <_vfiprintf_r+0x32>
 801be0e:	89ab      	ldrh	r3, [r5, #12]
 801be10:	059a      	lsls	r2, r3, #22
 801be12:	d402      	bmi.n	801be1a <_vfiprintf_r+0x32>
 801be14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be16:	f000 fd2b 	bl	801c870 <__retarget_lock_acquire_recursive>
 801be1a:	89ab      	ldrh	r3, [r5, #12]
 801be1c:	071b      	lsls	r3, r3, #28
 801be1e:	d501      	bpl.n	801be24 <_vfiprintf_r+0x3c>
 801be20:	692b      	ldr	r3, [r5, #16]
 801be22:	b9eb      	cbnz	r3, 801be60 <_vfiprintf_r+0x78>
 801be24:	4629      	mov	r1, r5
 801be26:	4630      	mov	r0, r6
 801be28:	f000 faf4 	bl	801c414 <__swsetup_r>
 801be2c:	b1c0      	cbz	r0, 801be60 <_vfiprintf_r+0x78>
 801be2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be30:	07dc      	lsls	r4, r3, #31
 801be32:	d50e      	bpl.n	801be52 <_vfiprintf_r+0x6a>
 801be34:	f04f 30ff 	mov.w	r0, #4294967295
 801be38:	b01d      	add	sp, #116	; 0x74
 801be3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be3e:	4b7b      	ldr	r3, [pc, #492]	; (801c02c <_vfiprintf_r+0x244>)
 801be40:	429d      	cmp	r5, r3
 801be42:	d101      	bne.n	801be48 <_vfiprintf_r+0x60>
 801be44:	68b5      	ldr	r5, [r6, #8]
 801be46:	e7df      	b.n	801be08 <_vfiprintf_r+0x20>
 801be48:	4b79      	ldr	r3, [pc, #484]	; (801c030 <_vfiprintf_r+0x248>)
 801be4a:	429d      	cmp	r5, r3
 801be4c:	bf08      	it	eq
 801be4e:	68f5      	ldreq	r5, [r6, #12]
 801be50:	e7da      	b.n	801be08 <_vfiprintf_r+0x20>
 801be52:	89ab      	ldrh	r3, [r5, #12]
 801be54:	0598      	lsls	r0, r3, #22
 801be56:	d4ed      	bmi.n	801be34 <_vfiprintf_r+0x4c>
 801be58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be5a:	f000 fd0a 	bl	801c872 <__retarget_lock_release_recursive>
 801be5e:	e7e9      	b.n	801be34 <_vfiprintf_r+0x4c>
 801be60:	2300      	movs	r3, #0
 801be62:	9309      	str	r3, [sp, #36]	; 0x24
 801be64:	2320      	movs	r3, #32
 801be66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801be6a:	f8cd 800c 	str.w	r8, [sp, #12]
 801be6e:	2330      	movs	r3, #48	; 0x30
 801be70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c034 <_vfiprintf_r+0x24c>
 801be74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801be78:	f04f 0901 	mov.w	r9, #1
 801be7c:	4623      	mov	r3, r4
 801be7e:	469a      	mov	sl, r3
 801be80:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be84:	b10a      	cbz	r2, 801be8a <_vfiprintf_r+0xa2>
 801be86:	2a25      	cmp	r2, #37	; 0x25
 801be88:	d1f9      	bne.n	801be7e <_vfiprintf_r+0x96>
 801be8a:	ebba 0b04 	subs.w	fp, sl, r4
 801be8e:	d00b      	beq.n	801bea8 <_vfiprintf_r+0xc0>
 801be90:	465b      	mov	r3, fp
 801be92:	4622      	mov	r2, r4
 801be94:	4629      	mov	r1, r5
 801be96:	4630      	mov	r0, r6
 801be98:	f7ff ff93 	bl	801bdc2 <__sfputs_r>
 801be9c:	3001      	adds	r0, #1
 801be9e:	f000 80aa 	beq.w	801bff6 <_vfiprintf_r+0x20e>
 801bea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bea4:	445a      	add	r2, fp
 801bea6:	9209      	str	r2, [sp, #36]	; 0x24
 801bea8:	f89a 3000 	ldrb.w	r3, [sl]
 801beac:	2b00      	cmp	r3, #0
 801beae:	f000 80a2 	beq.w	801bff6 <_vfiprintf_r+0x20e>
 801beb2:	2300      	movs	r3, #0
 801beb4:	f04f 32ff 	mov.w	r2, #4294967295
 801beb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bebc:	f10a 0a01 	add.w	sl, sl, #1
 801bec0:	9304      	str	r3, [sp, #16]
 801bec2:	9307      	str	r3, [sp, #28]
 801bec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bec8:	931a      	str	r3, [sp, #104]	; 0x68
 801beca:	4654      	mov	r4, sl
 801becc:	2205      	movs	r2, #5
 801bece:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bed2:	4858      	ldr	r0, [pc, #352]	; (801c034 <_vfiprintf_r+0x24c>)
 801bed4:	f7e4 f9ac 	bl	8000230 <memchr>
 801bed8:	9a04      	ldr	r2, [sp, #16]
 801beda:	b9d8      	cbnz	r0, 801bf14 <_vfiprintf_r+0x12c>
 801bedc:	06d1      	lsls	r1, r2, #27
 801bede:	bf44      	itt	mi
 801bee0:	2320      	movmi	r3, #32
 801bee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bee6:	0713      	lsls	r3, r2, #28
 801bee8:	bf44      	itt	mi
 801beea:	232b      	movmi	r3, #43	; 0x2b
 801beec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bef0:	f89a 3000 	ldrb.w	r3, [sl]
 801bef4:	2b2a      	cmp	r3, #42	; 0x2a
 801bef6:	d015      	beq.n	801bf24 <_vfiprintf_r+0x13c>
 801bef8:	9a07      	ldr	r2, [sp, #28]
 801befa:	4654      	mov	r4, sl
 801befc:	2000      	movs	r0, #0
 801befe:	f04f 0c0a 	mov.w	ip, #10
 801bf02:	4621      	mov	r1, r4
 801bf04:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bf08:	3b30      	subs	r3, #48	; 0x30
 801bf0a:	2b09      	cmp	r3, #9
 801bf0c:	d94e      	bls.n	801bfac <_vfiprintf_r+0x1c4>
 801bf0e:	b1b0      	cbz	r0, 801bf3e <_vfiprintf_r+0x156>
 801bf10:	9207      	str	r2, [sp, #28]
 801bf12:	e014      	b.n	801bf3e <_vfiprintf_r+0x156>
 801bf14:	eba0 0308 	sub.w	r3, r0, r8
 801bf18:	fa09 f303 	lsl.w	r3, r9, r3
 801bf1c:	4313      	orrs	r3, r2
 801bf1e:	9304      	str	r3, [sp, #16]
 801bf20:	46a2      	mov	sl, r4
 801bf22:	e7d2      	b.n	801beca <_vfiprintf_r+0xe2>
 801bf24:	9b03      	ldr	r3, [sp, #12]
 801bf26:	1d19      	adds	r1, r3, #4
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	9103      	str	r1, [sp, #12]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	bfbb      	ittet	lt
 801bf30:	425b      	neglt	r3, r3
 801bf32:	f042 0202 	orrlt.w	r2, r2, #2
 801bf36:	9307      	strge	r3, [sp, #28]
 801bf38:	9307      	strlt	r3, [sp, #28]
 801bf3a:	bfb8      	it	lt
 801bf3c:	9204      	strlt	r2, [sp, #16]
 801bf3e:	7823      	ldrb	r3, [r4, #0]
 801bf40:	2b2e      	cmp	r3, #46	; 0x2e
 801bf42:	d10c      	bne.n	801bf5e <_vfiprintf_r+0x176>
 801bf44:	7863      	ldrb	r3, [r4, #1]
 801bf46:	2b2a      	cmp	r3, #42	; 0x2a
 801bf48:	d135      	bne.n	801bfb6 <_vfiprintf_r+0x1ce>
 801bf4a:	9b03      	ldr	r3, [sp, #12]
 801bf4c:	1d1a      	adds	r2, r3, #4
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	9203      	str	r2, [sp, #12]
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	bfb8      	it	lt
 801bf56:	f04f 33ff 	movlt.w	r3, #4294967295
 801bf5a:	3402      	adds	r4, #2
 801bf5c:	9305      	str	r3, [sp, #20]
 801bf5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c044 <_vfiprintf_r+0x25c>
 801bf62:	7821      	ldrb	r1, [r4, #0]
 801bf64:	2203      	movs	r2, #3
 801bf66:	4650      	mov	r0, sl
 801bf68:	f7e4 f962 	bl	8000230 <memchr>
 801bf6c:	b140      	cbz	r0, 801bf80 <_vfiprintf_r+0x198>
 801bf6e:	2340      	movs	r3, #64	; 0x40
 801bf70:	eba0 000a 	sub.w	r0, r0, sl
 801bf74:	fa03 f000 	lsl.w	r0, r3, r0
 801bf78:	9b04      	ldr	r3, [sp, #16]
 801bf7a:	4303      	orrs	r3, r0
 801bf7c:	3401      	adds	r4, #1
 801bf7e:	9304      	str	r3, [sp, #16]
 801bf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf84:	482c      	ldr	r0, [pc, #176]	; (801c038 <_vfiprintf_r+0x250>)
 801bf86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bf8a:	2206      	movs	r2, #6
 801bf8c:	f7e4 f950 	bl	8000230 <memchr>
 801bf90:	2800      	cmp	r0, #0
 801bf92:	d03f      	beq.n	801c014 <_vfiprintf_r+0x22c>
 801bf94:	4b29      	ldr	r3, [pc, #164]	; (801c03c <_vfiprintf_r+0x254>)
 801bf96:	bb1b      	cbnz	r3, 801bfe0 <_vfiprintf_r+0x1f8>
 801bf98:	9b03      	ldr	r3, [sp, #12]
 801bf9a:	3307      	adds	r3, #7
 801bf9c:	f023 0307 	bic.w	r3, r3, #7
 801bfa0:	3308      	adds	r3, #8
 801bfa2:	9303      	str	r3, [sp, #12]
 801bfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfa6:	443b      	add	r3, r7
 801bfa8:	9309      	str	r3, [sp, #36]	; 0x24
 801bfaa:	e767      	b.n	801be7c <_vfiprintf_r+0x94>
 801bfac:	fb0c 3202 	mla	r2, ip, r2, r3
 801bfb0:	460c      	mov	r4, r1
 801bfb2:	2001      	movs	r0, #1
 801bfb4:	e7a5      	b.n	801bf02 <_vfiprintf_r+0x11a>
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	3401      	adds	r4, #1
 801bfba:	9305      	str	r3, [sp, #20]
 801bfbc:	4619      	mov	r1, r3
 801bfbe:	f04f 0c0a 	mov.w	ip, #10
 801bfc2:	4620      	mov	r0, r4
 801bfc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfc8:	3a30      	subs	r2, #48	; 0x30
 801bfca:	2a09      	cmp	r2, #9
 801bfcc:	d903      	bls.n	801bfd6 <_vfiprintf_r+0x1ee>
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d0c5      	beq.n	801bf5e <_vfiprintf_r+0x176>
 801bfd2:	9105      	str	r1, [sp, #20]
 801bfd4:	e7c3      	b.n	801bf5e <_vfiprintf_r+0x176>
 801bfd6:	fb0c 2101 	mla	r1, ip, r1, r2
 801bfda:	4604      	mov	r4, r0
 801bfdc:	2301      	movs	r3, #1
 801bfde:	e7f0      	b.n	801bfc2 <_vfiprintf_r+0x1da>
 801bfe0:	ab03      	add	r3, sp, #12
 801bfe2:	9300      	str	r3, [sp, #0]
 801bfe4:	462a      	mov	r2, r5
 801bfe6:	4b16      	ldr	r3, [pc, #88]	; (801c040 <_vfiprintf_r+0x258>)
 801bfe8:	a904      	add	r1, sp, #16
 801bfea:	4630      	mov	r0, r6
 801bfec:	f3af 8000 	nop.w
 801bff0:	4607      	mov	r7, r0
 801bff2:	1c78      	adds	r0, r7, #1
 801bff4:	d1d6      	bne.n	801bfa4 <_vfiprintf_r+0x1bc>
 801bff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bff8:	07d9      	lsls	r1, r3, #31
 801bffa:	d405      	bmi.n	801c008 <_vfiprintf_r+0x220>
 801bffc:	89ab      	ldrh	r3, [r5, #12]
 801bffe:	059a      	lsls	r2, r3, #22
 801c000:	d402      	bmi.n	801c008 <_vfiprintf_r+0x220>
 801c002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c004:	f000 fc35 	bl	801c872 <__retarget_lock_release_recursive>
 801c008:	89ab      	ldrh	r3, [r5, #12]
 801c00a:	065b      	lsls	r3, r3, #25
 801c00c:	f53f af12 	bmi.w	801be34 <_vfiprintf_r+0x4c>
 801c010:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c012:	e711      	b.n	801be38 <_vfiprintf_r+0x50>
 801c014:	ab03      	add	r3, sp, #12
 801c016:	9300      	str	r3, [sp, #0]
 801c018:	462a      	mov	r2, r5
 801c01a:	4b09      	ldr	r3, [pc, #36]	; (801c040 <_vfiprintf_r+0x258>)
 801c01c:	a904      	add	r1, sp, #16
 801c01e:	4630      	mov	r0, r6
 801c020:	f000 f880 	bl	801c124 <_printf_i>
 801c024:	e7e4      	b.n	801bff0 <_vfiprintf_r+0x208>
 801c026:	bf00      	nop
 801c028:	0801dce0 	.word	0x0801dce0
 801c02c:	0801dd00 	.word	0x0801dd00
 801c030:	0801dcc0 	.word	0x0801dcc0
 801c034:	0801dc8a 	.word	0x0801dc8a
 801c038:	0801dc94 	.word	0x0801dc94
 801c03c:	00000000 	.word	0x00000000
 801c040:	0801bdc3 	.word	0x0801bdc3
 801c044:	0801dc90 	.word	0x0801dc90

0801c048 <_printf_common>:
 801c048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c04c:	4616      	mov	r6, r2
 801c04e:	4699      	mov	r9, r3
 801c050:	688a      	ldr	r2, [r1, #8]
 801c052:	690b      	ldr	r3, [r1, #16]
 801c054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c058:	4293      	cmp	r3, r2
 801c05a:	bfb8      	it	lt
 801c05c:	4613      	movlt	r3, r2
 801c05e:	6033      	str	r3, [r6, #0]
 801c060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c064:	4607      	mov	r7, r0
 801c066:	460c      	mov	r4, r1
 801c068:	b10a      	cbz	r2, 801c06e <_printf_common+0x26>
 801c06a:	3301      	adds	r3, #1
 801c06c:	6033      	str	r3, [r6, #0]
 801c06e:	6823      	ldr	r3, [r4, #0]
 801c070:	0699      	lsls	r1, r3, #26
 801c072:	bf42      	ittt	mi
 801c074:	6833      	ldrmi	r3, [r6, #0]
 801c076:	3302      	addmi	r3, #2
 801c078:	6033      	strmi	r3, [r6, #0]
 801c07a:	6825      	ldr	r5, [r4, #0]
 801c07c:	f015 0506 	ands.w	r5, r5, #6
 801c080:	d106      	bne.n	801c090 <_printf_common+0x48>
 801c082:	f104 0a19 	add.w	sl, r4, #25
 801c086:	68e3      	ldr	r3, [r4, #12]
 801c088:	6832      	ldr	r2, [r6, #0]
 801c08a:	1a9b      	subs	r3, r3, r2
 801c08c:	42ab      	cmp	r3, r5
 801c08e:	dc26      	bgt.n	801c0de <_printf_common+0x96>
 801c090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c094:	1e13      	subs	r3, r2, #0
 801c096:	6822      	ldr	r2, [r4, #0]
 801c098:	bf18      	it	ne
 801c09a:	2301      	movne	r3, #1
 801c09c:	0692      	lsls	r2, r2, #26
 801c09e:	d42b      	bmi.n	801c0f8 <_printf_common+0xb0>
 801c0a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c0a4:	4649      	mov	r1, r9
 801c0a6:	4638      	mov	r0, r7
 801c0a8:	47c0      	blx	r8
 801c0aa:	3001      	adds	r0, #1
 801c0ac:	d01e      	beq.n	801c0ec <_printf_common+0xa4>
 801c0ae:	6823      	ldr	r3, [r4, #0]
 801c0b0:	68e5      	ldr	r5, [r4, #12]
 801c0b2:	6832      	ldr	r2, [r6, #0]
 801c0b4:	f003 0306 	and.w	r3, r3, #6
 801c0b8:	2b04      	cmp	r3, #4
 801c0ba:	bf08      	it	eq
 801c0bc:	1aad      	subeq	r5, r5, r2
 801c0be:	68a3      	ldr	r3, [r4, #8]
 801c0c0:	6922      	ldr	r2, [r4, #16]
 801c0c2:	bf0c      	ite	eq
 801c0c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c0c8:	2500      	movne	r5, #0
 801c0ca:	4293      	cmp	r3, r2
 801c0cc:	bfc4      	itt	gt
 801c0ce:	1a9b      	subgt	r3, r3, r2
 801c0d0:	18ed      	addgt	r5, r5, r3
 801c0d2:	2600      	movs	r6, #0
 801c0d4:	341a      	adds	r4, #26
 801c0d6:	42b5      	cmp	r5, r6
 801c0d8:	d11a      	bne.n	801c110 <_printf_common+0xc8>
 801c0da:	2000      	movs	r0, #0
 801c0dc:	e008      	b.n	801c0f0 <_printf_common+0xa8>
 801c0de:	2301      	movs	r3, #1
 801c0e0:	4652      	mov	r2, sl
 801c0e2:	4649      	mov	r1, r9
 801c0e4:	4638      	mov	r0, r7
 801c0e6:	47c0      	blx	r8
 801c0e8:	3001      	adds	r0, #1
 801c0ea:	d103      	bne.n	801c0f4 <_printf_common+0xac>
 801c0ec:	f04f 30ff 	mov.w	r0, #4294967295
 801c0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0f4:	3501      	adds	r5, #1
 801c0f6:	e7c6      	b.n	801c086 <_printf_common+0x3e>
 801c0f8:	18e1      	adds	r1, r4, r3
 801c0fa:	1c5a      	adds	r2, r3, #1
 801c0fc:	2030      	movs	r0, #48	; 0x30
 801c0fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c102:	4422      	add	r2, r4
 801c104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c10c:	3302      	adds	r3, #2
 801c10e:	e7c7      	b.n	801c0a0 <_printf_common+0x58>
 801c110:	2301      	movs	r3, #1
 801c112:	4622      	mov	r2, r4
 801c114:	4649      	mov	r1, r9
 801c116:	4638      	mov	r0, r7
 801c118:	47c0      	blx	r8
 801c11a:	3001      	adds	r0, #1
 801c11c:	d0e6      	beq.n	801c0ec <_printf_common+0xa4>
 801c11e:	3601      	adds	r6, #1
 801c120:	e7d9      	b.n	801c0d6 <_printf_common+0x8e>
	...

0801c124 <_printf_i>:
 801c124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c128:	7e0f      	ldrb	r7, [r1, #24]
 801c12a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c12c:	2f78      	cmp	r7, #120	; 0x78
 801c12e:	4691      	mov	r9, r2
 801c130:	4680      	mov	r8, r0
 801c132:	460c      	mov	r4, r1
 801c134:	469a      	mov	sl, r3
 801c136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c13a:	d807      	bhi.n	801c14c <_printf_i+0x28>
 801c13c:	2f62      	cmp	r7, #98	; 0x62
 801c13e:	d80a      	bhi.n	801c156 <_printf_i+0x32>
 801c140:	2f00      	cmp	r7, #0
 801c142:	f000 80d8 	beq.w	801c2f6 <_printf_i+0x1d2>
 801c146:	2f58      	cmp	r7, #88	; 0x58
 801c148:	f000 80a3 	beq.w	801c292 <_printf_i+0x16e>
 801c14c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c154:	e03a      	b.n	801c1cc <_printf_i+0xa8>
 801c156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c15a:	2b15      	cmp	r3, #21
 801c15c:	d8f6      	bhi.n	801c14c <_printf_i+0x28>
 801c15e:	a101      	add	r1, pc, #4	; (adr r1, 801c164 <_printf_i+0x40>)
 801c160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c164:	0801c1bd 	.word	0x0801c1bd
 801c168:	0801c1d1 	.word	0x0801c1d1
 801c16c:	0801c14d 	.word	0x0801c14d
 801c170:	0801c14d 	.word	0x0801c14d
 801c174:	0801c14d 	.word	0x0801c14d
 801c178:	0801c14d 	.word	0x0801c14d
 801c17c:	0801c1d1 	.word	0x0801c1d1
 801c180:	0801c14d 	.word	0x0801c14d
 801c184:	0801c14d 	.word	0x0801c14d
 801c188:	0801c14d 	.word	0x0801c14d
 801c18c:	0801c14d 	.word	0x0801c14d
 801c190:	0801c2dd 	.word	0x0801c2dd
 801c194:	0801c201 	.word	0x0801c201
 801c198:	0801c2bf 	.word	0x0801c2bf
 801c19c:	0801c14d 	.word	0x0801c14d
 801c1a0:	0801c14d 	.word	0x0801c14d
 801c1a4:	0801c2ff 	.word	0x0801c2ff
 801c1a8:	0801c14d 	.word	0x0801c14d
 801c1ac:	0801c201 	.word	0x0801c201
 801c1b0:	0801c14d 	.word	0x0801c14d
 801c1b4:	0801c14d 	.word	0x0801c14d
 801c1b8:	0801c2c7 	.word	0x0801c2c7
 801c1bc:	682b      	ldr	r3, [r5, #0]
 801c1be:	1d1a      	adds	r2, r3, #4
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	602a      	str	r2, [r5, #0]
 801c1c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c1c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c1cc:	2301      	movs	r3, #1
 801c1ce:	e0a3      	b.n	801c318 <_printf_i+0x1f4>
 801c1d0:	6820      	ldr	r0, [r4, #0]
 801c1d2:	6829      	ldr	r1, [r5, #0]
 801c1d4:	0606      	lsls	r6, r0, #24
 801c1d6:	f101 0304 	add.w	r3, r1, #4
 801c1da:	d50a      	bpl.n	801c1f2 <_printf_i+0xce>
 801c1dc:	680e      	ldr	r6, [r1, #0]
 801c1de:	602b      	str	r3, [r5, #0]
 801c1e0:	2e00      	cmp	r6, #0
 801c1e2:	da03      	bge.n	801c1ec <_printf_i+0xc8>
 801c1e4:	232d      	movs	r3, #45	; 0x2d
 801c1e6:	4276      	negs	r6, r6
 801c1e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c1ec:	485e      	ldr	r0, [pc, #376]	; (801c368 <_printf_i+0x244>)
 801c1ee:	230a      	movs	r3, #10
 801c1f0:	e019      	b.n	801c226 <_printf_i+0x102>
 801c1f2:	680e      	ldr	r6, [r1, #0]
 801c1f4:	602b      	str	r3, [r5, #0]
 801c1f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c1fa:	bf18      	it	ne
 801c1fc:	b236      	sxthne	r6, r6
 801c1fe:	e7ef      	b.n	801c1e0 <_printf_i+0xbc>
 801c200:	682b      	ldr	r3, [r5, #0]
 801c202:	6820      	ldr	r0, [r4, #0]
 801c204:	1d19      	adds	r1, r3, #4
 801c206:	6029      	str	r1, [r5, #0]
 801c208:	0601      	lsls	r1, r0, #24
 801c20a:	d501      	bpl.n	801c210 <_printf_i+0xec>
 801c20c:	681e      	ldr	r6, [r3, #0]
 801c20e:	e002      	b.n	801c216 <_printf_i+0xf2>
 801c210:	0646      	lsls	r6, r0, #25
 801c212:	d5fb      	bpl.n	801c20c <_printf_i+0xe8>
 801c214:	881e      	ldrh	r6, [r3, #0]
 801c216:	4854      	ldr	r0, [pc, #336]	; (801c368 <_printf_i+0x244>)
 801c218:	2f6f      	cmp	r7, #111	; 0x6f
 801c21a:	bf0c      	ite	eq
 801c21c:	2308      	moveq	r3, #8
 801c21e:	230a      	movne	r3, #10
 801c220:	2100      	movs	r1, #0
 801c222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c226:	6865      	ldr	r5, [r4, #4]
 801c228:	60a5      	str	r5, [r4, #8]
 801c22a:	2d00      	cmp	r5, #0
 801c22c:	bfa2      	ittt	ge
 801c22e:	6821      	ldrge	r1, [r4, #0]
 801c230:	f021 0104 	bicge.w	r1, r1, #4
 801c234:	6021      	strge	r1, [r4, #0]
 801c236:	b90e      	cbnz	r6, 801c23c <_printf_i+0x118>
 801c238:	2d00      	cmp	r5, #0
 801c23a:	d04d      	beq.n	801c2d8 <_printf_i+0x1b4>
 801c23c:	4615      	mov	r5, r2
 801c23e:	fbb6 f1f3 	udiv	r1, r6, r3
 801c242:	fb03 6711 	mls	r7, r3, r1, r6
 801c246:	5dc7      	ldrb	r7, [r0, r7]
 801c248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c24c:	4637      	mov	r7, r6
 801c24e:	42bb      	cmp	r3, r7
 801c250:	460e      	mov	r6, r1
 801c252:	d9f4      	bls.n	801c23e <_printf_i+0x11a>
 801c254:	2b08      	cmp	r3, #8
 801c256:	d10b      	bne.n	801c270 <_printf_i+0x14c>
 801c258:	6823      	ldr	r3, [r4, #0]
 801c25a:	07de      	lsls	r6, r3, #31
 801c25c:	d508      	bpl.n	801c270 <_printf_i+0x14c>
 801c25e:	6923      	ldr	r3, [r4, #16]
 801c260:	6861      	ldr	r1, [r4, #4]
 801c262:	4299      	cmp	r1, r3
 801c264:	bfde      	ittt	le
 801c266:	2330      	movle	r3, #48	; 0x30
 801c268:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c26c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c270:	1b52      	subs	r2, r2, r5
 801c272:	6122      	str	r2, [r4, #16]
 801c274:	f8cd a000 	str.w	sl, [sp]
 801c278:	464b      	mov	r3, r9
 801c27a:	aa03      	add	r2, sp, #12
 801c27c:	4621      	mov	r1, r4
 801c27e:	4640      	mov	r0, r8
 801c280:	f7ff fee2 	bl	801c048 <_printf_common>
 801c284:	3001      	adds	r0, #1
 801c286:	d14c      	bne.n	801c322 <_printf_i+0x1fe>
 801c288:	f04f 30ff 	mov.w	r0, #4294967295
 801c28c:	b004      	add	sp, #16
 801c28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c292:	4835      	ldr	r0, [pc, #212]	; (801c368 <_printf_i+0x244>)
 801c294:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c298:	6829      	ldr	r1, [r5, #0]
 801c29a:	6823      	ldr	r3, [r4, #0]
 801c29c:	f851 6b04 	ldr.w	r6, [r1], #4
 801c2a0:	6029      	str	r1, [r5, #0]
 801c2a2:	061d      	lsls	r5, r3, #24
 801c2a4:	d514      	bpl.n	801c2d0 <_printf_i+0x1ac>
 801c2a6:	07df      	lsls	r7, r3, #31
 801c2a8:	bf44      	itt	mi
 801c2aa:	f043 0320 	orrmi.w	r3, r3, #32
 801c2ae:	6023      	strmi	r3, [r4, #0]
 801c2b0:	b91e      	cbnz	r6, 801c2ba <_printf_i+0x196>
 801c2b2:	6823      	ldr	r3, [r4, #0]
 801c2b4:	f023 0320 	bic.w	r3, r3, #32
 801c2b8:	6023      	str	r3, [r4, #0]
 801c2ba:	2310      	movs	r3, #16
 801c2bc:	e7b0      	b.n	801c220 <_printf_i+0xfc>
 801c2be:	6823      	ldr	r3, [r4, #0]
 801c2c0:	f043 0320 	orr.w	r3, r3, #32
 801c2c4:	6023      	str	r3, [r4, #0]
 801c2c6:	2378      	movs	r3, #120	; 0x78
 801c2c8:	4828      	ldr	r0, [pc, #160]	; (801c36c <_printf_i+0x248>)
 801c2ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c2ce:	e7e3      	b.n	801c298 <_printf_i+0x174>
 801c2d0:	0659      	lsls	r1, r3, #25
 801c2d2:	bf48      	it	mi
 801c2d4:	b2b6      	uxthmi	r6, r6
 801c2d6:	e7e6      	b.n	801c2a6 <_printf_i+0x182>
 801c2d8:	4615      	mov	r5, r2
 801c2da:	e7bb      	b.n	801c254 <_printf_i+0x130>
 801c2dc:	682b      	ldr	r3, [r5, #0]
 801c2de:	6826      	ldr	r6, [r4, #0]
 801c2e0:	6961      	ldr	r1, [r4, #20]
 801c2e2:	1d18      	adds	r0, r3, #4
 801c2e4:	6028      	str	r0, [r5, #0]
 801c2e6:	0635      	lsls	r5, r6, #24
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	d501      	bpl.n	801c2f0 <_printf_i+0x1cc>
 801c2ec:	6019      	str	r1, [r3, #0]
 801c2ee:	e002      	b.n	801c2f6 <_printf_i+0x1d2>
 801c2f0:	0670      	lsls	r0, r6, #25
 801c2f2:	d5fb      	bpl.n	801c2ec <_printf_i+0x1c8>
 801c2f4:	8019      	strh	r1, [r3, #0]
 801c2f6:	2300      	movs	r3, #0
 801c2f8:	6123      	str	r3, [r4, #16]
 801c2fa:	4615      	mov	r5, r2
 801c2fc:	e7ba      	b.n	801c274 <_printf_i+0x150>
 801c2fe:	682b      	ldr	r3, [r5, #0]
 801c300:	1d1a      	adds	r2, r3, #4
 801c302:	602a      	str	r2, [r5, #0]
 801c304:	681d      	ldr	r5, [r3, #0]
 801c306:	6862      	ldr	r2, [r4, #4]
 801c308:	2100      	movs	r1, #0
 801c30a:	4628      	mov	r0, r5
 801c30c:	f7e3 ff90 	bl	8000230 <memchr>
 801c310:	b108      	cbz	r0, 801c316 <_printf_i+0x1f2>
 801c312:	1b40      	subs	r0, r0, r5
 801c314:	6060      	str	r0, [r4, #4]
 801c316:	6863      	ldr	r3, [r4, #4]
 801c318:	6123      	str	r3, [r4, #16]
 801c31a:	2300      	movs	r3, #0
 801c31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c320:	e7a8      	b.n	801c274 <_printf_i+0x150>
 801c322:	6923      	ldr	r3, [r4, #16]
 801c324:	462a      	mov	r2, r5
 801c326:	4649      	mov	r1, r9
 801c328:	4640      	mov	r0, r8
 801c32a:	47d0      	blx	sl
 801c32c:	3001      	adds	r0, #1
 801c32e:	d0ab      	beq.n	801c288 <_printf_i+0x164>
 801c330:	6823      	ldr	r3, [r4, #0]
 801c332:	079b      	lsls	r3, r3, #30
 801c334:	d413      	bmi.n	801c35e <_printf_i+0x23a>
 801c336:	68e0      	ldr	r0, [r4, #12]
 801c338:	9b03      	ldr	r3, [sp, #12]
 801c33a:	4298      	cmp	r0, r3
 801c33c:	bfb8      	it	lt
 801c33e:	4618      	movlt	r0, r3
 801c340:	e7a4      	b.n	801c28c <_printf_i+0x168>
 801c342:	2301      	movs	r3, #1
 801c344:	4632      	mov	r2, r6
 801c346:	4649      	mov	r1, r9
 801c348:	4640      	mov	r0, r8
 801c34a:	47d0      	blx	sl
 801c34c:	3001      	adds	r0, #1
 801c34e:	d09b      	beq.n	801c288 <_printf_i+0x164>
 801c350:	3501      	adds	r5, #1
 801c352:	68e3      	ldr	r3, [r4, #12]
 801c354:	9903      	ldr	r1, [sp, #12]
 801c356:	1a5b      	subs	r3, r3, r1
 801c358:	42ab      	cmp	r3, r5
 801c35a:	dcf2      	bgt.n	801c342 <_printf_i+0x21e>
 801c35c:	e7eb      	b.n	801c336 <_printf_i+0x212>
 801c35e:	2500      	movs	r5, #0
 801c360:	f104 0619 	add.w	r6, r4, #25
 801c364:	e7f5      	b.n	801c352 <_printf_i+0x22e>
 801c366:	bf00      	nop
 801c368:	0801dc9b 	.word	0x0801dc9b
 801c36c:	0801dcac 	.word	0x0801dcac

0801c370 <__swbuf_r>:
 801c370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c372:	460e      	mov	r6, r1
 801c374:	4614      	mov	r4, r2
 801c376:	4605      	mov	r5, r0
 801c378:	b118      	cbz	r0, 801c382 <__swbuf_r+0x12>
 801c37a:	6983      	ldr	r3, [r0, #24]
 801c37c:	b90b      	cbnz	r3, 801c382 <__swbuf_r+0x12>
 801c37e:	f000 f9d9 	bl	801c734 <__sinit>
 801c382:	4b21      	ldr	r3, [pc, #132]	; (801c408 <__swbuf_r+0x98>)
 801c384:	429c      	cmp	r4, r3
 801c386:	d12b      	bne.n	801c3e0 <__swbuf_r+0x70>
 801c388:	686c      	ldr	r4, [r5, #4]
 801c38a:	69a3      	ldr	r3, [r4, #24]
 801c38c:	60a3      	str	r3, [r4, #8]
 801c38e:	89a3      	ldrh	r3, [r4, #12]
 801c390:	071a      	lsls	r2, r3, #28
 801c392:	d52f      	bpl.n	801c3f4 <__swbuf_r+0x84>
 801c394:	6923      	ldr	r3, [r4, #16]
 801c396:	b36b      	cbz	r3, 801c3f4 <__swbuf_r+0x84>
 801c398:	6923      	ldr	r3, [r4, #16]
 801c39a:	6820      	ldr	r0, [r4, #0]
 801c39c:	1ac0      	subs	r0, r0, r3
 801c39e:	6963      	ldr	r3, [r4, #20]
 801c3a0:	b2f6      	uxtb	r6, r6
 801c3a2:	4283      	cmp	r3, r0
 801c3a4:	4637      	mov	r7, r6
 801c3a6:	dc04      	bgt.n	801c3b2 <__swbuf_r+0x42>
 801c3a8:	4621      	mov	r1, r4
 801c3aa:	4628      	mov	r0, r5
 801c3ac:	f000 f92e 	bl	801c60c <_fflush_r>
 801c3b0:	bb30      	cbnz	r0, 801c400 <__swbuf_r+0x90>
 801c3b2:	68a3      	ldr	r3, [r4, #8]
 801c3b4:	3b01      	subs	r3, #1
 801c3b6:	60a3      	str	r3, [r4, #8]
 801c3b8:	6823      	ldr	r3, [r4, #0]
 801c3ba:	1c5a      	adds	r2, r3, #1
 801c3bc:	6022      	str	r2, [r4, #0]
 801c3be:	701e      	strb	r6, [r3, #0]
 801c3c0:	6963      	ldr	r3, [r4, #20]
 801c3c2:	3001      	adds	r0, #1
 801c3c4:	4283      	cmp	r3, r0
 801c3c6:	d004      	beq.n	801c3d2 <__swbuf_r+0x62>
 801c3c8:	89a3      	ldrh	r3, [r4, #12]
 801c3ca:	07db      	lsls	r3, r3, #31
 801c3cc:	d506      	bpl.n	801c3dc <__swbuf_r+0x6c>
 801c3ce:	2e0a      	cmp	r6, #10
 801c3d0:	d104      	bne.n	801c3dc <__swbuf_r+0x6c>
 801c3d2:	4621      	mov	r1, r4
 801c3d4:	4628      	mov	r0, r5
 801c3d6:	f000 f919 	bl	801c60c <_fflush_r>
 801c3da:	b988      	cbnz	r0, 801c400 <__swbuf_r+0x90>
 801c3dc:	4638      	mov	r0, r7
 801c3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3e0:	4b0a      	ldr	r3, [pc, #40]	; (801c40c <__swbuf_r+0x9c>)
 801c3e2:	429c      	cmp	r4, r3
 801c3e4:	d101      	bne.n	801c3ea <__swbuf_r+0x7a>
 801c3e6:	68ac      	ldr	r4, [r5, #8]
 801c3e8:	e7cf      	b.n	801c38a <__swbuf_r+0x1a>
 801c3ea:	4b09      	ldr	r3, [pc, #36]	; (801c410 <__swbuf_r+0xa0>)
 801c3ec:	429c      	cmp	r4, r3
 801c3ee:	bf08      	it	eq
 801c3f0:	68ec      	ldreq	r4, [r5, #12]
 801c3f2:	e7ca      	b.n	801c38a <__swbuf_r+0x1a>
 801c3f4:	4621      	mov	r1, r4
 801c3f6:	4628      	mov	r0, r5
 801c3f8:	f000 f80c 	bl	801c414 <__swsetup_r>
 801c3fc:	2800      	cmp	r0, #0
 801c3fe:	d0cb      	beq.n	801c398 <__swbuf_r+0x28>
 801c400:	f04f 37ff 	mov.w	r7, #4294967295
 801c404:	e7ea      	b.n	801c3dc <__swbuf_r+0x6c>
 801c406:	bf00      	nop
 801c408:	0801dce0 	.word	0x0801dce0
 801c40c:	0801dd00 	.word	0x0801dd00
 801c410:	0801dcc0 	.word	0x0801dcc0

0801c414 <__swsetup_r>:
 801c414:	4b32      	ldr	r3, [pc, #200]	; (801c4e0 <__swsetup_r+0xcc>)
 801c416:	b570      	push	{r4, r5, r6, lr}
 801c418:	681d      	ldr	r5, [r3, #0]
 801c41a:	4606      	mov	r6, r0
 801c41c:	460c      	mov	r4, r1
 801c41e:	b125      	cbz	r5, 801c42a <__swsetup_r+0x16>
 801c420:	69ab      	ldr	r3, [r5, #24]
 801c422:	b913      	cbnz	r3, 801c42a <__swsetup_r+0x16>
 801c424:	4628      	mov	r0, r5
 801c426:	f000 f985 	bl	801c734 <__sinit>
 801c42a:	4b2e      	ldr	r3, [pc, #184]	; (801c4e4 <__swsetup_r+0xd0>)
 801c42c:	429c      	cmp	r4, r3
 801c42e:	d10f      	bne.n	801c450 <__swsetup_r+0x3c>
 801c430:	686c      	ldr	r4, [r5, #4]
 801c432:	89a3      	ldrh	r3, [r4, #12]
 801c434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c438:	0719      	lsls	r1, r3, #28
 801c43a:	d42c      	bmi.n	801c496 <__swsetup_r+0x82>
 801c43c:	06dd      	lsls	r5, r3, #27
 801c43e:	d411      	bmi.n	801c464 <__swsetup_r+0x50>
 801c440:	2309      	movs	r3, #9
 801c442:	6033      	str	r3, [r6, #0]
 801c444:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c448:	81a3      	strh	r3, [r4, #12]
 801c44a:	f04f 30ff 	mov.w	r0, #4294967295
 801c44e:	e03e      	b.n	801c4ce <__swsetup_r+0xba>
 801c450:	4b25      	ldr	r3, [pc, #148]	; (801c4e8 <__swsetup_r+0xd4>)
 801c452:	429c      	cmp	r4, r3
 801c454:	d101      	bne.n	801c45a <__swsetup_r+0x46>
 801c456:	68ac      	ldr	r4, [r5, #8]
 801c458:	e7eb      	b.n	801c432 <__swsetup_r+0x1e>
 801c45a:	4b24      	ldr	r3, [pc, #144]	; (801c4ec <__swsetup_r+0xd8>)
 801c45c:	429c      	cmp	r4, r3
 801c45e:	bf08      	it	eq
 801c460:	68ec      	ldreq	r4, [r5, #12]
 801c462:	e7e6      	b.n	801c432 <__swsetup_r+0x1e>
 801c464:	0758      	lsls	r0, r3, #29
 801c466:	d512      	bpl.n	801c48e <__swsetup_r+0x7a>
 801c468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c46a:	b141      	cbz	r1, 801c47e <__swsetup_r+0x6a>
 801c46c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c470:	4299      	cmp	r1, r3
 801c472:	d002      	beq.n	801c47a <__swsetup_r+0x66>
 801c474:	4630      	mov	r0, r6
 801c476:	f7ff f973 	bl	801b760 <_free_r>
 801c47a:	2300      	movs	r3, #0
 801c47c:	6363      	str	r3, [r4, #52]	; 0x34
 801c47e:	89a3      	ldrh	r3, [r4, #12]
 801c480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c484:	81a3      	strh	r3, [r4, #12]
 801c486:	2300      	movs	r3, #0
 801c488:	6063      	str	r3, [r4, #4]
 801c48a:	6923      	ldr	r3, [r4, #16]
 801c48c:	6023      	str	r3, [r4, #0]
 801c48e:	89a3      	ldrh	r3, [r4, #12]
 801c490:	f043 0308 	orr.w	r3, r3, #8
 801c494:	81a3      	strh	r3, [r4, #12]
 801c496:	6923      	ldr	r3, [r4, #16]
 801c498:	b94b      	cbnz	r3, 801c4ae <__swsetup_r+0x9a>
 801c49a:	89a3      	ldrh	r3, [r4, #12]
 801c49c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c4a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c4a4:	d003      	beq.n	801c4ae <__swsetup_r+0x9a>
 801c4a6:	4621      	mov	r1, r4
 801c4a8:	4630      	mov	r0, r6
 801c4aa:	f000 fa09 	bl	801c8c0 <__smakebuf_r>
 801c4ae:	89a0      	ldrh	r0, [r4, #12]
 801c4b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c4b4:	f010 0301 	ands.w	r3, r0, #1
 801c4b8:	d00a      	beq.n	801c4d0 <__swsetup_r+0xbc>
 801c4ba:	2300      	movs	r3, #0
 801c4bc:	60a3      	str	r3, [r4, #8]
 801c4be:	6963      	ldr	r3, [r4, #20]
 801c4c0:	425b      	negs	r3, r3
 801c4c2:	61a3      	str	r3, [r4, #24]
 801c4c4:	6923      	ldr	r3, [r4, #16]
 801c4c6:	b943      	cbnz	r3, 801c4da <__swsetup_r+0xc6>
 801c4c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c4cc:	d1ba      	bne.n	801c444 <__swsetup_r+0x30>
 801c4ce:	bd70      	pop	{r4, r5, r6, pc}
 801c4d0:	0781      	lsls	r1, r0, #30
 801c4d2:	bf58      	it	pl
 801c4d4:	6963      	ldrpl	r3, [r4, #20]
 801c4d6:	60a3      	str	r3, [r4, #8]
 801c4d8:	e7f4      	b.n	801c4c4 <__swsetup_r+0xb0>
 801c4da:	2000      	movs	r0, #0
 801c4dc:	e7f7      	b.n	801c4ce <__swsetup_r+0xba>
 801c4de:	bf00      	nop
 801c4e0:	20000814 	.word	0x20000814
 801c4e4:	0801dce0 	.word	0x0801dce0
 801c4e8:	0801dd00 	.word	0x0801dd00
 801c4ec:	0801dcc0 	.word	0x0801dcc0

0801c4f0 <abort>:
 801c4f0:	b508      	push	{r3, lr}
 801c4f2:	2006      	movs	r0, #6
 801c4f4:	f000 faa4 	bl	801ca40 <raise>
 801c4f8:	2001      	movs	r0, #1
 801c4fa:	f7e6 fac3 	bl	8002a84 <_exit>
	...

0801c500 <__sflush_r>:
 801c500:	898a      	ldrh	r2, [r1, #12]
 801c502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c506:	4605      	mov	r5, r0
 801c508:	0710      	lsls	r0, r2, #28
 801c50a:	460c      	mov	r4, r1
 801c50c:	d458      	bmi.n	801c5c0 <__sflush_r+0xc0>
 801c50e:	684b      	ldr	r3, [r1, #4]
 801c510:	2b00      	cmp	r3, #0
 801c512:	dc05      	bgt.n	801c520 <__sflush_r+0x20>
 801c514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c516:	2b00      	cmp	r3, #0
 801c518:	dc02      	bgt.n	801c520 <__sflush_r+0x20>
 801c51a:	2000      	movs	r0, #0
 801c51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c522:	2e00      	cmp	r6, #0
 801c524:	d0f9      	beq.n	801c51a <__sflush_r+0x1a>
 801c526:	2300      	movs	r3, #0
 801c528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c52c:	682f      	ldr	r7, [r5, #0]
 801c52e:	602b      	str	r3, [r5, #0]
 801c530:	d032      	beq.n	801c598 <__sflush_r+0x98>
 801c532:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c534:	89a3      	ldrh	r3, [r4, #12]
 801c536:	075a      	lsls	r2, r3, #29
 801c538:	d505      	bpl.n	801c546 <__sflush_r+0x46>
 801c53a:	6863      	ldr	r3, [r4, #4]
 801c53c:	1ac0      	subs	r0, r0, r3
 801c53e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c540:	b10b      	cbz	r3, 801c546 <__sflush_r+0x46>
 801c542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c544:	1ac0      	subs	r0, r0, r3
 801c546:	2300      	movs	r3, #0
 801c548:	4602      	mov	r2, r0
 801c54a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c54c:	6a21      	ldr	r1, [r4, #32]
 801c54e:	4628      	mov	r0, r5
 801c550:	47b0      	blx	r6
 801c552:	1c43      	adds	r3, r0, #1
 801c554:	89a3      	ldrh	r3, [r4, #12]
 801c556:	d106      	bne.n	801c566 <__sflush_r+0x66>
 801c558:	6829      	ldr	r1, [r5, #0]
 801c55a:	291d      	cmp	r1, #29
 801c55c:	d82c      	bhi.n	801c5b8 <__sflush_r+0xb8>
 801c55e:	4a2a      	ldr	r2, [pc, #168]	; (801c608 <__sflush_r+0x108>)
 801c560:	40ca      	lsrs	r2, r1
 801c562:	07d6      	lsls	r6, r2, #31
 801c564:	d528      	bpl.n	801c5b8 <__sflush_r+0xb8>
 801c566:	2200      	movs	r2, #0
 801c568:	6062      	str	r2, [r4, #4]
 801c56a:	04d9      	lsls	r1, r3, #19
 801c56c:	6922      	ldr	r2, [r4, #16]
 801c56e:	6022      	str	r2, [r4, #0]
 801c570:	d504      	bpl.n	801c57c <__sflush_r+0x7c>
 801c572:	1c42      	adds	r2, r0, #1
 801c574:	d101      	bne.n	801c57a <__sflush_r+0x7a>
 801c576:	682b      	ldr	r3, [r5, #0]
 801c578:	b903      	cbnz	r3, 801c57c <__sflush_r+0x7c>
 801c57a:	6560      	str	r0, [r4, #84]	; 0x54
 801c57c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c57e:	602f      	str	r7, [r5, #0]
 801c580:	2900      	cmp	r1, #0
 801c582:	d0ca      	beq.n	801c51a <__sflush_r+0x1a>
 801c584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c588:	4299      	cmp	r1, r3
 801c58a:	d002      	beq.n	801c592 <__sflush_r+0x92>
 801c58c:	4628      	mov	r0, r5
 801c58e:	f7ff f8e7 	bl	801b760 <_free_r>
 801c592:	2000      	movs	r0, #0
 801c594:	6360      	str	r0, [r4, #52]	; 0x34
 801c596:	e7c1      	b.n	801c51c <__sflush_r+0x1c>
 801c598:	6a21      	ldr	r1, [r4, #32]
 801c59a:	2301      	movs	r3, #1
 801c59c:	4628      	mov	r0, r5
 801c59e:	47b0      	blx	r6
 801c5a0:	1c41      	adds	r1, r0, #1
 801c5a2:	d1c7      	bne.n	801c534 <__sflush_r+0x34>
 801c5a4:	682b      	ldr	r3, [r5, #0]
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d0c4      	beq.n	801c534 <__sflush_r+0x34>
 801c5aa:	2b1d      	cmp	r3, #29
 801c5ac:	d001      	beq.n	801c5b2 <__sflush_r+0xb2>
 801c5ae:	2b16      	cmp	r3, #22
 801c5b0:	d101      	bne.n	801c5b6 <__sflush_r+0xb6>
 801c5b2:	602f      	str	r7, [r5, #0]
 801c5b4:	e7b1      	b.n	801c51a <__sflush_r+0x1a>
 801c5b6:	89a3      	ldrh	r3, [r4, #12]
 801c5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5bc:	81a3      	strh	r3, [r4, #12]
 801c5be:	e7ad      	b.n	801c51c <__sflush_r+0x1c>
 801c5c0:	690f      	ldr	r7, [r1, #16]
 801c5c2:	2f00      	cmp	r7, #0
 801c5c4:	d0a9      	beq.n	801c51a <__sflush_r+0x1a>
 801c5c6:	0793      	lsls	r3, r2, #30
 801c5c8:	680e      	ldr	r6, [r1, #0]
 801c5ca:	bf08      	it	eq
 801c5cc:	694b      	ldreq	r3, [r1, #20]
 801c5ce:	600f      	str	r7, [r1, #0]
 801c5d0:	bf18      	it	ne
 801c5d2:	2300      	movne	r3, #0
 801c5d4:	eba6 0807 	sub.w	r8, r6, r7
 801c5d8:	608b      	str	r3, [r1, #8]
 801c5da:	f1b8 0f00 	cmp.w	r8, #0
 801c5de:	dd9c      	ble.n	801c51a <__sflush_r+0x1a>
 801c5e0:	6a21      	ldr	r1, [r4, #32]
 801c5e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c5e4:	4643      	mov	r3, r8
 801c5e6:	463a      	mov	r2, r7
 801c5e8:	4628      	mov	r0, r5
 801c5ea:	47b0      	blx	r6
 801c5ec:	2800      	cmp	r0, #0
 801c5ee:	dc06      	bgt.n	801c5fe <__sflush_r+0xfe>
 801c5f0:	89a3      	ldrh	r3, [r4, #12]
 801c5f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5f6:	81a3      	strh	r3, [r4, #12]
 801c5f8:	f04f 30ff 	mov.w	r0, #4294967295
 801c5fc:	e78e      	b.n	801c51c <__sflush_r+0x1c>
 801c5fe:	4407      	add	r7, r0
 801c600:	eba8 0800 	sub.w	r8, r8, r0
 801c604:	e7e9      	b.n	801c5da <__sflush_r+0xda>
 801c606:	bf00      	nop
 801c608:	20400001 	.word	0x20400001

0801c60c <_fflush_r>:
 801c60c:	b538      	push	{r3, r4, r5, lr}
 801c60e:	690b      	ldr	r3, [r1, #16]
 801c610:	4605      	mov	r5, r0
 801c612:	460c      	mov	r4, r1
 801c614:	b913      	cbnz	r3, 801c61c <_fflush_r+0x10>
 801c616:	2500      	movs	r5, #0
 801c618:	4628      	mov	r0, r5
 801c61a:	bd38      	pop	{r3, r4, r5, pc}
 801c61c:	b118      	cbz	r0, 801c626 <_fflush_r+0x1a>
 801c61e:	6983      	ldr	r3, [r0, #24]
 801c620:	b90b      	cbnz	r3, 801c626 <_fflush_r+0x1a>
 801c622:	f000 f887 	bl	801c734 <__sinit>
 801c626:	4b14      	ldr	r3, [pc, #80]	; (801c678 <_fflush_r+0x6c>)
 801c628:	429c      	cmp	r4, r3
 801c62a:	d11b      	bne.n	801c664 <_fflush_r+0x58>
 801c62c:	686c      	ldr	r4, [r5, #4]
 801c62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d0ef      	beq.n	801c616 <_fflush_r+0xa>
 801c636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c638:	07d0      	lsls	r0, r2, #31
 801c63a:	d404      	bmi.n	801c646 <_fflush_r+0x3a>
 801c63c:	0599      	lsls	r1, r3, #22
 801c63e:	d402      	bmi.n	801c646 <_fflush_r+0x3a>
 801c640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c642:	f000 f915 	bl	801c870 <__retarget_lock_acquire_recursive>
 801c646:	4628      	mov	r0, r5
 801c648:	4621      	mov	r1, r4
 801c64a:	f7ff ff59 	bl	801c500 <__sflush_r>
 801c64e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c650:	07da      	lsls	r2, r3, #31
 801c652:	4605      	mov	r5, r0
 801c654:	d4e0      	bmi.n	801c618 <_fflush_r+0xc>
 801c656:	89a3      	ldrh	r3, [r4, #12]
 801c658:	059b      	lsls	r3, r3, #22
 801c65a:	d4dd      	bmi.n	801c618 <_fflush_r+0xc>
 801c65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c65e:	f000 f908 	bl	801c872 <__retarget_lock_release_recursive>
 801c662:	e7d9      	b.n	801c618 <_fflush_r+0xc>
 801c664:	4b05      	ldr	r3, [pc, #20]	; (801c67c <_fflush_r+0x70>)
 801c666:	429c      	cmp	r4, r3
 801c668:	d101      	bne.n	801c66e <_fflush_r+0x62>
 801c66a:	68ac      	ldr	r4, [r5, #8]
 801c66c:	e7df      	b.n	801c62e <_fflush_r+0x22>
 801c66e:	4b04      	ldr	r3, [pc, #16]	; (801c680 <_fflush_r+0x74>)
 801c670:	429c      	cmp	r4, r3
 801c672:	bf08      	it	eq
 801c674:	68ec      	ldreq	r4, [r5, #12]
 801c676:	e7da      	b.n	801c62e <_fflush_r+0x22>
 801c678:	0801dce0 	.word	0x0801dce0
 801c67c:	0801dd00 	.word	0x0801dd00
 801c680:	0801dcc0 	.word	0x0801dcc0

0801c684 <std>:
 801c684:	2300      	movs	r3, #0
 801c686:	b510      	push	{r4, lr}
 801c688:	4604      	mov	r4, r0
 801c68a:	e9c0 3300 	strd	r3, r3, [r0]
 801c68e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c692:	6083      	str	r3, [r0, #8]
 801c694:	8181      	strh	r1, [r0, #12]
 801c696:	6643      	str	r3, [r0, #100]	; 0x64
 801c698:	81c2      	strh	r2, [r0, #14]
 801c69a:	6183      	str	r3, [r0, #24]
 801c69c:	4619      	mov	r1, r3
 801c69e:	2208      	movs	r2, #8
 801c6a0:	305c      	adds	r0, #92	; 0x5c
 801c6a2:	f7ff f855 	bl	801b750 <memset>
 801c6a6:	4b05      	ldr	r3, [pc, #20]	; (801c6bc <std+0x38>)
 801c6a8:	6263      	str	r3, [r4, #36]	; 0x24
 801c6aa:	4b05      	ldr	r3, [pc, #20]	; (801c6c0 <std+0x3c>)
 801c6ac:	62a3      	str	r3, [r4, #40]	; 0x28
 801c6ae:	4b05      	ldr	r3, [pc, #20]	; (801c6c4 <std+0x40>)
 801c6b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c6b2:	4b05      	ldr	r3, [pc, #20]	; (801c6c8 <std+0x44>)
 801c6b4:	6224      	str	r4, [r4, #32]
 801c6b6:	6323      	str	r3, [r4, #48]	; 0x30
 801c6b8:	bd10      	pop	{r4, pc}
 801c6ba:	bf00      	nop
 801c6bc:	0801ca79 	.word	0x0801ca79
 801c6c0:	0801ca9b 	.word	0x0801ca9b
 801c6c4:	0801cad3 	.word	0x0801cad3
 801c6c8:	0801caf7 	.word	0x0801caf7

0801c6cc <_cleanup_r>:
 801c6cc:	4901      	ldr	r1, [pc, #4]	; (801c6d4 <_cleanup_r+0x8>)
 801c6ce:	f000 b8af 	b.w	801c830 <_fwalk_reent>
 801c6d2:	bf00      	nop
 801c6d4:	0801c60d 	.word	0x0801c60d

0801c6d8 <__sfmoreglue>:
 801c6d8:	b570      	push	{r4, r5, r6, lr}
 801c6da:	2268      	movs	r2, #104	; 0x68
 801c6dc:	1e4d      	subs	r5, r1, #1
 801c6de:	4355      	muls	r5, r2
 801c6e0:	460e      	mov	r6, r1
 801c6e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c6e6:	f7ff f8a7 	bl	801b838 <_malloc_r>
 801c6ea:	4604      	mov	r4, r0
 801c6ec:	b140      	cbz	r0, 801c700 <__sfmoreglue+0x28>
 801c6ee:	2100      	movs	r1, #0
 801c6f0:	e9c0 1600 	strd	r1, r6, [r0]
 801c6f4:	300c      	adds	r0, #12
 801c6f6:	60a0      	str	r0, [r4, #8]
 801c6f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c6fc:	f7ff f828 	bl	801b750 <memset>
 801c700:	4620      	mov	r0, r4
 801c702:	bd70      	pop	{r4, r5, r6, pc}

0801c704 <__sfp_lock_acquire>:
 801c704:	4801      	ldr	r0, [pc, #4]	; (801c70c <__sfp_lock_acquire+0x8>)
 801c706:	f000 b8b3 	b.w	801c870 <__retarget_lock_acquire_recursive>
 801c70a:	bf00      	nop
 801c70c:	20005809 	.word	0x20005809

0801c710 <__sfp_lock_release>:
 801c710:	4801      	ldr	r0, [pc, #4]	; (801c718 <__sfp_lock_release+0x8>)
 801c712:	f000 b8ae 	b.w	801c872 <__retarget_lock_release_recursive>
 801c716:	bf00      	nop
 801c718:	20005809 	.word	0x20005809

0801c71c <__sinit_lock_acquire>:
 801c71c:	4801      	ldr	r0, [pc, #4]	; (801c724 <__sinit_lock_acquire+0x8>)
 801c71e:	f000 b8a7 	b.w	801c870 <__retarget_lock_acquire_recursive>
 801c722:	bf00      	nop
 801c724:	2000580a 	.word	0x2000580a

0801c728 <__sinit_lock_release>:
 801c728:	4801      	ldr	r0, [pc, #4]	; (801c730 <__sinit_lock_release+0x8>)
 801c72a:	f000 b8a2 	b.w	801c872 <__retarget_lock_release_recursive>
 801c72e:	bf00      	nop
 801c730:	2000580a 	.word	0x2000580a

0801c734 <__sinit>:
 801c734:	b510      	push	{r4, lr}
 801c736:	4604      	mov	r4, r0
 801c738:	f7ff fff0 	bl	801c71c <__sinit_lock_acquire>
 801c73c:	69a3      	ldr	r3, [r4, #24]
 801c73e:	b11b      	cbz	r3, 801c748 <__sinit+0x14>
 801c740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c744:	f7ff bff0 	b.w	801c728 <__sinit_lock_release>
 801c748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c74c:	6523      	str	r3, [r4, #80]	; 0x50
 801c74e:	4b13      	ldr	r3, [pc, #76]	; (801c79c <__sinit+0x68>)
 801c750:	4a13      	ldr	r2, [pc, #76]	; (801c7a0 <__sinit+0x6c>)
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	62a2      	str	r2, [r4, #40]	; 0x28
 801c756:	42a3      	cmp	r3, r4
 801c758:	bf04      	itt	eq
 801c75a:	2301      	moveq	r3, #1
 801c75c:	61a3      	streq	r3, [r4, #24]
 801c75e:	4620      	mov	r0, r4
 801c760:	f000 f820 	bl	801c7a4 <__sfp>
 801c764:	6060      	str	r0, [r4, #4]
 801c766:	4620      	mov	r0, r4
 801c768:	f000 f81c 	bl	801c7a4 <__sfp>
 801c76c:	60a0      	str	r0, [r4, #8]
 801c76e:	4620      	mov	r0, r4
 801c770:	f000 f818 	bl	801c7a4 <__sfp>
 801c774:	2200      	movs	r2, #0
 801c776:	60e0      	str	r0, [r4, #12]
 801c778:	2104      	movs	r1, #4
 801c77a:	6860      	ldr	r0, [r4, #4]
 801c77c:	f7ff ff82 	bl	801c684 <std>
 801c780:	68a0      	ldr	r0, [r4, #8]
 801c782:	2201      	movs	r2, #1
 801c784:	2109      	movs	r1, #9
 801c786:	f7ff ff7d 	bl	801c684 <std>
 801c78a:	68e0      	ldr	r0, [r4, #12]
 801c78c:	2202      	movs	r2, #2
 801c78e:	2112      	movs	r1, #18
 801c790:	f7ff ff78 	bl	801c684 <std>
 801c794:	2301      	movs	r3, #1
 801c796:	61a3      	str	r3, [r4, #24]
 801c798:	e7d2      	b.n	801c740 <__sinit+0xc>
 801c79a:	bf00      	nop
 801c79c:	0801dbd8 	.word	0x0801dbd8
 801c7a0:	0801c6cd 	.word	0x0801c6cd

0801c7a4 <__sfp>:
 801c7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7a6:	4607      	mov	r7, r0
 801c7a8:	f7ff ffac 	bl	801c704 <__sfp_lock_acquire>
 801c7ac:	4b1e      	ldr	r3, [pc, #120]	; (801c828 <__sfp+0x84>)
 801c7ae:	681e      	ldr	r6, [r3, #0]
 801c7b0:	69b3      	ldr	r3, [r6, #24]
 801c7b2:	b913      	cbnz	r3, 801c7ba <__sfp+0x16>
 801c7b4:	4630      	mov	r0, r6
 801c7b6:	f7ff ffbd 	bl	801c734 <__sinit>
 801c7ba:	3648      	adds	r6, #72	; 0x48
 801c7bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c7c0:	3b01      	subs	r3, #1
 801c7c2:	d503      	bpl.n	801c7cc <__sfp+0x28>
 801c7c4:	6833      	ldr	r3, [r6, #0]
 801c7c6:	b30b      	cbz	r3, 801c80c <__sfp+0x68>
 801c7c8:	6836      	ldr	r6, [r6, #0]
 801c7ca:	e7f7      	b.n	801c7bc <__sfp+0x18>
 801c7cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c7d0:	b9d5      	cbnz	r5, 801c808 <__sfp+0x64>
 801c7d2:	4b16      	ldr	r3, [pc, #88]	; (801c82c <__sfp+0x88>)
 801c7d4:	60e3      	str	r3, [r4, #12]
 801c7d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c7da:	6665      	str	r5, [r4, #100]	; 0x64
 801c7dc:	f000 f847 	bl	801c86e <__retarget_lock_init_recursive>
 801c7e0:	f7ff ff96 	bl	801c710 <__sfp_lock_release>
 801c7e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c7e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c7ec:	6025      	str	r5, [r4, #0]
 801c7ee:	61a5      	str	r5, [r4, #24]
 801c7f0:	2208      	movs	r2, #8
 801c7f2:	4629      	mov	r1, r5
 801c7f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c7f8:	f7fe ffaa 	bl	801b750 <memset>
 801c7fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c804:	4620      	mov	r0, r4
 801c806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c808:	3468      	adds	r4, #104	; 0x68
 801c80a:	e7d9      	b.n	801c7c0 <__sfp+0x1c>
 801c80c:	2104      	movs	r1, #4
 801c80e:	4638      	mov	r0, r7
 801c810:	f7ff ff62 	bl	801c6d8 <__sfmoreglue>
 801c814:	4604      	mov	r4, r0
 801c816:	6030      	str	r0, [r6, #0]
 801c818:	2800      	cmp	r0, #0
 801c81a:	d1d5      	bne.n	801c7c8 <__sfp+0x24>
 801c81c:	f7ff ff78 	bl	801c710 <__sfp_lock_release>
 801c820:	230c      	movs	r3, #12
 801c822:	603b      	str	r3, [r7, #0]
 801c824:	e7ee      	b.n	801c804 <__sfp+0x60>
 801c826:	bf00      	nop
 801c828:	0801dbd8 	.word	0x0801dbd8
 801c82c:	ffff0001 	.word	0xffff0001

0801c830 <_fwalk_reent>:
 801c830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c834:	4606      	mov	r6, r0
 801c836:	4688      	mov	r8, r1
 801c838:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c83c:	2700      	movs	r7, #0
 801c83e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c842:	f1b9 0901 	subs.w	r9, r9, #1
 801c846:	d505      	bpl.n	801c854 <_fwalk_reent+0x24>
 801c848:	6824      	ldr	r4, [r4, #0]
 801c84a:	2c00      	cmp	r4, #0
 801c84c:	d1f7      	bne.n	801c83e <_fwalk_reent+0xe>
 801c84e:	4638      	mov	r0, r7
 801c850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c854:	89ab      	ldrh	r3, [r5, #12]
 801c856:	2b01      	cmp	r3, #1
 801c858:	d907      	bls.n	801c86a <_fwalk_reent+0x3a>
 801c85a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c85e:	3301      	adds	r3, #1
 801c860:	d003      	beq.n	801c86a <_fwalk_reent+0x3a>
 801c862:	4629      	mov	r1, r5
 801c864:	4630      	mov	r0, r6
 801c866:	47c0      	blx	r8
 801c868:	4307      	orrs	r7, r0
 801c86a:	3568      	adds	r5, #104	; 0x68
 801c86c:	e7e9      	b.n	801c842 <_fwalk_reent+0x12>

0801c86e <__retarget_lock_init_recursive>:
 801c86e:	4770      	bx	lr

0801c870 <__retarget_lock_acquire_recursive>:
 801c870:	4770      	bx	lr

0801c872 <__retarget_lock_release_recursive>:
 801c872:	4770      	bx	lr

0801c874 <__swhatbuf_r>:
 801c874:	b570      	push	{r4, r5, r6, lr}
 801c876:	460e      	mov	r6, r1
 801c878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c87c:	2900      	cmp	r1, #0
 801c87e:	b096      	sub	sp, #88	; 0x58
 801c880:	4614      	mov	r4, r2
 801c882:	461d      	mov	r5, r3
 801c884:	da08      	bge.n	801c898 <__swhatbuf_r+0x24>
 801c886:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c88a:	2200      	movs	r2, #0
 801c88c:	602a      	str	r2, [r5, #0]
 801c88e:	061a      	lsls	r2, r3, #24
 801c890:	d410      	bmi.n	801c8b4 <__swhatbuf_r+0x40>
 801c892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c896:	e00e      	b.n	801c8b6 <__swhatbuf_r+0x42>
 801c898:	466a      	mov	r2, sp
 801c89a:	f000 f953 	bl	801cb44 <_fstat_r>
 801c89e:	2800      	cmp	r0, #0
 801c8a0:	dbf1      	blt.n	801c886 <__swhatbuf_r+0x12>
 801c8a2:	9a01      	ldr	r2, [sp, #4]
 801c8a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c8a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c8ac:	425a      	negs	r2, r3
 801c8ae:	415a      	adcs	r2, r3
 801c8b0:	602a      	str	r2, [r5, #0]
 801c8b2:	e7ee      	b.n	801c892 <__swhatbuf_r+0x1e>
 801c8b4:	2340      	movs	r3, #64	; 0x40
 801c8b6:	2000      	movs	r0, #0
 801c8b8:	6023      	str	r3, [r4, #0]
 801c8ba:	b016      	add	sp, #88	; 0x58
 801c8bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c8c0 <__smakebuf_r>:
 801c8c0:	898b      	ldrh	r3, [r1, #12]
 801c8c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c8c4:	079d      	lsls	r5, r3, #30
 801c8c6:	4606      	mov	r6, r0
 801c8c8:	460c      	mov	r4, r1
 801c8ca:	d507      	bpl.n	801c8dc <__smakebuf_r+0x1c>
 801c8cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c8d0:	6023      	str	r3, [r4, #0]
 801c8d2:	6123      	str	r3, [r4, #16]
 801c8d4:	2301      	movs	r3, #1
 801c8d6:	6163      	str	r3, [r4, #20]
 801c8d8:	b002      	add	sp, #8
 801c8da:	bd70      	pop	{r4, r5, r6, pc}
 801c8dc:	ab01      	add	r3, sp, #4
 801c8de:	466a      	mov	r2, sp
 801c8e0:	f7ff ffc8 	bl	801c874 <__swhatbuf_r>
 801c8e4:	9900      	ldr	r1, [sp, #0]
 801c8e6:	4605      	mov	r5, r0
 801c8e8:	4630      	mov	r0, r6
 801c8ea:	f7fe ffa5 	bl	801b838 <_malloc_r>
 801c8ee:	b948      	cbnz	r0, 801c904 <__smakebuf_r+0x44>
 801c8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8f4:	059a      	lsls	r2, r3, #22
 801c8f6:	d4ef      	bmi.n	801c8d8 <__smakebuf_r+0x18>
 801c8f8:	f023 0303 	bic.w	r3, r3, #3
 801c8fc:	f043 0302 	orr.w	r3, r3, #2
 801c900:	81a3      	strh	r3, [r4, #12]
 801c902:	e7e3      	b.n	801c8cc <__smakebuf_r+0xc>
 801c904:	4b0d      	ldr	r3, [pc, #52]	; (801c93c <__smakebuf_r+0x7c>)
 801c906:	62b3      	str	r3, [r6, #40]	; 0x28
 801c908:	89a3      	ldrh	r3, [r4, #12]
 801c90a:	6020      	str	r0, [r4, #0]
 801c90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c910:	81a3      	strh	r3, [r4, #12]
 801c912:	9b00      	ldr	r3, [sp, #0]
 801c914:	6163      	str	r3, [r4, #20]
 801c916:	9b01      	ldr	r3, [sp, #4]
 801c918:	6120      	str	r0, [r4, #16]
 801c91a:	b15b      	cbz	r3, 801c934 <__smakebuf_r+0x74>
 801c91c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c920:	4630      	mov	r0, r6
 801c922:	f000 f921 	bl	801cb68 <_isatty_r>
 801c926:	b128      	cbz	r0, 801c934 <__smakebuf_r+0x74>
 801c928:	89a3      	ldrh	r3, [r4, #12]
 801c92a:	f023 0303 	bic.w	r3, r3, #3
 801c92e:	f043 0301 	orr.w	r3, r3, #1
 801c932:	81a3      	strh	r3, [r4, #12]
 801c934:	89a0      	ldrh	r0, [r4, #12]
 801c936:	4305      	orrs	r5, r0
 801c938:	81a5      	strh	r5, [r4, #12]
 801c93a:	e7cd      	b.n	801c8d8 <__smakebuf_r+0x18>
 801c93c:	0801c6cd 	.word	0x0801c6cd

0801c940 <memcpy>:
 801c940:	440a      	add	r2, r1
 801c942:	4291      	cmp	r1, r2
 801c944:	f100 33ff 	add.w	r3, r0, #4294967295
 801c948:	d100      	bne.n	801c94c <memcpy+0xc>
 801c94a:	4770      	bx	lr
 801c94c:	b510      	push	{r4, lr}
 801c94e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c952:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c956:	4291      	cmp	r1, r2
 801c958:	d1f9      	bne.n	801c94e <memcpy+0xe>
 801c95a:	bd10      	pop	{r4, pc}

0801c95c <memmove>:
 801c95c:	4288      	cmp	r0, r1
 801c95e:	b510      	push	{r4, lr}
 801c960:	eb01 0402 	add.w	r4, r1, r2
 801c964:	d902      	bls.n	801c96c <memmove+0x10>
 801c966:	4284      	cmp	r4, r0
 801c968:	4623      	mov	r3, r4
 801c96a:	d807      	bhi.n	801c97c <memmove+0x20>
 801c96c:	1e43      	subs	r3, r0, #1
 801c96e:	42a1      	cmp	r1, r4
 801c970:	d008      	beq.n	801c984 <memmove+0x28>
 801c972:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c976:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c97a:	e7f8      	b.n	801c96e <memmove+0x12>
 801c97c:	4402      	add	r2, r0
 801c97e:	4601      	mov	r1, r0
 801c980:	428a      	cmp	r2, r1
 801c982:	d100      	bne.n	801c986 <memmove+0x2a>
 801c984:	bd10      	pop	{r4, pc}
 801c986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c98a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c98e:	e7f7      	b.n	801c980 <memmove+0x24>

0801c990 <_realloc_r>:
 801c990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c994:	4680      	mov	r8, r0
 801c996:	4614      	mov	r4, r2
 801c998:	460e      	mov	r6, r1
 801c99a:	b921      	cbnz	r1, 801c9a6 <_realloc_r+0x16>
 801c99c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c9a0:	4611      	mov	r1, r2
 801c9a2:	f7fe bf49 	b.w	801b838 <_malloc_r>
 801c9a6:	b92a      	cbnz	r2, 801c9b4 <_realloc_r+0x24>
 801c9a8:	f7fe feda 	bl	801b760 <_free_r>
 801c9ac:	4625      	mov	r5, r4
 801c9ae:	4628      	mov	r0, r5
 801c9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9b4:	f000 f8fa 	bl	801cbac <_malloc_usable_size_r>
 801c9b8:	4284      	cmp	r4, r0
 801c9ba:	4607      	mov	r7, r0
 801c9bc:	d802      	bhi.n	801c9c4 <_realloc_r+0x34>
 801c9be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c9c2:	d812      	bhi.n	801c9ea <_realloc_r+0x5a>
 801c9c4:	4621      	mov	r1, r4
 801c9c6:	4640      	mov	r0, r8
 801c9c8:	f7fe ff36 	bl	801b838 <_malloc_r>
 801c9cc:	4605      	mov	r5, r0
 801c9ce:	2800      	cmp	r0, #0
 801c9d0:	d0ed      	beq.n	801c9ae <_realloc_r+0x1e>
 801c9d2:	42bc      	cmp	r4, r7
 801c9d4:	4622      	mov	r2, r4
 801c9d6:	4631      	mov	r1, r6
 801c9d8:	bf28      	it	cs
 801c9da:	463a      	movcs	r2, r7
 801c9dc:	f7ff ffb0 	bl	801c940 <memcpy>
 801c9e0:	4631      	mov	r1, r6
 801c9e2:	4640      	mov	r0, r8
 801c9e4:	f7fe febc 	bl	801b760 <_free_r>
 801c9e8:	e7e1      	b.n	801c9ae <_realloc_r+0x1e>
 801c9ea:	4635      	mov	r5, r6
 801c9ec:	e7df      	b.n	801c9ae <_realloc_r+0x1e>

0801c9ee <_raise_r>:
 801c9ee:	291f      	cmp	r1, #31
 801c9f0:	b538      	push	{r3, r4, r5, lr}
 801c9f2:	4604      	mov	r4, r0
 801c9f4:	460d      	mov	r5, r1
 801c9f6:	d904      	bls.n	801ca02 <_raise_r+0x14>
 801c9f8:	2316      	movs	r3, #22
 801c9fa:	6003      	str	r3, [r0, #0]
 801c9fc:	f04f 30ff 	mov.w	r0, #4294967295
 801ca00:	bd38      	pop	{r3, r4, r5, pc}
 801ca02:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ca04:	b112      	cbz	r2, 801ca0c <_raise_r+0x1e>
 801ca06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ca0a:	b94b      	cbnz	r3, 801ca20 <_raise_r+0x32>
 801ca0c:	4620      	mov	r0, r4
 801ca0e:	f000 f831 	bl	801ca74 <_getpid_r>
 801ca12:	462a      	mov	r2, r5
 801ca14:	4601      	mov	r1, r0
 801ca16:	4620      	mov	r0, r4
 801ca18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ca1c:	f000 b818 	b.w	801ca50 <_kill_r>
 801ca20:	2b01      	cmp	r3, #1
 801ca22:	d00a      	beq.n	801ca3a <_raise_r+0x4c>
 801ca24:	1c59      	adds	r1, r3, #1
 801ca26:	d103      	bne.n	801ca30 <_raise_r+0x42>
 801ca28:	2316      	movs	r3, #22
 801ca2a:	6003      	str	r3, [r0, #0]
 801ca2c:	2001      	movs	r0, #1
 801ca2e:	e7e7      	b.n	801ca00 <_raise_r+0x12>
 801ca30:	2400      	movs	r4, #0
 801ca32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ca36:	4628      	mov	r0, r5
 801ca38:	4798      	blx	r3
 801ca3a:	2000      	movs	r0, #0
 801ca3c:	e7e0      	b.n	801ca00 <_raise_r+0x12>
	...

0801ca40 <raise>:
 801ca40:	4b02      	ldr	r3, [pc, #8]	; (801ca4c <raise+0xc>)
 801ca42:	4601      	mov	r1, r0
 801ca44:	6818      	ldr	r0, [r3, #0]
 801ca46:	f7ff bfd2 	b.w	801c9ee <_raise_r>
 801ca4a:	bf00      	nop
 801ca4c:	20000814 	.word	0x20000814

0801ca50 <_kill_r>:
 801ca50:	b538      	push	{r3, r4, r5, lr}
 801ca52:	4d07      	ldr	r5, [pc, #28]	; (801ca70 <_kill_r+0x20>)
 801ca54:	2300      	movs	r3, #0
 801ca56:	4604      	mov	r4, r0
 801ca58:	4608      	mov	r0, r1
 801ca5a:	4611      	mov	r1, r2
 801ca5c:	602b      	str	r3, [r5, #0]
 801ca5e:	f7e6 f801 	bl	8002a64 <_kill>
 801ca62:	1c43      	adds	r3, r0, #1
 801ca64:	d102      	bne.n	801ca6c <_kill_r+0x1c>
 801ca66:	682b      	ldr	r3, [r5, #0]
 801ca68:	b103      	cbz	r3, 801ca6c <_kill_r+0x1c>
 801ca6a:	6023      	str	r3, [r4, #0]
 801ca6c:	bd38      	pop	{r3, r4, r5, pc}
 801ca6e:	bf00      	nop
 801ca70:	20005804 	.word	0x20005804

0801ca74 <_getpid_r>:
 801ca74:	f7e5 bfee 	b.w	8002a54 <_getpid>

0801ca78 <__sread>:
 801ca78:	b510      	push	{r4, lr}
 801ca7a:	460c      	mov	r4, r1
 801ca7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca80:	f000 f89c 	bl	801cbbc <_read_r>
 801ca84:	2800      	cmp	r0, #0
 801ca86:	bfab      	itete	ge
 801ca88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ca8a:	89a3      	ldrhlt	r3, [r4, #12]
 801ca8c:	181b      	addge	r3, r3, r0
 801ca8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ca92:	bfac      	ite	ge
 801ca94:	6563      	strge	r3, [r4, #84]	; 0x54
 801ca96:	81a3      	strhlt	r3, [r4, #12]
 801ca98:	bd10      	pop	{r4, pc}

0801ca9a <__swrite>:
 801ca9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca9e:	461f      	mov	r7, r3
 801caa0:	898b      	ldrh	r3, [r1, #12]
 801caa2:	05db      	lsls	r3, r3, #23
 801caa4:	4605      	mov	r5, r0
 801caa6:	460c      	mov	r4, r1
 801caa8:	4616      	mov	r6, r2
 801caaa:	d505      	bpl.n	801cab8 <__swrite+0x1e>
 801caac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cab0:	2302      	movs	r3, #2
 801cab2:	2200      	movs	r2, #0
 801cab4:	f000 f868 	bl	801cb88 <_lseek_r>
 801cab8:	89a3      	ldrh	r3, [r4, #12]
 801caba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cabe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cac2:	81a3      	strh	r3, [r4, #12]
 801cac4:	4632      	mov	r2, r6
 801cac6:	463b      	mov	r3, r7
 801cac8:	4628      	mov	r0, r5
 801caca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cace:	f000 b817 	b.w	801cb00 <_write_r>

0801cad2 <__sseek>:
 801cad2:	b510      	push	{r4, lr}
 801cad4:	460c      	mov	r4, r1
 801cad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cada:	f000 f855 	bl	801cb88 <_lseek_r>
 801cade:	1c43      	adds	r3, r0, #1
 801cae0:	89a3      	ldrh	r3, [r4, #12]
 801cae2:	bf15      	itete	ne
 801cae4:	6560      	strne	r0, [r4, #84]	; 0x54
 801cae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801caea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801caee:	81a3      	strheq	r3, [r4, #12]
 801caf0:	bf18      	it	ne
 801caf2:	81a3      	strhne	r3, [r4, #12]
 801caf4:	bd10      	pop	{r4, pc}

0801caf6 <__sclose>:
 801caf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cafa:	f000 b813 	b.w	801cb24 <_close_r>
	...

0801cb00 <_write_r>:
 801cb00:	b538      	push	{r3, r4, r5, lr}
 801cb02:	4d07      	ldr	r5, [pc, #28]	; (801cb20 <_write_r+0x20>)
 801cb04:	4604      	mov	r4, r0
 801cb06:	4608      	mov	r0, r1
 801cb08:	4611      	mov	r1, r2
 801cb0a:	2200      	movs	r2, #0
 801cb0c:	602a      	str	r2, [r5, #0]
 801cb0e:	461a      	mov	r2, r3
 801cb10:	f7e5 ffdf 	bl	8002ad2 <_write>
 801cb14:	1c43      	adds	r3, r0, #1
 801cb16:	d102      	bne.n	801cb1e <_write_r+0x1e>
 801cb18:	682b      	ldr	r3, [r5, #0]
 801cb1a:	b103      	cbz	r3, 801cb1e <_write_r+0x1e>
 801cb1c:	6023      	str	r3, [r4, #0]
 801cb1e:	bd38      	pop	{r3, r4, r5, pc}
 801cb20:	20005804 	.word	0x20005804

0801cb24 <_close_r>:
 801cb24:	b538      	push	{r3, r4, r5, lr}
 801cb26:	4d06      	ldr	r5, [pc, #24]	; (801cb40 <_close_r+0x1c>)
 801cb28:	2300      	movs	r3, #0
 801cb2a:	4604      	mov	r4, r0
 801cb2c:	4608      	mov	r0, r1
 801cb2e:	602b      	str	r3, [r5, #0]
 801cb30:	f7e5 ffeb 	bl	8002b0a <_close>
 801cb34:	1c43      	adds	r3, r0, #1
 801cb36:	d102      	bne.n	801cb3e <_close_r+0x1a>
 801cb38:	682b      	ldr	r3, [r5, #0]
 801cb3a:	b103      	cbz	r3, 801cb3e <_close_r+0x1a>
 801cb3c:	6023      	str	r3, [r4, #0]
 801cb3e:	bd38      	pop	{r3, r4, r5, pc}
 801cb40:	20005804 	.word	0x20005804

0801cb44 <_fstat_r>:
 801cb44:	b538      	push	{r3, r4, r5, lr}
 801cb46:	4d07      	ldr	r5, [pc, #28]	; (801cb64 <_fstat_r+0x20>)
 801cb48:	2300      	movs	r3, #0
 801cb4a:	4604      	mov	r4, r0
 801cb4c:	4608      	mov	r0, r1
 801cb4e:	4611      	mov	r1, r2
 801cb50:	602b      	str	r3, [r5, #0]
 801cb52:	f7e5 ffe6 	bl	8002b22 <_fstat>
 801cb56:	1c43      	adds	r3, r0, #1
 801cb58:	d102      	bne.n	801cb60 <_fstat_r+0x1c>
 801cb5a:	682b      	ldr	r3, [r5, #0]
 801cb5c:	b103      	cbz	r3, 801cb60 <_fstat_r+0x1c>
 801cb5e:	6023      	str	r3, [r4, #0]
 801cb60:	bd38      	pop	{r3, r4, r5, pc}
 801cb62:	bf00      	nop
 801cb64:	20005804 	.word	0x20005804

0801cb68 <_isatty_r>:
 801cb68:	b538      	push	{r3, r4, r5, lr}
 801cb6a:	4d06      	ldr	r5, [pc, #24]	; (801cb84 <_isatty_r+0x1c>)
 801cb6c:	2300      	movs	r3, #0
 801cb6e:	4604      	mov	r4, r0
 801cb70:	4608      	mov	r0, r1
 801cb72:	602b      	str	r3, [r5, #0]
 801cb74:	f7e5 ffe5 	bl	8002b42 <_isatty>
 801cb78:	1c43      	adds	r3, r0, #1
 801cb7a:	d102      	bne.n	801cb82 <_isatty_r+0x1a>
 801cb7c:	682b      	ldr	r3, [r5, #0]
 801cb7e:	b103      	cbz	r3, 801cb82 <_isatty_r+0x1a>
 801cb80:	6023      	str	r3, [r4, #0]
 801cb82:	bd38      	pop	{r3, r4, r5, pc}
 801cb84:	20005804 	.word	0x20005804

0801cb88 <_lseek_r>:
 801cb88:	b538      	push	{r3, r4, r5, lr}
 801cb8a:	4d07      	ldr	r5, [pc, #28]	; (801cba8 <_lseek_r+0x20>)
 801cb8c:	4604      	mov	r4, r0
 801cb8e:	4608      	mov	r0, r1
 801cb90:	4611      	mov	r1, r2
 801cb92:	2200      	movs	r2, #0
 801cb94:	602a      	str	r2, [r5, #0]
 801cb96:	461a      	mov	r2, r3
 801cb98:	f7e5 ffde 	bl	8002b58 <_lseek>
 801cb9c:	1c43      	adds	r3, r0, #1
 801cb9e:	d102      	bne.n	801cba6 <_lseek_r+0x1e>
 801cba0:	682b      	ldr	r3, [r5, #0]
 801cba2:	b103      	cbz	r3, 801cba6 <_lseek_r+0x1e>
 801cba4:	6023      	str	r3, [r4, #0]
 801cba6:	bd38      	pop	{r3, r4, r5, pc}
 801cba8:	20005804 	.word	0x20005804

0801cbac <_malloc_usable_size_r>:
 801cbac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cbb0:	1f18      	subs	r0, r3, #4
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	bfbc      	itt	lt
 801cbb6:	580b      	ldrlt	r3, [r1, r0]
 801cbb8:	18c0      	addlt	r0, r0, r3
 801cbba:	4770      	bx	lr

0801cbbc <_read_r>:
 801cbbc:	b538      	push	{r3, r4, r5, lr}
 801cbbe:	4d07      	ldr	r5, [pc, #28]	; (801cbdc <_read_r+0x20>)
 801cbc0:	4604      	mov	r4, r0
 801cbc2:	4608      	mov	r0, r1
 801cbc4:	4611      	mov	r1, r2
 801cbc6:	2200      	movs	r2, #0
 801cbc8:	602a      	str	r2, [r5, #0]
 801cbca:	461a      	mov	r2, r3
 801cbcc:	f7e5 ff64 	bl	8002a98 <_read>
 801cbd0:	1c43      	adds	r3, r0, #1
 801cbd2:	d102      	bne.n	801cbda <_read_r+0x1e>
 801cbd4:	682b      	ldr	r3, [r5, #0]
 801cbd6:	b103      	cbz	r3, 801cbda <_read_r+0x1e>
 801cbd8:	6023      	str	r3, [r4, #0]
 801cbda:	bd38      	pop	{r3, r4, r5, pc}
 801cbdc:	20005804 	.word	0x20005804

0801cbe0 <_init>:
 801cbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbe2:	bf00      	nop
 801cbe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbe6:	bc08      	pop	{r3}
 801cbe8:	469e      	mov	lr, r3
 801cbea:	4770      	bx	lr

0801cbec <_fini>:
 801cbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbee:	bf00      	nop
 801cbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbf2:	bc08      	pop	{r3}
 801cbf4:	469e      	mov	lr, r3
 801cbf6:	4770      	bx	lr
